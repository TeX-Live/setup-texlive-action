await import('node:module').then(({ createRequire }) => {
  Object.defineProperty(globalThis, 'require', {
    value: createRequire(import.meta.url),
    configurable: false,
    enumerable: false,
    writable: false,
  });
});
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __knownSymbol = (name2, symbol) => (symbol = Symbol[name2]) ? symbol : Symbol.for("Symbol." + name2);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x3) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x3, {
  get: (a3, b3) => (typeof require !== "undefined" ? require : a3)[b3]
}) : x3)(function(x3) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x3 + '" is not supported');
});
var __esm = (fn2, res) => function __init() {
  return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to2, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __decorateClass = (decorators2, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i3 = decorators2.length - 1, decorator; i3 >= 0; i3--)
    if (decorator = decorators2[i3])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var __using = (stack, value, async) => {
  if (value != null) {
    if (typeof value !== "object" && typeof value !== "function") __typeError("Object expected");
    var dispose, inner;
    if (async) dispose = value[__knownSymbol("asyncDispose")];
    if (dispose === void 0) {
      dispose = value[__knownSymbol("dispose")];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") __typeError("Object not disposable");
    if (inner) dispose = function() {
      try {
        inner.call(this);
      } catch (e3) {
        return Promise.reject(e3);
      }
    };
    stack.push([async, dispose, value]);
  } else if (async) {
    stack.push([async]);
  }
  return value;
};
var __callDispose = (stack, error, hasError) => {
  var E3 = typeof SuppressedError === "function" ? SuppressedError : function(e3, s3, m3, _3) {
    return _3 = Error(m3), _3.name = "SuppressedError", _3.error = e3, _3.suppressed = s3, _3;
  };
  var fail = (e3) => error = hasError ? new E3(e3, error, "An error was suppressed during disposal") : (hasError = true, e3);
  var next2 = (it2) => {
    while (it2 = stack.pop()) {
      try {
        var result = it2[1] && it2[1].call(it2[2]);
        if (it2[0]) return Promise.resolve(result).then(next2, (e3) => (fail(e3), next2()));
      } catch (e3) {
        fail(e3);
      }
    }
    if (hasError) throw error;
  };
  return next2();
};

// node_modules/@actions/core/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@actions/core/lib/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toCommandProperties = exports2.toCommandValue = void 0;
    function toCommandValue(input) {
      if (input === null || input === void 0) {
        return "";
      } else if (typeof input === "string" || input instanceof String) {
        return input;
      }
      return JSON.stringify(input);
    }
    __name(toCommandValue, "toCommandValue");
    exports2.toCommandValue = toCommandValue;
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {};
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
      };
    }
    __name(toCommandProperties, "toCommandProperties");
    exports2.toCommandProperties = toCommandProperties;
  }
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS({
  "node_modules/@actions/core/lib/command.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.issue = exports2.issueCommand = void 0;
    var os5 = __importStar(__require("os"));
    var utils_1 = require_utils();
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message);
      process.stdout.write(cmd.toString() + os5.EOL);
    }
    __name(issueCommand, "issueCommand");
    exports2.issueCommand = issueCommand;
    function issue(name2, message = "") {
      issueCommand(name2, {}, message);
    }
    __name(issue, "issue");
    exports2.issue = issue;
    var CMD_STRING = "::";
    var Command = class {
      static {
        __name(this, "Command");
      }
      constructor(command, properties, message) {
        if (!command) {
          command = "missing.command";
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
      }
      toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += " ";
          let first = true;
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key];
              if (val) {
                if (first) {
                  first = false;
                } else {
                  cmdStr += ",";
                }
                cmdStr += `${key}=${escapeProperty(val)}`;
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
      }
    };
    function escapeData(s3) {
      return (0, utils_1.toCommandValue)(s3).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
    }
    __name(escapeData, "escapeData");
    function escapeProperty(s3) {
      return (0, utils_1.toCommandValue)(s3).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
    }
    __name(escapeProperty, "escapeProperty");
  }
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({
  "node_modules/@actions/core/lib/file-command.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareKeyValueMessage = exports2.issueFileCommand = void 0;
    var crypto = __importStar(__require("crypto"));
    var fs4 = __importStar(__require("fs"));
    var os5 = __importStar(__require("os"));
    var utils_1 = require_utils();
    function issueFileCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`];
      if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
      }
      if (!fs4.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
      }
      fs4.appendFileSync(filePath, `${(0, utils_1.toCommandValue)(message)}${os5.EOL}`, {
        encoding: "utf8"
      });
    }
    __name(issueFileCommand, "issueFileCommand");
    exports2.issueFileCommand = issueFileCommand;
    function prepareKeyValueMessage(key, value) {
      const delimiter2 = `ghadelimiter_${crypto.randomUUID()}`;
      const convertedValue = (0, utils_1.toCommandValue)(value);
      if (key.includes(delimiter2)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter2}"`);
      }
      if (convertedValue.includes(delimiter2)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter2}"`);
      }
      return `${key}<<${delimiter2}${os5.EOL}${convertedValue}${os5.EOL}${delimiter2}`;
    }
    __name(prepareKeyValueMessage, "prepareKeyValueMessage");
    exports2.prepareKeyValueMessage = prepareKeyValueMessage;
  }
});

// node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({
  "node_modules/@actions/http-client/lib/proxy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkBypass = exports2.getProxyUrl = void 0;
    function getProxyUrl2(reqUrl) {
      const usingSsl = reqUrl.protocol === "https:";
      if (checkBypass(reqUrl)) {
        return void 0;
      }
      const proxyVar = (() => {
        if (usingSsl) {
          return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
        } else {
          return process.env["http_proxy"] || process.env["HTTP_PROXY"];
        }
      })();
      if (proxyVar) {
        try {
          return new DecodedURL(proxyVar);
        } catch (_a4) {
          if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://"))
            return new DecodedURL(`http://${proxyVar}`);
        }
      } else {
        return void 0;
      }
    }
    __name(getProxyUrl2, "getProxyUrl");
    exports2.getProxyUrl = getProxyUrl2;
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false;
      }
      const reqHost = reqUrl.hostname;
      if (isLoopbackAddress(reqHost)) {
        return true;
      }
      const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
      if (!noProxy) {
        return false;
      }
      let reqPort;
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
      } else if (reqUrl.protocol === "http:") {
        reqPort = 80;
      } else if (reqUrl.protocol === "https:") {
        reqPort = 443;
      }
      const upperReqHosts = [reqUrl.hostname.toUpperCase()];
      if (typeof reqPort === "number") {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
      }
      for (const upperNoProxyItem of noProxy.split(",").map((x3) => x3.trim().toUpperCase()).filter((x3) => x3)) {
        if (upperNoProxyItem === "*" || upperReqHosts.some((x3) => x3 === upperNoProxyItem || x3.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x3.endsWith(`${upperNoProxyItem}`))) {
          return true;
        }
      }
      return false;
    }
    __name(checkBypass, "checkBypass");
    exports2.checkBypass = checkBypass;
    function isLoopbackAddress(host) {
      const hostLower = host.toLowerCase();
      return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
    }
    __name(isLoopbackAddress, "isLoopbackAddress");
    var DecodedURL = class extends URL {
      static {
        __name(this, "DecodedURL");
      }
      constructor(url2, base) {
        super(url2, base);
        this._decodedUsername = decodeURIComponent(super.username);
        this._decodedPassword = decodeURIComponent(super.password);
      }
      get username() {
        return this._decodedUsername;
      }
      get password() {
        return this._decodedPassword;
      }
    };
  }
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS({
  "node_modules/tunnel/lib/tunnel.js"(exports2) {
    "use strict";
    var net = __require("net");
    var tls = __require("tls");
    var http2 = __require("http");
    var https2 = __require("https");
    var events = __require("events");
    var assert2 = __require("assert");
    var util3 = __require("util");
    exports2.httpOverHttp = httpOverHttp;
    exports2.httpsOverHttp = httpsOverHttp;
    exports2.httpOverHttps = httpOverHttps;
    exports2.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http2.request;
      return agent;
    }
    __name(httpOverHttp, "httpOverHttp");
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http2.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    __name(httpsOverHttp, "httpsOverHttp");
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https2.request;
      return agent;
    }
    __name(httpOverHttps, "httpOverHttps");
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https2.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    __name(httpsOverHttps, "httpsOverHttps");
    function TunnelingAgent(options) {
      var self2 = this;
      self2.options = options || {};
      self2.proxyOptions = self2.options.proxy || {};
      self2.maxSockets = self2.options.maxSockets || http2.Agent.defaultMaxSockets;
      self2.requests = [];
      self2.sockets = [];
      self2.on("free", /* @__PURE__ */ __name(function onFree(socket, host, port, localAddress) {
        var options2 = toOptions(host, port, localAddress);
        for (var i3 = 0, len = self2.requests.length; i3 < len; ++i3) {
          var pending = self2.requests[i3];
          if (pending.host === options2.host && pending.port === options2.port) {
            self2.requests.splice(i3, 1);
            pending.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self2.removeSocket(socket);
      }, "onFree"));
    }
    __name(TunnelingAgent, "TunnelingAgent");
    util3.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = /* @__PURE__ */ __name(function addRequest(req, host, port, localAddress) {
      var self2 = this;
      var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
      if (self2.sockets.length >= this.maxSockets) {
        self2.requests.push(options);
        return;
      }
      self2.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
          self2.emit("free", socket, options);
        }
        __name(onFree, "onFree");
        function onCloseOrRemove(err) {
          self2.removeSocket(socket);
          socket.removeListener("free", onFree);
          socket.removeListener("close", onCloseOrRemove);
          socket.removeListener("agentRemove", onCloseOrRemove);
        }
        __name(onCloseOrRemove, "onCloseOrRemove");
      });
    }, "addRequest");
    TunnelingAgent.prototype.createSocket = /* @__PURE__ */ __name(function createSocket(options, cb) {
      var self2 = this;
      var placeholder = {};
      self2.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self2.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
          host: options.host + ":" + options.port
        }
      });
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress;
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
      }
      debug3("making CONNECT request");
      var connectReq = self2.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false;
      connectReq.once("response", onResponse);
      connectReq.once("upgrade", onUpgrade);
      connectReq.once("connect", onConnect);
      connectReq.once("error", onError);
      connectReq.end();
      function onResponse(res) {
        res.upgrade = true;
      }
      __name(onResponse, "onResponse");
      function onUpgrade(res, socket, head) {
        process.nextTick(function() {
          onConnect(res, socket, head);
        });
      }
      __name(onUpgrade, "onUpgrade");
      function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
          debug3(
            "tunneling socket could not be established, statusCode=%d",
            res.statusCode
          );
          socket.destroy();
          var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        if (head.length > 0) {
          debug3("got illegal response body from proxy");
          socket.destroy();
          var error = new Error("got illegal response body from proxy");
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        debug3("tunneling connection has established");
        self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
      }
      __name(onConnect, "onConnect");
      function onError(cause) {
        connectReq.removeAllListeners();
        debug3(
          "tunneling socket could not be established, cause=%s\n",
          cause.message,
          cause.stack
        );
        var error = new Error("tunneling socket could not be established, cause=" + cause.message);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self2.removeSocket(placeholder);
      }
      __name(onError, "onError");
    }, "createSocket");
    TunnelingAgent.prototype.removeSocket = /* @__PURE__ */ __name(function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) {
        return;
      }
      this.sockets.splice(pos, 1);
      var pending = this.requests.shift();
      if (pending) {
        this.createSocket(pending, function(socket2) {
          pending.request.onSocket(socket2);
        });
      }
    }, "removeSocket");
    function createSecureSocket(options, cb) {
      var self2 = this;
      TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = mergeOptions({}, self2.options, {
          socket,
          servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        var secureSocket = tls.connect(0, tlsOptions);
        self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    __name(createSecureSocket, "createSecureSocket");
    function toOptions(host, port, localAddress) {
      if (typeof host === "string") {
        return {
          host,
          port,
          localAddress
        };
      }
      return host;
    }
    __name(toOptions, "toOptions");
    function mergeOptions(target) {
      for (var i3 = 1, len = arguments.length; i3 < len; ++i3) {
        var overrides = arguments[i3];
        if (typeof overrides === "object") {
          var keys = Object.keys(overrides);
          for (var j3 = 0, keyLen = keys.length; j3 < keyLen; ++j3) {
            var k3 = keys[j3];
            if (overrides[k3] !== void 0) {
              target[k3] = overrides[k3];
            }
          }
        }
      }
      return target;
    }
    __name(mergeOptions, "mergeOptions");
    var debug3;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug3 = /* @__PURE__ */ __name(function() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === "string") {
          args[0] = "TUNNEL: " + args[0];
        } else {
          args.unshift("TUNNEL:");
        }
        console.error.apply(console, args);
      }, "debug");
    } else {
      debug3 = /* @__PURE__ */ __name(function() {
      }, "debug");
    }
    exports2.debug = debug3;
  }
});

// node_modules/tunnel/index.js
var require_tunnel2 = __commonJS({
  "node_modules/tunnel/index.js"(exports2, module) {
    "use strict";
    module.exports = require_tunnel();
  }
});

// node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS({
  "node_modules/undici/lib/core/symbols.js"(exports2, module) {
    "use strict";
    module.exports = {
      kClose: Symbol("close"),
      kDestroy: Symbol("destroy"),
      kDispatch: Symbol("dispatch"),
      kUrl: Symbol("url"),
      kWriting: Symbol("writing"),
      kResuming: Symbol("resuming"),
      kQueue: Symbol("queue"),
      kConnect: Symbol("connect"),
      kConnecting: Symbol("connecting"),
      kHeadersList: Symbol("headers list"),
      kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
      kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
      kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
      kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
      kKeepAlive: Symbol("keep alive"),
      kHeadersTimeout: Symbol("headers timeout"),
      kBodyTimeout: Symbol("body timeout"),
      kServerName: Symbol("server name"),
      kLocalAddress: Symbol("local address"),
      kHost: Symbol("host"),
      kNoRef: Symbol("no ref"),
      kBodyUsed: Symbol("used"),
      kRunning: Symbol("running"),
      kBlocking: Symbol("blocking"),
      kPending: Symbol("pending"),
      kSize: Symbol("size"),
      kBusy: Symbol("busy"),
      kQueued: Symbol("queued"),
      kFree: Symbol("free"),
      kConnected: Symbol("connected"),
      kClosed: Symbol("closed"),
      kNeedDrain: Symbol("need drain"),
      kReset: Symbol("reset"),
      kDestroyed: Symbol.for("nodejs.stream.destroyed"),
      kMaxHeadersSize: Symbol("max headers size"),
      kRunningIdx: Symbol("running index"),
      kPendingIdx: Symbol("pending index"),
      kError: Symbol("error"),
      kClients: Symbol("clients"),
      kClient: Symbol("client"),
      kParser: Symbol("parser"),
      kOnDestroyed: Symbol("destroy callbacks"),
      kPipelining: Symbol("pipelining"),
      kSocket: Symbol("socket"),
      kHostHeader: Symbol("host header"),
      kConnector: Symbol("connector"),
      kStrictContentLength: Symbol("strict content length"),
      kMaxRedirections: Symbol("maxRedirections"),
      kMaxRequests: Symbol("maxRequestsPerClient"),
      kProxy: Symbol("proxy agent options"),
      kCounter: Symbol("socket request counter"),
      kInterceptors: Symbol("dispatch interceptors"),
      kMaxResponseSize: Symbol("max response size"),
      kHTTP2Session: Symbol("http2Session"),
      kHTTP2SessionState: Symbol("http2Session state"),
      kHTTP2BuildRequest: Symbol("http2 build request"),
      kHTTP1BuildRequest: Symbol("http1 build request"),
      kHTTP2CopyHeaders: Symbol("http2 copy headers"),
      kHTTPConnVersion: Symbol("http connection version"),
      kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
      kConstruct: Symbol("constructable")
    };
  }
});

// node_modules/undici/lib/core/errors.js
var require_errors = __commonJS({
  "node_modules/undici/lib/core/errors.js"(exports2, module) {
    "use strict";
    var UndiciError = class extends Error {
      static {
        __name(this, "UndiciError");
      }
      constructor(message) {
        super(message);
        this.name = "UndiciError";
        this.code = "UND_ERR";
      }
    };
    var ConnectTimeoutError = class _ConnectTimeoutError extends UndiciError {
      static {
        __name(this, "ConnectTimeoutError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ConnectTimeoutError);
        this.name = "ConnectTimeoutError";
        this.message = message || "Connect Timeout Error";
        this.code = "UND_ERR_CONNECT_TIMEOUT";
      }
    };
    var HeadersTimeoutError = class _HeadersTimeoutError extends UndiciError {
      static {
        __name(this, "HeadersTimeoutError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _HeadersTimeoutError);
        this.name = "HeadersTimeoutError";
        this.message = message || "Headers Timeout Error";
        this.code = "UND_ERR_HEADERS_TIMEOUT";
      }
    };
    var HeadersOverflowError = class _HeadersOverflowError extends UndiciError {
      static {
        __name(this, "HeadersOverflowError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _HeadersOverflowError);
        this.name = "HeadersOverflowError";
        this.message = message || "Headers Overflow Error";
        this.code = "UND_ERR_HEADERS_OVERFLOW";
      }
    };
    var BodyTimeoutError = class _BodyTimeoutError extends UndiciError {
      static {
        __name(this, "BodyTimeoutError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _BodyTimeoutError);
        this.name = "BodyTimeoutError";
        this.message = message || "Body Timeout Error";
        this.code = "UND_ERR_BODY_TIMEOUT";
      }
    };
    var ResponseStatusCodeError = class _ResponseStatusCodeError extends UndiciError {
      static {
        __name(this, "ResponseStatusCodeError");
      }
      constructor(message, statusCode, headers, body2) {
        super(message);
        Error.captureStackTrace(this, _ResponseStatusCodeError);
        this.name = "ResponseStatusCodeError";
        this.message = message || "Response Status Code Error";
        this.code = "UND_ERR_RESPONSE_STATUS_CODE";
        this.body = body2;
        this.status = statusCode;
        this.statusCode = statusCode;
        this.headers = headers;
      }
    };
    var InvalidArgumentError = class _InvalidArgumentError extends UndiciError {
      static {
        __name(this, "InvalidArgumentError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InvalidArgumentError);
        this.name = "InvalidArgumentError";
        this.message = message || "Invalid Argument Error";
        this.code = "UND_ERR_INVALID_ARG";
      }
    };
    var InvalidReturnValueError = class _InvalidReturnValueError extends UndiciError {
      static {
        __name(this, "InvalidReturnValueError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InvalidReturnValueError);
        this.name = "InvalidReturnValueError";
        this.message = message || "Invalid Return Value Error";
        this.code = "UND_ERR_INVALID_RETURN_VALUE";
      }
    };
    var RequestAbortedError = class _RequestAbortedError extends UndiciError {
      static {
        __name(this, "RequestAbortedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _RequestAbortedError);
        this.name = "AbortError";
        this.message = message || "Request aborted";
        this.code = "UND_ERR_ABORTED";
      }
    };
    var InformationalError = class _InformationalError extends UndiciError {
      static {
        __name(this, "InformationalError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InformationalError);
        this.name = "InformationalError";
        this.message = message || "Request information";
        this.code = "UND_ERR_INFO";
      }
    };
    var RequestContentLengthMismatchError = class _RequestContentLengthMismatchError extends UndiciError {
      static {
        __name(this, "RequestContentLengthMismatchError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _RequestContentLengthMismatchError);
        this.name = "RequestContentLengthMismatchError";
        this.message = message || "Request body length does not match content-length header";
        this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ResponseContentLengthMismatchError = class _ResponseContentLengthMismatchError extends UndiciError {
      static {
        __name(this, "ResponseContentLengthMismatchError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ResponseContentLengthMismatchError);
        this.name = "ResponseContentLengthMismatchError";
        this.message = message || "Response body length does not match content-length header";
        this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ClientDestroyedError = class _ClientDestroyedError extends UndiciError {
      static {
        __name(this, "ClientDestroyedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ClientDestroyedError);
        this.name = "ClientDestroyedError";
        this.message = message || "The client is destroyed";
        this.code = "UND_ERR_DESTROYED";
      }
    };
    var ClientClosedError = class _ClientClosedError extends UndiciError {
      static {
        __name(this, "ClientClosedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ClientClosedError);
        this.name = "ClientClosedError";
        this.message = message || "The client is closed";
        this.code = "UND_ERR_CLOSED";
      }
    };
    var SocketError = class _SocketError extends UndiciError {
      static {
        __name(this, "SocketError");
      }
      constructor(message, socket) {
        super(message);
        Error.captureStackTrace(this, _SocketError);
        this.name = "SocketError";
        this.message = message || "Socket error";
        this.code = "UND_ERR_SOCKET";
        this.socket = socket;
      }
    };
    var NotSupportedError = class _NotSupportedError extends UndiciError {
      static {
        __name(this, "NotSupportedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _NotSupportedError);
        this.name = "NotSupportedError";
        this.message = message || "Not supported error";
        this.code = "UND_ERR_NOT_SUPPORTED";
      }
    };
    var BalancedPoolMissingUpstreamError = class extends UndiciError {
      static {
        __name(this, "BalancedPoolMissingUpstreamError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, NotSupportedError);
        this.name = "MissingUpstreamError";
        this.message = message || "No upstream has been added to the BalancedPool";
        this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
      }
    };
    var HTTPParserError = class _HTTPParserError extends Error {
      static {
        __name(this, "HTTPParserError");
      }
      constructor(message, code, data) {
        super(message);
        Error.captureStackTrace(this, _HTTPParserError);
        this.name = "HTTPParserError";
        this.code = code ? `HPE_${code}` : void 0;
        this.data = data ? data.toString() : void 0;
      }
    };
    var ResponseExceededMaxSizeError = class _ResponseExceededMaxSizeError extends UndiciError {
      static {
        __name(this, "ResponseExceededMaxSizeError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ResponseExceededMaxSizeError);
        this.name = "ResponseExceededMaxSizeError";
        this.message = message || "Response content exceeded max size";
        this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
      }
    };
    var RequestRetryError = class _RequestRetryError extends UndiciError {
      static {
        __name(this, "RequestRetryError");
      }
      constructor(message, code, { headers, data }) {
        super(message);
        Error.captureStackTrace(this, _RequestRetryError);
        this.name = "RequestRetryError";
        this.message = message || "Request retry error";
        this.code = "UND_ERR_REQ_RETRY";
        this.statusCode = code;
        this.data = data;
        this.headers = headers;
      }
    };
    module.exports = {
      HTTPParserError,
      UndiciError,
      HeadersTimeoutError,
      HeadersOverflowError,
      BodyTimeoutError,
      RequestContentLengthMismatchError,
      ConnectTimeoutError,
      ResponseStatusCodeError,
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError,
      ClientDestroyedError,
      ClientClosedError,
      InformationalError,
      SocketError,
      NotSupportedError,
      ResponseContentLengthMismatchError,
      BalancedPoolMissingUpstreamError,
      ResponseExceededMaxSizeError,
      RequestRetryError
    };
  }
});

// node_modules/undici/lib/core/constants.js
var require_constants = __commonJS({
  "node_modules/undici/lib/core/constants.js"(exports2, module) {
    "use strict";
    var headerNameLowerCasedRecord = {};
    var wellknownHeaderNames = [
      "Accept",
      "Accept-Encoding",
      "Accept-Language",
      "Accept-Ranges",
      "Access-Control-Allow-Credentials",
      "Access-Control-Allow-Headers",
      "Access-Control-Allow-Methods",
      "Access-Control-Allow-Origin",
      "Access-Control-Expose-Headers",
      "Access-Control-Max-Age",
      "Access-Control-Request-Headers",
      "Access-Control-Request-Method",
      "Age",
      "Allow",
      "Alt-Svc",
      "Alt-Used",
      "Authorization",
      "Cache-Control",
      "Clear-Site-Data",
      "Connection",
      "Content-Disposition",
      "Content-Encoding",
      "Content-Language",
      "Content-Length",
      "Content-Location",
      "Content-Range",
      "Content-Security-Policy",
      "Content-Security-Policy-Report-Only",
      "Content-Type",
      "Cookie",
      "Cross-Origin-Embedder-Policy",
      "Cross-Origin-Opener-Policy",
      "Cross-Origin-Resource-Policy",
      "Date",
      "Device-Memory",
      "Downlink",
      "ECT",
      "ETag",
      "Expect",
      "Expect-CT",
      "Expires",
      "Forwarded",
      "From",
      "Host",
      "If-Match",
      "If-Modified-Since",
      "If-None-Match",
      "If-Range",
      "If-Unmodified-Since",
      "Keep-Alive",
      "Last-Modified",
      "Link",
      "Location",
      "Max-Forwards",
      "Origin",
      "Permissions-Policy",
      "Pragma",
      "Proxy-Authenticate",
      "Proxy-Authorization",
      "RTT",
      "Range",
      "Referer",
      "Referrer-Policy",
      "Refresh",
      "Retry-After",
      "Sec-WebSocket-Accept",
      "Sec-WebSocket-Extensions",
      "Sec-WebSocket-Key",
      "Sec-WebSocket-Protocol",
      "Sec-WebSocket-Version",
      "Server",
      "Server-Timing",
      "Service-Worker-Allowed",
      "Service-Worker-Navigation-Preload",
      "Set-Cookie",
      "SourceMap",
      "Strict-Transport-Security",
      "Supports-Loading-Mode",
      "TE",
      "Timing-Allow-Origin",
      "Trailer",
      "Transfer-Encoding",
      "Upgrade",
      "Upgrade-Insecure-Requests",
      "User-Agent",
      "Vary",
      "Via",
      "WWW-Authenticate",
      "X-Content-Type-Options",
      "X-DNS-Prefetch-Control",
      "X-Frame-Options",
      "X-Permitted-Cross-Domain-Policies",
      "X-Powered-By",
      "X-Requested-With",
      "X-XSS-Protection"
    ];
    for (let i3 = 0; i3 < wellknownHeaderNames.length; ++i3) {
      const key = wellknownHeaderNames[i3];
      const lowerCasedKey = key.toLowerCase();
      headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;
    }
    Object.setPrototypeOf(headerNameLowerCasedRecord, null);
    module.exports = {
      wellknownHeaderNames,
      headerNameLowerCasedRecord
    };
  }
});

// node_modules/undici/lib/core/util.js
var require_util = __commonJS({
  "node_modules/undici/lib/core/util.js"(exports2, module) {
    "use strict";
    var assert2 = __require("assert");
    var { kDestroyed, kBodyUsed } = require_symbols();
    var { IncomingMessage } = __require("http");
    var stream = __require("stream");
    var net = __require("net");
    var { InvalidArgumentError } = require_errors();
    var { Blob: Blob2 } = __require("buffer");
    var nodeUtil = __require("util");
    var { stringify } = __require("querystring");
    var { headerNameLowerCasedRecord } = require_constants();
    var [nodeMajor, nodeMinor] = process.versions.node.split(".").map((v3) => Number(v3));
    function nop() {
    }
    __name(nop, "nop");
    function isStream(obj) {
      return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
    }
    __name(isStream, "isStream");
    function isBlobLike(object) {
      return Blob2 && object instanceof Blob2 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
    }
    __name(isBlobLike, "isBlobLike");
    function buildURL(url2, queryParams) {
      if (url2.includes("?") || url2.includes("#")) {
        throw new Error('Query params cannot be passed when url already contains "?" or "#".');
      }
      const stringified = stringify(queryParams);
      if (stringified) {
        url2 += "?" + stringified;
      }
      return url2;
    }
    __name(buildURL, "buildURL");
    function parseURL(url2) {
      if (typeof url2 === "string") {
        url2 = new URL(url2);
        if (!/^https?:/.test(url2.origin || url2.protocol)) {
          throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
        }
        return url2;
      }
      if (!url2 || typeof url2 !== "object") {
        throw new InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
      }
      if (!/^https?:/.test(url2.origin || url2.protocol)) {
        throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
      }
      if (!(url2 instanceof URL)) {
        if (url2.port != null && url2.port !== "" && !Number.isFinite(parseInt(url2.port))) {
          throw new InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
        }
        if (url2.path != null && typeof url2.path !== "string") {
          throw new InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
        }
        if (url2.pathname != null && typeof url2.pathname !== "string") {
          throw new InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
        }
        if (url2.hostname != null && typeof url2.hostname !== "string") {
          throw new InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
        }
        if (url2.origin != null && typeof url2.origin !== "string") {
          throw new InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
        }
        const port = url2.port != null ? url2.port : url2.protocol === "https:" ? 443 : 80;
        let origin = url2.origin != null ? url2.origin : `${url2.protocol}//${url2.hostname}:${port}`;
        let path14 = url2.path != null ? url2.path : `${url2.pathname || ""}${url2.search || ""}`;
        if (origin.endsWith("/")) {
          origin = origin.substring(0, origin.length - 1);
        }
        if (path14 && !path14.startsWith("/")) {
          path14 = `/${path14}`;
        }
        url2 = new URL(origin + path14);
      }
      return url2;
    }
    __name(parseURL, "parseURL");
    function parseOrigin(url2) {
      url2 = parseURL(url2);
      if (url2.pathname !== "/" || url2.search || url2.hash) {
        throw new InvalidArgumentError("invalid url");
      }
      return url2;
    }
    __name(parseOrigin, "parseOrigin");
    function getHostname(host) {
      if (host[0] === "[") {
        const idx2 = host.indexOf("]");
        assert2(idx2 !== -1);
        return host.substring(1, idx2);
      }
      const idx = host.indexOf(":");
      if (idx === -1) return host;
      return host.substring(0, idx);
    }
    __name(getHostname, "getHostname");
    function getServerName(host) {
      if (!host) {
        return null;
      }
      assert2.strictEqual(typeof host, "string");
      const servername = getHostname(host);
      if (net.isIP(servername)) {
        return "";
      }
      return servername;
    }
    __name(getServerName, "getServerName");
    function deepClone(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    __name(deepClone, "deepClone");
    function isAsyncIterable(obj) {
      return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
    }
    __name(isAsyncIterable, "isAsyncIterable");
    function isIterable2(obj) {
      return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
    }
    __name(isIterable2, "isIterable");
    function bodyLength(body2) {
      if (body2 == null) {
        return 0;
      } else if (isStream(body2)) {
        const state3 = body2._readableState;
        return state3 && state3.objectMode === false && state3.ended === true && Number.isFinite(state3.length) ? state3.length : null;
      } else if (isBlobLike(body2)) {
        return body2.size != null ? body2.size : null;
      } else if (isBuffer(body2)) {
        return body2.byteLength;
      }
      return null;
    }
    __name(bodyLength, "bodyLength");
    function isDestroyed(stream2) {
      return !stream2 || !!(stream2.destroyed || stream2[kDestroyed]);
    }
    __name(isDestroyed, "isDestroyed");
    function isReadableAborted(stream2) {
      const state3 = stream2 && stream2._readableState;
      return isDestroyed(stream2) && state3 && !state3.endEmitted;
    }
    __name(isReadableAborted, "isReadableAborted");
    function destroy2(stream2, err) {
      if (stream2 == null || !isStream(stream2) || isDestroyed(stream2)) {
        return;
      }
      if (typeof stream2.destroy === "function") {
        if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {
          stream2.socket = null;
        }
        stream2.destroy(err);
      } else if (err) {
        process.nextTick((stream3, err2) => {
          stream3.emit("error", err2);
        }, stream2, err);
      }
      if (stream2.destroyed !== true) {
        stream2[kDestroyed] = true;
      }
    }
    __name(destroy2, "destroy");
    var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
    function parseKeepAliveTimeout(val) {
      const m3 = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
      return m3 ? parseInt(m3[1], 10) * 1e3 : null;
    }
    __name(parseKeepAliveTimeout, "parseKeepAliveTimeout");
    function headerNameToString(value) {
      return headerNameLowerCasedRecord[value] || value.toLowerCase();
    }
    __name(headerNameToString, "headerNameToString");
    function parseHeaders(headers, obj = {}) {
      if (!Array.isArray(headers)) return headers;
      for (let i3 = 0; i3 < headers.length; i3 += 2) {
        const key = headers[i3].toString().toLowerCase();
        let val = obj[key];
        if (!val) {
          if (Array.isArray(headers[i3 + 1])) {
            obj[key] = headers[i3 + 1].map((x3) => x3.toString("utf8"));
          } else {
            obj[key] = headers[i3 + 1].toString("utf8");
          }
        } else {
          if (!Array.isArray(val)) {
            val = [val];
            obj[key] = val;
          }
          val.push(headers[i3 + 1].toString("utf8"));
        }
      }
      if ("content-length" in obj && "content-disposition" in obj) {
        obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
      }
      return obj;
    }
    __name(parseHeaders, "parseHeaders");
    function parseRawHeaders(headers) {
      const ret = [];
      let hasContentLength = false;
      let contentDispositionIdx = -1;
      for (let n3 = 0; n3 < headers.length; n3 += 2) {
        const key = headers[n3 + 0].toString();
        const val = headers[n3 + 1].toString("utf8");
        if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
          ret.push(key, val);
          hasContentLength = true;
        } else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) {
          contentDispositionIdx = ret.push(key, val) - 1;
        } else {
          ret.push(key, val);
        }
      }
      if (hasContentLength && contentDispositionIdx !== -1) {
        ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
      }
      return ret;
    }
    __name(parseRawHeaders, "parseRawHeaders");
    function isBuffer(buffer2) {
      return buffer2 instanceof Uint8Array || Buffer.isBuffer(buffer2);
    }
    __name(isBuffer, "isBuffer");
    function validateHandler(handler, method, upgrade) {
      if (!handler || typeof handler !== "object") {
        throw new InvalidArgumentError("handler must be an object");
      }
      if (typeof handler.onConnect !== "function") {
        throw new InvalidArgumentError("invalid onConnect method");
      }
      if (typeof handler.onError !== "function") {
        throw new InvalidArgumentError("invalid onError method");
      }
      if (typeof handler.onBodySent !== "function" && handler.onBodySent !== void 0) {
        throw new InvalidArgumentError("invalid onBodySent method");
      }
      if (upgrade || method === "CONNECT") {
        if (typeof handler.onUpgrade !== "function") {
          throw new InvalidArgumentError("invalid onUpgrade method");
        }
      } else {
        if (typeof handler.onHeaders !== "function") {
          throw new InvalidArgumentError("invalid onHeaders method");
        }
        if (typeof handler.onData !== "function") {
          throw new InvalidArgumentError("invalid onData method");
        }
        if (typeof handler.onComplete !== "function") {
          throw new InvalidArgumentError("invalid onComplete method");
        }
      }
    }
    __name(validateHandler, "validateHandler");
    function isDisturbed(body2) {
      return !!(body2 && (stream.isDisturbed ? stream.isDisturbed(body2) || body2[kBodyUsed] : body2[kBodyUsed] || body2.readableDidRead || body2._readableState && body2._readableState.dataEmitted || isReadableAborted(body2)));
    }
    __name(isDisturbed, "isDisturbed");
    function isErrored(body2) {
      return !!(body2 && (stream.isErrored ? stream.isErrored(body2) : /state: 'errored'/.test(
        nodeUtil.inspect(body2)
      )));
    }
    __name(isErrored, "isErrored");
    function isReadable(body2) {
      return !!(body2 && (stream.isReadable ? stream.isReadable(body2) : /state: 'readable'/.test(
        nodeUtil.inspect(body2)
      )));
    }
    __name(isReadable, "isReadable");
    function getSocketInfo(socket) {
      return {
        localAddress: socket.localAddress,
        localPort: socket.localPort,
        remoteAddress: socket.remoteAddress,
        remotePort: socket.remotePort,
        remoteFamily: socket.remoteFamily,
        timeout: socket.timeout,
        bytesWritten: socket.bytesWritten,
        bytesRead: socket.bytesRead
      };
    }
    __name(getSocketInfo, "getSocketInfo");
    async function* convertIterableToBuffer(iterable) {
      for await (const chunk of iterable) {
        yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
      }
    }
    __name(convertIterableToBuffer, "convertIterableToBuffer");
    var ReadableStream2;
    function ReadableStreamFrom(iterable) {
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      if (ReadableStream2.from) {
        return ReadableStream2.from(convertIterableToBuffer(iterable));
      }
      let iterator;
      return new ReadableStream2(
        {
          async start() {
            iterator = iterable[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { done, value } = await iterator.next();
            if (done) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
              controller.enqueue(new Uint8Array(buf));
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          }
        },
        0
      );
    }
    __name(ReadableStreamFrom, "ReadableStreamFrom");
    function isFormDataLike(object) {
      return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
    }
    __name(isFormDataLike, "isFormDataLike");
    function throwIfAborted(signal) {
      if (!signal) {
        return;
      }
      if (typeof signal.throwIfAborted === "function") {
        signal.throwIfAborted();
      } else {
        if (signal.aborted) {
          const err = new Error("The operation was aborted");
          err.name = "AbortError";
          throw err;
        }
      }
    }
    __name(throwIfAborted, "throwIfAborted");
    function addAbortListener(signal, listener) {
      if ("addEventListener" in signal) {
        signal.addEventListener("abort", listener, { once: true });
        return () => signal.removeEventListener("abort", listener);
      }
      signal.addListener("abort", listener);
      return () => signal.removeListener("abort", listener);
    }
    __name(addAbortListener, "addAbortListener");
    var hasToWellFormed = !!String.prototype.toWellFormed;
    function toUSVString(val) {
      if (hasToWellFormed) {
        return `${val}`.toWellFormed();
      } else if (nodeUtil.toUSVString) {
        return nodeUtil.toUSVString(val);
      }
      return `${val}`;
    }
    __name(toUSVString, "toUSVString");
    function parseRangeHeader(range2) {
      if (range2 == null || range2 === "") return { start: 0, end: null, size: null };
      const m3 = range2 ? range2.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
      return m3 ? {
        start: parseInt(m3[1]),
        end: m3[2] ? parseInt(m3[2]) : null,
        size: m3[3] ? parseInt(m3[3]) : null
      } : null;
    }
    __name(parseRangeHeader, "parseRangeHeader");
    var kEnumerableProperty = /* @__PURE__ */ Object.create(null);
    kEnumerableProperty.enumerable = true;
    module.exports = {
      kEnumerableProperty,
      nop,
      isDisturbed,
      isErrored,
      isReadable,
      toUSVString,
      isReadableAborted,
      isBlobLike,
      parseOrigin,
      parseURL,
      getServerName,
      isStream,
      isIterable: isIterable2,
      isAsyncIterable,
      isDestroyed,
      headerNameToString,
      parseRawHeaders,
      parseHeaders,
      parseKeepAliveTimeout,
      destroy: destroy2,
      bodyLength,
      deepClone,
      ReadableStreamFrom,
      isBuffer,
      validateHandler,
      getSocketInfo,
      isFormDataLike,
      buildURL,
      throwIfAborted,
      addAbortListener,
      parseRangeHeader,
      nodeMajor,
      nodeMinor,
      nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13,
      safeHTTPMethods: ["GET", "HEAD", "OPTIONS", "TRACE"]
    };
  }
});

// node_modules/undici/lib/timers.js
var require_timers = __commonJS({
  "node_modules/undici/lib/timers.js"(exports2, module) {
    "use strict";
    var fastNow = Date.now();
    var fastNowTimeout;
    var fastTimers = [];
    function onTimeout() {
      fastNow = Date.now();
      let len = fastTimers.length;
      let idx = 0;
      while (idx < len) {
        const timer = fastTimers[idx];
        if (timer.state === 0) {
          timer.state = fastNow + timer.delay;
        } else if (timer.state > 0 && fastNow >= timer.state) {
          timer.state = -1;
          timer.callback(timer.opaque);
        }
        if (timer.state === -1) {
          timer.state = -2;
          if (idx !== len - 1) {
            fastTimers[idx] = fastTimers.pop();
          } else {
            fastTimers.pop();
          }
          len -= 1;
        } else {
          idx += 1;
        }
      }
      if (fastTimers.length > 0) {
        refreshTimeout();
      }
    }
    __name(onTimeout, "onTimeout");
    function refreshTimeout() {
      if (fastNowTimeout && fastNowTimeout.refresh) {
        fastNowTimeout.refresh();
      } else {
        clearTimeout(fastNowTimeout);
        fastNowTimeout = setTimeout(onTimeout, 1e3);
        if (fastNowTimeout.unref) {
          fastNowTimeout.unref();
        }
      }
    }
    __name(refreshTimeout, "refreshTimeout");
    var Timeout = class {
      static {
        __name(this, "Timeout");
      }
      constructor(callback, delay5, opaque) {
        this.callback = callback;
        this.delay = delay5;
        this.opaque = opaque;
        this.state = -2;
        this.refresh();
      }
      refresh() {
        if (this.state === -2) {
          fastTimers.push(this);
          if (!fastNowTimeout || fastTimers.length === 1) {
            refreshTimeout();
          }
        }
        this.state = 0;
      }
      clear() {
        this.state = -1;
      }
    };
    module.exports = {
      setTimeout(callback, delay5, opaque) {
        return delay5 < 1e3 ? setTimeout(callback, delay5, opaque) : new Timeout(callback, delay5, opaque);
      },
      clearTimeout(timeout) {
        if (timeout instanceof Timeout) {
          timeout.clear();
        } else {
          clearTimeout(timeout);
        }
      }
    };
  }
});

// node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS({
  "node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(exports2, module) {
    "use strict";
    var EventEmitter3 = __require("node:events").EventEmitter;
    var inherits = __require("node:util").inherits;
    function SBMH(needle) {
      if (typeof needle === "string") {
        needle = Buffer.from(needle);
      }
      if (!Buffer.isBuffer(needle)) {
        throw new TypeError("The needle has to be a String or a Buffer.");
      }
      const needleLength = needle.length;
      if (needleLength === 0) {
        throw new Error("The needle cannot be an empty String/Buffer.");
      }
      if (needleLength > 256) {
        throw new Error("The needle cannot have a length bigger than 256.");
      }
      this.maxMatches = Infinity;
      this.matches = 0;
      this._occ = new Array(256).fill(needleLength);
      this._lookbehind_size = 0;
      this._needle = needle;
      this._bufpos = 0;
      this._lookbehind = Buffer.alloc(needleLength);
      for (var i3 = 0; i3 < needleLength - 1; ++i3) {
        this._occ[needle[i3]] = needleLength - 1 - i3;
      }
    }
    __name(SBMH, "SBMH");
    inherits(SBMH, EventEmitter3);
    SBMH.prototype.reset = function() {
      this._lookbehind_size = 0;
      this.matches = 0;
      this._bufpos = 0;
    };
    SBMH.prototype.push = function(chunk, pos) {
      if (!Buffer.isBuffer(chunk)) {
        chunk = Buffer.from(chunk, "binary");
      }
      const chlen = chunk.length;
      this._bufpos = pos || 0;
      let r3;
      while (r3 !== chlen && this.matches < this.maxMatches) {
        r3 = this._sbmh_feed(chunk);
      }
      return r3;
    };
    SBMH.prototype._sbmh_feed = function(data) {
      const len = data.length;
      const needle = this._needle;
      const needleLength = needle.length;
      const lastNeedleChar = needle[needleLength - 1];
      let pos = -this._lookbehind_size;
      let ch;
      if (pos < 0) {
        while (pos < 0 && pos <= len - needleLength) {
          ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
          if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
            this._lookbehind_size = 0;
            ++this.matches;
            this.emit("info", true);
            return this._bufpos = pos + needleLength;
          }
          pos += this._occ[ch];
        }
        if (pos < 0) {
          while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) {
            ++pos;
          }
        }
        if (pos >= 0) {
          this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
          this._lookbehind_size = 0;
        } else {
          const bytesToCutOff = this._lookbehind_size + pos;
          if (bytesToCutOff > 0) {
            this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
          }
          this._lookbehind.copy(
            this._lookbehind,
            0,
            bytesToCutOff,
            this._lookbehind_size - bytesToCutOff
          );
          this._lookbehind_size -= bytesToCutOff;
          data.copy(this._lookbehind, this._lookbehind_size);
          this._lookbehind_size += len;
          this._bufpos = len;
          return len;
        }
      }
      pos += (pos >= 0) * this._bufpos;
      if (data.indexOf(needle, pos) !== -1) {
        pos = data.indexOf(needle, pos);
        ++this.matches;
        if (pos > 0) {
          this.emit("info", true, data, this._bufpos, pos);
        } else {
          this.emit("info", true);
        }
        return this._bufpos = pos + needleLength;
      } else {
        pos = len - needleLength;
      }
      while (pos < len && (data[pos] !== needle[0] || Buffer.compare(
        data.subarray(pos, pos + len - pos),
        needle.subarray(0, len - pos)
      ) !== 0)) {
        ++pos;
      }
      if (pos < len) {
        data.copy(this._lookbehind, 0, pos, pos + (len - pos));
        this._lookbehind_size = len - pos;
      }
      if (pos > 0) {
        this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
      }
      this._bufpos = len;
      return len;
    };
    SBMH.prototype._sbmh_lookup_char = function(data, pos) {
      return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
    };
    SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
      for (var i3 = 0; i3 < len; ++i3) {
        if (this._sbmh_lookup_char(data, pos + i3) !== this._needle[i3]) {
          return false;
        }
      }
      return true;
    };
    module.exports = SBMH;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(exports2, module) {
    "use strict";
    var inherits = __require("node:util").inherits;
    var ReadableStream2 = __require("node:stream").Readable;
    function PartStream(opts) {
      ReadableStream2.call(this, opts);
    }
    __name(PartStream, "PartStream");
    inherits(PartStream, ReadableStream2);
    PartStream.prototype._read = function(n3) {
    };
    module.exports = PartStream;
  }
});

// node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/getLimit.js"(exports2, module) {
    "use strict";
    module.exports = /* @__PURE__ */ __name(function getLimit(limits, name2, defaultLimit) {
      if (!limits || limits[name2] === void 0 || limits[name2] === null) {
        return defaultLimit;
      }
      if (typeof limits[name2] !== "number" || isNaN(limits[name2])) {
        throw new TypeError("Limit " + name2 + " is not a valid number");
      }
      return limits[name2];
    }, "getLimit");
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(exports2, module) {
    "use strict";
    var EventEmitter3 = __require("node:events").EventEmitter;
    var inherits = __require("node:util").inherits;
    var getLimit = require_getLimit();
    var StreamSearch = require_sbmh();
    var B_DCRLF = Buffer.from("\r\n\r\n");
    var RE_CRLF = /\r\n/g;
    var RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
    function HeaderParser(cfg) {
      EventEmitter3.call(this);
      cfg = cfg || {};
      const self2 = this;
      this.nread = 0;
      this.maxed = false;
      this.npairs = 0;
      this.maxHeaderPairs = getLimit(cfg, "maxHeaderPairs", 2e3);
      this.maxHeaderSize = getLimit(cfg, "maxHeaderSize", 80 * 1024);
      this.buffer = "";
      this.header = {};
      this.finished = false;
      this.ss = new StreamSearch(B_DCRLF);
      this.ss.on("info", function(isMatch, data, start, end) {
        if (data && !self2.maxed) {
          if (self2.nread + end - start >= self2.maxHeaderSize) {
            end = self2.maxHeaderSize - self2.nread + start;
            self2.nread = self2.maxHeaderSize;
            self2.maxed = true;
          } else {
            self2.nread += end - start;
          }
          self2.buffer += data.toString("binary", start, end);
        }
        if (isMatch) {
          self2._finish();
        }
      });
    }
    __name(HeaderParser, "HeaderParser");
    inherits(HeaderParser, EventEmitter3);
    HeaderParser.prototype.push = function(data) {
      const r3 = this.ss.push(data);
      if (this.finished) {
        return r3;
      }
    };
    HeaderParser.prototype.reset = function() {
      this.finished = false;
      this.buffer = "";
      this.header = {};
      this.ss.reset();
    };
    HeaderParser.prototype._finish = function() {
      if (this.buffer) {
        this._parseHeader();
      }
      this.ss.matches = this.ss.maxMatches;
      const header = this.header;
      this.header = {};
      this.buffer = "";
      this.finished = true;
      this.nread = this.npairs = 0;
      this.maxed = false;
      this.emit("header", header);
    };
    HeaderParser.prototype._parseHeader = function() {
      if (this.npairs === this.maxHeaderPairs) {
        return;
      }
      const lines = this.buffer.split(RE_CRLF);
      const len = lines.length;
      let m3, h3;
      for (var i3 = 0; i3 < len; ++i3) {
        if (lines[i3].length === 0) {
          continue;
        }
        if (lines[i3][0] === "	" || lines[i3][0] === " ") {
          if (h3) {
            this.header[h3][this.header[h3].length - 1] += lines[i3];
            continue;
          }
        }
        const posColon = lines[i3].indexOf(":");
        if (posColon === -1 || posColon === 0) {
          return;
        }
        m3 = RE_HDR.exec(lines[i3]);
        h3 = m3[1].toLowerCase();
        this.header[h3] = this.header[h3] || [];
        this.header[h3].push(m3[2] || "");
        if (++this.npairs === this.maxHeaderPairs) {
          break;
        }
      }
    };
    module.exports = HeaderParser;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(exports2, module) {
    "use strict";
    var WritableStream = __require("node:stream").Writable;
    var inherits = __require("node:util").inherits;
    var StreamSearch = require_sbmh();
    var PartStream = require_PartStream();
    var HeaderParser = require_HeaderParser();
    var DASH = 45;
    var B_ONEDASH = Buffer.from("-");
    var B_CRLF = Buffer.from("\r\n");
    var EMPTY_FN = /* @__PURE__ */ __name(function() {
    }, "EMPTY_FN");
    function Dicer(cfg) {
      if (!(this instanceof Dicer)) {
        return new Dicer(cfg);
      }
      WritableStream.call(this, cfg);
      if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") {
        throw new TypeError("Boundary required");
      }
      if (typeof cfg.boundary === "string") {
        this.setBoundary(cfg.boundary);
      } else {
        this._bparser = void 0;
      }
      this._headerFirst = cfg.headerFirst;
      this._dashes = 0;
      this._parts = 0;
      this._finished = false;
      this._realFinish = false;
      this._isPreamble = true;
      this._justMatched = false;
      this._firstWrite = true;
      this._inHeader = true;
      this._part = void 0;
      this._cb = void 0;
      this._ignoreData = false;
      this._partOpts = { highWaterMark: cfg.partHwm };
      this._pause = false;
      const self2 = this;
      this._hparser = new HeaderParser(cfg);
      this._hparser.on("header", function(header) {
        self2._inHeader = false;
        self2._part.emit("header", header);
      });
    }
    __name(Dicer, "Dicer");
    inherits(Dicer, WritableStream);
    Dicer.prototype.emit = function(ev) {
      if (ev === "finish" && !this._realFinish) {
        if (!this._finished) {
          const self2 = this;
          process.nextTick(function() {
            self2.emit("error", new Error("Unexpected end of multipart data"));
            if (self2._part && !self2._ignoreData) {
              const type2 = self2._isPreamble ? "Preamble" : "Part";
              self2._part.emit("error", new Error(type2 + " terminated early due to unexpected end of multipart data"));
              self2._part.push(null);
              process.nextTick(function() {
                self2._realFinish = true;
                self2.emit("finish");
                self2._realFinish = false;
              });
              return;
            }
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          });
        }
      } else {
        WritableStream.prototype.emit.apply(this, arguments);
      }
    };
    Dicer.prototype._write = function(data, encoding, cb) {
      if (!this._hparser && !this._bparser) {
        return cb();
      }
      if (this._headerFirst && this._isPreamble) {
        if (!this._part) {
          this._part = new PartStream(this._partOpts);
          if (this.listenerCount("preamble") !== 0) {
            this.emit("preamble", this._part);
          } else {
            this._ignore();
          }
        }
        const r3 = this._hparser.push(data);
        if (!this._inHeader && r3 !== void 0 && r3 < data.length) {
          data = data.slice(r3);
        } else {
          return cb();
        }
      }
      if (this._firstWrite) {
        this._bparser.push(B_CRLF);
        this._firstWrite = false;
      }
      this._bparser.push(data);
      if (this._pause) {
        this._cb = cb;
      } else {
        cb();
      }
    };
    Dicer.prototype.reset = function() {
      this._part = void 0;
      this._bparser = void 0;
      this._hparser = void 0;
    };
    Dicer.prototype.setBoundary = function(boundary) {
      const self2 = this;
      this._bparser = new StreamSearch("\r\n--" + boundary);
      this._bparser.on("info", function(isMatch, data, start, end) {
        self2._oninfo(isMatch, data, start, end);
      });
    };
    Dicer.prototype._ignore = function() {
      if (this._part && !this._ignoreData) {
        this._ignoreData = true;
        this._part.on("error", EMPTY_FN);
        this._part.resume();
      }
    };
    Dicer.prototype._oninfo = function(isMatch, data, start, end) {
      let buf;
      const self2 = this;
      let i3 = 0;
      let r3;
      let shouldWriteMore = true;
      if (!this._part && this._justMatched && data) {
        while (this._dashes < 2 && start + i3 < end) {
          if (data[start + i3] === DASH) {
            ++i3;
            ++this._dashes;
          } else {
            if (this._dashes) {
              buf = B_ONEDASH;
            }
            this._dashes = 0;
            break;
          }
        }
        if (this._dashes === 2) {
          if (start + i3 < end && this.listenerCount("trailer") !== 0) {
            this.emit("trailer", data.slice(start + i3, end));
          }
          this.reset();
          this._finished = true;
          if (self2._parts === 0) {
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          }
        }
        if (this._dashes) {
          return;
        }
      }
      if (this._justMatched) {
        this._justMatched = false;
      }
      if (!this._part) {
        this._part = new PartStream(this._partOpts);
        this._part._read = function(n3) {
          self2._unpause();
        };
        if (this._isPreamble && this.listenerCount("preamble") !== 0) {
          this.emit("preamble", this._part);
        } else if (this._isPreamble !== true && this.listenerCount("part") !== 0) {
          this.emit("part", this._part);
        } else {
          this._ignore();
        }
        if (!this._isPreamble) {
          this._inHeader = true;
        }
      }
      if (data && start < end && !this._ignoreData) {
        if (this._isPreamble || !this._inHeader) {
          if (buf) {
            shouldWriteMore = this._part.push(buf);
          }
          shouldWriteMore = this._part.push(data.slice(start, end));
          if (!shouldWriteMore) {
            this._pause = true;
          }
        } else if (!this._isPreamble && this._inHeader) {
          if (buf) {
            this._hparser.push(buf);
          }
          r3 = this._hparser.push(data.slice(start, end));
          if (!this._inHeader && r3 !== void 0 && r3 < end) {
            this._oninfo(false, data, start + r3, end);
          }
        }
      }
      if (isMatch) {
        this._hparser.reset();
        if (this._isPreamble) {
          this._isPreamble = false;
        } else {
          if (start !== end) {
            ++this._parts;
            this._part.on("end", function() {
              if (--self2._parts === 0) {
                if (self2._finished) {
                  self2._realFinish = true;
                  self2.emit("finish");
                  self2._realFinish = false;
                } else {
                  self2._unpause();
                }
              }
            });
          }
        }
        this._part.push(null);
        this._part = void 0;
        this._ignoreData = false;
        this._justMatched = true;
        this._dashes = 0;
      }
    };
    Dicer.prototype._unpause = function() {
      if (!this._pause) {
        return;
      }
      this._pause = false;
      if (this._cb) {
        const cb = this._cb;
        this._cb = void 0;
        cb();
      }
    };
    module.exports = Dicer;
  }
});

// node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/decodeText.js"(exports2, module) {
    "use strict";
    var utf8Decoder = new TextDecoder("utf-8");
    var textDecoders = /* @__PURE__ */ new Map([
      ["utf-8", utf8Decoder],
      ["utf8", utf8Decoder]
    ]);
    function getDecoder(charset) {
      let lc;
      while (true) {
        switch (charset) {
          case "utf-8":
          case "utf8":
            return decoders.utf8;
          case "latin1":
          case "ascii":
          // TODO: Make these a separate, strict decoder?
          case "us-ascii":
          case "iso-8859-1":
          case "iso8859-1":
          case "iso88591":
          case "iso_8859-1":
          case "windows-1252":
          case "iso_8859-1:1987":
          case "cp1252":
          case "x-cp1252":
            return decoders.latin1;
          case "utf16le":
          case "utf-16le":
          case "ucs2":
          case "ucs-2":
            return decoders.utf16le;
          case "base64":
            return decoders.base64;
          default:
            if (lc === void 0) {
              lc = true;
              charset = charset.toLowerCase();
              continue;
            }
            return decoders.other.bind(charset);
        }
      }
    }
    __name(getDecoder, "getDecoder");
    var decoders = {
      utf8: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.utf8Slice(0, data.length);
      }, "utf8"),
      latin1: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          return data;
        }
        return data.latin1Slice(0, data.length);
      }, "latin1"),
      utf16le: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.ucs2Slice(0, data.length);
      }, "utf16le"),
      base64: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.base64Slice(0, data.length);
      }, "base64"),
      other: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        if (textDecoders.has(exports2.toString())) {
          try {
            return textDecoders.get(exports2).decode(data);
          } catch {
          }
        }
        return typeof data === "string" ? data : data.toString();
      }, "other")
    };
    function decodeText(text, sourceEncoding, destEncoding) {
      if (text) {
        return getDecoder(destEncoding)(text, sourceEncoding);
      }
      return text;
    }
    __name(decodeText, "decodeText");
    module.exports = decodeText;
  }
});

// node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/parseParams.js"(exports2, module) {
    "use strict";
    var decodeText = require_decodeText();
    var RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
    var EncodedLookup = {
      "%00": "\0",
      "%01": "",
      "%02": "",
      "%03": "",
      "%04": "",
      "%05": "",
      "%06": "",
      "%07": "\x07",
      "%08": "\b",
      "%09": "	",
      "%0a": "\n",
      "%0A": "\n",
      "%0b": "\v",
      "%0B": "\v",
      "%0c": "\f",
      "%0C": "\f",
      "%0d": "\r",
      "%0D": "\r",
      "%0e": "",
      "%0E": "",
      "%0f": "",
      "%0F": "",
      "%10": "",
      "%11": "",
      "%12": "",
      "%13": "",
      "%14": "",
      "%15": "",
      "%16": "",
      "%17": "",
      "%18": "",
      "%19": "",
      "%1a": "",
      "%1A": "",
      "%1b": "\x1B",
      "%1B": "\x1B",
      "%1c": "",
      "%1C": "",
      "%1d": "",
      "%1D": "",
      "%1e": "",
      "%1E": "",
      "%1f": "",
      "%1F": "",
      "%20": " ",
      "%21": "!",
      "%22": '"',
      "%23": "#",
      "%24": "$",
      "%25": "%",
      "%26": "&",
      "%27": "'",
      "%28": "(",
      "%29": ")",
      "%2a": "*",
      "%2A": "*",
      "%2b": "+",
      "%2B": "+",
      "%2c": ",",
      "%2C": ",",
      "%2d": "-",
      "%2D": "-",
      "%2e": ".",
      "%2E": ".",
      "%2f": "/",
      "%2F": "/",
      "%30": "0",
      "%31": "1",
      "%32": "2",
      "%33": "3",
      "%34": "4",
      "%35": "5",
      "%36": "6",
      "%37": "7",
      "%38": "8",
      "%39": "9",
      "%3a": ":",
      "%3A": ":",
      "%3b": ";",
      "%3B": ";",
      "%3c": "<",
      "%3C": "<",
      "%3d": "=",
      "%3D": "=",
      "%3e": ">",
      "%3E": ">",
      "%3f": "?",
      "%3F": "?",
      "%40": "@",
      "%41": "A",
      "%42": "B",
      "%43": "C",
      "%44": "D",
      "%45": "E",
      "%46": "F",
      "%47": "G",
      "%48": "H",
      "%49": "I",
      "%4a": "J",
      "%4A": "J",
      "%4b": "K",
      "%4B": "K",
      "%4c": "L",
      "%4C": "L",
      "%4d": "M",
      "%4D": "M",
      "%4e": "N",
      "%4E": "N",
      "%4f": "O",
      "%4F": "O",
      "%50": "P",
      "%51": "Q",
      "%52": "R",
      "%53": "S",
      "%54": "T",
      "%55": "U",
      "%56": "V",
      "%57": "W",
      "%58": "X",
      "%59": "Y",
      "%5a": "Z",
      "%5A": "Z",
      "%5b": "[",
      "%5B": "[",
      "%5c": "\\",
      "%5C": "\\",
      "%5d": "]",
      "%5D": "]",
      "%5e": "^",
      "%5E": "^",
      "%5f": "_",
      "%5F": "_",
      "%60": "`",
      "%61": "a",
      "%62": "b",
      "%63": "c",
      "%64": "d",
      "%65": "e",
      "%66": "f",
      "%67": "g",
      "%68": "h",
      "%69": "i",
      "%6a": "j",
      "%6A": "j",
      "%6b": "k",
      "%6B": "k",
      "%6c": "l",
      "%6C": "l",
      "%6d": "m",
      "%6D": "m",
      "%6e": "n",
      "%6E": "n",
      "%6f": "o",
      "%6F": "o",
      "%70": "p",
      "%71": "q",
      "%72": "r",
      "%73": "s",
      "%74": "t",
      "%75": "u",
      "%76": "v",
      "%77": "w",
      "%78": "x",
      "%79": "y",
      "%7a": "z",
      "%7A": "z",
      "%7b": "{",
      "%7B": "{",
      "%7c": "|",
      "%7C": "|",
      "%7d": "}",
      "%7D": "}",
      "%7e": "~",
      "%7E": "~",
      "%7f": "\x7F",
      "%7F": "\x7F",
      "%80": "\x80",
      "%81": "\x81",
      "%82": "\x82",
      "%83": "\x83",
      "%84": "\x84",
      "%85": "\x85",
      "%86": "\x86",
      "%87": "\x87",
      "%88": "\x88",
      "%89": "\x89",
      "%8a": "\x8A",
      "%8A": "\x8A",
      "%8b": "\x8B",
      "%8B": "\x8B",
      "%8c": "\x8C",
      "%8C": "\x8C",
      "%8d": "\x8D",
      "%8D": "\x8D",
      "%8e": "\x8E",
      "%8E": "\x8E",
      "%8f": "\x8F",
      "%8F": "\x8F",
      "%90": "\x90",
      "%91": "\x91",
      "%92": "\x92",
      "%93": "\x93",
      "%94": "\x94",
      "%95": "\x95",
      "%96": "\x96",
      "%97": "\x97",
      "%98": "\x98",
      "%99": "\x99",
      "%9a": "\x9A",
      "%9A": "\x9A",
      "%9b": "\x9B",
      "%9B": "\x9B",
      "%9c": "\x9C",
      "%9C": "\x9C",
      "%9d": "\x9D",
      "%9D": "\x9D",
      "%9e": "\x9E",
      "%9E": "\x9E",
      "%9f": "\x9F",
      "%9F": "\x9F",
      "%a0": "\xA0",
      "%A0": "\xA0",
      "%a1": "\xA1",
      "%A1": "\xA1",
      "%a2": "\xA2",
      "%A2": "\xA2",
      "%a3": "\xA3",
      "%A3": "\xA3",
      "%a4": "\xA4",
      "%A4": "\xA4",
      "%a5": "\xA5",
      "%A5": "\xA5",
      "%a6": "\xA6",
      "%A6": "\xA6",
      "%a7": "\xA7",
      "%A7": "\xA7",
      "%a8": "\xA8",
      "%A8": "\xA8",
      "%a9": "\xA9",
      "%A9": "\xA9",
      "%aa": "\xAA",
      "%Aa": "\xAA",
      "%aA": "\xAA",
      "%AA": "\xAA",
      "%ab": "\xAB",
      "%Ab": "\xAB",
      "%aB": "\xAB",
      "%AB": "\xAB",
      "%ac": "\xAC",
      "%Ac": "\xAC",
      "%aC": "\xAC",
      "%AC": "\xAC",
      "%ad": "\xAD",
      "%Ad": "\xAD",
      "%aD": "\xAD",
      "%AD": "\xAD",
      "%ae": "\xAE",
      "%Ae": "\xAE",
      "%aE": "\xAE",
      "%AE": "\xAE",
      "%af": "\xAF",
      "%Af": "\xAF",
      "%aF": "\xAF",
      "%AF": "\xAF",
      "%b0": "\xB0",
      "%B0": "\xB0",
      "%b1": "\xB1",
      "%B1": "\xB1",
      "%b2": "\xB2",
      "%B2": "\xB2",
      "%b3": "\xB3",
      "%B3": "\xB3",
      "%b4": "\xB4",
      "%B4": "\xB4",
      "%b5": "\xB5",
      "%B5": "\xB5",
      "%b6": "\xB6",
      "%B6": "\xB6",
      "%b7": "\xB7",
      "%B7": "\xB7",
      "%b8": "\xB8",
      "%B8": "\xB8",
      "%b9": "\xB9",
      "%B9": "\xB9",
      "%ba": "\xBA",
      "%Ba": "\xBA",
      "%bA": "\xBA",
      "%BA": "\xBA",
      "%bb": "\xBB",
      "%Bb": "\xBB",
      "%bB": "\xBB",
      "%BB": "\xBB",
      "%bc": "\xBC",
      "%Bc": "\xBC",
      "%bC": "\xBC",
      "%BC": "\xBC",
      "%bd": "\xBD",
      "%Bd": "\xBD",
      "%bD": "\xBD",
      "%BD": "\xBD",
      "%be": "\xBE",
      "%Be": "\xBE",
      "%bE": "\xBE",
      "%BE": "\xBE",
      "%bf": "\xBF",
      "%Bf": "\xBF",
      "%bF": "\xBF",
      "%BF": "\xBF",
      "%c0": "\xC0",
      "%C0": "\xC0",
      "%c1": "\xC1",
      "%C1": "\xC1",
      "%c2": "\xC2",
      "%C2": "\xC2",
      "%c3": "\xC3",
      "%C3": "\xC3",
      "%c4": "\xC4",
      "%C4": "\xC4",
      "%c5": "\xC5",
      "%C5": "\xC5",
      "%c6": "\xC6",
      "%C6": "\xC6",
      "%c7": "\xC7",
      "%C7": "\xC7",
      "%c8": "\xC8",
      "%C8": "\xC8",
      "%c9": "\xC9",
      "%C9": "\xC9",
      "%ca": "\xCA",
      "%Ca": "\xCA",
      "%cA": "\xCA",
      "%CA": "\xCA",
      "%cb": "\xCB",
      "%Cb": "\xCB",
      "%cB": "\xCB",
      "%CB": "\xCB",
      "%cc": "\xCC",
      "%Cc": "\xCC",
      "%cC": "\xCC",
      "%CC": "\xCC",
      "%cd": "\xCD",
      "%Cd": "\xCD",
      "%cD": "\xCD",
      "%CD": "\xCD",
      "%ce": "\xCE",
      "%Ce": "\xCE",
      "%cE": "\xCE",
      "%CE": "\xCE",
      "%cf": "\xCF",
      "%Cf": "\xCF",
      "%cF": "\xCF",
      "%CF": "\xCF",
      "%d0": "\xD0",
      "%D0": "\xD0",
      "%d1": "\xD1",
      "%D1": "\xD1",
      "%d2": "\xD2",
      "%D2": "\xD2",
      "%d3": "\xD3",
      "%D3": "\xD3",
      "%d4": "\xD4",
      "%D4": "\xD4",
      "%d5": "\xD5",
      "%D5": "\xD5",
      "%d6": "\xD6",
      "%D6": "\xD6",
      "%d7": "\xD7",
      "%D7": "\xD7",
      "%d8": "\xD8",
      "%D8": "\xD8",
      "%d9": "\xD9",
      "%D9": "\xD9",
      "%da": "\xDA",
      "%Da": "\xDA",
      "%dA": "\xDA",
      "%DA": "\xDA",
      "%db": "\xDB",
      "%Db": "\xDB",
      "%dB": "\xDB",
      "%DB": "\xDB",
      "%dc": "\xDC",
      "%Dc": "\xDC",
      "%dC": "\xDC",
      "%DC": "\xDC",
      "%dd": "\xDD",
      "%Dd": "\xDD",
      "%dD": "\xDD",
      "%DD": "\xDD",
      "%de": "\xDE",
      "%De": "\xDE",
      "%dE": "\xDE",
      "%DE": "\xDE",
      "%df": "\xDF",
      "%Df": "\xDF",
      "%dF": "\xDF",
      "%DF": "\xDF",
      "%e0": "\xE0",
      "%E0": "\xE0",
      "%e1": "\xE1",
      "%E1": "\xE1",
      "%e2": "\xE2",
      "%E2": "\xE2",
      "%e3": "\xE3",
      "%E3": "\xE3",
      "%e4": "\xE4",
      "%E4": "\xE4",
      "%e5": "\xE5",
      "%E5": "\xE5",
      "%e6": "\xE6",
      "%E6": "\xE6",
      "%e7": "\xE7",
      "%E7": "\xE7",
      "%e8": "\xE8",
      "%E8": "\xE8",
      "%e9": "\xE9",
      "%E9": "\xE9",
      "%ea": "\xEA",
      "%Ea": "\xEA",
      "%eA": "\xEA",
      "%EA": "\xEA",
      "%eb": "\xEB",
      "%Eb": "\xEB",
      "%eB": "\xEB",
      "%EB": "\xEB",
      "%ec": "\xEC",
      "%Ec": "\xEC",
      "%eC": "\xEC",
      "%EC": "\xEC",
      "%ed": "\xED",
      "%Ed": "\xED",
      "%eD": "\xED",
      "%ED": "\xED",
      "%ee": "\xEE",
      "%Ee": "\xEE",
      "%eE": "\xEE",
      "%EE": "\xEE",
      "%ef": "\xEF",
      "%Ef": "\xEF",
      "%eF": "\xEF",
      "%EF": "\xEF",
      "%f0": "\xF0",
      "%F0": "\xF0",
      "%f1": "\xF1",
      "%F1": "\xF1",
      "%f2": "\xF2",
      "%F2": "\xF2",
      "%f3": "\xF3",
      "%F3": "\xF3",
      "%f4": "\xF4",
      "%F4": "\xF4",
      "%f5": "\xF5",
      "%F5": "\xF5",
      "%f6": "\xF6",
      "%F6": "\xF6",
      "%f7": "\xF7",
      "%F7": "\xF7",
      "%f8": "\xF8",
      "%F8": "\xF8",
      "%f9": "\xF9",
      "%F9": "\xF9",
      "%fa": "\xFA",
      "%Fa": "\xFA",
      "%fA": "\xFA",
      "%FA": "\xFA",
      "%fb": "\xFB",
      "%Fb": "\xFB",
      "%fB": "\xFB",
      "%FB": "\xFB",
      "%fc": "\xFC",
      "%Fc": "\xFC",
      "%fC": "\xFC",
      "%FC": "\xFC",
      "%fd": "\xFD",
      "%Fd": "\xFD",
      "%fD": "\xFD",
      "%FD": "\xFD",
      "%fe": "\xFE",
      "%Fe": "\xFE",
      "%fE": "\xFE",
      "%FE": "\xFE",
      "%ff": "\xFF",
      "%Ff": "\xFF",
      "%fF": "\xFF",
      "%FF": "\xFF"
    };
    function encodedReplacer(match3) {
      return EncodedLookup[match3];
    }
    __name(encodedReplacer, "encodedReplacer");
    var STATE_KEY = 0;
    var STATE_VALUE = 1;
    var STATE_CHARSET = 2;
    var STATE_LANG = 3;
    function parseParams(str) {
      const res = [];
      let state3 = STATE_KEY;
      let charset = "";
      let inquote = false;
      let escaping = false;
      let p3 = 0;
      let tmp = "";
      const len = str.length;
      for (var i3 = 0; i3 < len; ++i3) {
        const char = str[i3];
        if (char === "\\" && inquote) {
          if (escaping) {
            escaping = false;
          } else {
            escaping = true;
            continue;
          }
        } else if (char === '"') {
          if (!escaping) {
            if (inquote) {
              inquote = false;
              state3 = STATE_KEY;
            } else {
              inquote = true;
            }
            continue;
          } else {
            escaping = false;
          }
        } else {
          if (escaping && inquote) {
            tmp += "\\";
          }
          escaping = false;
          if ((state3 === STATE_CHARSET || state3 === STATE_LANG) && char === "'") {
            if (state3 === STATE_CHARSET) {
              state3 = STATE_LANG;
              charset = tmp.substring(1);
            } else {
              state3 = STATE_VALUE;
            }
            tmp = "";
            continue;
          } else if (state3 === STATE_KEY && (char === "*" || char === "=") && res.length) {
            state3 = char === "*" ? STATE_CHARSET : STATE_VALUE;
            res[p3] = [tmp, void 0];
            tmp = "";
            continue;
          } else if (!inquote && char === ";") {
            state3 = STATE_KEY;
            if (charset) {
              if (tmp.length) {
                tmp = decodeText(
                  tmp.replace(RE_ENCODED, encodedReplacer),
                  "binary",
                  charset
                );
              }
              charset = "";
            } else if (tmp.length) {
              tmp = decodeText(tmp, "binary", "utf8");
            }
            if (res[p3] === void 0) {
              res[p3] = tmp;
            } else {
              res[p3][1] = tmp;
            }
            tmp = "";
            ++p3;
            continue;
          } else if (!inquote && (char === " " || char === "	")) {
            continue;
          }
        }
        tmp += char;
      }
      if (charset && tmp.length) {
        tmp = decodeText(
          tmp.replace(RE_ENCODED, encodedReplacer),
          "binary",
          charset
        );
      } else if (tmp) {
        tmp = decodeText(tmp, "binary", "utf8");
      }
      if (res[p3] === void 0) {
        if (tmp) {
          res[p3] = tmp;
        }
      } else {
        res[p3][1] = tmp;
      }
      return res;
    }
    __name(parseParams, "parseParams");
    module.exports = parseParams;
  }
});

// node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/basename.js"(exports2, module) {
    "use strict";
    module.exports = /* @__PURE__ */ __name(function basename2(path14) {
      if (typeof path14 !== "string") {
        return "";
      }
      for (var i3 = path14.length - 1; i3 >= 0; --i3) {
        switch (path14.charCodeAt(i3)) {
          case 47:
          // '/'
          case 92:
            path14 = path14.slice(i3 + 1);
            return path14 === ".." || path14 === "." ? "" : path14;
        }
      }
      return path14 === ".." || path14 === "." ? "" : path14;
    }, "basename");
  }
});

// node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS({
  "node_modules/@fastify/busboy/lib/types/multipart.js"(exports2, module) {
    "use strict";
    var { Readable: Readable5 } = __require("node:stream");
    var { inherits } = __require("node:util");
    var Dicer = require_Dicer();
    var parseParams = require_parseParams();
    var decodeText = require_decodeText();
    var basename2 = require_basename();
    var getLimit = require_getLimit();
    var RE_BOUNDARY = /^boundary$/i;
    var RE_FIELD = /^form-data$/i;
    var RE_CHARSET = /^charset$/i;
    var RE_FILENAME = /^filename$/i;
    var RE_NAME = /^name$/i;
    Multipart.detect = /^multipart\/form-data/i;
    function Multipart(boy, cfg) {
      let i3;
      let len;
      const self2 = this;
      let boundary;
      const limits = cfg.limits;
      const isPartAFile = cfg.isPartAFile || ((fieldName, contentType2, fileName) => contentType2 === "application/octet-stream" || fileName !== void 0);
      const parsedConType = cfg.parsedConType || [];
      const defCharset = cfg.defCharset || "utf8";
      const preservePath = cfg.preservePath;
      const fileOpts = { highWaterMark: cfg.fileHwm };
      for (i3 = 0, len = parsedConType.length; i3 < len; ++i3) {
        if (Array.isArray(parsedConType[i3]) && RE_BOUNDARY.test(parsedConType[i3][0])) {
          boundary = parsedConType[i3][1];
          break;
        }
      }
      function checkFinished() {
        if (nends === 0 && finished && !boy._done) {
          finished = false;
          self2.end();
        }
      }
      __name(checkFinished, "checkFinished");
      if (typeof boundary !== "string") {
        throw new Error("Multipart: Boundary not found");
      }
      const fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      const fileSizeLimit = getLimit(limits, "fileSize", Infinity);
      const filesLimit = getLimit(limits, "files", Infinity);
      const fieldsLimit = getLimit(limits, "fields", Infinity);
      const partsLimit = getLimit(limits, "parts", Infinity);
      const headerPairsLimit = getLimit(limits, "headerPairs", 2e3);
      const headerSizeLimit = getLimit(limits, "headerSize", 80 * 1024);
      let nfiles = 0;
      let nfields = 0;
      let nends = 0;
      let curFile;
      let curField;
      let finished = false;
      this._needDrain = false;
      this._pause = false;
      this._cb = void 0;
      this._nparts = 0;
      this._boy = boy;
      const parserCfg = {
        boundary,
        maxHeaderPairs: headerPairsLimit,
        maxHeaderSize: headerSizeLimit,
        partHwm: fileOpts.highWaterMark,
        highWaterMark: cfg.highWaterMark
      };
      this.parser = new Dicer(parserCfg);
      this.parser.on("drain", function() {
        self2._needDrain = false;
        if (self2._cb && !self2._pause) {
          const cb = self2._cb;
          self2._cb = void 0;
          cb();
        }
      }).on("part", /* @__PURE__ */ __name(function onPart(part) {
        if (++self2._nparts > partsLimit) {
          self2.parser.removeListener("part", onPart);
          self2.parser.on("part", skipPart);
          boy.hitPartsLimit = true;
          boy.emit("partsLimit");
          return skipPart(part);
        }
        if (curField) {
          const field = curField;
          field.emit("end");
          field.removeAllListeners("end");
        }
        part.on("header", function(header) {
          let contype;
          let fieldname;
          let parsed;
          let charset;
          let encoding;
          let filename;
          let nsize = 0;
          if (header["content-type"]) {
            parsed = parseParams(header["content-type"][0]);
            if (parsed[0]) {
              contype = parsed[0].toLowerCase();
              for (i3 = 0, len = parsed.length; i3 < len; ++i3) {
                if (RE_CHARSET.test(parsed[i3][0])) {
                  charset = parsed[i3][1].toLowerCase();
                  break;
                }
              }
            }
          }
          if (contype === void 0) {
            contype = "text/plain";
          }
          if (charset === void 0) {
            charset = defCharset;
          }
          if (header["content-disposition"]) {
            parsed = parseParams(header["content-disposition"][0]);
            if (!RE_FIELD.test(parsed[0])) {
              return skipPart(part);
            }
            for (i3 = 0, len = parsed.length; i3 < len; ++i3) {
              if (RE_NAME.test(parsed[i3][0])) {
                fieldname = parsed[i3][1];
              } else if (RE_FILENAME.test(parsed[i3][0])) {
                filename = parsed[i3][1];
                if (!preservePath) {
                  filename = basename2(filename);
                }
              }
            }
          } else {
            return skipPart(part);
          }
          if (header["content-transfer-encoding"]) {
            encoding = header["content-transfer-encoding"][0].toLowerCase();
          } else {
            encoding = "7bit";
          }
          let onData, onEnd;
          if (isPartAFile(fieldname, contype, filename)) {
            if (nfiles === filesLimit) {
              if (!boy.hitFilesLimit) {
                boy.hitFilesLimit = true;
                boy.emit("filesLimit");
              }
              return skipPart(part);
            }
            ++nfiles;
            if (boy.listenerCount("file") === 0) {
              self2.parser._ignore();
              return;
            }
            ++nends;
            const file = new FileStream(fileOpts);
            curFile = file;
            file.on("end", function() {
              --nends;
              self2._pause = false;
              checkFinished();
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            });
            file._read = function(n3) {
              if (!self2._pause) {
                return;
              }
              self2._pause = false;
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            };
            boy.emit("file", fieldname, file, filename, encoding, contype);
            onData = /* @__PURE__ */ __name(function(data) {
              if ((nsize += data.length) > fileSizeLimit) {
                const extralen = fileSizeLimit - nsize + data.length;
                if (extralen > 0) {
                  file.push(data.slice(0, extralen));
                }
                file.truncated = true;
                file.bytesRead = fileSizeLimit;
                part.removeAllListeners("data");
                file.emit("limit");
                return;
              } else if (!file.push(data)) {
                self2._pause = true;
              }
              file.bytesRead = nsize;
            }, "onData");
            onEnd = /* @__PURE__ */ __name(function() {
              curFile = void 0;
              file.push(null);
            }, "onEnd");
          } else {
            if (nfields === fieldsLimit) {
              if (!boy.hitFieldsLimit) {
                boy.hitFieldsLimit = true;
                boy.emit("fieldsLimit");
              }
              return skipPart(part);
            }
            ++nfields;
            ++nends;
            let buffer2 = "";
            let truncated = false;
            curField = part;
            onData = /* @__PURE__ */ __name(function(data) {
              if ((nsize += data.length) > fieldSizeLimit) {
                const extralen = fieldSizeLimit - (nsize - data.length);
                buffer2 += data.toString("binary", 0, extralen);
                truncated = true;
                part.removeAllListeners("data");
              } else {
                buffer2 += data.toString("binary");
              }
            }, "onData");
            onEnd = /* @__PURE__ */ __name(function() {
              curField = void 0;
              if (buffer2.length) {
                buffer2 = decodeText(buffer2, "binary", charset);
              }
              boy.emit("field", fieldname, buffer2, false, truncated, encoding, contype);
              --nends;
              checkFinished();
            }, "onEnd");
          }
          part._readableState.sync = false;
          part.on("data", onData);
          part.on("end", onEnd);
        }).on("error", function(err) {
          if (curFile) {
            curFile.emit("error", err);
          }
        });
      }, "onPart")).on("error", function(err) {
        boy.emit("error", err);
      }).on("finish", function() {
        finished = true;
        checkFinished();
      });
    }
    __name(Multipart, "Multipart");
    Multipart.prototype.write = function(chunk, cb) {
      const r3 = this.parser.write(chunk);
      if (r3 && !this._pause) {
        cb();
      } else {
        this._needDrain = !r3;
        this._cb = cb;
      }
    };
    Multipart.prototype.end = function() {
      const self2 = this;
      if (self2.parser.writable) {
        self2.parser.end();
      } else if (!self2._boy._done) {
        process.nextTick(function() {
          self2._boy._done = true;
          self2._boy.emit("finish");
        });
      }
    };
    function skipPart(part) {
      part.resume();
    }
    __name(skipPart, "skipPart");
    function FileStream(opts) {
      Readable5.call(this, opts);
      this.bytesRead = 0;
      this.truncated = false;
    }
    __name(FileStream, "FileStream");
    inherits(FileStream, Readable5);
    FileStream.prototype._read = function(n3) {
    };
    module.exports = Multipart;
  }
});

// node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/Decoder.js"(exports2, module) {
    "use strict";
    var RE_PLUS = /\+/g;
    var HEX = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ];
    function Decoder() {
      this.buffer = void 0;
    }
    __name(Decoder, "Decoder");
    Decoder.prototype.write = function(str) {
      str = str.replace(RE_PLUS, " ");
      let res = "";
      let i3 = 0;
      let p3 = 0;
      const len = str.length;
      for (; i3 < len; ++i3) {
        if (this.buffer !== void 0) {
          if (!HEX[str.charCodeAt(i3)]) {
            res += "%" + this.buffer;
            this.buffer = void 0;
            --i3;
          } else {
            this.buffer += str[i3];
            ++p3;
            if (this.buffer.length === 2) {
              res += String.fromCharCode(parseInt(this.buffer, 16));
              this.buffer = void 0;
            }
          }
        } else if (str[i3] === "%") {
          if (i3 > p3) {
            res += str.substring(p3, i3);
            p3 = i3;
          }
          this.buffer = "";
          ++p3;
        }
      }
      if (p3 < len && this.buffer === void 0) {
        res += str.substring(p3);
      }
      return res;
    };
    Decoder.prototype.reset = function() {
      this.buffer = void 0;
    };
    module.exports = Decoder;
  }
});

// node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS({
  "node_modules/@fastify/busboy/lib/types/urlencoded.js"(exports2, module) {
    "use strict";
    var Decoder = require_Decoder();
    var decodeText = require_decodeText();
    var getLimit = require_getLimit();
    var RE_CHARSET = /^charset$/i;
    UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
    function UrlEncoded(boy, cfg) {
      const limits = cfg.limits;
      const parsedConType = cfg.parsedConType;
      this.boy = boy;
      this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
      this.fieldsLimit = getLimit(limits, "fields", Infinity);
      let charset;
      for (var i3 = 0, len = parsedConType.length; i3 < len; ++i3) {
        if (Array.isArray(parsedConType[i3]) && RE_CHARSET.test(parsedConType[i3][0])) {
          charset = parsedConType[i3][1].toLowerCase();
          break;
        }
      }
      if (charset === void 0) {
        charset = cfg.defCharset || "utf8";
      }
      this.decoder = new Decoder();
      this.charset = charset;
      this._fields = 0;
      this._state = "key";
      this._checkingBytes = true;
      this._bytesKey = 0;
      this._bytesVal = 0;
      this._key = "";
      this._val = "";
      this._keyTrunc = false;
      this._valTrunc = false;
      this._hitLimit = false;
    }
    __name(UrlEncoded, "UrlEncoded");
    UrlEncoded.prototype.write = function(data, cb) {
      if (this._fields === this.fieldsLimit) {
        if (!this.boy.hitFieldsLimit) {
          this.boy.hitFieldsLimit = true;
          this.boy.emit("fieldsLimit");
        }
        return cb();
      }
      let idxeq;
      let idxamp;
      let i3;
      let p3 = 0;
      const len = data.length;
      while (p3 < len) {
        if (this._state === "key") {
          idxeq = idxamp = void 0;
          for (i3 = p3; i3 < len; ++i3) {
            if (!this._checkingBytes) {
              ++p3;
            }
            if (data[i3] === 61) {
              idxeq = i3;
              break;
            } else if (data[i3] === 38) {
              idxamp = i3;
              break;
            }
            if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesKey;
            }
          }
          if (idxeq !== void 0) {
            if (idxeq > p3) {
              this._key += this.decoder.write(data.toString("binary", p3, idxeq));
            }
            this._state = "val";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._val = "";
            this._bytesVal = 0;
            this._valTrunc = false;
            this.decoder.reset();
            p3 = idxeq + 1;
          } else if (idxamp !== void 0) {
            ++this._fields;
            let key;
            const keyTrunc = this._keyTrunc;
            if (idxamp > p3) {
              key = this._key += this.decoder.write(data.toString("binary", p3, idxamp));
            } else {
              key = this._key;
            }
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            if (key.length) {
              this.boy.emit(
                "field",
                decodeText(key, "binary", this.charset),
                "",
                keyTrunc,
                false
              );
            }
            p3 = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i3 > p3) {
              this._key += this.decoder.write(data.toString("binary", p3, i3));
            }
            p3 = i3;
            if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
              this._checkingBytes = false;
              this._keyTrunc = true;
            }
          } else {
            if (p3 < len) {
              this._key += this.decoder.write(data.toString("binary", p3));
            }
            p3 = len;
          }
        } else {
          idxamp = void 0;
          for (i3 = p3; i3 < len; ++i3) {
            if (!this._checkingBytes) {
              ++p3;
            }
            if (data[i3] === 38) {
              idxamp = i3;
              break;
            }
            if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesVal;
            }
          }
          if (idxamp !== void 0) {
            ++this._fields;
            if (idxamp > p3) {
              this._val += this.decoder.write(data.toString("binary", p3, idxamp));
            }
            this.boy.emit(
              "field",
              decodeText(this._key, "binary", this.charset),
              decodeText(this._val, "binary", this.charset),
              this._keyTrunc,
              this._valTrunc
            );
            this._state = "key";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            p3 = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i3 > p3) {
              this._val += this.decoder.write(data.toString("binary", p3, i3));
            }
            p3 = i3;
            if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
              this._checkingBytes = false;
              this._valTrunc = true;
            }
          } else {
            if (p3 < len) {
              this._val += this.decoder.write(data.toString("binary", p3));
            }
            p3 = len;
          }
        }
      }
      cb();
    };
    UrlEncoded.prototype.end = function() {
      if (this.boy._done) {
        return;
      }
      if (this._state === "key" && this._key.length > 0) {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          "",
          this._keyTrunc,
          false
        );
      } else if (this._state === "val") {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          decodeText(this._val, "binary", this.charset),
          this._keyTrunc,
          this._valTrunc
        );
      }
      this.boy._done = true;
      this.boy.emit("finish");
    };
    module.exports = UrlEncoded;
  }
});

// node_modules/@fastify/busboy/lib/main.js
var require_main = __commonJS({
  "node_modules/@fastify/busboy/lib/main.js"(exports2, module) {
    "use strict";
    var WritableStream = __require("node:stream").Writable;
    var { inherits } = __require("node:util");
    var Dicer = require_Dicer();
    var MultipartParser = require_multipart();
    var UrlencodedParser = require_urlencoded();
    var parseParams = require_parseParams();
    function Busboy(opts) {
      if (!(this instanceof Busboy)) {
        return new Busboy(opts);
      }
      if (typeof opts !== "object") {
        throw new TypeError("Busboy expected an options-Object.");
      }
      if (typeof opts.headers !== "object") {
        throw new TypeError("Busboy expected an options-Object with headers-attribute.");
      }
      if (typeof opts.headers["content-type"] !== "string") {
        throw new TypeError("Missing Content-Type-header.");
      }
      const {
        headers,
        ...streamOptions
      } = opts;
      this.opts = {
        autoDestroy: false,
        ...streamOptions
      };
      WritableStream.call(this, this.opts);
      this._done = false;
      this._parser = this.getParserByHeaders(headers);
      this._finished = false;
    }
    __name(Busboy, "Busboy");
    inherits(Busboy, WritableStream);
    Busboy.prototype.emit = function(ev) {
      if (ev === "finish") {
        if (!this._done) {
          this._parser?.end();
          return;
        } else if (this._finished) {
          return;
        }
        this._finished = true;
      }
      WritableStream.prototype.emit.apply(this, arguments);
    };
    Busboy.prototype.getParserByHeaders = function(headers) {
      const parsed = parseParams(headers["content-type"]);
      const cfg = {
        defCharset: this.opts.defCharset,
        fileHwm: this.opts.fileHwm,
        headers,
        highWaterMark: this.opts.highWaterMark,
        isPartAFile: this.opts.isPartAFile,
        limits: this.opts.limits,
        parsedConType: parsed,
        preservePath: this.opts.preservePath
      };
      if (MultipartParser.detect.test(parsed[0])) {
        return new MultipartParser(this, cfg);
      }
      if (UrlencodedParser.detect.test(parsed[0])) {
        return new UrlencodedParser(this, cfg);
      }
      throw new Error("Unsupported Content-Type.");
    };
    Busboy.prototype._write = function(chunk, encoding, cb) {
      this._parser.write(chunk, cb);
    };
    module.exports = Busboy;
    module.exports.default = Busboy;
    module.exports.Busboy = Busboy;
    module.exports.Dicer = Dicer;
  }
});

// node_modules/undici/lib/fetch/constants.js
var require_constants2 = __commonJS({
  "node_modules/undici/lib/fetch/constants.js"(exports2, module) {
    "use strict";
    var { MessageChannel, receiveMessageOnPort } = __require("worker_threads");
    var corsSafeListedMethods = ["GET", "HEAD", "POST"];
    var corsSafeListedMethodsSet = new Set(corsSafeListedMethods);
    var nullBodyStatus = [101, 204, 205, 304];
    var redirectStatus = [301, 302, 303, 307, 308];
    var redirectStatusSet = new Set(redirectStatus);
    var badPorts = [
      "1",
      "7",
      "9",
      "11",
      "13",
      "15",
      "17",
      "19",
      "20",
      "21",
      "22",
      "23",
      "25",
      "37",
      "42",
      "43",
      "53",
      "69",
      "77",
      "79",
      "87",
      "95",
      "101",
      "102",
      "103",
      "104",
      "109",
      "110",
      "111",
      "113",
      "115",
      "117",
      "119",
      "123",
      "135",
      "137",
      "139",
      "143",
      "161",
      "179",
      "389",
      "427",
      "465",
      "512",
      "513",
      "514",
      "515",
      "526",
      "530",
      "531",
      "532",
      "540",
      "548",
      "554",
      "556",
      "563",
      "587",
      "601",
      "636",
      "989",
      "990",
      "993",
      "995",
      "1719",
      "1720",
      "1723",
      "2049",
      "3659",
      "4045",
      "5060",
      "5061",
      "6000",
      "6566",
      "6665",
      "6666",
      "6667",
      "6668",
      "6669",
      "6697",
      "10080"
    ];
    var badPortsSet = new Set(badPorts);
    var referrerPolicy = [
      "",
      "no-referrer",
      "no-referrer-when-downgrade",
      "same-origin",
      "origin",
      "strict-origin",
      "origin-when-cross-origin",
      "strict-origin-when-cross-origin",
      "unsafe-url"
    ];
    var referrerPolicySet = new Set(referrerPolicy);
    var requestRedirect = ["follow", "manual", "error"];
    var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
    var safeMethodsSet = new Set(safeMethods);
    var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
    var requestCredentials = ["omit", "same-origin", "include"];
    var requestCache = [
      "default",
      "no-store",
      "reload",
      "no-cache",
      "force-cache",
      "only-if-cached"
    ];
    var requestBodyHeader = [
      "content-encoding",
      "content-language",
      "content-location",
      "content-type",
      // See https://github.com/nodejs/undici/issues/2021
      // 'Content-Length' is a forbidden header name, which is typically
      // removed in the Headers implementation. However, undici doesn't
      // filter out headers, so we add it here.
      "content-length"
    ];
    var requestDuplex = [
      "half"
    ];
    var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
    var forbiddenMethodsSet = new Set(forbiddenMethods);
    var subresource = [
      "audio",
      "audioworklet",
      "font",
      "image",
      "manifest",
      "paintworklet",
      "script",
      "style",
      "track",
      "video",
      "xslt",
      ""
    ];
    var subresourceSet = new Set(subresource);
    var DOMException2 = globalThis.DOMException ?? (() => {
      try {
        atob("~");
      } catch (err) {
        return Object.getPrototypeOf(err).constructor;
      }
    })();
    var channel;
    var structuredClone2 = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
    // structuredClone was added in v17.0.0, but fetch supports v16.8
    /* @__PURE__ */ __name(function structuredClone3(value, options = void 0) {
      if (arguments.length === 0) {
        throw new TypeError("missing argument");
      }
      if (!channel) {
        channel = new MessageChannel();
      }
      channel.port1.unref();
      channel.port2.unref();
      channel.port1.postMessage(value, options?.transfer);
      return receiveMessageOnPort(channel.port2).message;
    }, "structuredClone");
    module.exports = {
      DOMException: DOMException2,
      structuredClone: structuredClone2,
      subresource,
      forbiddenMethods,
      requestBodyHeader,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      redirectStatus,
      corsSafeListedMethods,
      nullBodyStatus,
      safeMethods,
      badPorts,
      requestDuplex,
      subresourceSet,
      badPortsSet,
      redirectStatusSet,
      corsSafeListedMethodsSet,
      safeMethodsSet,
      forbiddenMethodsSet,
      referrerPolicySet
    };
  }
});

// node_modules/undici/lib/fetch/global.js
var require_global = __commonJS({
  "node_modules/undici/lib/fetch/global.js"(exports2, module) {
    "use strict";
    var globalOrigin = Symbol.for("undici.globalOrigin.1");
    function getGlobalOrigin() {
      return globalThis[globalOrigin];
    }
    __name(getGlobalOrigin, "getGlobalOrigin");
    function setGlobalOrigin(newOrigin) {
      if (newOrigin === void 0) {
        Object.defineProperty(globalThis, globalOrigin, {
          value: void 0,
          writable: true,
          enumerable: false,
          configurable: false
        });
        return;
      }
      const parsedURL = new URL(newOrigin);
      if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {
        throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
      }
      Object.defineProperty(globalThis, globalOrigin, {
        value: parsedURL,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    __name(setGlobalOrigin, "setGlobalOrigin");
    module.exports = {
      getGlobalOrigin,
      setGlobalOrigin
    };
  }
});

// node_modules/undici/lib/fetch/util.js
var require_util2 = __commonJS({
  "node_modules/undici/lib/fetch/util.js"(exports2, module) {
    "use strict";
    var { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants2();
    var { getGlobalOrigin } = require_global();
    var { performance: performance2 } = __require("perf_hooks");
    var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util();
    var assert2 = __require("assert");
    var { isUint8Array } = __require("util/types");
    var supportedHashes = [];
    var crypto;
    try {
      crypto = __require("crypto");
      const possibleRelevantHashes = ["sha256", "sha384", "sha512"];
      supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
    } catch {
    }
    function responseURL(response) {
      const urlList = response.urlList;
      const length = urlList.length;
      return length === 0 ? null : urlList[length - 1].toString();
    }
    __name(responseURL, "responseURL");
    function responseLocationURL(response, requestFragment) {
      if (!redirectStatusSet.has(response.status)) {
        return null;
      }
      let location = response.headersList.get("location");
      if (location !== null && isValidHeaderValue(location)) {
        location = new URL(location, responseURL(response));
      }
      if (location && !location.hash) {
        location.hash = requestFragment;
      }
      return location;
    }
    __name(responseLocationURL, "responseLocationURL");
    function requestCurrentURL(request3) {
      return request3.urlList[request3.urlList.length - 1];
    }
    __name(requestCurrentURL, "requestCurrentURL");
    function requestBadPort(request3) {
      const url2 = requestCurrentURL(request3);
      if (urlIsHttpHttpsScheme(url2) && badPortsSet.has(url2.port)) {
        return "blocked";
      }
      return "allowed";
    }
    __name(requestBadPort, "requestBadPort");
    function isErrorLike(object) {
      return object instanceof Error || (object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException");
    }
    __name(isErrorLike, "isErrorLike");
    function isValidReasonPhrase(statusText) {
      for (let i3 = 0; i3 < statusText.length; ++i3) {
        const c3 = statusText.charCodeAt(i3);
        if (!(c3 === 9 || // HTAB
        c3 >= 32 && c3 <= 126 || // SP / VCHAR
        c3 >= 128 && c3 <= 255)) {
          return false;
        }
      }
      return true;
    }
    __name(isValidReasonPhrase, "isValidReasonPhrase");
    function isTokenCharCode(c3) {
      switch (c3) {
        case 34:
        case 40:
        case 41:
        case 44:
        case 47:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 91:
        case 92:
        case 93:
        case 123:
        case 125:
          return false;
        default:
          return c3 >= 33 && c3 <= 126;
      }
    }
    __name(isTokenCharCode, "isTokenCharCode");
    function isValidHTTPToken(characters) {
      if (characters.length === 0) {
        return false;
      }
      for (let i3 = 0; i3 < characters.length; ++i3) {
        if (!isTokenCharCode(characters.charCodeAt(i3))) {
          return false;
        }
      }
      return true;
    }
    __name(isValidHTTPToken, "isValidHTTPToken");
    function isValidHeaderName(potentialValue) {
      return isValidHTTPToken(potentialValue);
    }
    __name(isValidHeaderName, "isValidHeaderName");
    function isValidHeaderValue(potentialValue) {
      if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) {
        return false;
      }
      if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) {
        return false;
      }
      return true;
    }
    __name(isValidHeaderValue, "isValidHeaderValue");
    function setRequestReferrerPolicyOnRedirect(request3, actualResponse) {
      const { headersList } = actualResponse;
      const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
      let policy = "";
      if (policyHeader.length > 0) {
        for (let i3 = policyHeader.length; i3 !== 0; i3--) {
          const token = policyHeader[i3 - 1].trim();
          if (referrerPolicyTokens.has(token)) {
            policy = token;
            break;
          }
        }
      }
      if (policy !== "") {
        request3.referrerPolicy = policy;
      }
    }
    __name(setRequestReferrerPolicyOnRedirect, "setRequestReferrerPolicyOnRedirect");
    function crossOriginResourcePolicyCheck() {
      return "allowed";
    }
    __name(crossOriginResourcePolicyCheck, "crossOriginResourcePolicyCheck");
    function corsCheck() {
      return "success";
    }
    __name(corsCheck, "corsCheck");
    function TAOCheck() {
      return "success";
    }
    __name(TAOCheck, "TAOCheck");
    function appendFetchMetadata(httpRequest) {
      let header = null;
      header = httpRequest.mode;
      httpRequest.headersList.set("sec-fetch-mode", header);
    }
    __name(appendFetchMetadata, "appendFetchMetadata");
    function appendRequestOriginHeader(request3) {
      let serializedOrigin = request3.origin;
      if (request3.responseTainting === "cors" || request3.mode === "websocket") {
        if (serializedOrigin) {
          request3.headersList.append("origin", serializedOrigin);
        }
      } else if (request3.method !== "GET" && request3.method !== "HEAD") {
        switch (request3.referrerPolicy) {
          case "no-referrer":
            serializedOrigin = null;
            break;
          case "no-referrer-when-downgrade":
          case "strict-origin":
          case "strict-origin-when-cross-origin":
            if (request3.origin && urlHasHttpsScheme(request3.origin) && !urlHasHttpsScheme(requestCurrentURL(request3))) {
              serializedOrigin = null;
            }
            break;
          case "same-origin":
            if (!sameOrigin(request3, requestCurrentURL(request3))) {
              serializedOrigin = null;
            }
            break;
          default:
        }
        if (serializedOrigin) {
          request3.headersList.append("origin", serializedOrigin);
        }
      }
    }
    __name(appendRequestOriginHeader, "appendRequestOriginHeader");
    function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
      return performance2.now();
    }
    __name(coarsenedSharedCurrentTime, "coarsenedSharedCurrentTime");
    function createOpaqueTimingInfo(timingInfo) {
      return {
        startTime: timingInfo.startTime ?? 0,
        redirectStartTime: 0,
        redirectEndTime: 0,
        postRedirectStartTime: timingInfo.startTime ?? 0,
        finalServiceWorkerStartTime: 0,
        finalNetworkResponseStartTime: 0,
        finalNetworkRequestStartTime: 0,
        endTime: 0,
        encodedBodySize: 0,
        decodedBodySize: 0,
        finalConnectionTimingInfo: null
      };
    }
    __name(createOpaqueTimingInfo, "createOpaqueTimingInfo");
    function makePolicyContainer() {
      return {
        referrerPolicy: "strict-origin-when-cross-origin"
      };
    }
    __name(makePolicyContainer, "makePolicyContainer");
    function clonePolicyContainer(policyContainer) {
      return {
        referrerPolicy: policyContainer.referrerPolicy
      };
    }
    __name(clonePolicyContainer, "clonePolicyContainer");
    function determineRequestsReferrer(request3) {
      const policy = request3.referrerPolicy;
      assert2(policy);
      let referrerSource = null;
      if (request3.referrer === "client") {
        const globalOrigin = getGlobalOrigin();
        if (!globalOrigin || globalOrigin.origin === "null") {
          return "no-referrer";
        }
        referrerSource = new URL(globalOrigin);
      } else if (request3.referrer instanceof URL) {
        referrerSource = request3.referrer;
      }
      let referrerURL = stripURLForReferrer(referrerSource);
      const referrerOrigin = stripURLForReferrer(referrerSource, true);
      if (referrerURL.toString().length > 4096) {
        referrerURL = referrerOrigin;
      }
      const areSameOrigin = sameOrigin(request3, referrerURL);
      const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request3.url);
      switch (policy) {
        case "origin":
          return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
        case "unsafe-url":
          return referrerURL;
        case "same-origin":
          return areSameOrigin ? referrerOrigin : "no-referrer";
        case "origin-when-cross-origin":
          return areSameOrigin ? referrerURL : referrerOrigin;
        case "strict-origin-when-cross-origin": {
          const currentURL = requestCurrentURL(request3);
          if (sameOrigin(referrerURL, currentURL)) {
            return referrerURL;
          }
          if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
            return "no-referrer";
          }
          return referrerOrigin;
        }
        case "strict-origin":
        // eslint-disable-line
        /**
           * 1. If referrerURL is a potentially trustworthy URL and
           * request’s current URL is not a potentially trustworthy URL,
           * then return no referrer.
           * 2. Return referrerOrigin
          */
        case "no-referrer-when-downgrade":
        // eslint-disable-line
        /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
        */
        default:
          return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
      }
    }
    __name(determineRequestsReferrer, "determineRequestsReferrer");
    function stripURLForReferrer(url2, originOnly) {
      assert2(url2 instanceof URL);
      if (url2.protocol === "file:" || url2.protocol === "about:" || url2.protocol === "blank:") {
        return "no-referrer";
      }
      url2.username = "";
      url2.password = "";
      url2.hash = "";
      if (originOnly) {
        url2.pathname = "";
        url2.search = "";
      }
      return url2;
    }
    __name(stripURLForReferrer, "stripURLForReferrer");
    function isURLPotentiallyTrustworthy(url2) {
      if (!(url2 instanceof URL)) {
        return false;
      }
      if (url2.href === "about:blank" || url2.href === "about:srcdoc") {
        return true;
      }
      if (url2.protocol === "data:") return true;
      if (url2.protocol === "file:") return true;
      return isOriginPotentiallyTrustworthy(url2.origin);
      function isOriginPotentiallyTrustworthy(origin) {
        if (origin == null || origin === "null") return false;
        const originAsURL = new URL(origin);
        if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") {
          return true;
        }
        if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || (originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.")) || originAsURL.hostname.endsWith(".localhost")) {
          return true;
        }
        return false;
      }
      __name(isOriginPotentiallyTrustworthy, "isOriginPotentiallyTrustworthy");
    }
    __name(isURLPotentiallyTrustworthy, "isURLPotentiallyTrustworthy");
    function bytesMatch(bytes, metadataList) {
      if (crypto === void 0) {
        return true;
      }
      const parsedMetadata = parseMetadata(metadataList);
      if (parsedMetadata === "no metadata") {
        return true;
      }
      if (parsedMetadata.length === 0) {
        return true;
      }
      const strongest = getStrongestMetadata(parsedMetadata);
      const metadata3 = filterMetadataListByAlgorithm(parsedMetadata, strongest);
      for (const item of metadata3) {
        const algorithm = item.algo;
        const expectedValue = item.hash;
        let actualValue = crypto.createHash(algorithm).update(bytes).digest("base64");
        if (actualValue[actualValue.length - 1] === "=") {
          if (actualValue[actualValue.length - 2] === "=") {
            actualValue = actualValue.slice(0, -2);
          } else {
            actualValue = actualValue.slice(0, -1);
          }
        }
        if (compareBase64Mixed(actualValue, expectedValue)) {
          return true;
        }
      }
      return false;
    }
    __name(bytesMatch, "bytesMatch");
    var parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
    function parseMetadata(metadata3) {
      const result = [];
      let empty = true;
      for (const token of metadata3.split(" ")) {
        empty = false;
        const parsedToken = parseHashWithOptions.exec(token);
        if (parsedToken === null || parsedToken.groups === void 0 || parsedToken.groups.algo === void 0) {
          continue;
        }
        const algorithm = parsedToken.groups.algo.toLowerCase();
        if (supportedHashes.includes(algorithm)) {
          result.push(parsedToken.groups);
        }
      }
      if (empty === true) {
        return "no metadata";
      }
      return result;
    }
    __name(parseMetadata, "parseMetadata");
    function getStrongestMetadata(metadataList) {
      let algorithm = metadataList[0].algo;
      if (algorithm[3] === "5") {
        return algorithm;
      }
      for (let i3 = 1; i3 < metadataList.length; ++i3) {
        const metadata3 = metadataList[i3];
        if (metadata3.algo[3] === "5") {
          algorithm = "sha512";
          break;
        } else if (algorithm[3] === "3") {
          continue;
        } else if (metadata3.algo[3] === "3") {
          algorithm = "sha384";
        }
      }
      return algorithm;
    }
    __name(getStrongestMetadata, "getStrongestMetadata");
    function filterMetadataListByAlgorithm(metadataList, algorithm) {
      if (metadataList.length === 1) {
        return metadataList;
      }
      let pos = 0;
      for (let i3 = 0; i3 < metadataList.length; ++i3) {
        if (metadataList[i3].algo === algorithm) {
          metadataList[pos++] = metadataList[i3];
        }
      }
      metadataList.length = pos;
      return metadataList;
    }
    __name(filterMetadataListByAlgorithm, "filterMetadataListByAlgorithm");
    function compareBase64Mixed(actualValue, expectedValue) {
      if (actualValue.length !== expectedValue.length) {
        return false;
      }
      for (let i3 = 0; i3 < actualValue.length; ++i3) {
        if (actualValue[i3] !== expectedValue[i3]) {
          if (actualValue[i3] === "+" && expectedValue[i3] === "-" || actualValue[i3] === "/" && expectedValue[i3] === "_") {
            continue;
          }
          return false;
        }
      }
      return true;
    }
    __name(compareBase64Mixed, "compareBase64Mixed");
    function tryUpgradeRequestToAPotentiallyTrustworthyURL(request3) {
    }
    __name(tryUpgradeRequestToAPotentiallyTrustworthyURL, "tryUpgradeRequestToAPotentiallyTrustworthyURL");
    function sameOrigin(A3, B3) {
      if (A3.origin === B3.origin && A3.origin === "null") {
        return true;
      }
      if (A3.protocol === B3.protocol && A3.hostname === B3.hostname && A3.port === B3.port) {
        return true;
      }
      return false;
    }
    __name(sameOrigin, "sameOrigin");
    function createDeferredPromise() {
      let res;
      let rej;
      const promise = new Promise((resolve2, reject) => {
        res = resolve2;
        rej = reject;
      });
      return { promise, resolve: res, reject: rej };
    }
    __name(createDeferredPromise, "createDeferredPromise");
    function isAborted(fetchParams) {
      return fetchParams.controller.state === "aborted";
    }
    __name(isAborted, "isAborted");
    function isCancelled(fetchParams) {
      return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
    }
    __name(isCancelled, "isCancelled");
    var normalizeMethodRecord = {
      delete: "DELETE",
      DELETE: "DELETE",
      get: "GET",
      GET: "GET",
      head: "HEAD",
      HEAD: "HEAD",
      options: "OPTIONS",
      OPTIONS: "OPTIONS",
      post: "POST",
      POST: "POST",
      put: "PUT",
      PUT: "PUT"
    };
    Object.setPrototypeOf(normalizeMethodRecord, null);
    function normalizeMethod(method) {
      return normalizeMethodRecord[method.toLowerCase()] ?? method;
    }
    __name(normalizeMethod, "normalizeMethod");
    function serializeJavascriptValueToJSONString(value) {
      const result = JSON.stringify(value);
      if (result === void 0) {
        throw new TypeError("Value is not JSON serializable");
      }
      assert2(typeof result === "string");
      return result;
    }
    __name(serializeJavascriptValueToJSONString, "serializeJavascriptValueToJSONString");
    var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
    function makeIterator(iterator, name2, kind) {
      const object = {
        index: 0,
        kind,
        target: iterator
      };
      const i3 = {
        next() {
          if (Object.getPrototypeOf(this) !== i3) {
            throw new TypeError(
              `'next' called on an object that does not implement interface ${name2} Iterator.`
            );
          }
          const { index: index2, kind: kind2, target } = object;
          const values = target();
          const len = values.length;
          if (index2 >= len) {
            return { value: void 0, done: true };
          }
          const pair = values[index2];
          object.index = index2 + 1;
          return iteratorResult(pair, kind2);
        },
        // The class string of an iterator prototype object for a given interface is the
        // result of concatenating the identifier of the interface and the string " Iterator".
        [Symbol.toStringTag]: `${name2} Iterator`
      };
      Object.setPrototypeOf(i3, esIteratorPrototype);
      return Object.setPrototypeOf({}, i3);
    }
    __name(makeIterator, "makeIterator");
    function iteratorResult(pair, kind) {
      let result;
      switch (kind) {
        case "key": {
          result = pair[0];
          break;
        }
        case "value": {
          result = pair[1];
          break;
        }
        case "key+value": {
          result = pair;
          break;
        }
      }
      return { value: result, done: false };
    }
    __name(iteratorResult, "iteratorResult");
    async function fullyReadBody(body2, processBody, processBodyError) {
      const successSteps = processBody;
      const errorSteps = processBodyError;
      let reader;
      try {
        reader = body2.stream.getReader();
      } catch (e3) {
        errorSteps(e3);
        return;
      }
      try {
        const result = await readAllBytes(reader);
        successSteps(result);
      } catch (e3) {
        errorSteps(e3);
      }
    }
    __name(fullyReadBody, "fullyReadBody");
    var ReadableStream2 = globalThis.ReadableStream;
    function isReadableStreamLike(stream) {
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      return stream instanceof ReadableStream2 || stream[Symbol.toStringTag] === "ReadableStream" && typeof stream.tee === "function";
    }
    __name(isReadableStreamLike, "isReadableStreamLike");
    var MAXIMUM_ARGUMENT_LENGTH = 65535;
    function isomorphicDecode(input) {
      if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
        return String.fromCharCode(...input);
      }
      return input.reduce((previous, current2) => previous + String.fromCharCode(current2), "");
    }
    __name(isomorphicDecode, "isomorphicDecode");
    function readableStreamClose(controller) {
      try {
        controller.close();
      } catch (err) {
        if (!err.message.includes("Controller is already closed")) {
          throw err;
        }
      }
    }
    __name(readableStreamClose, "readableStreamClose");
    function isomorphicEncode(input) {
      for (let i3 = 0; i3 < input.length; i3++) {
        assert2(input.charCodeAt(i3) <= 255);
      }
      return input;
    }
    __name(isomorphicEncode, "isomorphicEncode");
    async function readAllBytes(reader) {
      const bytes = [];
      let byteLength = 0;
      while (true) {
        const { done, value: chunk } = await reader.read();
        if (done) {
          return Buffer.concat(bytes, byteLength);
        }
        if (!isUint8Array(chunk)) {
          throw new TypeError("Received non-Uint8Array chunk");
        }
        bytes.push(chunk);
        byteLength += chunk.length;
      }
    }
    __name(readAllBytes, "readAllBytes");
    function urlIsLocal(url2) {
      assert2("protocol" in url2);
      const protocol = url2.protocol;
      return protocol === "about:" || protocol === "blob:" || protocol === "data:";
    }
    __name(urlIsLocal, "urlIsLocal");
    function urlHasHttpsScheme(url2) {
      if (typeof url2 === "string") {
        return url2.startsWith("https:");
      }
      return url2.protocol === "https:";
    }
    __name(urlHasHttpsScheme, "urlHasHttpsScheme");
    function urlIsHttpHttpsScheme(url2) {
      assert2("protocol" in url2);
      const protocol = url2.protocol;
      return protocol === "http:" || protocol === "https:";
    }
    __name(urlIsHttpHttpsScheme, "urlIsHttpHttpsScheme");
    var hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
    module.exports = {
      isAborted,
      isCancelled,
      createDeferredPromise,
      ReadableStreamFrom,
      toUSVString,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      coarsenedSharedCurrentTime,
      determineRequestsReferrer,
      makePolicyContainer,
      clonePolicyContainer,
      appendFetchMetadata,
      appendRequestOriginHeader,
      TAOCheck,
      corsCheck,
      crossOriginResourcePolicyCheck,
      createOpaqueTimingInfo,
      setRequestReferrerPolicyOnRedirect,
      isValidHTTPToken,
      requestBadPort,
      requestCurrentURL,
      responseURL,
      responseLocationURL,
      isBlobLike,
      isURLPotentiallyTrustworthy,
      isValidReasonPhrase,
      sameOrigin,
      normalizeMethod,
      serializeJavascriptValueToJSONString,
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue,
      hasOwn,
      isErrorLike,
      fullyReadBody,
      bytesMatch,
      isReadableStreamLike,
      readableStreamClose,
      isomorphicEncode,
      isomorphicDecode,
      urlIsLocal,
      urlHasHttpsScheme,
      urlIsHttpHttpsScheme,
      readAllBytes,
      normalizeMethodRecord,
      parseMetadata
    };
  }
});

// node_modules/undici/lib/fetch/symbols.js
var require_symbols2 = __commonJS({
  "node_modules/undici/lib/fetch/symbols.js"(exports2, module) {
    "use strict";
    module.exports = {
      kUrl: Symbol("url"),
      kHeaders: Symbol("headers"),
      kSignal: Symbol("signal"),
      kState: Symbol("state"),
      kGuard: Symbol("guard"),
      kRealm: Symbol("realm")
    };
  }
});

// node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS({
  "node_modules/undici/lib/fetch/webidl.js"(exports2, module) {
    "use strict";
    var { types: types2 } = __require("util");
    var { hasOwn, toUSVString } = require_util2();
    var webidl = {};
    webidl.converters = {};
    webidl.util = {};
    webidl.errors = {};
    webidl.errors.exception = function(message) {
      return new TypeError(`${message.header}: ${message.message}`);
    };
    webidl.errors.conversionFailed = function(context) {
      const plural = context.types.length === 1 ? "" : " one of";
      const message = `${context.argument} could not be converted to${plural}: ${context.types.join(", ")}.`;
      return webidl.errors.exception({
        header: context.prefix,
        message
      });
    };
    webidl.errors.invalidArgument = function(context) {
      return webidl.errors.exception({
        header: context.prefix,
        message: `"${context.value}" is an invalid ${context.type}.`
      });
    };
    webidl.brandCheck = function(V2, I3, opts = void 0) {
      if (opts?.strict !== false && !(V2 instanceof I3)) {
        throw new TypeError("Illegal invocation");
      } else {
        return V2?.[Symbol.toStringTag] === I3.prototype[Symbol.toStringTag];
      }
    };
    webidl.argumentLengthCheck = function({ length }, min, ctx) {
      if (length < min) {
        throw webidl.errors.exception({
          message: `${min} argument${min !== 1 ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
          ...ctx
        });
      }
    };
    webidl.illegalConstructor = function() {
      throw webidl.errors.exception({
        header: "TypeError",
        message: "Illegal constructor"
      });
    };
    webidl.util.Type = function(V2) {
      switch (typeof V2) {
        case "undefined":
          return "Undefined";
        case "boolean":
          return "Boolean";
        case "string":
          return "String";
        case "symbol":
          return "Symbol";
        case "number":
          return "Number";
        case "bigint":
          return "BigInt";
        case "function":
        case "object": {
          if (V2 === null) {
            return "Null";
          }
          return "Object";
        }
      }
    };
    webidl.util.ConvertToInt = function(V2, bitLength, signedness, opts = {}) {
      let upperBound;
      let lowerBound;
      if (bitLength === 64) {
        upperBound = Math.pow(2, 53) - 1;
        if (signedness === "unsigned") {
          lowerBound = 0;
        } else {
          lowerBound = Math.pow(-2, 53) + 1;
        }
      } else if (signedness === "unsigned") {
        lowerBound = 0;
        upperBound = Math.pow(2, bitLength) - 1;
      } else {
        lowerBound = Math.pow(-2, bitLength) - 1;
        upperBound = Math.pow(2, bitLength - 1) - 1;
      }
      let x3 = Number(V2);
      if (x3 === 0) {
        x3 = 0;
      }
      if (opts.enforceRange === true) {
        if (Number.isNaN(x3) || x3 === Number.POSITIVE_INFINITY || x3 === Number.NEGATIVE_INFINITY) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Could not convert ${V2} to an integer.`
          });
        }
        x3 = webidl.util.IntegerPart(x3);
        if (x3 < lowerBound || x3 > upperBound) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Value must be between ${lowerBound}-${upperBound}, got ${x3}.`
          });
        }
        return x3;
      }
      if (!Number.isNaN(x3) && opts.clamp === true) {
        x3 = Math.min(Math.max(x3, lowerBound), upperBound);
        if (Math.floor(x3) % 2 === 0) {
          x3 = Math.floor(x3);
        } else {
          x3 = Math.ceil(x3);
        }
        return x3;
      }
      if (Number.isNaN(x3) || x3 === 0 && Object.is(0, x3) || x3 === Number.POSITIVE_INFINITY || x3 === Number.NEGATIVE_INFINITY) {
        return 0;
      }
      x3 = webidl.util.IntegerPart(x3);
      x3 = x3 % Math.pow(2, bitLength);
      if (signedness === "signed" && x3 >= Math.pow(2, bitLength) - 1) {
        return x3 - Math.pow(2, bitLength);
      }
      return x3;
    };
    webidl.util.IntegerPart = function(n3) {
      const r3 = Math.floor(Math.abs(n3));
      if (n3 < 0) {
        return -1 * r3;
      }
      return r3;
    };
    webidl.sequenceConverter = function(converter) {
      return (V2) => {
        if (webidl.util.Type(V2) !== "Object") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: `Value of type ${webidl.util.Type(V2)} is not an Object.`
          });
        }
        const method = V2?.[Symbol.iterator]?.();
        const seq = [];
        if (method === void 0 || typeof method.next !== "function") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: "Object is not an iterator."
          });
        }
        while (true) {
          const { done, value } = method.next();
          if (done) {
            break;
          }
          seq.push(converter(value));
        }
        return seq;
      };
    };
    webidl.recordConverter = function(keyConverter, valueConverter) {
      return (O3) => {
        if (webidl.util.Type(O3) !== "Object") {
          throw webidl.errors.exception({
            header: "Record",
            message: `Value of type ${webidl.util.Type(O3)} is not an Object.`
          });
        }
        const result = {};
        if (!types2.isProxy(O3)) {
          const keys2 = Object.keys(O3);
          for (const key of keys2) {
            const typedKey = keyConverter(key);
            const typedValue = valueConverter(O3[key]);
            result[typedKey] = typedValue;
          }
          return result;
        }
        const keys = Reflect.ownKeys(O3);
        for (const key of keys) {
          const desc = Reflect.getOwnPropertyDescriptor(O3, key);
          if (desc?.enumerable) {
            const typedKey = keyConverter(key);
            const typedValue = valueConverter(O3[key]);
            result[typedKey] = typedValue;
          }
        }
        return result;
      };
    };
    webidl.interfaceConverter = function(i3) {
      return (V2, opts = {}) => {
        if (opts.strict !== false && !(V2 instanceof i3)) {
          throw webidl.errors.exception({
            header: i3.name,
            message: `Expected ${V2} to be an instance of ${i3.name}.`
          });
        }
        return V2;
      };
    };
    webidl.dictionaryConverter = function(converters) {
      return (dictionary) => {
        const type2 = webidl.util.Type(dictionary);
        const dict = {};
        if (type2 === "Null" || type2 === "Undefined") {
          return dict;
        } else if (type2 !== "Object") {
          throw webidl.errors.exception({
            header: "Dictionary",
            message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
          });
        }
        for (const options of converters) {
          const { key, defaultValue, required, converter } = options;
          if (required === true) {
            if (!hasOwn(dictionary, key)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `Missing required key "${key}".`
              });
            }
          }
          let value = dictionary[key];
          const hasDefault = hasOwn(options, "defaultValue");
          if (hasDefault && value !== null) {
            value = value ?? defaultValue;
          }
          if (required || hasDefault || value !== void 0) {
            value = converter(value);
            if (options.allowedValues && !options.allowedValues.includes(value)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
              });
            }
            dict[key] = value;
          }
        }
        return dict;
      };
    };
    webidl.nullableConverter = function(converter) {
      return (V2) => {
        if (V2 === null) {
          return V2;
        }
        return converter(V2);
      };
    };
    webidl.converters.DOMString = function(V2, opts = {}) {
      if (V2 === null && opts.legacyNullToEmptyString) {
        return "";
      }
      if (typeof V2 === "symbol") {
        throw new TypeError("Could not convert argument of type symbol to string.");
      }
      return String(V2);
    };
    webidl.converters.ByteString = function(V2) {
      const x3 = webidl.converters.DOMString(V2);
      for (let index2 = 0; index2 < x3.length; index2++) {
        if (x3.charCodeAt(index2) > 255) {
          throw new TypeError(
            `Cannot convert argument to a ByteString because the character at index ${index2} has a value of ${x3.charCodeAt(index2)} which is greater than 255.`
          );
        }
      }
      return x3;
    };
    webidl.converters.USVString = toUSVString;
    webidl.converters.boolean = function(V2) {
      const x3 = Boolean(V2);
      return x3;
    };
    webidl.converters.any = function(V2) {
      return V2;
    };
    webidl.converters["long long"] = function(V2) {
      const x3 = webidl.util.ConvertToInt(V2, 64, "signed");
      return x3;
    };
    webidl.converters["unsigned long long"] = function(V2) {
      const x3 = webidl.util.ConvertToInt(V2, 64, "unsigned");
      return x3;
    };
    webidl.converters["unsigned long"] = function(V2) {
      const x3 = webidl.util.ConvertToInt(V2, 32, "unsigned");
      return x3;
    };
    webidl.converters["unsigned short"] = function(V2, opts) {
      const x3 = webidl.util.ConvertToInt(V2, 16, "unsigned", opts);
      return x3;
    };
    webidl.converters.ArrayBuffer = function(V2, opts = {}) {
      if (webidl.util.Type(V2) !== "Object" || !types2.isAnyArrayBuffer(V2)) {
        throw webidl.errors.conversionFailed({
          prefix: `${V2}`,
          argument: `${V2}`,
          types: ["ArrayBuffer"]
        });
      }
      if (opts.allowShared === false && types2.isSharedArrayBuffer(V2)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V2;
    };
    webidl.converters.TypedArray = function(V2, T3, opts = {}) {
      if (webidl.util.Type(V2) !== "Object" || !types2.isTypedArray(V2) || V2.constructor.name !== T3.name) {
        throw webidl.errors.conversionFailed({
          prefix: `${T3.name}`,
          argument: `${V2}`,
          types: [T3.name]
        });
      }
      if (opts.allowShared === false && types2.isSharedArrayBuffer(V2.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V2;
    };
    webidl.converters.DataView = function(V2, opts = {}) {
      if (webidl.util.Type(V2) !== "Object" || !types2.isDataView(V2)) {
        throw webidl.errors.exception({
          header: "DataView",
          message: "Object is not a DataView."
        });
      }
      if (opts.allowShared === false && types2.isSharedArrayBuffer(V2.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V2;
    };
    webidl.converters.BufferSource = function(V2, opts = {}) {
      if (types2.isAnyArrayBuffer(V2)) {
        return webidl.converters.ArrayBuffer(V2, opts);
      }
      if (types2.isTypedArray(V2)) {
        return webidl.converters.TypedArray(V2, V2.constructor);
      }
      if (types2.isDataView(V2)) {
        return webidl.converters.DataView(V2, opts);
      }
      throw new TypeError(`Could not convert ${V2} to a BufferSource.`);
    };
    webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(
      webidl.converters.ByteString
    );
    webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(
      webidl.converters["sequence<ByteString>"]
    );
    webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(
      webidl.converters.ByteString,
      webidl.converters.ByteString
    );
    module.exports = {
      webidl
    };
  }
});

// node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS({
  "node_modules/undici/lib/fetch/dataURL.js"(exports2, module) {
    "use strict";
    var assert2 = __require("assert");
    var { atob: atob2 } = __require("buffer");
    var { isomorphicDecode } = require_util2();
    var encoder = new TextEncoder();
    var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
    var HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
    var HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
    function dataURLProcessor(dataURL) {
      assert2(dataURL.protocol === "data:");
      let input = URLSerializer(dataURL, true);
      input = input.slice(5);
      const position2 = { position: 0 };
      let mimeType = collectASequenceOfCodePointsFast(
        ",",
        input,
        position2
      );
      const mimeTypeLength = mimeType.length;
      mimeType = removeASCIIWhitespace(mimeType, true, true);
      if (position2.position >= input.length) {
        return "failure";
      }
      position2.position++;
      const encodedBody = input.slice(mimeTypeLength + 1);
      let body2 = stringPercentDecode(encodedBody);
      if (/;(\u0020){0,}base64$/i.test(mimeType)) {
        const stringBody = isomorphicDecode(body2);
        body2 = forgivingBase64(stringBody);
        if (body2 === "failure") {
          return "failure";
        }
        mimeType = mimeType.slice(0, -6);
        mimeType = mimeType.replace(/(\u0020)+$/, "");
        mimeType = mimeType.slice(0, -1);
      }
      if (mimeType.startsWith(";")) {
        mimeType = "text/plain" + mimeType;
      }
      let mimeTypeRecord = parseMIMEType(mimeType);
      if (mimeTypeRecord === "failure") {
        mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
      }
      return { mimeType: mimeTypeRecord, body: body2 };
    }
    __name(dataURLProcessor, "dataURLProcessor");
    function URLSerializer(url2, excludeFragment = false) {
      if (!excludeFragment) {
        return url2.href;
      }
      const href = url2.href;
      const hashLength = url2.hash.length;
      return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
    }
    __name(URLSerializer, "URLSerializer");
    function collectASequenceOfCodePoints(condition, input, position2) {
      let result = "";
      while (position2.position < input.length && condition(input[position2.position])) {
        result += input[position2.position];
        position2.position++;
      }
      return result;
    }
    __name(collectASequenceOfCodePoints, "collectASequenceOfCodePoints");
    function collectASequenceOfCodePointsFast(char, input, position2) {
      const idx = input.indexOf(char, position2.position);
      const start = position2.position;
      if (idx === -1) {
        position2.position = input.length;
        return input.slice(start);
      }
      position2.position = idx;
      return input.slice(start, position2.position);
    }
    __name(collectASequenceOfCodePointsFast, "collectASequenceOfCodePointsFast");
    function stringPercentDecode(input) {
      const bytes = encoder.encode(input);
      return percentDecode(bytes);
    }
    __name(stringPercentDecode, "stringPercentDecode");
    function percentDecode(input) {
      const output = [];
      for (let i3 = 0; i3 < input.length; i3++) {
        const byte = input[i3];
        if (byte !== 37) {
          output.push(byte);
        } else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i3 + 1], input[i3 + 2]))) {
          output.push(37);
        } else {
          const nextTwoBytes = String.fromCharCode(input[i3 + 1], input[i3 + 2]);
          const bytePoint = Number.parseInt(nextTwoBytes, 16);
          output.push(bytePoint);
          i3 += 2;
        }
      }
      return Uint8Array.from(output);
    }
    __name(percentDecode, "percentDecode");
    function parseMIMEType(input) {
      input = removeHTTPWhitespace(input, true, true);
      const position2 = { position: 0 };
      const type2 = collectASequenceOfCodePointsFast(
        "/",
        input,
        position2
      );
      if (type2.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type2)) {
        return "failure";
      }
      if (position2.position > input.length) {
        return "failure";
      }
      position2.position++;
      let subtype = collectASequenceOfCodePointsFast(
        ";",
        input,
        position2
      );
      subtype = removeHTTPWhitespace(subtype, false, true);
      if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
        return "failure";
      }
      const typeLowercase = type2.toLowerCase();
      const subtypeLowercase = subtype.toLowerCase();
      const mimeType = {
        type: typeLowercase,
        subtype: subtypeLowercase,
        /** @type {Map<string, string>} */
        parameters: /* @__PURE__ */ new Map(),
        // https://mimesniff.spec.whatwg.org/#mime-type-essence
        essence: `${typeLowercase}/${subtypeLowercase}`
      };
      while (position2.position < input.length) {
        position2.position++;
        collectASequenceOfCodePoints(
          // https://fetch.spec.whatwg.org/#http-whitespace
          (char) => HTTP_WHITESPACE_REGEX.test(char),
          input,
          position2
        );
        let parameterName = collectASequenceOfCodePoints(
          (char) => char !== ";" && char !== "=",
          input,
          position2
        );
        parameterName = parameterName.toLowerCase();
        if (position2.position < input.length) {
          if (input[position2.position] === ";") {
            continue;
          }
          position2.position++;
        }
        if (position2.position > input.length) {
          break;
        }
        let parameterValue = null;
        if (input[position2.position] === '"') {
          parameterValue = collectAnHTTPQuotedString(input, position2, true);
          collectASequenceOfCodePointsFast(
            ";",
            input,
            position2
          );
        } else {
          parameterValue = collectASequenceOfCodePointsFast(
            ";",
            input,
            position2
          );
          parameterValue = removeHTTPWhitespace(parameterValue, false, true);
          if (parameterValue.length === 0) {
            continue;
          }
        }
        if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {
          mimeType.parameters.set(parameterName, parameterValue);
        }
      }
      return mimeType;
    }
    __name(parseMIMEType, "parseMIMEType");
    function forgivingBase64(data) {
      data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
      if (data.length % 4 === 0) {
        data = data.replace(/=?=$/, "");
      }
      if (data.length % 4 === 1) {
        return "failure";
      }
      if (/[^+/0-9A-Za-z]/.test(data)) {
        return "failure";
      }
      const binary = atob2(data);
      const bytes = new Uint8Array(binary.length);
      for (let byte = 0; byte < binary.length; byte++) {
        bytes[byte] = binary.charCodeAt(byte);
      }
      return bytes;
    }
    __name(forgivingBase64, "forgivingBase64");
    function collectAnHTTPQuotedString(input, position2, extractValue) {
      const positionStart = position2.position;
      let value = "";
      assert2(input[position2.position] === '"');
      position2.position++;
      while (true) {
        value += collectASequenceOfCodePoints(
          (char) => char !== '"' && char !== "\\",
          input,
          position2
        );
        if (position2.position >= input.length) {
          break;
        }
        const quoteOrBackslash = input[position2.position];
        position2.position++;
        if (quoteOrBackslash === "\\") {
          if (position2.position >= input.length) {
            value += "\\";
            break;
          }
          value += input[position2.position];
          position2.position++;
        } else {
          assert2(quoteOrBackslash === '"');
          break;
        }
      }
      if (extractValue) {
        return value;
      }
      return input.slice(positionStart, position2.position);
    }
    __name(collectAnHTTPQuotedString, "collectAnHTTPQuotedString");
    function serializeAMimeType(mimeType) {
      assert2(mimeType !== "failure");
      const { parameters, essence } = mimeType;
      let serialization = essence;
      for (let [name2, value] of parameters.entries()) {
        serialization += ";";
        serialization += name2;
        serialization += "=";
        if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
          value = value.replace(/(\\|")/g, "\\$1");
          value = '"' + value;
          value += '"';
        }
        serialization += value;
      }
      return serialization;
    }
    __name(serializeAMimeType, "serializeAMimeType");
    function isHTTPWhiteSpace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === " ";
    }
    __name(isHTTPWhiteSpace, "isHTTPWhiteSpace");
    function removeHTTPWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++) ;
      }
      if (trailing) {
        for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--) ;
      }
      return str.slice(lead, trail + 1);
    }
    __name(removeHTTPWhitespace, "removeHTTPWhitespace");
    function isASCIIWhitespace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
    }
    __name(isASCIIWhitespace, "isASCIIWhitespace");
    function removeASCIIWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++) ;
      }
      if (trailing) {
        for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--) ;
      }
      return str.slice(lead, trail + 1);
    }
    __name(removeASCIIWhitespace, "removeASCIIWhitespace");
    module.exports = {
      dataURLProcessor,
      URLSerializer,
      collectASequenceOfCodePoints,
      collectASequenceOfCodePointsFast,
      stringPercentDecode,
      parseMIMEType,
      collectAnHTTPQuotedString,
      serializeAMimeType
    };
  }
});

// node_modules/undici/lib/fetch/file.js
var require_file = __commonJS({
  "node_modules/undici/lib/fetch/file.js"(exports2, module) {
    "use strict";
    var { Blob: Blob2, File: NativeFile } = __require("buffer");
    var { types: types2 } = __require("util");
    var { kState } = require_symbols2();
    var { isBlobLike } = require_util2();
    var { webidl } = require_webidl();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var { kEnumerableProperty } = require_util();
    var encoder = new TextEncoder();
    var File2 = class _File extends Blob2 {
      static {
        __name(this, "File");
      }
      constructor(fileBits, fileName, options = {}) {
        webidl.argumentLengthCheck(arguments, 2, { header: "File constructor" });
        fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
        fileName = webidl.converters.USVString(fileName);
        options = webidl.converters.FilePropertyBag(options);
        const n3 = fileName;
        let t3 = options.type;
        let d3;
        substep: {
          if (t3) {
            t3 = parseMIMEType(t3);
            if (t3 === "failure") {
              t3 = "";
              break substep;
            }
            t3 = serializeAMimeType(t3).toLowerCase();
          }
          d3 = options.lastModified;
        }
        super(processBlobParts(fileBits, options), { type: t3 });
        this[kState] = {
          name: n3,
          lastModified: d3,
          type: t3
        };
      }
      get name() {
        webidl.brandCheck(this, _File);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, _File);
        return this[kState].lastModified;
      }
      get type() {
        webidl.brandCheck(this, _File);
        return this[kState].type;
      }
    };
    var FileLike = class _FileLike {
      static {
        __name(this, "FileLike");
      }
      constructor(blobLike, fileName, options = {}) {
        const n3 = fileName;
        const t3 = options.type;
        const d3 = options.lastModified ?? Date.now();
        this[kState] = {
          blobLike,
          name: n3,
          type: t3,
          lastModified: d3
        };
      }
      stream(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.stream(...args);
      }
      arrayBuffer(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.arrayBuffer(...args);
      }
      slice(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.slice(...args);
      }
      text(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.text(...args);
      }
      get size() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.size;
      }
      get type() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.type;
      }
      get name() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].lastModified;
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    };
    Object.defineProperties(File2.prototype, {
      [Symbol.toStringTag]: {
        value: "File",
        configurable: true
      },
      name: kEnumerableProperty,
      lastModified: kEnumerableProperty
    });
    webidl.converters.Blob = webidl.interfaceConverter(Blob2);
    webidl.converters.BlobPart = function(V2, opts) {
      if (webidl.util.Type(V2) === "Object") {
        if (isBlobLike(V2)) {
          return webidl.converters.Blob(V2, { strict: false });
        }
        if (ArrayBuffer.isView(V2) || types2.isAnyArrayBuffer(V2)) {
          return webidl.converters.BufferSource(V2, opts);
        }
      }
      return webidl.converters.USVString(V2, opts);
    };
    webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(
      webidl.converters.BlobPart
    );
    webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
      {
        key: "lastModified",
        converter: webidl.converters["long long"],
        get defaultValue() {
          return Date.now();
        }
      },
      {
        key: "type",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "endings",
        converter: /* @__PURE__ */ __name((value) => {
          value = webidl.converters.DOMString(value);
          value = value.toLowerCase();
          if (value !== "native") {
            value = "transparent";
          }
          return value;
        }, "converter"),
        defaultValue: "transparent"
      }
    ]);
    function processBlobParts(parts, options) {
      const bytes = [];
      for (const element of parts) {
        if (typeof element === "string") {
          let s3 = element;
          if (options.endings === "native") {
            s3 = convertLineEndingsNative(s3);
          }
          bytes.push(encoder.encode(s3));
        } else if (types2.isAnyArrayBuffer(element) || types2.isTypedArray(element)) {
          if (!element.buffer) {
            bytes.push(new Uint8Array(element));
          } else {
            bytes.push(
              new Uint8Array(element.buffer, element.byteOffset, element.byteLength)
            );
          }
        } else if (isBlobLike(element)) {
          bytes.push(element);
        }
      }
      return bytes;
    }
    __name(processBlobParts, "processBlobParts");
    function convertLineEndingsNative(s3) {
      let nativeLineEnding = "\n";
      if (process.platform === "win32") {
        nativeLineEnding = "\r\n";
      }
      return s3.replace(/\r?\n/g, nativeLineEnding);
    }
    __name(convertLineEndingsNative, "convertLineEndingsNative");
    function isFileLike(object) {
      return NativeFile && object instanceof NativeFile || object instanceof File2 || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
    }
    __name(isFileLike, "isFileLike");
    module.exports = { File: File2, FileLike, isFileLike };
  }
});

// node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS({
  "node_modules/undici/lib/fetch/formdata.js"(exports2, module) {
    "use strict";
    var { isBlobLike, toUSVString, makeIterator } = require_util2();
    var { kState } = require_symbols2();
    var { File: UndiciFile, FileLike, isFileLike } = require_file();
    var { webidl } = require_webidl();
    var { Blob: Blob2, File: NativeFile } = __require("buffer");
    var File2 = NativeFile ?? UndiciFile;
    var FormData2 = class _FormData {
      static {
        __name(this, "FormData");
      }
      constructor(form) {
        if (form !== void 0) {
          throw webidl.errors.conversionFailed({
            prefix: "FormData constructor",
            argument: "Argument 1",
            types: ["undefined"]
          });
        }
        this[kState] = [];
      }
      append(name2, value, filename = void 0) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name2 = webidl.converters.USVString(name2);
        value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
        filename = arguments.length === 3 ? webidl.converters.USVString(filename) : void 0;
        const entry = makeEntry(name2, value, filename);
        this[kState].push(entry);
      }
      delete(name2) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
        name2 = webidl.converters.USVString(name2);
        this[kState] = this[kState].filter((entry) => entry.name !== name2);
      }
      get(name2) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
        name2 = webidl.converters.USVString(name2);
        const idx = this[kState].findIndex((entry) => entry.name === name2);
        if (idx === -1) {
          return null;
        }
        return this[kState][idx].value;
      }
      getAll(name2) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
        name2 = webidl.converters.USVString(name2);
        return this[kState].filter((entry) => entry.name === name2).map((entry) => entry.value);
      }
      has(name2) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
        name2 = webidl.converters.USVString(name2);
        return this[kState].findIndex((entry) => entry.name === name2) !== -1;
      }
      set(name2, value, filename = void 0) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name2 = webidl.converters.USVString(name2);
        value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
        filename = arguments.length === 3 ? toUSVString(filename) : void 0;
        const entry = makeEntry(name2, value, filename);
        const idx = this[kState].findIndex((entry2) => entry2.name === name2);
        if (idx !== -1) {
          this[kState] = [
            ...this[kState].slice(0, idx),
            entry,
            ...this[kState].slice(idx + 1).filter((entry2) => entry2.name !== name2)
          ];
        } else {
          this[kState].push(entry);
        }
      }
      entries() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key+value"
        );
      }
      keys() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "value"
        );
      }
      /**
       * @param {(value: string, key: string, self: FormData) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key, value] of this) {
          callbackFn.apply(thisArg, [value, key, this]);
        }
      }
    };
    FormData2.prototype[Symbol.iterator] = FormData2.prototype.entries;
    Object.defineProperties(FormData2.prototype, {
      [Symbol.toStringTag]: {
        value: "FormData",
        configurable: true
      }
    });
    function makeEntry(name2, value, filename) {
      name2 = Buffer.from(name2).toString("utf8");
      if (typeof value === "string") {
        value = Buffer.from(value).toString("utf8");
      } else {
        if (!isFileLike(value)) {
          value = value instanceof Blob2 ? new File2([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
        }
        if (filename !== void 0) {
          const options = {
            type: value.type,
            lastModified: value.lastModified
          };
          value = NativeFile && value instanceof NativeFile || value instanceof UndiciFile ? new File2([value], filename, options) : new FileLike(value, filename, options);
        }
      }
      return { name: name2, value };
    }
    __name(makeEntry, "makeEntry");
    module.exports = { FormData: FormData2 };
  }
});

// node_modules/undici/lib/fetch/body.js
var require_body = __commonJS({
  "node_modules/undici/lib/fetch/body.js"(exports2, module) {
    "use strict";
    var Busboy = require_main();
    var util3 = require_util();
    var {
      ReadableStreamFrom,
      isBlobLike,
      isReadableStreamLike,
      readableStreamClose,
      createDeferredPromise,
      fullyReadBody
    } = require_util2();
    var { FormData: FormData2 } = require_formdata();
    var { kState } = require_symbols2();
    var { webidl } = require_webidl();
    var { DOMException: DOMException2, structuredClone: structuredClone2 } = require_constants2();
    var { Blob: Blob2, File: NativeFile } = __require("buffer");
    var { kBodyUsed } = require_symbols();
    var assert2 = __require("assert");
    var { isErrored } = require_util();
    var { isUint8Array, isArrayBuffer: isArrayBuffer2 } = __require("util/types");
    var { File: UndiciFile } = require_file();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var random;
    try {
      const crypto = __require("node:crypto");
      random = /* @__PURE__ */ __name((max) => crypto.randomInt(0, max), "random");
    } catch {
      random = /* @__PURE__ */ __name((max) => Math.floor(Math.random(max)), "random");
    }
    var ReadableStream2 = globalThis.ReadableStream;
    var File2 = NativeFile ?? UndiciFile;
    var textEncoder = new TextEncoder();
    var textDecoder = new TextDecoder();
    function extractBody(object, keepalive = false) {
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      let stream = null;
      if (object instanceof ReadableStream2) {
        stream = object;
      } else if (isBlobLike(object)) {
        stream = object.stream();
      } else {
        stream = new ReadableStream2({
          async pull(controller) {
            controller.enqueue(
              typeof source === "string" ? textEncoder.encode(source) : source
            );
            queueMicrotask(() => readableStreamClose(controller));
          },
          start() {
          },
          type: void 0
        });
      }
      assert2(isReadableStreamLike(stream));
      let action5 = null;
      let source = null;
      let length = null;
      let type2 = null;
      if (typeof object === "string") {
        source = object;
        type2 = "text/plain;charset=UTF-8";
      } else if (object instanceof URLSearchParams) {
        source = object.toString();
        type2 = "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isArrayBuffer2(object)) {
        source = new Uint8Array(object.slice());
      } else if (ArrayBuffer.isView(object)) {
        source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
      } else if (util3.isFormDataLike(object)) {
        const boundary = `----formdata-undici-0${`${random(1e11)}`.padStart(11, "0")}`;
        const prefix2 = `--${boundary}\r
Content-Disposition: form-data`;
        /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
        const escape4 = /* @__PURE__ */ __name((str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22"), "escape");
        const normalizeLinefeeds = /* @__PURE__ */ __name((value) => value.replace(/\r?\n|\r/g, "\r\n"), "normalizeLinefeeds");
        const blobParts = [];
        const rn2 = new Uint8Array([13, 10]);
        length = 0;
        let hasUnknownSizeValue = false;
        for (const [name2, value] of object) {
          if (typeof value === "string") {
            const chunk2 = textEncoder.encode(prefix2 + `; name="${escape4(normalizeLinefeeds(name2))}"\r
\r
${normalizeLinefeeds(value)}\r
`);
            blobParts.push(chunk2);
            length += chunk2.byteLength;
          } else {
            const chunk2 = textEncoder.encode(`${prefix2}; name="${escape4(normalizeLinefeeds(name2))}"` + (value.name ? `; filename="${escape4(value.name)}"` : "") + `\r
Content-Type: ${value.type || "application/octet-stream"}\r
\r
`);
            blobParts.push(chunk2, value, rn2);
            if (typeof value.size === "number") {
              length += chunk2.byteLength + value.size + rn2.byteLength;
            } else {
              hasUnknownSizeValue = true;
            }
          }
        }
        const chunk = textEncoder.encode(`--${boundary}--`);
        blobParts.push(chunk);
        length += chunk.byteLength;
        if (hasUnknownSizeValue) {
          length = null;
        }
        source = object;
        action5 = /* @__PURE__ */ __name(async function* () {
          for (const part of blobParts) {
            if (part.stream) {
              yield* part.stream();
            } else {
              yield part;
            }
          }
        }, "action");
        type2 = "multipart/form-data; boundary=" + boundary;
      } else if (isBlobLike(object)) {
        source = object;
        length = object.size;
        if (object.type) {
          type2 = object.type;
        }
      } else if (typeof object[Symbol.asyncIterator] === "function") {
        if (keepalive) {
          throw new TypeError("keepalive");
        }
        if (util3.isDisturbed(object) || object.locked) {
          throw new TypeError(
            "Response body object should not be disturbed or locked"
          );
        }
        stream = object instanceof ReadableStream2 ? object : ReadableStreamFrom(object);
      }
      if (typeof source === "string" || util3.isBuffer(source)) {
        length = Buffer.byteLength(source);
      }
      if (action5 != null) {
        let iterator;
        stream = new ReadableStream2({
          async start() {
            iterator = action5(object)[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { value, done } = await iterator.next();
            if (done) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              if (!isErrored(stream)) {
                controller.enqueue(new Uint8Array(value));
              }
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          },
          type: void 0
        });
      }
      const body2 = { stream, source, length };
      return [body2, type2];
    }
    __name(extractBody, "extractBody");
    function safelyExtractBody(object, keepalive = false) {
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      if (object instanceof ReadableStream2) {
        assert2(!util3.isDisturbed(object), "The body has already been consumed.");
        assert2(!object.locked, "The stream is locked.");
      }
      return extractBody(object, keepalive);
    }
    __name(safelyExtractBody, "safelyExtractBody");
    function cloneBody(body2) {
      const [out1, out2] = body2.stream.tee();
      const out2Clone = structuredClone2(out2, { transfer: [out2] });
      const [, finalClone] = out2Clone.tee();
      body2.stream = out1;
      return {
        stream: finalClone,
        length: body2.length,
        source: body2.source
      };
    }
    __name(cloneBody, "cloneBody");
    async function* consumeBody(body2) {
      if (body2) {
        if (isUint8Array(body2)) {
          yield body2;
        } else {
          const stream = body2.stream;
          if (util3.isDisturbed(stream)) {
            throw new TypeError("The body has already been consumed.");
          }
          if (stream.locked) {
            throw new TypeError("The stream is locked.");
          }
          stream[kBodyUsed] = true;
          yield* stream;
        }
      }
    }
    __name(consumeBody, "consumeBody");
    function throwIfAborted(state3) {
      if (state3.aborted) {
        throw new DOMException2("The operation was aborted.", "AbortError");
      }
    }
    __name(throwIfAborted, "throwIfAborted");
    function bodyMixinMethods(instance) {
      const methods = {
        blob() {
          return specConsumeBody(this, (bytes) => {
            let mimeType = bodyMimeType(this);
            if (mimeType === "failure") {
              mimeType = "";
            } else if (mimeType) {
              mimeType = serializeAMimeType(mimeType);
            }
            return new Blob2([bytes], { type: mimeType });
          }, instance);
        },
        arrayBuffer() {
          return specConsumeBody(this, (bytes) => {
            return new Uint8Array(bytes).buffer;
          }, instance);
        },
        text() {
          return specConsumeBody(this, utf8DecodeBytes, instance);
        },
        json() {
          return specConsumeBody(this, parseJSONFromBytes, instance);
        },
        async formData() {
          webidl.brandCheck(this, instance);
          throwIfAborted(this[kState]);
          const contentType2 = this.headers.get("Content-Type");
          if (/multipart\/form-data/.test(contentType2)) {
            const headers = {};
            for (const [key, value] of this.headers) headers[key.toLowerCase()] = value;
            const responseFormData = new FormData2();
            let busboy;
            try {
              busboy = new Busboy({
                headers,
                preservePath: true
              });
            } catch (err) {
              throw new DOMException2(`${err}`, "AbortError");
            }
            busboy.on("field", (name2, value) => {
              responseFormData.append(name2, value);
            });
            busboy.on("file", (name2, value, filename, encoding, mimeType) => {
              const chunks = [];
              if (encoding === "base64" || encoding.toLowerCase() === "base64") {
                let base64chunk = "";
                value.on("data", (chunk) => {
                  base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
                  const end = base64chunk.length - base64chunk.length % 4;
                  chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
                  base64chunk = base64chunk.slice(end);
                });
                value.on("end", () => {
                  chunks.push(Buffer.from(base64chunk, "base64"));
                  responseFormData.append(name2, new File2(chunks, filename, { type: mimeType }));
                });
              } else {
                value.on("data", (chunk) => {
                  chunks.push(chunk);
                });
                value.on("end", () => {
                  responseFormData.append(name2, new File2(chunks, filename, { type: mimeType }));
                });
              }
            });
            const busboyResolve = new Promise((resolve2, reject) => {
              busboy.on("finish", resolve2);
              busboy.on("error", (err) => reject(new TypeError(err)));
            });
            if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk);
            busboy.end();
            await busboyResolve;
            return responseFormData;
          } else if (/application\/x-www-form-urlencoded/.test(contentType2)) {
            let entries2;
            try {
              let text = "";
              const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
              for await (const chunk of consumeBody(this[kState].body)) {
                if (!isUint8Array(chunk)) {
                  throw new TypeError("Expected Uint8Array chunk");
                }
                text += streamingDecoder.decode(chunk, { stream: true });
              }
              text += streamingDecoder.decode();
              entries2 = new URLSearchParams(text);
            } catch (err) {
              throw Object.assign(new TypeError(), { cause: err });
            }
            const formData = new FormData2();
            for (const [name2, value] of entries2) {
              formData.append(name2, value);
            }
            return formData;
          } else {
            await Promise.resolve();
            throwIfAborted(this[kState]);
            throw webidl.errors.exception({
              header: `${instance.name}.formData`,
              message: "Could not parse content as FormData."
            });
          }
        }
      };
      return methods;
    }
    __name(bodyMixinMethods, "bodyMixinMethods");
    function mixinBody(prototype) {
      Object.assign(prototype.prototype, bodyMixinMethods(prototype));
    }
    __name(mixinBody, "mixinBody");
    async function specConsumeBody(object, convertBytesToJSValue, instance) {
      webidl.brandCheck(object, instance);
      throwIfAborted(object[kState]);
      if (bodyUnusable(object[kState].body)) {
        throw new TypeError("Body is unusable");
      }
      const promise = createDeferredPromise();
      const errorSteps = /* @__PURE__ */ __name((error) => promise.reject(error), "errorSteps");
      const successSteps = /* @__PURE__ */ __name((data) => {
        try {
          promise.resolve(convertBytesToJSValue(data));
        } catch (e3) {
          errorSteps(e3);
        }
      }, "successSteps");
      if (object[kState].body == null) {
        successSteps(new Uint8Array());
        return promise.promise;
      }
      await fullyReadBody(object[kState].body, successSteps, errorSteps);
      return promise.promise;
    }
    __name(specConsumeBody, "specConsumeBody");
    function bodyUnusable(body2) {
      return body2 != null && (body2.stream.locked || util3.isDisturbed(body2.stream));
    }
    __name(bodyUnusable, "bodyUnusable");
    function utf8DecodeBytes(buffer2) {
      if (buffer2.length === 0) {
        return "";
      }
      if (buffer2[0] === 239 && buffer2[1] === 187 && buffer2[2] === 191) {
        buffer2 = buffer2.subarray(3);
      }
      const output = textDecoder.decode(buffer2);
      return output;
    }
    __name(utf8DecodeBytes, "utf8DecodeBytes");
    function parseJSONFromBytes(bytes) {
      return JSON.parse(utf8DecodeBytes(bytes));
    }
    __name(parseJSONFromBytes, "parseJSONFromBytes");
    function bodyMimeType(object) {
      const { headersList } = object[kState];
      const contentType2 = headersList.get("content-type");
      if (contentType2 === null) {
        return "failure";
      }
      return parseMIMEType(contentType2);
    }
    __name(bodyMimeType, "bodyMimeType");
    module.exports = {
      extractBody,
      safelyExtractBody,
      cloneBody,
      mixinBody
    };
  }
});

// node_modules/undici/lib/core/request.js
var require_request = __commonJS({
  "node_modules/undici/lib/core/request.js"(exports2, module) {
    "use strict";
    var {
      InvalidArgumentError,
      NotSupportedError
    } = require_errors();
    var assert2 = __require("assert");
    var { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols();
    var util3 = require_util();
    var tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
    var headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    var invalidPathRegex = /[^\u0021-\u00ff]/;
    var kHandler = Symbol("handler");
    var channels = {};
    var extractBody;
    try {
      const diagnosticsChannel = __require("diagnostics_channel");
      channels.create = diagnosticsChannel.channel("undici:request:create");
      channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
      channels.headers = diagnosticsChannel.channel("undici:request:headers");
      channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
      channels.error = diagnosticsChannel.channel("undici:request:error");
    } catch {
      channels.create = { hasSubscribers: false };
      channels.bodySent = { hasSubscribers: false };
      channels.headers = { hasSubscribers: false };
      channels.trailers = { hasSubscribers: false };
      channels.error = { hasSubscribers: false };
    }
    var Request = class _Request {
      static {
        __name(this, "Request");
      }
      constructor(origin, {
        path: path14,
        method,
        body: body2,
        headers,
        query,
        idempotent,
        blocking,
        upgrade,
        headersTimeout,
        bodyTimeout,
        reset,
        throwOnError,
        expectContinue
      }, handler) {
        if (typeof path14 !== "string") {
          throw new InvalidArgumentError("path must be a string");
        } else if (path14[0] !== "/" && !(path14.startsWith("http://") || path14.startsWith("https://")) && method !== "CONNECT") {
          throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
        } else if (invalidPathRegex.exec(path14) !== null) {
          throw new InvalidArgumentError("invalid request path");
        }
        if (typeof method !== "string") {
          throw new InvalidArgumentError("method must be a string");
        } else if (tokenRegExp.exec(method) === null) {
          throw new InvalidArgumentError("invalid request method");
        }
        if (upgrade && typeof upgrade !== "string") {
          throw new InvalidArgumentError("upgrade must be a string");
        }
        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("invalid headersTimeout");
        }
        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("invalid bodyTimeout");
        }
        if (reset != null && typeof reset !== "boolean") {
          throw new InvalidArgumentError("invalid reset");
        }
        if (expectContinue != null && typeof expectContinue !== "boolean") {
          throw new InvalidArgumentError("invalid expectContinue");
        }
        this.headersTimeout = headersTimeout;
        this.bodyTimeout = bodyTimeout;
        this.throwOnError = throwOnError === true;
        this.method = method;
        this.abort = null;
        if (body2 == null) {
          this.body = null;
        } else if (util3.isStream(body2)) {
          this.body = body2;
          const rState = this.body._readableState;
          if (!rState || !rState.autoDestroy) {
            this.endHandler = /* @__PURE__ */ __name(function autoDestroy() {
              util3.destroy(this);
            }, "autoDestroy");
            this.body.on("end", this.endHandler);
          }
          this.errorHandler = (err) => {
            if (this.abort) {
              this.abort(err);
            } else {
              this.error = err;
            }
          };
          this.body.on("error", this.errorHandler);
        } else if (util3.isBuffer(body2)) {
          this.body = body2.byteLength ? body2 : null;
        } else if (ArrayBuffer.isView(body2)) {
          this.body = body2.buffer.byteLength ? Buffer.from(body2.buffer, body2.byteOffset, body2.byteLength) : null;
        } else if (body2 instanceof ArrayBuffer) {
          this.body = body2.byteLength ? Buffer.from(body2) : null;
        } else if (typeof body2 === "string") {
          this.body = body2.length ? Buffer.from(body2) : null;
        } else if (util3.isFormDataLike(body2) || util3.isIterable(body2) || util3.isBlobLike(body2)) {
          this.body = body2;
        } else {
          throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
        }
        this.completed = false;
        this.aborted = false;
        this.upgrade = upgrade || null;
        this.path = query ? util3.buildURL(path14, query) : path14;
        this.origin = origin;
        this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
        this.blocking = blocking == null ? false : blocking;
        this.reset = reset == null ? null : reset;
        this.host = null;
        this.contentLength = null;
        this.contentType = null;
        this.headers = "";
        this.expectContinue = expectContinue != null ? expectContinue : false;
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i3 = 0; i3 < headers.length; i3 += 2) {
            processHeader(this, headers[i3], headers[i3 + 1]);
          }
        } else if (headers && typeof headers === "object") {
          const keys = Object.keys(headers);
          for (let i3 = 0; i3 < keys.length; i3++) {
            const key = keys[i3];
            processHeader(this, key, headers[key]);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        if (util3.isFormDataLike(this.body)) {
          if (util3.nodeMajor < 16 || util3.nodeMajor === 16 && util3.nodeMinor < 8) {
            throw new InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
          }
          if (!extractBody) {
            extractBody = require_body().extractBody;
          }
          const [bodyStream, contentType2] = extractBody(body2);
          if (this.contentType == null) {
            this.contentType = contentType2;
            this.headers += `content-type: ${contentType2}\r
`;
          }
          this.body = bodyStream.stream;
          this.contentLength = bodyStream.length;
        } else if (util3.isBlobLike(body2) && this.contentType == null && body2.type) {
          this.contentType = body2.type;
          this.headers += `content-type: ${body2.type}\r
`;
        }
        util3.validateHandler(handler, method, upgrade);
        this.servername = util3.getServerName(this.host);
        this[kHandler] = handler;
        if (channels.create.hasSubscribers) {
          channels.create.publish({ request: this });
        }
      }
      onBodySent(chunk) {
        if (this[kHandler].onBodySent) {
          try {
            return this[kHandler].onBodySent(chunk);
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onRequestSent() {
        if (channels.bodySent.hasSubscribers) {
          channels.bodySent.publish({ request: this });
        }
        if (this[kHandler].onRequestSent) {
          try {
            return this[kHandler].onRequestSent();
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onConnect(abort) {
        assert2(!this.aborted);
        assert2(!this.completed);
        if (this.error) {
          abort(this.error);
        } else {
          this.abort = abort;
          return this[kHandler].onConnect(abort);
        }
      }
      onHeaders(statusCode, headers, resume, statusText) {
        assert2(!this.aborted);
        assert2(!this.completed);
        if (channels.headers.hasSubscribers) {
          channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
        }
        try {
          return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
        } catch (err) {
          this.abort(err);
        }
      }
      onData(chunk) {
        assert2(!this.aborted);
        assert2(!this.completed);
        try {
          return this[kHandler].onData(chunk);
        } catch (err) {
          this.abort(err);
          return false;
        }
      }
      onUpgrade(statusCode, headers, socket) {
        assert2(!this.aborted);
        assert2(!this.completed);
        return this[kHandler].onUpgrade(statusCode, headers, socket);
      }
      onComplete(trailers) {
        this.onFinally();
        assert2(!this.aborted);
        this.completed = true;
        if (channels.trailers.hasSubscribers) {
          channels.trailers.publish({ request: this, trailers });
        }
        try {
          return this[kHandler].onComplete(trailers);
        } catch (err) {
          this.onError(err);
        }
      }
      onError(error) {
        this.onFinally();
        if (channels.error.hasSubscribers) {
          channels.error.publish({ request: this, error });
        }
        if (this.aborted) {
          return;
        }
        this.aborted = true;
        return this[kHandler].onError(error);
      }
      onFinally() {
        if (this.errorHandler) {
          this.body.off("error", this.errorHandler);
          this.errorHandler = null;
        }
        if (this.endHandler) {
          this.body.off("end", this.endHandler);
          this.endHandler = null;
        }
      }
      // TODO: adjust to support H2
      addHeader(key, value) {
        processHeader(this, key, value);
        return this;
      }
      static [kHTTP1BuildRequest](origin, opts, handler) {
        return new _Request(origin, opts, handler);
      }
      static [kHTTP2BuildRequest](origin, opts, handler) {
        const headers = opts.headers;
        opts = { ...opts, headers: null };
        const request3 = new _Request(origin, opts, handler);
        request3.headers = {};
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i3 = 0; i3 < headers.length; i3 += 2) {
            processHeader(request3, headers[i3], headers[i3 + 1], true);
          }
        } else if (headers && typeof headers === "object") {
          const keys = Object.keys(headers);
          for (let i3 = 0; i3 < keys.length; i3++) {
            const key = keys[i3];
            processHeader(request3, key, headers[key], true);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        return request3;
      }
      static [kHTTP2CopyHeaders](raw) {
        const rawHeaders = raw.split("\r\n");
        const headers = {};
        for (const header of rawHeaders) {
          const [key, value] = header.split(": ");
          if (value == null || value.length === 0) continue;
          if (headers[key]) headers[key] += `,${value}`;
          else headers[key] = value;
        }
        return headers;
      }
    };
    function processHeaderValue(key, val, skipAppend) {
      if (val && typeof val === "object") {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      val = val != null ? `${val}` : "";
      if (headerCharRegex.exec(val) !== null) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      return skipAppend ? val : `${key}: ${val}\r
`;
    }
    __name(processHeaderValue, "processHeaderValue");
    function processHeader(request3, key, val, skipAppend = false) {
      if (val && (typeof val === "object" && !Array.isArray(val))) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      } else if (val === void 0) {
        return;
      }
      if (request3.host === null && key.length === 4 && key.toLowerCase() === "host") {
        if (headerCharRegex.exec(val) !== null) {
          throw new InvalidArgumentError(`invalid ${key} header`);
        }
        request3.host = val;
      } else if (request3.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
        request3.contentLength = parseInt(val, 10);
        if (!Number.isFinite(request3.contentLength)) {
          throw new InvalidArgumentError("invalid content-length header");
        }
      } else if (request3.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
        request3.contentType = val;
        if (skipAppend) request3.headers[key] = processHeaderValue(key, val, skipAppend);
        else request3.headers += processHeaderValue(key, val);
      } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") {
        throw new InvalidArgumentError("invalid transfer-encoding header");
      } else if (key.length === 10 && key.toLowerCase() === "connection") {
        const value = typeof val === "string" ? val.toLowerCase() : null;
        if (value !== "close" && value !== "keep-alive") {
          throw new InvalidArgumentError("invalid connection header");
        } else if (value === "close") {
          request3.reset = true;
        }
      } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
        throw new InvalidArgumentError("invalid keep-alive header");
      } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
        throw new InvalidArgumentError("invalid upgrade header");
      } else if (key.length === 6 && key.toLowerCase() === "expect") {
        throw new NotSupportedError("expect header not supported");
      } else if (tokenRegExp.exec(key) === null) {
        throw new InvalidArgumentError("invalid header key");
      } else {
        if (Array.isArray(val)) {
          for (let i3 = 0; i3 < val.length; i3++) {
            if (skipAppend) {
              if (request3.headers[key]) request3.headers[key] += `,${processHeaderValue(key, val[i3], skipAppend)}`;
              else request3.headers[key] = processHeaderValue(key, val[i3], skipAppend);
            } else {
              request3.headers += processHeaderValue(key, val[i3]);
            }
          }
        } else {
          if (skipAppend) request3.headers[key] = processHeaderValue(key, val, skipAppend);
          else request3.headers += processHeaderValue(key, val);
        }
      }
    }
    __name(processHeader, "processHeader");
    module.exports = Request;
  }
});

// node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS({
  "node_modules/undici/lib/dispatcher.js"(exports2, module) {
    "use strict";
    var EventEmitter3 = __require("events");
    var Dispatcher = class extends EventEmitter3 {
      static {
        __name(this, "Dispatcher");
      }
      dispatch() {
        throw new Error("not implemented");
      }
      close() {
        throw new Error("not implemented");
      }
      destroy() {
        throw new Error("not implemented");
      }
    };
    module.exports = Dispatcher;
  }
});

// node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS({
  "node_modules/undici/lib/dispatcher-base.js"(exports2, module) {
    "use strict";
    var Dispatcher = require_dispatcher();
    var {
      ClientDestroyedError,
      ClientClosedError,
      InvalidArgumentError
    } = require_errors();
    var { kDestroy, kClose, kDispatch, kInterceptors } = require_symbols();
    var kDestroyed = Symbol("destroyed");
    var kClosed = Symbol("closed");
    var kOnDestroyed = Symbol("onDestroyed");
    var kOnClosed = Symbol("onClosed");
    var kInterceptedDispatch = Symbol("Intercepted Dispatch");
    var DispatcherBase = class extends Dispatcher {
      static {
        __name(this, "DispatcherBase");
      }
      constructor() {
        super();
        this[kDestroyed] = false;
        this[kOnDestroyed] = null;
        this[kClosed] = false;
        this[kOnClosed] = [];
      }
      get destroyed() {
        return this[kDestroyed];
      }
      get closed() {
        return this[kClosed];
      }
      get interceptors() {
        return this[kInterceptors];
      }
      set interceptors(newInterceptors) {
        if (newInterceptors) {
          for (let i3 = newInterceptors.length - 1; i3 >= 0; i3--) {
            const interceptor = this[kInterceptors][i3];
            if (typeof interceptor !== "function") {
              throw new InvalidArgumentError("interceptor must be an function");
            }
          }
        }
        this[kInterceptors] = newInterceptors;
      }
      close(callback) {
        if (callback === void 0) {
          return new Promise((resolve2, reject) => {
            this.close((err, data) => {
              return err ? reject(err) : resolve2(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          queueMicrotask(() => callback(new ClientDestroyedError(), null));
          return;
        }
        if (this[kClosed]) {
          if (this[kOnClosed]) {
            this[kOnClosed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        this[kClosed] = true;
        this[kOnClosed].push(callback);
        const onClosed = /* @__PURE__ */ __name(() => {
          const callbacks = this[kOnClosed];
          this[kOnClosed] = null;
          for (let i3 = 0; i3 < callbacks.length; i3++) {
            callbacks[i3](null, null);
          }
        }, "onClosed");
        this[kClose]().then(() => this.destroy()).then(() => {
          queueMicrotask(onClosed);
        });
      }
      destroy(err, callback) {
        if (typeof err === "function") {
          callback = err;
          err = null;
        }
        if (callback === void 0) {
          return new Promise((resolve2, reject) => {
            this.destroy(err, (err2, data) => {
              return err2 ? (
                /* istanbul ignore next: should never error */
                reject(err2)
              ) : resolve2(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          if (this[kOnDestroyed]) {
            this[kOnDestroyed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        if (!err) {
          err = new ClientDestroyedError();
        }
        this[kDestroyed] = true;
        this[kOnDestroyed] = this[kOnDestroyed] || [];
        this[kOnDestroyed].push(callback);
        const onDestroyed = /* @__PURE__ */ __name(() => {
          const callbacks = this[kOnDestroyed];
          this[kOnDestroyed] = null;
          for (let i3 = 0; i3 < callbacks.length; i3++) {
            callbacks[i3](null, null);
          }
        }, "onDestroyed");
        this[kDestroy](err).then(() => {
          queueMicrotask(onDestroyed);
        });
      }
      [kInterceptedDispatch](opts, handler) {
        if (!this[kInterceptors] || this[kInterceptors].length === 0) {
          this[kInterceptedDispatch] = this[kDispatch];
          return this[kDispatch](opts, handler);
        }
        let dispatch = this[kDispatch].bind(this);
        for (let i3 = this[kInterceptors].length - 1; i3 >= 0; i3--) {
          dispatch = this[kInterceptors][i3](dispatch);
        }
        this[kInterceptedDispatch] = dispatch;
        return dispatch(opts, handler);
      }
      dispatch(opts, handler) {
        if (!handler || typeof handler !== "object") {
          throw new InvalidArgumentError("handler must be an object");
        }
        try {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("opts must be an object.");
          }
          if (this[kDestroyed] || this[kOnDestroyed]) {
            throw new ClientDestroyedError();
          }
          if (this[kClosed]) {
            throw new ClientClosedError();
          }
          return this[kInterceptedDispatch](opts, handler);
        } catch (err) {
          if (typeof handler.onError !== "function") {
            throw new InvalidArgumentError("invalid onError method");
          }
          handler.onError(err);
          return false;
        }
      }
    };
    module.exports = DispatcherBase;
  }
});

// node_modules/undici/lib/core/connect.js
var require_connect = __commonJS({
  "node_modules/undici/lib/core/connect.js"(exports2, module) {
    "use strict";
    var net = __require("net");
    var assert2 = __require("assert");
    var util3 = require_util();
    var { InvalidArgumentError, ConnectTimeoutError } = require_errors();
    var tls;
    var SessionCache;
    if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
      SessionCache = class WeakSessionCache {
        static {
          __name(this, "WeakSessionCache");
        }
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
          this._sessionRegistry = new global.FinalizationRegistry((key) => {
            if (this._sessionCache.size < this._maxCachedSessions) {
              return;
            }
            const ref = this._sessionCache.get(key);
            if (ref !== void 0 && ref.deref() === void 0) {
              this._sessionCache.delete(key);
            }
          });
        }
        get(sessionKey) {
          const ref = this._sessionCache.get(sessionKey);
          return ref ? ref.deref() : null;
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          this._sessionCache.set(sessionKey, new WeakRef(session));
          this._sessionRegistry.register(session, sessionKey);
        }
      };
    } else {
      SessionCache = class SimpleSessionCache {
        static {
          __name(this, "SimpleSessionCache");
        }
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
        }
        get(sessionKey) {
          return this._sessionCache.get(sessionKey);
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          if (this._sessionCache.size >= this._maxCachedSessions) {
            const { value: oldestKey } = this._sessionCache.keys().next();
            this._sessionCache.delete(oldestKey);
          }
          this._sessionCache.set(sessionKey, session);
        }
      };
    }
    function buildConnector({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
      if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
        throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
      }
      const options = { path: socketPath, ...opts };
      const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
      timeout = timeout == null ? 1e4 : timeout;
      allowH2 = allowH2 != null ? allowH2 : false;
      return /* @__PURE__ */ __name(function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
        let socket;
        if (protocol === "https:") {
          if (!tls) {
            tls = __require("tls");
          }
          servername = servername || options.servername || util3.getServerName(host) || null;
          const sessionKey = servername || hostname;
          const session = sessionCache.get(sessionKey) || null;
          assert2(sessionKey);
          socket = tls.connect({
            highWaterMark: 16384,
            // TLS in node can't have bigger HWM anyway...
            ...options,
            servername,
            session,
            localAddress,
            // TODO(HTTP/2): Add support for h2c
            ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
            socket: httpSocket,
            // upgrade socket connection
            port: port || 443,
            host: hostname
          });
          socket.on("session", function(session2) {
            sessionCache.set(sessionKey, session2);
          });
        } else {
          assert2(!httpSocket, "httpSocket can only be sent on TLS update");
          socket = net.connect({
            highWaterMark: 64 * 1024,
            // Same as nodejs fs streams.
            ...options,
            localAddress,
            port: port || 80,
            host: hostname
          });
        }
        if (options.keepAlive == null || options.keepAlive) {
          const keepAliveInitialDelay = options.keepAliveInitialDelay === void 0 ? 6e4 : options.keepAliveInitialDelay;
          socket.setKeepAlive(true, keepAliveInitialDelay);
        }
        const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);
        socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(null, this);
          }
        }).on("error", function(err) {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(err);
          }
        });
        return socket;
      }, "connect");
    }
    __name(buildConnector, "buildConnector");
    function setupTimeout(onConnectTimeout2, timeout) {
      if (!timeout) {
        return () => {
        };
      }
      let s1 = null;
      let s22 = null;
      const timeoutId = setTimeout(() => {
        s1 = setImmediate(() => {
          if (process.platform === "win32") {
            s22 = setImmediate(() => onConnectTimeout2());
          } else {
            onConnectTimeout2();
          }
        });
      }, timeout);
      return () => {
        clearTimeout(timeoutId);
        clearImmediate(s1);
        clearImmediate(s22);
      };
    }
    __name(setupTimeout, "setupTimeout");
    function onConnectTimeout(socket) {
      util3.destroy(socket, new ConnectTimeoutError());
    }
    __name(onConnectTimeout, "onConnectTimeout");
    module.exports = buildConnector;
  }
});

// node_modules/undici/lib/llhttp/utils.js
var require_utils2 = __commonJS({
  "node_modules/undici/lib/llhttp/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.enumToMap = void 0;
    function enumToMap(obj) {
      const res = {};
      Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (typeof value === "number") {
          res[key] = value;
        }
      });
      return res;
    }
    __name(enumToMap, "enumToMap");
    exports2.enumToMap = enumToMap;
  }
});

// node_modules/undici/lib/llhttp/constants.js
var require_constants3 = __commonJS({
  "node_modules/undici/lib/llhttp/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SPECIAL_HEADERS = exports2.HEADER_STATE = exports2.MINOR = exports2.MAJOR = exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS = exports2.TOKEN = exports2.STRICT_TOKEN = exports2.HEX = exports2.URL_CHAR = exports2.STRICT_URL_CHAR = exports2.USERINFO_CHARS = exports2.MARK = exports2.ALPHANUM = exports2.NUM = exports2.HEX_MAP = exports2.NUM_MAP = exports2.ALPHA = exports2.FINISH = exports2.H_METHOD_MAP = exports2.METHOD_MAP = exports2.METHODS_RTSP = exports2.METHODS_ICE = exports2.METHODS_HTTP = exports2.METHODS = exports2.LENIENT_FLAGS = exports2.FLAGS = exports2.TYPE = exports2.ERROR = void 0;
    var utils_1 = require_utils2();
    var ERROR;
    (function(ERROR2) {
      ERROR2[ERROR2["OK"] = 0] = "OK";
      ERROR2[ERROR2["INTERNAL"] = 1] = "INTERNAL";
      ERROR2[ERROR2["STRICT"] = 2] = "STRICT";
      ERROR2[ERROR2["LF_EXPECTED"] = 3] = "LF_EXPECTED";
      ERROR2[ERROR2["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
      ERROR2[ERROR2["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
      ERROR2[ERROR2["INVALID_METHOD"] = 6] = "INVALID_METHOD";
      ERROR2[ERROR2["INVALID_URL"] = 7] = "INVALID_URL";
      ERROR2[ERROR2["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
      ERROR2[ERROR2["INVALID_VERSION"] = 9] = "INVALID_VERSION";
      ERROR2[ERROR2["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
      ERROR2[ERROR2["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
      ERROR2[ERROR2["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
      ERROR2[ERROR2["INVALID_STATUS"] = 13] = "INVALID_STATUS";
      ERROR2[ERROR2["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
      ERROR2[ERROR2["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
      ERROR2[ERROR2["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
      ERROR2[ERROR2["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
      ERROR2[ERROR2["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
      ERROR2[ERROR2["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
      ERROR2[ERROR2["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
      ERROR2[ERROR2["PAUSED"] = 21] = "PAUSED";
      ERROR2[ERROR2["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
      ERROR2[ERROR2["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
      ERROR2[ERROR2["USER"] = 24] = "USER";
    })(ERROR = exports2.ERROR || (exports2.ERROR = {}));
    var TYPE;
    (function(TYPE2) {
      TYPE2[TYPE2["BOTH"] = 0] = "BOTH";
      TYPE2[TYPE2["REQUEST"] = 1] = "REQUEST";
      TYPE2[TYPE2["RESPONSE"] = 2] = "RESPONSE";
    })(TYPE = exports2.TYPE || (exports2.TYPE = {}));
    var FLAGS;
    (function(FLAGS2) {
      FLAGS2[FLAGS2["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
      FLAGS2[FLAGS2["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
      FLAGS2[FLAGS2["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
      FLAGS2[FLAGS2["CHUNKED"] = 8] = "CHUNKED";
      FLAGS2[FLAGS2["UPGRADE"] = 16] = "UPGRADE";
      FLAGS2[FLAGS2["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
      FLAGS2[FLAGS2["SKIPBODY"] = 64] = "SKIPBODY";
      FLAGS2[FLAGS2["TRAILING"] = 128] = "TRAILING";
      FLAGS2[FLAGS2["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
    })(FLAGS = exports2.FLAGS || (exports2.FLAGS = {}));
    var LENIENT_FLAGS;
    (function(LENIENT_FLAGS2) {
      LENIENT_FLAGS2[LENIENT_FLAGS2["HEADERS"] = 1] = "HEADERS";
      LENIENT_FLAGS2[LENIENT_FLAGS2["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
      LENIENT_FLAGS2[LENIENT_FLAGS2["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
    })(LENIENT_FLAGS = exports2.LENIENT_FLAGS || (exports2.LENIENT_FLAGS = {}));
    var METHODS;
    (function(METHODS2) {
      METHODS2[METHODS2["DELETE"] = 0] = "DELETE";
      METHODS2[METHODS2["GET"] = 1] = "GET";
      METHODS2[METHODS2["HEAD"] = 2] = "HEAD";
      METHODS2[METHODS2["POST"] = 3] = "POST";
      METHODS2[METHODS2["PUT"] = 4] = "PUT";
      METHODS2[METHODS2["CONNECT"] = 5] = "CONNECT";
      METHODS2[METHODS2["OPTIONS"] = 6] = "OPTIONS";
      METHODS2[METHODS2["TRACE"] = 7] = "TRACE";
      METHODS2[METHODS2["COPY"] = 8] = "COPY";
      METHODS2[METHODS2["LOCK"] = 9] = "LOCK";
      METHODS2[METHODS2["MKCOL"] = 10] = "MKCOL";
      METHODS2[METHODS2["MOVE"] = 11] = "MOVE";
      METHODS2[METHODS2["PROPFIND"] = 12] = "PROPFIND";
      METHODS2[METHODS2["PROPPATCH"] = 13] = "PROPPATCH";
      METHODS2[METHODS2["SEARCH"] = 14] = "SEARCH";
      METHODS2[METHODS2["UNLOCK"] = 15] = "UNLOCK";
      METHODS2[METHODS2["BIND"] = 16] = "BIND";
      METHODS2[METHODS2["REBIND"] = 17] = "REBIND";
      METHODS2[METHODS2["UNBIND"] = 18] = "UNBIND";
      METHODS2[METHODS2["ACL"] = 19] = "ACL";
      METHODS2[METHODS2["REPORT"] = 20] = "REPORT";
      METHODS2[METHODS2["MKACTIVITY"] = 21] = "MKACTIVITY";
      METHODS2[METHODS2["CHECKOUT"] = 22] = "CHECKOUT";
      METHODS2[METHODS2["MERGE"] = 23] = "MERGE";
      METHODS2[METHODS2["M-SEARCH"] = 24] = "M-SEARCH";
      METHODS2[METHODS2["NOTIFY"] = 25] = "NOTIFY";
      METHODS2[METHODS2["SUBSCRIBE"] = 26] = "SUBSCRIBE";
      METHODS2[METHODS2["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
      METHODS2[METHODS2["PATCH"] = 28] = "PATCH";
      METHODS2[METHODS2["PURGE"] = 29] = "PURGE";
      METHODS2[METHODS2["MKCALENDAR"] = 30] = "MKCALENDAR";
      METHODS2[METHODS2["LINK"] = 31] = "LINK";
      METHODS2[METHODS2["UNLINK"] = 32] = "UNLINK";
      METHODS2[METHODS2["SOURCE"] = 33] = "SOURCE";
      METHODS2[METHODS2["PRI"] = 34] = "PRI";
      METHODS2[METHODS2["DESCRIBE"] = 35] = "DESCRIBE";
      METHODS2[METHODS2["ANNOUNCE"] = 36] = "ANNOUNCE";
      METHODS2[METHODS2["SETUP"] = 37] = "SETUP";
      METHODS2[METHODS2["PLAY"] = 38] = "PLAY";
      METHODS2[METHODS2["PAUSE"] = 39] = "PAUSE";
      METHODS2[METHODS2["TEARDOWN"] = 40] = "TEARDOWN";
      METHODS2[METHODS2["GET_PARAMETER"] = 41] = "GET_PARAMETER";
      METHODS2[METHODS2["SET_PARAMETER"] = 42] = "SET_PARAMETER";
      METHODS2[METHODS2["REDIRECT"] = 43] = "REDIRECT";
      METHODS2[METHODS2["RECORD"] = 44] = "RECORD";
      METHODS2[METHODS2["FLUSH"] = 45] = "FLUSH";
    })(METHODS = exports2.METHODS || (exports2.METHODS = {}));
    exports2.METHODS_HTTP = [
      METHODS.DELETE,
      METHODS.GET,
      METHODS.HEAD,
      METHODS.POST,
      METHODS.PUT,
      METHODS.CONNECT,
      METHODS.OPTIONS,
      METHODS.TRACE,
      METHODS.COPY,
      METHODS.LOCK,
      METHODS.MKCOL,
      METHODS.MOVE,
      METHODS.PROPFIND,
      METHODS.PROPPATCH,
      METHODS.SEARCH,
      METHODS.UNLOCK,
      METHODS.BIND,
      METHODS.REBIND,
      METHODS.UNBIND,
      METHODS.ACL,
      METHODS.REPORT,
      METHODS.MKACTIVITY,
      METHODS.CHECKOUT,
      METHODS.MERGE,
      METHODS["M-SEARCH"],
      METHODS.NOTIFY,
      METHODS.SUBSCRIBE,
      METHODS.UNSUBSCRIBE,
      METHODS.PATCH,
      METHODS.PURGE,
      METHODS.MKCALENDAR,
      METHODS.LINK,
      METHODS.UNLINK,
      METHODS.PRI,
      // TODO(indutny): should we allow it with HTTP?
      METHODS.SOURCE
    ];
    exports2.METHODS_ICE = [
      METHODS.SOURCE
    ];
    exports2.METHODS_RTSP = [
      METHODS.OPTIONS,
      METHODS.DESCRIBE,
      METHODS.ANNOUNCE,
      METHODS.SETUP,
      METHODS.PLAY,
      METHODS.PAUSE,
      METHODS.TEARDOWN,
      METHODS.GET_PARAMETER,
      METHODS.SET_PARAMETER,
      METHODS.REDIRECT,
      METHODS.RECORD,
      METHODS.FLUSH,
      // For AirPlay
      METHODS.GET,
      METHODS.POST
    ];
    exports2.METHOD_MAP = utils_1.enumToMap(METHODS);
    exports2.H_METHOD_MAP = {};
    Object.keys(exports2.METHOD_MAP).forEach((key) => {
      if (/^H/.test(key)) {
        exports2.H_METHOD_MAP[key] = exports2.METHOD_MAP[key];
      }
    });
    var FINISH;
    (function(FINISH2) {
      FINISH2[FINISH2["SAFE"] = 0] = "SAFE";
      FINISH2[FINISH2["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
      FINISH2[FINISH2["UNSAFE"] = 2] = "UNSAFE";
    })(FINISH = exports2.FINISH || (exports2.FINISH = {}));
    exports2.ALPHA = [];
    for (let i3 = "A".charCodeAt(0); i3 <= "Z".charCodeAt(0); i3++) {
      exports2.ALPHA.push(String.fromCharCode(i3));
      exports2.ALPHA.push(String.fromCharCode(i3 + 32));
    }
    exports2.NUM_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9
    };
    exports2.HEX_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      A: 10,
      B: 11,
      C: 12,
      D: 13,
      E: 14,
      F: 15,
      a: 10,
      b: 11,
      c: 12,
      d: 13,
      e: 14,
      f: 15
    };
    exports2.NUM = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9"
    ];
    exports2.ALPHANUM = exports2.ALPHA.concat(exports2.NUM);
    exports2.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
    exports2.USERINFO_CHARS = exports2.ALPHANUM.concat(exports2.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
    exports2.STRICT_URL_CHAR = [
      "!",
      '"',
      "$",
      "%",
      "&",
      "'",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      ":",
      ";",
      "<",
      "=",
      ">",
      "@",
      "[",
      "\\",
      "]",
      "^",
      "_",
      "`",
      "{",
      "|",
      "}",
      "~"
    ].concat(exports2.ALPHANUM);
    exports2.URL_CHAR = exports2.STRICT_URL_CHAR.concat(["	", "\f"]);
    for (let i3 = 128; i3 <= 255; i3++) {
      exports2.URL_CHAR.push(i3);
    }
    exports2.HEX = exports2.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
    exports2.STRICT_TOKEN = [
      "!",
      "#",
      "$",
      "%",
      "&",
      "'",
      "*",
      "+",
      "-",
      ".",
      "^",
      "_",
      "`",
      "|",
      "~"
    ].concat(exports2.ALPHANUM);
    exports2.TOKEN = exports2.STRICT_TOKEN.concat([" "]);
    exports2.HEADER_CHARS = ["	"];
    for (let i3 = 32; i3 <= 255; i3++) {
      if (i3 !== 127) {
        exports2.HEADER_CHARS.push(i3);
      }
    }
    exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS.filter((c3) => c3 !== 44);
    exports2.MAJOR = exports2.NUM_MAP;
    exports2.MINOR = exports2.MAJOR;
    var HEADER_STATE;
    (function(HEADER_STATE2) {
      HEADER_STATE2[HEADER_STATE2["GENERAL"] = 0] = "GENERAL";
      HEADER_STATE2[HEADER_STATE2["CONNECTION"] = 1] = "CONNECTION";
      HEADER_STATE2[HEADER_STATE2["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
      HEADER_STATE2[HEADER_STATE2["UPGRADE"] = 4] = "UPGRADE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
    })(HEADER_STATE = exports2.HEADER_STATE || (exports2.HEADER_STATE = {}));
    exports2.SPECIAL_HEADERS = {
      "connection": HEADER_STATE.CONNECTION,
      "content-length": HEADER_STATE.CONTENT_LENGTH,
      "proxy-connection": HEADER_STATE.CONNECTION,
      "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
      "upgrade": HEADER_STATE.UPGRADE
    };
  }
});

// node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS({
  "node_modules/undici/lib/handler/RedirectHandler.js"(exports2, module) {
    "use strict";
    var util3 = require_util();
    var { kBodyUsed } = require_symbols();
    var assert2 = __require("assert");
    var { InvalidArgumentError } = require_errors();
    var EE = __require("events");
    var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
    var kBody = Symbol("body");
    var BodyAsyncIterable = class {
      static {
        __name(this, "BodyAsyncIterable");
      }
      constructor(body2) {
        this[kBody] = body2;
        this[kBodyUsed] = false;
      }
      async *[Symbol.asyncIterator]() {
        assert2(!this[kBodyUsed], "disturbed");
        this[kBodyUsed] = true;
        yield* this[kBody];
      }
    };
    var RedirectHandler = class {
      static {
        __name(this, "RedirectHandler");
      }
      constructor(dispatch, maxRedirections, opts, handler) {
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        util3.validateHandler(handler, opts.method, opts.upgrade);
        this.dispatch = dispatch;
        this.location = null;
        this.abort = null;
        this.opts = { ...opts, maxRedirections: 0 };
        this.maxRedirections = maxRedirections;
        this.handler = handler;
        this.history = [];
        if (util3.isStream(this.opts.body)) {
          if (util3.bodyLength(this.opts.body) === 0) {
            this.opts.body.on("data", function() {
              assert2(false);
            });
          }
          if (typeof this.opts.body.readableDidRead !== "boolean") {
            this.opts.body[kBodyUsed] = false;
            EE.prototype.on.call(this.opts.body, "data", function() {
              this[kBodyUsed] = true;
            });
          }
        } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        } else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util3.isIterable(this.opts.body)) {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        }
      }
      onConnect(abort) {
        this.abort = abort;
        this.handler.onConnect(abort, { history: this.history });
      }
      onUpgrade(statusCode, headers, socket) {
        this.handler.onUpgrade(statusCode, headers, socket);
      }
      onError(error) {
        this.handler.onError(error);
      }
      onHeaders(statusCode, headers, resume, statusText) {
        this.location = this.history.length >= this.maxRedirections || util3.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
        if (this.opts.origin) {
          this.history.push(new URL(this.opts.path, this.opts.origin));
        }
        if (!this.location) {
          return this.handler.onHeaders(statusCode, headers, resume, statusText);
        }
        const { origin, pathname, search } = util3.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
        const path14 = search ? `${pathname}${search}` : pathname;
        this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
        this.opts.path = path14;
        this.opts.origin = origin;
        this.opts.maxRedirections = 0;
        this.opts.query = null;
        if (statusCode === 303 && this.opts.method !== "HEAD") {
          this.opts.method = "GET";
          this.opts.body = null;
        }
      }
      onData(chunk) {
        if (this.location) {
        } else {
          return this.handler.onData(chunk);
        }
      }
      onComplete(trailers) {
        if (this.location) {
          this.location = null;
          this.abort = null;
          this.dispatch(this.opts, this);
        } else {
          this.handler.onComplete(trailers);
        }
      }
      onBodySent(chunk) {
        if (this.handler.onBodySent) {
          this.handler.onBodySent(chunk);
        }
      }
    };
    function parseLocation(statusCode, headers) {
      if (redirectableStatusCodes.indexOf(statusCode) === -1) {
        return null;
      }
      for (let i3 = 0; i3 < headers.length; i3 += 2) {
        if (headers[i3].toString().toLowerCase() === "location") {
          return headers[i3 + 1];
        }
      }
    }
    __name(parseLocation, "parseLocation");
    function shouldRemoveHeader(header, removeContent, unknownOrigin) {
      if (header.length === 4) {
        return util3.headerNameToString(header) === "host";
      }
      if (removeContent && util3.headerNameToString(header).startsWith("content-")) {
        return true;
      }
      if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
        const name2 = util3.headerNameToString(header);
        return name2 === "authorization" || name2 === "cookie" || name2 === "proxy-authorization";
      }
      return false;
    }
    __name(shouldRemoveHeader, "shouldRemoveHeader");
    function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
      const ret = [];
      if (Array.isArray(headers)) {
        for (let i3 = 0; i3 < headers.length; i3 += 2) {
          if (!shouldRemoveHeader(headers[i3], removeContent, unknownOrigin)) {
            ret.push(headers[i3], headers[i3 + 1]);
          }
        }
      } else if (headers && typeof headers === "object") {
        for (const key of Object.keys(headers)) {
          if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
            ret.push(key, headers[key]);
          }
        }
      } else {
        assert2(headers == null, "headers must be an object or an array");
      }
      return ret;
    }
    __name(cleanRequestHeaders, "cleanRequestHeaders");
    module.exports = RedirectHandler;
  }
});

// node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS({
  "node_modules/undici/lib/interceptor/redirectInterceptor.js"(exports2, module) {
    "use strict";
    var RedirectHandler = require_RedirectHandler();
    function createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {
      return (dispatch) => {
        return /* @__PURE__ */ __name(function Intercept(opts, handler) {
          const { maxRedirections = defaultMaxRedirections } = opts;
          if (!maxRedirections) {
            return dispatch(opts, handler);
          }
          const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
          opts = { ...opts, maxRedirections: 0 };
          return dispatch(opts, redirectHandler);
        }, "Intercept");
      };
    }
    __name(createRedirectInterceptor, "createRedirectInterceptor");
    module.exports = createRedirectInterceptor;
  }
});

// node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports2, module) {
    "use strict";
    module.exports = "";
  }
});

// node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports2, module) {
    "use strict";
    module.exports = "";
  }
});

// node_modules/undici/lib/client.js
var require_client = __commonJS({
  "node_modules/undici/lib/client.js"(exports2, module) {
    "use strict";
    var assert2 = __require("assert");
    var net = __require("net");
    var http2 = __require("http");
    var { pipeline } = __require("stream");
    var util3 = require_util();
    var timers = require_timers();
    var Request = require_request();
    var DispatcherBase = require_dispatcher_base();
    var {
      RequestContentLengthMismatchError,
      ResponseContentLengthMismatchError,
      InvalidArgumentError,
      RequestAbortedError,
      HeadersTimeoutError,
      HeadersOverflowError,
      SocketError,
      InformationalError,
      BodyTimeoutError,
      HTTPParserError,
      ResponseExceededMaxSizeError,
      ClientDestroyedError
    } = require_errors();
    var buildConnector = require_connect();
    var {
      kUrl,
      kReset,
      kServerName,
      kClient,
      kBusy,
      kParser,
      kConnect,
      kBlocking,
      kResuming,
      kRunning,
      kPending,
      kSize,
      kWriting,
      kQueue,
      kConnected,
      kConnecting,
      kNeedDrain,
      kNoRef,
      kKeepAliveDefaultTimeout,
      kHostHeader,
      kPendingIdx,
      kRunningIdx,
      kError,
      kPipelining,
      kSocket,
      kKeepAliveTimeoutValue,
      kMaxHeadersSize,
      kKeepAliveMaxTimeout,
      kKeepAliveTimeoutThreshold,
      kHeadersTimeout,
      kBodyTimeout,
      kStrictContentLength,
      kConnector,
      kMaxRedirections,
      kMaxRequests,
      kCounter,
      kClose,
      kDestroy,
      kDispatch,
      kInterceptors,
      kLocalAddress,
      kMaxResponseSize,
      kHTTPConnVersion,
      // HTTP2
      kHost,
      kHTTP2Session,
      kHTTP2SessionState,
      kHTTP2BuildRequest,
      kHTTP2CopyHeaders,
      kHTTP1BuildRequest
    } = require_symbols();
    var http22;
    try {
      http22 = __require("http2");
    } catch {
      http22 = { constants: {} };
    }
    var {
      constants: {
        HTTP2_HEADER_AUTHORITY,
        HTTP2_HEADER_METHOD,
        HTTP2_HEADER_PATH,
        HTTP2_HEADER_SCHEME,
        HTTP2_HEADER_CONTENT_LENGTH,
        HTTP2_HEADER_EXPECT,
        HTTP2_HEADER_STATUS
      }
    } = http22;
    var h2ExperimentalWarned = false;
    var FastBuffer = Buffer[Symbol.species];
    var kClosedResolve = Symbol("kClosedResolve");
    var channels = {};
    try {
      const diagnosticsChannel = __require("diagnostics_channel");
      channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
      channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
      channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
      channels.connected = diagnosticsChannel.channel("undici:client:connected");
    } catch {
      channels.sendHeaders = { hasSubscribers: false };
      channels.beforeConnect = { hasSubscribers: false };
      channels.connectError = { hasSubscribers: false };
      channels.connected = { hasSubscribers: false };
    }
    var Client = class extends DispatcherBase {
      static {
        __name(this, "Client");
      }
      /**
       *
       * @param {string|URL} url
       * @param {import('../types/client').Client.Options} options
       */
      constructor(url2, {
        interceptors,
        maxHeaderSize,
        headersTimeout,
        socketTimeout,
        requestTimeout,
        connectTimeout,
        bodyTimeout,
        idleTimeout,
        keepAlive,
        keepAliveTimeout,
        maxKeepAliveTimeout,
        keepAliveMaxTimeout,
        keepAliveTimeoutThreshold,
        socketPath,
        pipelining,
        tls,
        strictContentLength,
        maxCachedSessions,
        maxRedirections,
        connect: connect2,
        maxRequestsPerClient,
        localAddress,
        maxResponseSize,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        // h2
        allowH2,
        maxConcurrentStreams
      } = {}) {
        super();
        if (keepAlive !== void 0) {
          throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
        }
        if (socketTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (requestTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (idleTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
        }
        if (maxKeepAliveTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
        }
        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
          throw new InvalidArgumentError("invalid maxHeaderSize");
        }
        if (socketPath != null && typeof socketPath !== "string") {
          throw new InvalidArgumentError("invalid socketPath");
        }
        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
          throw new InvalidArgumentError("invalid connectTimeout");
        }
        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveTimeout");
        }
        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
        }
        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
          throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
        }
        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
        }
        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
        }
        if (connect2 != null && typeof connect2 !== "function" && typeof connect2 !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
          throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
        }
        if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) {
          throw new InvalidArgumentError("localAddress must be valid string IP address");
        }
        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
          throw new InvalidArgumentError("maxResponseSize must be a positive number");
        }
        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {
          throw new InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
        }
        if (allowH2 != null && typeof allowH2 !== "boolean") {
          throw new InvalidArgumentError("allowH2 must be a valid boolean value");
        }
        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) {
          throw new InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
        }
        if (typeof connect2 !== "function") {
          connect2 = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util3.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect2
          });
        }
        this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor({ maxRedirections })];
        this[kUrl] = util3.parseOrigin(url2);
        this[kConnector] = connect2;
        this[kSocket] = null;
        this[kPipelining] = pipelining != null ? pipelining : 1;
        this[kMaxHeadersSize] = maxHeaderSize || http2.maxHeaderSize;
        this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
        this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
        this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
        this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
        this[kServerName] = null;
        this[kLocalAddress] = localAddress != null ? localAddress : null;
        this[kResuming] = 0;
        this[kNeedDrain] = 0;
        this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
        this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
        this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
        this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
        this[kMaxRedirections] = maxRedirections;
        this[kMaxRequests] = maxRequestsPerClient;
        this[kClosedResolve] = null;
        this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
        this[kHTTPConnVersion] = "h1";
        this[kHTTP2Session] = null;
        this[kHTTP2SessionState] = !allowH2 ? null : {
          // streams: null, // Fixed queue of streams - For future support of `push`
          openStreams: 0,
          // Keep track of them to decide wether or not unref the session
          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
          // Max peerConcurrentStreams for a Node h2 server
        };
        this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}`;
        this[kQueue] = [];
        this[kRunningIdx] = 0;
        this[kPendingIdx] = 0;
      }
      get pipelining() {
        return this[kPipelining];
      }
      set pipelining(value) {
        this[kPipelining] = value;
        resume(this, true);
      }
      get [kPending]() {
        return this[kQueue].length - this[kPendingIdx];
      }
      get [kRunning]() {
        return this[kPendingIdx] - this[kRunningIdx];
      }
      get [kSize]() {
        return this[kQueue].length - this[kRunningIdx];
      }
      get [kConnected]() {
        return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
      }
      get [kBusy]() {
        const socket = this[kSocket];
        return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
      }
      /* istanbul ignore: only used for test */
      [kConnect](cb) {
        connect(this);
        this.once("connect", cb);
      }
      [kDispatch](opts, handler) {
        const origin = opts.origin || this[kUrl].origin;
        const request3 = this[kHTTPConnVersion] === "h2" ? Request[kHTTP2BuildRequest](origin, opts, handler) : Request[kHTTP1BuildRequest](origin, opts, handler);
        this[kQueue].push(request3);
        if (this[kResuming]) {
        } else if (util3.bodyLength(request3.body) == null && util3.isIterable(request3.body)) {
          this[kResuming] = 1;
          process.nextTick(resume, this);
        } else {
          resume(this, true);
        }
        if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
          this[kNeedDrain] = 2;
        }
        return this[kNeedDrain] < 2;
      }
      async [kClose]() {
        return new Promise((resolve2) => {
          if (!this[kSize]) {
            resolve2(null);
          } else {
            this[kClosedResolve] = resolve2;
          }
        });
      }
      async [kDestroy](err) {
        return new Promise((resolve2) => {
          const requests = this[kQueue].splice(this[kPendingIdx]);
          for (let i3 = 0; i3 < requests.length; i3++) {
            const request3 = requests[i3];
            errorRequest(this, request3, err);
          }
          const callback = /* @__PURE__ */ __name(() => {
            if (this[kClosedResolve]) {
              this[kClosedResolve]();
              this[kClosedResolve] = null;
            }
            resolve2();
          }, "callback");
          if (this[kHTTP2Session] != null) {
            util3.destroy(this[kHTTP2Session], err);
            this[kHTTP2Session] = null;
            this[kHTTP2SessionState] = null;
          }
          if (!this[kSocket]) {
            queueMicrotask(callback);
          } else {
            util3.destroy(this[kSocket].on("close", callback), err);
          }
          resume(this);
        });
      }
    };
    function onHttp2SessionError(err) {
      assert2(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      this[kSocket][kError] = err;
      onError(this[kClient], err);
    }
    __name(onHttp2SessionError, "onHttp2SessionError");
    function onHttp2FrameError(type2, code, id) {
      const err = new InformationalError(`HTTP/2: "frameError" received - type ${type2}, code ${code}`);
      if (id === 0) {
        this[kSocket][kError] = err;
        onError(this[kClient], err);
      }
    }
    __name(onHttp2FrameError, "onHttp2FrameError");
    function onHttp2SessionEnd() {
      util3.destroy(this, new SocketError("other side closed"));
      util3.destroy(this[kSocket], new SocketError("other side closed"));
    }
    __name(onHttp2SessionEnd, "onHttp2SessionEnd");
    function onHTTP2GoAway(code) {
      const client = this[kClient];
      const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
      client[kSocket] = null;
      client[kHTTP2Session] = null;
      if (client.destroyed) {
        assert2(this[kPending] === 0);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i3 = 0; i3 < requests.length; i3++) {
          const request3 = requests[i3];
          errorRequest(this, request3, err);
        }
      } else if (client[kRunning] > 0) {
        const request3 = client[kQueue][client[kRunningIdx]];
        client[kQueue][client[kRunningIdx]++] = null;
        errorRequest(client, request3, err);
      }
      client[kPendingIdx] = client[kRunningIdx];
      assert2(client[kRunning] === 0);
      client.emit(
        "disconnect",
        client[kUrl],
        [client],
        err
      );
      resume(client);
    }
    __name(onHTTP2GoAway, "onHTTP2GoAway");
    var constants = require_constants3();
    var createRedirectInterceptor = require_redirectInterceptor();
    var EMPTY_BUF = Buffer.alloc(0);
    async function lazyllhttp() {
      const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;
      let mod;
      try {
        mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
      } catch (e3) {
        mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
      }
      return await WebAssembly.instantiate(mod, {
        env: {
          /* eslint-disable camelcase */
          wasm_on_url: /* @__PURE__ */ __name((p3, at2, len) => {
            return 0;
          }, "wasm_on_url"),
          wasm_on_status: /* @__PURE__ */ __name((p3, at2, len) => {
            assert2.strictEqual(currentParser.ptr, p3);
            const start = at2 - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          }, "wasm_on_status"),
          wasm_on_message_begin: /* @__PURE__ */ __name((p3) => {
            assert2.strictEqual(currentParser.ptr, p3);
            return currentParser.onMessageBegin() || 0;
          }, "wasm_on_message_begin"),
          wasm_on_header_field: /* @__PURE__ */ __name((p3, at2, len) => {
            assert2.strictEqual(currentParser.ptr, p3);
            const start = at2 - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          }, "wasm_on_header_field"),
          wasm_on_header_value: /* @__PURE__ */ __name((p3, at2, len) => {
            assert2.strictEqual(currentParser.ptr, p3);
            const start = at2 - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          }, "wasm_on_header_value"),
          wasm_on_headers_complete: /* @__PURE__ */ __name((p3, statusCode, upgrade, shouldKeepAlive) => {
            assert2.strictEqual(currentParser.ptr, p3);
            return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
          }, "wasm_on_headers_complete"),
          wasm_on_body: /* @__PURE__ */ __name((p3, at2, len) => {
            assert2.strictEqual(currentParser.ptr, p3);
            const start = at2 - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          }, "wasm_on_body"),
          wasm_on_message_complete: /* @__PURE__ */ __name((p3) => {
            assert2.strictEqual(currentParser.ptr, p3);
            return currentParser.onMessageComplete() || 0;
          }, "wasm_on_message_complete")
          /* eslint-enable camelcase */
        }
      });
    }
    __name(lazyllhttp, "lazyllhttp");
    var llhttpInstance = null;
    var llhttpPromise = lazyllhttp();
    llhttpPromise.catch();
    var currentParser = null;
    var currentBufferRef = null;
    var currentBufferSize = 0;
    var currentBufferPtr = null;
    var TIMEOUT_HEADERS = 1;
    var TIMEOUT_BODY = 2;
    var TIMEOUT_IDLE = 3;
    var Parser2 = class {
      static {
        __name(this, "Parser");
      }
      constructor(client, socket, { exports: exports3 }) {
        assert2(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
        this.llhttp = exports3;
        this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
        this.client = client;
        this.socket = socket;
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.statusCode = null;
        this.statusText = "";
        this.upgrade = false;
        this.headers = [];
        this.headersSize = 0;
        this.headersMaxSize = client[kMaxHeadersSize];
        this.shouldKeepAlive = false;
        this.paused = false;
        this.resume = this.resume.bind(this);
        this.bytesRead = 0;
        this.keepAlive = "";
        this.contentLength = "";
        this.connection = "";
        this.maxResponseSize = client[kMaxResponseSize];
      }
      setTimeout(value, type2) {
        this.timeoutType = type2;
        if (value !== this.timeoutValue) {
          timers.clearTimeout(this.timeout);
          if (value) {
            this.timeout = timers.setTimeout(onParserTimeout, value, this);
            if (this.timeout.unref) {
              this.timeout.unref();
            }
          } else {
            this.timeout = null;
          }
          this.timeoutValue = value;
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
      }
      resume() {
        if (this.socket.destroyed || !this.paused) {
          return;
        }
        assert2(this.ptr != null);
        assert2(currentParser == null);
        this.llhttp.llhttp_resume(this.ptr);
        assert2(this.timeoutType === TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        this.paused = false;
        this.execute(this.socket.read() || EMPTY_BUF);
        this.readMore();
      }
      readMore() {
        while (!this.paused && this.ptr) {
          const chunk = this.socket.read();
          if (chunk === null) {
            break;
          }
          this.execute(chunk);
        }
      }
      execute(data) {
        assert2(this.ptr != null);
        assert2(currentParser == null);
        assert2(!this.paused);
        const { socket, llhttp } = this;
        if (data.length > currentBufferSize) {
          if (currentBufferPtr) {
            llhttp.free(currentBufferPtr);
          }
          currentBufferSize = Math.ceil(data.length / 4096) * 4096;
          currentBufferPtr = llhttp.malloc(currentBufferSize);
        }
        new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
        try {
          let ret;
          try {
            currentBufferRef = data;
            currentParser = this;
            ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
          } catch (err) {
            throw err;
          } finally {
            currentParser = null;
            currentBufferRef = null;
          }
          const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
          if (ret === constants.ERROR.PAUSED_UPGRADE) {
            this.onUpgrade(data.slice(offset));
          } else if (ret === constants.ERROR.PAUSED) {
            this.paused = true;
            socket.unshift(data.slice(offset));
          } else if (ret !== constants.ERROR.OK) {
            const ptr = llhttp.llhttp_get_error_reason(this.ptr);
            let message = "";
            if (ptr) {
              const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
              message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
            }
            throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
          }
        } catch (err) {
          util3.destroy(socket, err);
        }
      }
      destroy() {
        assert2(this.ptr != null);
        assert2(currentParser == null);
        this.llhttp.llhttp_free(this.ptr);
        this.ptr = null;
        timers.clearTimeout(this.timeout);
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.paused = false;
      }
      onStatus(buf) {
        this.statusText = buf.toString();
      }
      onMessageBegin() {
        const { socket, client } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request3 = client[kQueue][client[kRunningIdx]];
        if (!request3) {
          return -1;
        }
      }
      onHeaderField(buf) {
        const len = this.headers.length;
        if ((len & 1) === 0) {
          this.headers.push(buf);
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        this.trackHeader(buf.length);
      }
      onHeaderValue(buf) {
        let len = this.headers.length;
        if ((len & 1) === 1) {
          this.headers.push(buf);
          len += 1;
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        const key = this.headers[len - 2];
        if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") {
          this.keepAlive += buf.toString();
        } else if (key.length === 10 && key.toString().toLowerCase() === "connection") {
          this.connection += buf.toString();
        } else if (key.length === 14 && key.toString().toLowerCase() === "content-length") {
          this.contentLength += buf.toString();
        }
        this.trackHeader(buf.length);
      }
      trackHeader(len) {
        this.headersSize += len;
        if (this.headersSize >= this.headersMaxSize) {
          util3.destroy(this.socket, new HeadersOverflowError());
        }
      }
      onUpgrade(head) {
        const { upgrade, client, socket, headers, statusCode } = this;
        assert2(upgrade);
        const request3 = client[kQueue][client[kRunningIdx]];
        assert2(request3);
        assert2(!socket.destroyed);
        assert2(socket === client[kSocket]);
        assert2(!this.paused);
        assert2(request3.upgrade || request3.method === "CONNECT");
        this.statusCode = null;
        this.statusText = "";
        this.shouldKeepAlive = null;
        assert2(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        socket.unshift(head);
        socket[kParser].destroy();
        socket[kParser] = null;
        socket[kClient] = null;
        socket[kError] = null;
        socket.removeListener("error", onSocketError).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
        client[kSocket] = null;
        client[kQueue][client[kRunningIdx]++] = null;
        client.emit("disconnect", client[kUrl], [client], new InformationalError("upgrade"));
        try {
          request3.onUpgrade(statusCode, headers, socket);
        } catch (err) {
          util3.destroy(socket, err);
        }
        resume(client);
      }
      onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
        const { client, socket, headers, statusText } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request3 = client[kQueue][client[kRunningIdx]];
        if (!request3) {
          return -1;
        }
        assert2(!this.upgrade);
        assert2(this.statusCode < 200);
        if (statusCode === 100) {
          util3.destroy(socket, new SocketError("bad response", util3.getSocketInfo(socket)));
          return -1;
        }
        if (upgrade && !request3.upgrade) {
          util3.destroy(socket, new SocketError("bad upgrade", util3.getSocketInfo(socket)));
          return -1;
        }
        assert2.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
        this.statusCode = statusCode;
        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.
        request3.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
        if (this.statusCode >= 200) {
          const bodyTimeout = request3.bodyTimeout != null ? request3.bodyTimeout : client[kBodyTimeout];
          this.setTimeout(bodyTimeout, TIMEOUT_BODY);
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        if (request3.method === "CONNECT") {
          assert2(client[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        if (upgrade) {
          assert2(client[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        assert2(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (this.shouldKeepAlive && client[kPipelining]) {
          const keepAliveTimeout = this.keepAlive ? util3.parseKeepAliveTimeout(this.keepAlive) : null;
          if (keepAliveTimeout != null) {
            const timeout = Math.min(
              keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
              client[kKeepAliveMaxTimeout]
            );
            if (timeout <= 0) {
              socket[kReset] = true;
            } else {
              client[kKeepAliveTimeoutValue] = timeout;
            }
          } else {
            client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
          }
        } else {
          socket[kReset] = true;
        }
        const pause = request3.onHeaders(statusCode, headers, this.resume, statusText) === false;
        if (request3.aborted) {
          return -1;
        }
        if (request3.method === "HEAD") {
          return 1;
        }
        if (statusCode < 200) {
          return 1;
        }
        if (socket[kBlocking]) {
          socket[kBlocking] = false;
          resume(client);
        }
        return pause ? constants.ERROR.PAUSED : 0;
      }
      onBody(buf) {
        const { client, socket, statusCode, maxResponseSize } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request3 = client[kQueue][client[kRunningIdx]];
        assert2(request3);
        assert2.strictEqual(this.timeoutType, TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        assert2(statusCode >= 200);
        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
          util3.destroy(socket, new ResponseExceededMaxSizeError());
          return -1;
        }
        this.bytesRead += buf.length;
        if (request3.onData(buf) === false) {
          return constants.ERROR.PAUSED;
        }
      }
      onMessageComplete() {
        const { client, socket, statusCode, upgrade, headers, contentLength: contentLength2, bytesRead, shouldKeepAlive } = this;
        if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
          return -1;
        }
        if (upgrade) {
          return;
        }
        const request3 = client[kQueue][client[kRunningIdx]];
        assert2(request3);
        assert2(statusCode >= 100);
        this.statusCode = null;
        this.statusText = "";
        this.bytesRead = 0;
        this.contentLength = "";
        this.keepAlive = "";
        this.connection = "";
        assert2(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (statusCode < 200) {
          return;
        }
        if (request3.method !== "HEAD" && contentLength2 && bytesRead !== parseInt(contentLength2, 10)) {
          util3.destroy(socket, new ResponseContentLengthMismatchError());
          return -1;
        }
        request3.onComplete(headers);
        client[kQueue][client[kRunningIdx]++] = null;
        if (socket[kWriting]) {
          assert2.strictEqual(client[kRunning], 0);
          util3.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (!shouldKeepAlive) {
          util3.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (socket[kReset] && client[kRunning] === 0) {
          util3.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (client[kPipelining] === 1) {
          setImmediate(resume, client);
        } else {
          resume(client);
        }
      }
    };
    function onParserTimeout(parser) {
      const { socket, timeoutType, client } = parser;
      if (timeoutType === TIMEOUT_HEADERS) {
        if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
          assert2(!parser.paused, "cannot be paused while waiting for headers");
          util3.destroy(socket, new HeadersTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_BODY) {
        if (!parser.paused) {
          util3.destroy(socket, new BodyTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_IDLE) {
        assert2(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
        util3.destroy(socket, new InformationalError("socket idle timeout"));
      }
    }
    __name(onParserTimeout, "onParserTimeout");
    function onSocketReadable() {
      const { [kParser]: parser } = this;
      if (parser) {
        parser.readMore();
      }
    }
    __name(onSocketReadable, "onSocketReadable");
    function onSocketError(err) {
      const { [kClient]: client, [kParser]: parser } = this;
      assert2(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      if (client[kHTTPConnVersion] !== "h2") {
        if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      this[kError] = err;
      onError(this[kClient], err);
    }
    __name(onSocketError, "onSocketError");
    function onError(client, err) {
      if (client[kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
        assert2(client[kPendingIdx] === client[kRunningIdx]);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i3 = 0; i3 < requests.length; i3++) {
          const request3 = requests[i3];
          errorRequest(client, request3, err);
        }
        assert2(client[kSize] === 0);
      }
    }
    __name(onError, "onError");
    function onSocketEnd() {
      const { [kParser]: parser, [kClient]: client } = this;
      if (client[kHTTPConnVersion] !== "h2") {
        if (parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      util3.destroy(this, new SocketError("other side closed", util3.getSocketInfo(this)));
    }
    __name(onSocketEnd, "onSocketEnd");
    function onSocketClose() {
      const { [kClient]: client, [kParser]: parser } = this;
      if (client[kHTTPConnVersion] === "h1" && parser) {
        if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
        }
        this[kParser].destroy();
        this[kParser] = null;
      }
      const err = this[kError] || new SocketError("closed", util3.getSocketInfo(this));
      client[kSocket] = null;
      if (client.destroyed) {
        assert2(client[kPending] === 0);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i3 = 0; i3 < requests.length; i3++) {
          const request3 = requests[i3];
          errorRequest(client, request3, err);
        }
      } else if (client[kRunning] > 0 && err.code !== "UND_ERR_INFO") {
        const request3 = client[kQueue][client[kRunningIdx]];
        client[kQueue][client[kRunningIdx]++] = null;
        errorRequest(client, request3, err);
      }
      client[kPendingIdx] = client[kRunningIdx];
      assert2(client[kRunning] === 0);
      client.emit("disconnect", client[kUrl], [client], err);
      resume(client);
    }
    __name(onSocketClose, "onSocketClose");
    async function connect(client) {
      assert2(!client[kConnecting]);
      assert2(!client[kSocket]);
      let { host, hostname, protocol, port } = client[kUrl];
      if (hostname[0] === "[") {
        const idx = hostname.indexOf("]");
        assert2(idx !== -1);
        const ip = hostname.substring(1, idx);
        assert2(net.isIP(ip));
        hostname = ip;
      }
      client[kConnecting] = true;
      if (channels.beforeConnect.hasSubscribers) {
        channels.beforeConnect.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector]
        });
      }
      try {
        const socket = await new Promise((resolve2, reject) => {
          client[kConnector]({
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          }, (err, socket2) => {
            if (err) {
              reject(err);
            } else {
              resolve2(socket2);
            }
          });
        });
        if (client.destroyed) {
          util3.destroy(socket.on("error", () => {
          }), new ClientDestroyedError());
          return;
        }
        client[kConnecting] = false;
        assert2(socket);
        const isH2 = socket.alpnProtocol === "h2";
        if (isH2) {
          if (!h2ExperimentalWarned) {
            h2ExperimentalWarned = true;
            process.emitWarning("H2 support is experimental, expect them to change at any time.", {
              code: "UNDICI-H2"
            });
          }
          const session = http22.connect(client[kUrl], {
            createConnection: /* @__PURE__ */ __name(() => socket, "createConnection"),
            peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
          });
          client[kHTTPConnVersion] = "h2";
          session[kClient] = client;
          session[kSocket] = socket;
          session.on("error", onHttp2SessionError);
          session.on("frameError", onHttp2FrameError);
          session.on("end", onHttp2SessionEnd);
          session.on("goaway", onHTTP2GoAway);
          session.on("close", onSocketClose);
          session.unref();
          client[kHTTP2Session] = session;
          socket[kHTTP2Session] = session;
        } else {
          if (!llhttpInstance) {
            llhttpInstance = await llhttpPromise;
            llhttpPromise = null;
          }
          socket[kNoRef] = false;
          socket[kWriting] = false;
          socket[kReset] = false;
          socket[kBlocking] = false;
          socket[kParser] = new Parser2(client, socket, llhttpInstance);
        }
        socket[kCounter] = 0;
        socket[kMaxRequests] = client[kMaxRequests];
        socket[kClient] = client;
        socket[kError] = null;
        socket.on("error", onSocketError).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose);
        client[kSocket] = socket;
        if (channels.connected.hasSubscribers) {
          channels.connected.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            socket
          });
        }
        client.emit("connect", client[kUrl], [client]);
      } catch (err) {
        if (client.destroyed) {
          return;
        }
        client[kConnecting] = false;
        if (channels.connectError.hasSubscribers) {
          channels.connectError.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            error: err
          });
        }
        if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
          assert2(client[kRunning] === 0);
          while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
            const request3 = client[kQueue][client[kPendingIdx]++];
            errorRequest(client, request3, err);
          }
        } else {
          onError(client, err);
        }
        client.emit("connectionError", client[kUrl], [client], err);
      }
      resume(client);
    }
    __name(connect, "connect");
    function emitDrain(client) {
      client[kNeedDrain] = 0;
      client.emit("drain", client[kUrl], [client]);
    }
    __name(emitDrain, "emitDrain");
    function resume(client, sync) {
      if (client[kResuming] === 2) {
        return;
      }
      client[kResuming] = 2;
      _resume(client, sync);
      client[kResuming] = 0;
      if (client[kRunningIdx] > 256) {
        client[kQueue].splice(0, client[kRunningIdx]);
        client[kPendingIdx] -= client[kRunningIdx];
        client[kRunningIdx] = 0;
      }
    }
    __name(resume, "resume");
    function _resume(client, sync) {
      while (true) {
        if (client.destroyed) {
          assert2(client[kPending] === 0);
          return;
        }
        if (client[kClosedResolve] && !client[kSize]) {
          client[kClosedResolve]();
          client[kClosedResolve] = null;
          return;
        }
        const socket = client[kSocket];
        if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
          if (client[kSize] === 0) {
            if (!socket[kNoRef] && socket.unref) {
              socket.unref();
              socket[kNoRef] = true;
            }
          } else if (socket[kNoRef] && socket.ref) {
            socket.ref();
            socket[kNoRef] = false;
          }
          if (client[kSize] === 0) {
            if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
              socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
            }
          } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
            if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
              const request4 = client[kQueue][client[kRunningIdx]];
              const headersTimeout = request4.headersTimeout != null ? request4.headersTimeout : client[kHeadersTimeout];
              socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
            }
          }
        }
        if (client[kBusy]) {
          client[kNeedDrain] = 2;
        } else if (client[kNeedDrain] === 2) {
          if (sync) {
            client[kNeedDrain] = 1;
            process.nextTick(emitDrain, client);
          } else {
            emitDrain(client);
          }
          continue;
        }
        if (client[kPending] === 0) {
          return;
        }
        if (client[kRunning] >= (client[kPipelining] || 1)) {
          return;
        }
        const request3 = client[kQueue][client[kPendingIdx]];
        if (client[kUrl].protocol === "https:" && client[kServerName] !== request3.servername) {
          if (client[kRunning] > 0) {
            return;
          }
          client[kServerName] = request3.servername;
          if (socket && socket.servername !== request3.servername) {
            util3.destroy(socket, new InformationalError("servername changed"));
            return;
          }
        }
        if (client[kConnecting]) {
          return;
        }
        if (!socket && !client[kHTTP2Session]) {
          connect(client);
          return;
        }
        if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
          return;
        }
        if (client[kRunning] > 0 && !request3.idempotent) {
          return;
        }
        if (client[kRunning] > 0 && (request3.upgrade || request3.method === "CONNECT")) {
          return;
        }
        if (client[kRunning] > 0 && util3.bodyLength(request3.body) !== 0 && (util3.isStream(request3.body) || util3.isAsyncIterable(request3.body))) {
          return;
        }
        if (!request3.aborted && write(client, request3)) {
          client[kPendingIdx]++;
        } else {
          client[kQueue].splice(client[kPendingIdx], 1);
        }
      }
    }
    __name(_resume, "_resume");
    function shouldSendContentLength(method) {
      return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
    }
    __name(shouldSendContentLength, "shouldSendContentLength");
    function write(client, request3) {
      if (client[kHTTPConnVersion] === "h2") {
        writeH2(client, client[kHTTP2Session], request3);
        return;
      }
      const { body: body2, method, path: path14, host, upgrade, headers, blocking, reset } = request3;
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body2 && typeof body2.read === "function") {
        body2.read(0);
      }
      const bodyLength = util3.bodyLength(body2);
      let contentLength2 = bodyLength;
      if (contentLength2 === null) {
        contentLength2 = request3.contentLength;
      }
      if (contentLength2 === 0 && !expectsPayload) {
        contentLength2 = null;
      }
      if (shouldSendContentLength(method) && contentLength2 > 0 && request3.contentLength !== null && request3.contentLength !== contentLength2) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request3, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      const socket = client[kSocket];
      try {
        request3.onConnect((err) => {
          if (request3.aborted || request3.completed) {
            return;
          }
          errorRequest(client, request3, err || new RequestAbortedError());
          util3.destroy(socket, new InformationalError("aborted"));
        });
      } catch (err) {
        errorRequest(client, request3, err);
      }
      if (request3.aborted) {
        return false;
      }
      if (method === "HEAD") {
        socket[kReset] = true;
      }
      if (upgrade || method === "CONNECT") {
        socket[kReset] = true;
      }
      if (reset != null) {
        socket[kReset] = reset;
      }
      if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
        socket[kReset] = true;
      }
      if (blocking) {
        socket[kBlocking] = true;
      }
      let header = `${method} ${path14} HTTP/1.1\r
`;
      if (typeof host === "string") {
        header += `host: ${host}\r
`;
      } else {
        header += client[kHostHeader];
      }
      if (upgrade) {
        header += `connection: upgrade\r
upgrade: ${upgrade}\r
`;
      } else if (client[kPipelining] && !socket[kReset]) {
        header += "connection: keep-alive\r\n";
      } else {
        header += "connection: close\r\n";
      }
      if (headers) {
        header += headers;
      }
      if (channels.sendHeaders.hasSubscribers) {
        channels.sendHeaders.publish({ request: request3, headers: header, socket });
      }
      if (!body2 || bodyLength === 0) {
        if (contentLength2 === 0) {
          socket.write(`${header}content-length: 0\r
\r
`, "latin1");
        } else {
          assert2(contentLength2 === null, "no body must not have content length");
          socket.write(`${header}\r
`, "latin1");
        }
        request3.onRequestSent();
      } else if (util3.isBuffer(body2)) {
        assert2(contentLength2 === body2.byteLength, "buffer body must have content length");
        socket.cork();
        socket.write(`${header}content-length: ${contentLength2}\r
\r
`, "latin1");
        socket.write(body2);
        socket.uncork();
        request3.onBodySent(body2);
        request3.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
      } else if (util3.isBlobLike(body2)) {
        if (typeof body2.stream === "function") {
          writeIterable({ body: body2.stream(), client, request: request3, socket, contentLength: contentLength2, header, expectsPayload });
        } else {
          writeBlob({ body: body2, client, request: request3, socket, contentLength: contentLength2, header, expectsPayload });
        }
      } else if (util3.isStream(body2)) {
        writeStream({ body: body2, client, request: request3, socket, contentLength: contentLength2, header, expectsPayload });
      } else if (util3.isIterable(body2)) {
        writeIterable({ body: body2, client, request: request3, socket, contentLength: contentLength2, header, expectsPayload });
      } else {
        assert2(false);
      }
      return true;
    }
    __name(write, "write");
    function writeH2(client, session, request3) {
      const { body: body2, method, path: path14, host, upgrade, expectContinue, signal, headers: reqHeaders } = request3;
      let headers;
      if (typeof reqHeaders === "string") headers = Request[kHTTP2CopyHeaders](reqHeaders.trim());
      else headers = reqHeaders;
      if (upgrade) {
        errorRequest(client, request3, new Error("Upgrade not supported for H2"));
        return false;
      }
      try {
        request3.onConnect((err) => {
          if (request3.aborted || request3.completed) {
            return;
          }
          errorRequest(client, request3, err || new RequestAbortedError());
        });
      } catch (err) {
        errorRequest(client, request3, err);
      }
      if (request3.aborted) {
        return false;
      }
      let stream;
      const h2State = client[kHTTP2SessionState];
      headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
      headers[HTTP2_HEADER_METHOD] = method;
      if (method === "CONNECT") {
        session.ref();
        stream = session.request(headers, { endStream: false, signal });
        if (stream.id && !stream.pending) {
          request3.onUpgrade(null, null, stream);
          ++h2State.openStreams;
        } else {
          stream.once("ready", () => {
            request3.onUpgrade(null, null, stream);
            ++h2State.openStreams;
          });
        }
        stream.once("close", () => {
          h2State.openStreams -= 1;
          if (h2State.openStreams === 0) session.unref();
        });
        return true;
      }
      headers[HTTP2_HEADER_PATH] = path14;
      headers[HTTP2_HEADER_SCHEME] = "https";
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body2 && typeof body2.read === "function") {
        body2.read(0);
      }
      let contentLength2 = util3.bodyLength(body2);
      if (contentLength2 == null) {
        contentLength2 = request3.contentLength;
      }
      if (contentLength2 === 0 || !expectsPayload) {
        contentLength2 = null;
      }
      if (shouldSendContentLength(method) && contentLength2 > 0 && request3.contentLength != null && request3.contentLength !== contentLength2) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request3, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      if (contentLength2 != null) {
        assert2(body2, "no body must not have content length");
        headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength2}`;
      }
      session.ref();
      const shouldEndStream = method === "GET" || method === "HEAD";
      if (expectContinue) {
        headers[HTTP2_HEADER_EXPECT] = "100-continue";
        stream = session.request(headers, { endStream: shouldEndStream, signal });
        stream.once("continue", writeBodyH2);
      } else {
        stream = session.request(headers, {
          endStream: shouldEndStream,
          signal
        });
        writeBodyH2();
      }
      ++h2State.openStreams;
      stream.once("response", (headers2) => {
        const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers2;
        if (request3.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), "") === false) {
          stream.pause();
        }
      });
      stream.once("end", () => {
        request3.onComplete([]);
      });
      stream.on("data", (chunk) => {
        if (request3.onData(chunk) === false) {
          stream.pause();
        }
      });
      stream.once("close", () => {
        h2State.openStreams -= 1;
        if (h2State.openStreams === 0) {
          session.unref();
        }
      });
      stream.once("error", function(err) {
        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util3.destroy(stream, err);
        }
      });
      stream.once("frameError", (type2, code) => {
        const err = new InformationalError(`HTTP/2: "frameError" received - type ${type2}, code ${code}`);
        errorRequest(client, request3, err);
        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util3.destroy(stream, err);
        }
      });
      return true;
      function writeBodyH2() {
        if (!body2) {
          request3.onRequestSent();
        } else if (util3.isBuffer(body2)) {
          assert2(contentLength2 === body2.byteLength, "buffer body must have content length");
          stream.cork();
          stream.write(body2);
          stream.uncork();
          stream.end();
          request3.onBodySent(body2);
          request3.onRequestSent();
        } else if (util3.isBlobLike(body2)) {
          if (typeof body2.stream === "function") {
            writeIterable({
              client,
              request: request3,
              contentLength: contentLength2,
              h2stream: stream,
              expectsPayload,
              body: body2.stream(),
              socket: client[kSocket],
              header: ""
            });
          } else {
            writeBlob({
              body: body2,
              client,
              request: request3,
              contentLength: contentLength2,
              expectsPayload,
              h2stream: stream,
              header: "",
              socket: client[kSocket]
            });
          }
        } else if (util3.isStream(body2)) {
          writeStream({
            body: body2,
            client,
            request: request3,
            contentLength: contentLength2,
            expectsPayload,
            socket: client[kSocket],
            h2stream: stream,
            header: ""
          });
        } else if (util3.isIterable(body2)) {
          writeIterable({
            body: body2,
            client,
            request: request3,
            contentLength: contentLength2,
            expectsPayload,
            header: "",
            h2stream: stream,
            socket: client[kSocket]
          });
        } else {
          assert2(false);
        }
      }
      __name(writeBodyH2, "writeBodyH2");
    }
    __name(writeH2, "writeH2");
    function writeStream({ h2stream, body: body2, client, request: request3, socket, contentLength: contentLength2, header, expectsPayload }) {
      assert2(contentLength2 !== 0 || client[kRunning] === 0, "stream body cannot be pipelined");
      if (client[kHTTPConnVersion] === "h2") {
        let onPipeData = function(chunk) {
          request3.onBodySent(chunk);
        };
        __name(onPipeData, "onPipeData");
        const pipe = pipeline(
          body2,
          h2stream,
          (err) => {
            if (err) {
              util3.destroy(body2, err);
              util3.destroy(h2stream, err);
            } else {
              request3.onRequestSent();
            }
          }
        );
        pipe.on("data", onPipeData);
        pipe.once("end", () => {
          pipe.removeListener("data", onPipeData);
          util3.destroy(pipe);
        });
        return;
      }
      let finished = false;
      const writer = new AsyncWriter({ socket, request: request3, contentLength: contentLength2, client, expectsPayload, header });
      const onData = /* @__PURE__ */ __name(function(chunk) {
        if (finished) {
          return;
        }
        try {
          if (!writer.write(chunk) && this.pause) {
            this.pause();
          }
        } catch (err) {
          util3.destroy(this, err);
        }
      }, "onData");
      const onDrain = /* @__PURE__ */ __name(function() {
        if (finished) {
          return;
        }
        if (body2.resume) {
          body2.resume();
        }
      }, "onDrain");
      const onAbort = /* @__PURE__ */ __name(function() {
        if (finished) {
          return;
        }
        const err = new RequestAbortedError();
        queueMicrotask(() => onFinished(err));
      }, "onAbort");
      const onFinished = /* @__PURE__ */ __name(function(err) {
        if (finished) {
          return;
        }
        finished = true;
        assert2(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);
        socket.off("drain", onDrain).off("error", onFinished);
        body2.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
        if (!err) {
          try {
            writer.end();
          } catch (er2) {
            err = er2;
          }
        }
        writer.destroy(err);
        if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) {
          util3.destroy(body2, err);
        } else {
          util3.destroy(body2);
        }
      }, "onFinished");
      body2.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
      if (body2.resume) {
        body2.resume();
      }
      socket.on("drain", onDrain).on("error", onFinished);
    }
    __name(writeStream, "writeStream");
    async function writeBlob({ h2stream, body: body2, client, request: request3, socket, contentLength: contentLength2, header, expectsPayload }) {
      assert2(contentLength2 === body2.size, "blob body must have content length");
      const isH2 = client[kHTTPConnVersion] === "h2";
      try {
        if (contentLength2 != null && contentLength2 !== body2.size) {
          throw new RequestContentLengthMismatchError();
        }
        const buffer2 = Buffer.from(await body2.arrayBuffer());
        if (isH2) {
          h2stream.cork();
          h2stream.write(buffer2);
          h2stream.uncork();
        } else {
          socket.cork();
          socket.write(`${header}content-length: ${contentLength2}\r
\r
`, "latin1");
          socket.write(buffer2);
          socket.uncork();
        }
        request3.onBodySent(buffer2);
        request3.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
        resume(client);
      } catch (err) {
        util3.destroy(isH2 ? h2stream : socket, err);
      }
    }
    __name(writeBlob, "writeBlob");
    async function writeIterable({ h2stream, body: body2, client, request: request3, socket, contentLength: contentLength2, header, expectsPayload }) {
      assert2(contentLength2 !== 0 || client[kRunning] === 0, "iterator body cannot be pipelined");
      let callback = null;
      function onDrain() {
        if (callback) {
          const cb = callback;
          callback = null;
          cb();
        }
      }
      __name(onDrain, "onDrain");
      const waitForDrain = /* @__PURE__ */ __name(() => new Promise((resolve2, reject) => {
        assert2(callback === null);
        if (socket[kError]) {
          reject(socket[kError]);
        } else {
          callback = resolve2;
        }
      }), "waitForDrain");
      if (client[kHTTPConnVersion] === "h2") {
        h2stream.on("close", onDrain).on("drain", onDrain);
        try {
          for await (const chunk of body2) {
            if (socket[kError]) {
              throw socket[kError];
            }
            const res = h2stream.write(chunk);
            request3.onBodySent(chunk);
            if (!res) {
              await waitForDrain();
            }
          }
        } catch (err) {
          h2stream.destroy(err);
        } finally {
          request3.onRequestSent();
          h2stream.end();
          h2stream.off("close", onDrain).off("drain", onDrain);
        }
        return;
      }
      socket.on("close", onDrain).on("drain", onDrain);
      const writer = new AsyncWriter({ socket, request: request3, contentLength: contentLength2, client, expectsPayload, header });
      try {
        for await (const chunk of body2) {
          if (socket[kError]) {
            throw socket[kError];
          }
          if (!writer.write(chunk)) {
            await waitForDrain();
          }
        }
        writer.end();
      } catch (err) {
        writer.destroy(err);
      } finally {
        socket.off("close", onDrain).off("drain", onDrain);
      }
    }
    __name(writeIterable, "writeIterable");
    var AsyncWriter = class {
      static {
        __name(this, "AsyncWriter");
      }
      constructor({ socket, request: request3, contentLength: contentLength2, client, expectsPayload, header }) {
        this.socket = socket;
        this.request = request3;
        this.contentLength = contentLength2;
        this.client = client;
        this.bytesWritten = 0;
        this.expectsPayload = expectsPayload;
        this.header = header;
        socket[kWriting] = true;
      }
      write(chunk) {
        const { socket, request: request3, contentLength: contentLength2, client, bytesWritten, expectsPayload, header } = this;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return false;
        }
        const len = Buffer.byteLength(chunk);
        if (!len) {
          return true;
        }
        if (contentLength2 !== null && bytesWritten + len > contentLength2) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          }
          process.emitWarning(new RequestContentLengthMismatchError());
        }
        socket.cork();
        if (bytesWritten === 0) {
          if (!expectsPayload) {
            socket[kReset] = true;
          }
          if (contentLength2 === null) {
            socket.write(`${header}transfer-encoding: chunked\r
`, "latin1");
          } else {
            socket.write(`${header}content-length: ${contentLength2}\r
\r
`, "latin1");
          }
        }
        if (contentLength2 === null) {
          socket.write(`\r
${len.toString(16)}\r
`, "latin1");
        }
        this.bytesWritten += len;
        const ret = socket.write(chunk);
        socket.uncork();
        request3.onBodySent(chunk);
        if (!ret) {
          if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
            if (socket[kParser].timeout.refresh) {
              socket[kParser].timeout.refresh();
            }
          }
        }
        return ret;
      }
      end() {
        const { socket, contentLength: contentLength2, client, bytesWritten, expectsPayload, header, request: request3 } = this;
        request3.onRequestSent();
        socket[kWriting] = false;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return;
        }
        if (bytesWritten === 0) {
          if (expectsPayload) {
            socket.write(`${header}content-length: 0\r
\r
`, "latin1");
          } else {
            socket.write(`${header}\r
`, "latin1");
          }
        } else if (contentLength2 === null) {
          socket.write("\r\n0\r\n\r\n", "latin1");
        }
        if (contentLength2 !== null && bytesWritten !== contentLength2) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          } else {
            process.emitWarning(new RequestContentLengthMismatchError());
          }
        }
        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
          if (socket[kParser].timeout.refresh) {
            socket[kParser].timeout.refresh();
          }
        }
        resume(client);
      }
      destroy(err) {
        const { socket, client } = this;
        socket[kWriting] = false;
        if (err) {
          assert2(client[kRunning] <= 1, "pipeline should only contain this request");
          util3.destroy(socket, err);
        }
      }
    };
    function errorRequest(client, request3, err) {
      try {
        request3.onError(err);
        assert2(request3.aborted);
      } catch (err2) {
        client.emit("error", err2);
      }
    }
    __name(errorRequest, "errorRequest");
    module.exports = Client;
  }
});

// node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS({
  "node_modules/undici/lib/node/fixed-queue.js"(exports2, module) {
    "use strict";
    var kSize = 2048;
    var kMask = kSize - 1;
    var FixedCircularBuffer = class {
      static {
        __name(this, "FixedCircularBuffer");
      }
      constructor() {
        this.bottom = 0;
        this.top = 0;
        this.list = new Array(kSize);
        this.next = null;
      }
      isEmpty() {
        return this.top === this.bottom;
      }
      isFull() {
        return (this.top + 1 & kMask) === this.bottom;
      }
      push(data) {
        this.list[this.top] = data;
        this.top = this.top + 1 & kMask;
      }
      shift() {
        const nextItem = this.list[this.bottom];
        if (nextItem === void 0)
          return null;
        this.list[this.bottom] = void 0;
        this.bottom = this.bottom + 1 & kMask;
        return nextItem;
      }
    };
    module.exports = class FixedQueue {
      static {
        __name(this, "FixedQueue");
      }
      constructor() {
        this.head = this.tail = new FixedCircularBuffer();
      }
      isEmpty() {
        return this.head.isEmpty();
      }
      push(data) {
        if (this.head.isFull()) {
          this.head = this.head.next = new FixedCircularBuffer();
        }
        this.head.push(data);
      }
      shift() {
        const tail = this.tail;
        const next2 = tail.shift();
        if (tail.isEmpty() && tail.next !== null) {
          this.tail = tail.next;
        }
        return next2;
      }
    };
  }
});

// node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS({
  "node_modules/undici/lib/pool-stats.js"(exports2, module) {
    "use strict";
    var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();
    var kPool = Symbol("pool");
    var PoolStats = class {
      static {
        __name(this, "PoolStats");
      }
      constructor(pool) {
        this[kPool] = pool;
      }
      get connected() {
        return this[kPool][kConnected];
      }
      get free() {
        return this[kPool][kFree];
      }
      get pending() {
        return this[kPool][kPending];
      }
      get queued() {
        return this[kPool][kQueued];
      }
      get running() {
        return this[kPool][kRunning];
      }
      get size() {
        return this[kPool][kSize];
      }
    };
    module.exports = PoolStats;
  }
});

// node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS({
  "node_modules/undici/lib/pool-base.js"(exports2, module) {
    "use strict";
    var DispatcherBase = require_dispatcher_base();
    var FixedQueue = require_fixed_queue();
    var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();
    var PoolStats = require_pool_stats();
    var kClients = Symbol("clients");
    var kNeedDrain = Symbol("needDrain");
    var kQueue = Symbol("queue");
    var kClosedResolve = Symbol("closed resolve");
    var kOnDrain = Symbol("onDrain");
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kGetDispatcher = Symbol("get dispatcher");
    var kAddClient = Symbol("add client");
    var kRemoveClient = Symbol("remove client");
    var kStats = Symbol("stats");
    var PoolBase = class extends DispatcherBase {
      static {
        __name(this, "PoolBase");
      }
      constructor() {
        super();
        this[kQueue] = new FixedQueue();
        this[kClients] = [];
        this[kQueued] = 0;
        const pool = this;
        this[kOnDrain] = /* @__PURE__ */ __name(function onDrain(origin, targets) {
          const queue = pool[kQueue];
          let needDrain = false;
          while (!needDrain) {
            const item = queue.shift();
            if (!item) {
              break;
            }
            pool[kQueued]--;
            needDrain = !this.dispatch(item.opts, item.handler);
          }
          this[kNeedDrain] = needDrain;
          if (!this[kNeedDrain] && pool[kNeedDrain]) {
            pool[kNeedDrain] = false;
            pool.emit("drain", origin, [pool, ...targets]);
          }
          if (pool[kClosedResolve] && queue.isEmpty()) {
            Promise.all(pool[kClients].map((c3) => c3.close())).then(pool[kClosedResolve]);
          }
        }, "onDrain");
        this[kOnConnect] = (origin, targets) => {
          pool.emit("connect", origin, [pool, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          pool.emit("disconnect", origin, [pool, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          pool.emit("connectionError", origin, [pool, ...targets], err);
        };
        this[kStats] = new PoolStats(this);
      }
      get [kBusy]() {
        return this[kNeedDrain];
      }
      get [kConnected]() {
        return this[kClients].filter((client) => client[kConnected]).length;
      }
      get [kFree]() {
        return this[kClients].filter((client) => client[kConnected] && !client[kNeedDrain]).length;
      }
      get [kPending]() {
        let ret = this[kQueued];
        for (const { [kPending]: pending } of this[kClients]) {
          ret += pending;
        }
        return ret;
      }
      get [kRunning]() {
        let ret = 0;
        for (const { [kRunning]: running } of this[kClients]) {
          ret += running;
        }
        return ret;
      }
      get [kSize]() {
        let ret = this[kQueued];
        for (const { [kSize]: size } of this[kClients]) {
          ret += size;
        }
        return ret;
      }
      get stats() {
        return this[kStats];
      }
      async [kClose]() {
        if (this[kQueue].isEmpty()) {
          return Promise.all(this[kClients].map((c3) => c3.close()));
        } else {
          return new Promise((resolve2) => {
            this[kClosedResolve] = resolve2;
          });
        }
      }
      async [kDestroy](err) {
        while (true) {
          const item = this[kQueue].shift();
          if (!item) {
            break;
          }
          item.handler.onError(err);
        }
        return Promise.all(this[kClients].map((c3) => c3.destroy(err)));
      }
      [kDispatch](opts, handler) {
        const dispatcher = this[kGetDispatcher]();
        if (!dispatcher) {
          this[kNeedDrain] = true;
          this[kQueue].push({ opts, handler });
          this[kQueued]++;
        } else if (!dispatcher.dispatch(opts, handler)) {
          dispatcher[kNeedDrain] = true;
          this[kNeedDrain] = !this[kGetDispatcher]();
        }
        return !this[kNeedDrain];
      }
      [kAddClient](client) {
        client.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
        this[kClients].push(client);
        if (this[kNeedDrain]) {
          process.nextTick(() => {
            if (this[kNeedDrain]) {
              this[kOnDrain](client[kUrl], [this, client]);
            }
          });
        }
        return this;
      }
      [kRemoveClient](client) {
        client.close(() => {
          const idx = this[kClients].indexOf(client);
          if (idx !== -1) {
            this[kClients].splice(idx, 1);
          }
        });
        this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
      }
    };
    module.exports = {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    };
  }
});

// node_modules/undici/lib/pool.js
var require_pool = __commonJS({
  "node_modules/undici/lib/pool.js"(exports2, module) {
    "use strict";
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kGetDispatcher
    } = require_pool_base();
    var Client = require_client();
    var {
      InvalidArgumentError
    } = require_errors();
    var util3 = require_util();
    var { kUrl, kInterceptors } = require_symbols();
    var buildConnector = require_connect();
    var kOptions = Symbol("options");
    var kConnections = Symbol("connections");
    var kFactory = Symbol("factory");
    function defaultFactory(origin, opts) {
      return new Client(origin, opts);
    }
    __name(defaultFactory, "defaultFactory");
    var Pool = class extends PoolBase {
      static {
        __name(this, "Pool");
      }
      constructor(origin, {
        connections,
        factory = defaultFactory,
        connect,
        connectTimeout,
        tls,
        maxCachedSessions,
        socketPath,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        allowH2,
        ...options
      } = {}) {
        super();
        if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
          throw new InvalidArgumentError("invalid connections");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (typeof connect !== "function") {
          connect = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util3.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect
          });
        }
        this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
        this[kConnections] = connections || null;
        this[kUrl] = util3.parseOrigin(origin);
        this[kOptions] = { ...util3.deepClone(options), connect, allowH2 };
        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
        this[kFactory] = factory;
      }
      [kGetDispatcher]() {
        let dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain]);
        if (dispatcher) {
          return dispatcher;
        }
        if (!this[kConnections] || this[kClients].length < this[kConnections]) {
          dispatcher = this[kFactory](this[kUrl], this[kOptions]);
          this[kAddClient](dispatcher);
        }
        return dispatcher;
      }
    };
    module.exports = Pool;
  }
});

// node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS({
  "node_modules/undici/lib/balanced-pool.js"(exports2, module) {
    "use strict";
    var {
      BalancedPoolMissingUpstreamError,
      InvalidArgumentError
    } = require_errors();
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    } = require_pool_base();
    var Pool = require_pool();
    var { kUrl, kInterceptors } = require_symbols();
    var { parseOrigin } = require_util();
    var kFactory = Symbol("factory");
    var kOptions = Symbol("options");
    var kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
    var kCurrentWeight = Symbol("kCurrentWeight");
    var kIndex = Symbol("kIndex");
    var kWeight = Symbol("kWeight");
    var kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
    var kErrorPenalty = Symbol("kErrorPenalty");
    function getGreatestCommonDivisor(a3, b3) {
      if (b3 === 0) return a3;
      return getGreatestCommonDivisor(b3, a3 % b3);
    }
    __name(getGreatestCommonDivisor, "getGreatestCommonDivisor");
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    __name(defaultFactory, "defaultFactory");
    var BalancedPool = class extends PoolBase {
      static {
        __name(this, "BalancedPool");
      }
      constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
        super();
        this[kOptions] = opts;
        this[kIndex] = -1;
        this[kCurrentWeight] = 0;
        this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
        this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
        if (!Array.isArray(upstreams)) {
          upstreams = [upstreams];
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
        this[kFactory] = factory;
        for (const upstream of upstreams) {
          this.addUpstream(upstream);
        }
        this._updateBalancedPoolStats();
      }
      addUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        if (this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true)) {
          return this;
        }
        const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
        this[kAddClient](pool);
        pool.on("connect", () => {
          pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
        });
        pool.on("connectionError", () => {
          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
          this._updateBalancedPoolStats();
        });
        pool.on("disconnect", (...args) => {
          const err = args[2];
          if (err && err.code === "UND_ERR_SOCKET") {
            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
            this._updateBalancedPoolStats();
          }
        });
        for (const client of this[kClients]) {
          client[kWeight] = this[kMaxWeightPerServer];
        }
        this._updateBalancedPoolStats();
        return this;
      }
      _updateBalancedPoolStats() {
        this[kGreatestCommonDivisor] = this[kClients].map((p3) => p3[kWeight]).reduce(getGreatestCommonDivisor, 0);
      }
      removeUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);
        if (pool) {
          this[kRemoveClient](pool);
        }
        return this;
      }
      get upstreams() {
        return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p3) => p3[kUrl].origin);
      }
      [kGetDispatcher]() {
        if (this[kClients].length === 0) {
          throw new BalancedPoolMissingUpstreamError();
        }
        const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);
        if (!dispatcher) {
          return;
        }
        const allClientsBusy = this[kClients].map((pool) => pool[kNeedDrain]).reduce((a3, b3) => a3 && b3, true);
        if (allClientsBusy) {
          return;
        }
        let counter = 0;
        let maxWeightIndex = this[kClients].findIndex((pool) => !pool[kNeedDrain]);
        while (counter++ < this[kClients].length) {
          this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
          const pool = this[kClients][this[kIndex]];
          if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
            maxWeightIndex = this[kIndex];
          }
          if (this[kIndex] === 0) {
            this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
            if (this[kCurrentWeight] <= 0) {
              this[kCurrentWeight] = this[kMaxWeightPerServer];
            }
          }
          if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
            return pool;
          }
        }
        this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
        this[kIndex] = maxWeightIndex;
        return this[kClients][maxWeightIndex];
      }
    };
    module.exports = BalancedPool;
  }
});

// node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS({
  "node_modules/undici/lib/compat/dispatcher-weakref.js"(exports2, module) {
    "use strict";
    var { kConnected, kSize } = require_symbols();
    var CompatWeakRef = class {
      static {
        __name(this, "CompatWeakRef");
      }
      constructor(value) {
        this.value = value;
      }
      deref() {
        return this.value[kConnected] === 0 && this.value[kSize] === 0 ? void 0 : this.value;
      }
    };
    var CompatFinalizer = class {
      static {
        __name(this, "CompatFinalizer");
      }
      constructor(finalizer) {
        this.finalizer = finalizer;
      }
      register(dispatcher, key) {
        if (dispatcher.on) {
          dispatcher.on("disconnect", () => {
            if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
              this.finalizer(key);
            }
          });
        }
      }
    };
    module.exports = function() {
      if (process.env.NODE_V8_COVERAGE) {
        return {
          WeakRef: CompatWeakRef,
          FinalizationRegistry: CompatFinalizer
        };
      }
      return {
        WeakRef: global.WeakRef || CompatWeakRef,
        FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
      };
    };
  }
});

// node_modules/undici/lib/agent.js
var require_agent = __commonJS({
  "node_modules/undici/lib/agent.js"(exports2, module) {
    "use strict";
    var { InvalidArgumentError } = require_errors();
    var { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require_symbols();
    var DispatcherBase = require_dispatcher_base();
    var Pool = require_pool();
    var Client = require_client();
    var util3 = require_util();
    var createRedirectInterceptor = require_redirectInterceptor();
    var { WeakRef: WeakRef2, FinalizationRegistry } = require_dispatcher_weakref()();
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kMaxRedirections = Symbol("maxRedirections");
    var kOnDrain = Symbol("onDrain");
    var kFactory = Symbol("factory");
    var kFinalizer = Symbol("finalizer");
    var kOptions = Symbol("options");
    function defaultFactory(origin, opts) {
      return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);
    }
    __name(defaultFactory, "defaultFactory");
    var Agent3 = class extends DispatcherBase {
      static {
        __name(this, "Agent");
      }
      constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
        super();
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (connect && typeof connect !== "function") {
          connect = { ...connect };
        }
        this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor({ maxRedirections })];
        this[kOptions] = { ...util3.deepClone(options), connect };
        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
        this[kMaxRedirections] = maxRedirections;
        this[kFactory] = factory;
        this[kClients] = /* @__PURE__ */ new Map();
        this[kFinalizer] = new FinalizationRegistry(
          /* istanbul ignore next: gc is undeterministic */
          (key) => {
            const ref = this[kClients].get(key);
            if (ref !== void 0 && ref.deref() === void 0) {
              this[kClients].delete(key);
            }
          }
        );
        const agent = this;
        this[kOnDrain] = (origin, targets) => {
          agent.emit("drain", origin, [agent, ...targets]);
        };
        this[kOnConnect] = (origin, targets) => {
          agent.emit("connect", origin, [agent, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          agent.emit("disconnect", origin, [agent, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          agent.emit("connectionError", origin, [agent, ...targets], err);
        };
      }
      get [kRunning]() {
        let ret = 0;
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            ret += client[kRunning];
          }
        }
        return ret;
      }
      [kDispatch](opts, handler) {
        let key;
        if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) {
          key = String(opts.origin);
        } else {
          throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
        }
        const ref = this[kClients].get(key);
        let dispatcher = ref ? ref.deref() : null;
        if (!dispatcher) {
          dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
          this[kClients].set(key, new WeakRef2(dispatcher));
          this[kFinalizer].register(dispatcher, key);
        }
        return dispatcher.dispatch(opts, handler);
      }
      async [kClose]() {
        const closePromises = [];
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            closePromises.push(client.close());
          }
        }
        await Promise.all(closePromises);
      }
      async [kDestroy](err) {
        const destroyPromises = [];
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            destroyPromises.push(client.destroy(err));
          }
        }
        await Promise.all(destroyPromises);
      }
    };
    module.exports = Agent3;
  }
});

// node_modules/undici/lib/api/readable.js
var require_readable = __commonJS({
  "node_modules/undici/lib/api/readable.js"(exports2, module) {
    "use strict";
    var assert2 = __require("assert");
    var { Readable: Readable5 } = __require("stream");
    var { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require_errors();
    var util3 = require_util();
    var { ReadableStreamFrom, toUSVString } = require_util();
    var Blob2;
    var kConsume = Symbol("kConsume");
    var kReading = Symbol("kReading");
    var kBody = Symbol("kBody");
    var kAbort = Symbol("abort");
    var kContentType = Symbol("kContentType");
    var noop = /* @__PURE__ */ __name(() => {
    }, "noop");
    module.exports = class BodyReadable extends Readable5 {
      static {
        __name(this, "BodyReadable");
      }
      constructor({
        resume,
        abort,
        contentType: contentType2 = "",
        highWaterMark = 64 * 1024
        // Same as nodejs fs streams.
      }) {
        super({
          autoDestroy: true,
          read: resume,
          highWaterMark
        });
        this._readableState.dataEmitted = false;
        this[kAbort] = abort;
        this[kConsume] = null;
        this[kBody] = null;
        this[kContentType] = contentType2;
        this[kReading] = false;
      }
      destroy(err) {
        if (this.destroyed) {
          return this;
        }
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        if (err) {
          this[kAbort]();
        }
        return super.destroy(err);
      }
      emit(ev, ...args) {
        if (ev === "data") {
          this._readableState.dataEmitted = true;
        } else if (ev === "error") {
          this._readableState.errorEmitted = true;
        }
        return super.emit(ev, ...args);
      }
      on(ev, ...args) {
        if (ev === "data" || ev === "readable") {
          this[kReading] = true;
        }
        return super.on(ev, ...args);
      }
      addListener(ev, ...args) {
        return this.on(ev, ...args);
      }
      off(ev, ...args) {
        const ret = super.off(ev, ...args);
        if (ev === "data" || ev === "readable") {
          this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
        }
        return ret;
      }
      removeListener(ev, ...args) {
        return this.off(ev, ...args);
      }
      push(chunk) {
        if (this[kConsume] && chunk !== null && this.readableLength === 0) {
          consumePush(this[kConsume], chunk);
          return this[kReading] ? super.push(chunk) : true;
        }
        return super.push(chunk);
      }
      // https://fetch.spec.whatwg.org/#dom-body-text
      async text() {
        return consume(this, "text");
      }
      // https://fetch.spec.whatwg.org/#dom-body-json
      async json() {
        return consume(this, "json");
      }
      // https://fetch.spec.whatwg.org/#dom-body-blob
      async blob() {
        return consume(this, "blob");
      }
      // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
      async arrayBuffer() {
        return consume(this, "arrayBuffer");
      }
      // https://fetch.spec.whatwg.org/#dom-body-formdata
      async formData() {
        throw new NotSupportedError();
      }
      // https://fetch.spec.whatwg.org/#dom-body-bodyused
      get bodyUsed() {
        return util3.isDisturbed(this);
      }
      // https://fetch.spec.whatwg.org/#dom-body-body
      get body() {
        if (!this[kBody]) {
          this[kBody] = ReadableStreamFrom(this);
          if (this[kConsume]) {
            this[kBody].getReader();
            assert2(this[kBody].locked);
          }
        }
        return this[kBody];
      }
      dump(opts) {
        let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
        const signal = opts && opts.signal;
        if (signal) {
          try {
            if (typeof signal !== "object" || !("aborted" in signal)) {
              throw new InvalidArgumentError("signal must be an AbortSignal");
            }
            util3.throwIfAborted(signal);
          } catch (err) {
            return Promise.reject(err);
          }
        }
        if (this.closed) {
          return Promise.resolve(null);
        }
        return new Promise((resolve2, reject) => {
          const signalListenerCleanup = signal ? util3.addAbortListener(signal, () => {
            this.destroy();
          }) : noop;
          this.on("close", function() {
            signalListenerCleanup();
            if (signal && signal.aborted) {
              reject(signal.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" }));
            } else {
              resolve2(null);
            }
          }).on("error", noop).on("data", function(chunk) {
            limit -= chunk.length;
            if (limit <= 0) {
              this.destroy();
            }
          }).resume();
        });
      }
    };
    function isLocked(self2) {
      return self2[kBody] && self2[kBody].locked === true || self2[kConsume];
    }
    __name(isLocked, "isLocked");
    function isUnusable(self2) {
      return util3.isDisturbed(self2) || isLocked(self2);
    }
    __name(isUnusable, "isUnusable");
    async function consume(stream, type2) {
      if (isUnusable(stream)) {
        throw new TypeError("unusable");
      }
      assert2(!stream[kConsume]);
      return new Promise((resolve2, reject) => {
        stream[kConsume] = {
          type: type2,
          stream,
          resolve: resolve2,
          reject,
          length: 0,
          body: []
        };
        stream.on("error", function(err) {
          consumeFinish(this[kConsume], err);
        }).on("close", function() {
          if (this[kConsume].body !== null) {
            consumeFinish(this[kConsume], new RequestAbortedError());
          }
        });
        process.nextTick(consumeStart, stream[kConsume]);
      });
    }
    __name(consume, "consume");
    function consumeStart(consume2) {
      if (consume2.body === null) {
        return;
      }
      const { _readableState: state3 } = consume2.stream;
      for (const chunk of state3.buffer) {
        consumePush(consume2, chunk);
      }
      if (state3.endEmitted) {
        consumeEnd(this[kConsume]);
      } else {
        consume2.stream.on("end", function() {
          consumeEnd(this[kConsume]);
        });
      }
      consume2.stream.resume();
      while (consume2.stream.read() != null) {
      }
    }
    __name(consumeStart, "consumeStart");
    function consumeEnd(consume2) {
      const { type: type2, body: body2, resolve: resolve2, stream, length } = consume2;
      try {
        if (type2 === "text") {
          resolve2(toUSVString(Buffer.concat(body2)));
        } else if (type2 === "json") {
          resolve2(JSON.parse(Buffer.concat(body2)));
        } else if (type2 === "arrayBuffer") {
          const dst = new Uint8Array(length);
          let pos = 0;
          for (const buf of body2) {
            dst.set(buf, pos);
            pos += buf.byteLength;
          }
          resolve2(dst.buffer);
        } else if (type2 === "blob") {
          if (!Blob2) {
            Blob2 = __require("buffer").Blob;
          }
          resolve2(new Blob2(body2, { type: stream[kContentType] }));
        }
        consumeFinish(consume2);
      } catch (err) {
        stream.destroy(err);
      }
    }
    __name(consumeEnd, "consumeEnd");
    function consumePush(consume2, chunk) {
      consume2.length += chunk.length;
      consume2.body.push(chunk);
    }
    __name(consumePush, "consumePush");
    function consumeFinish(consume2, err) {
      if (consume2.body === null) {
        return;
      }
      if (err) {
        consume2.reject(err);
      } else {
        consume2.resolve();
      }
      consume2.type = null;
      consume2.stream = null;
      consume2.resolve = null;
      consume2.reject = null;
      consume2.length = 0;
      consume2.body = null;
    }
    __name(consumeFinish, "consumeFinish");
  }
});

// node_modules/undici/lib/api/util.js
var require_util3 = __commonJS({
  "node_modules/undici/lib/api/util.js"(exports2, module) {
    "use strict";
    var assert2 = __require("assert");
    var {
      ResponseStatusCodeError
    } = require_errors();
    var { toUSVString } = require_util();
    async function getResolveErrorBodyCallback({ callback, body: body2, contentType: contentType2, statusCode, statusMessage, headers }) {
      assert2(body2);
      let chunks = [];
      let limit = 0;
      for await (const chunk of body2) {
        chunks.push(chunk);
        limit += chunk.length;
        if (limit > 128 * 1024) {
          chunks = null;
          break;
        }
      }
      if (statusCode === 204 || !contentType2 || !chunks) {
        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
        return;
      }
      try {
        if (contentType2.startsWith("application/json")) {
          const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
        if (contentType2.startsWith("text/")) {
          const payload = toUSVString(Buffer.concat(chunks));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
      } catch (err) {
      }
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
    }
    __name(getResolveErrorBodyCallback, "getResolveErrorBodyCallback");
    module.exports = { getResolveErrorBodyCallback };
  }
});

// node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS({
  "node_modules/undici/lib/api/abort-signal.js"(exports2, module) {
    "use strict";
    var { addAbortListener } = require_util();
    var { RequestAbortedError } = require_errors();
    var kListener = Symbol("kListener");
    var kSignal = Symbol("kSignal");
    function abort(self2) {
      if (self2.abort) {
        self2.abort();
      } else {
        self2.onError(new RequestAbortedError());
      }
    }
    __name(abort, "abort");
    function addSignal(self2, signal) {
      self2[kSignal] = null;
      self2[kListener] = null;
      if (!signal) {
        return;
      }
      if (signal.aborted) {
        abort(self2);
        return;
      }
      self2[kSignal] = signal;
      self2[kListener] = () => {
        abort(self2);
      };
      addAbortListener(self2[kSignal], self2[kListener]);
    }
    __name(addSignal, "addSignal");
    function removeSignal(self2) {
      if (!self2[kSignal]) {
        return;
      }
      if ("removeEventListener" in self2[kSignal]) {
        self2[kSignal].removeEventListener("abort", self2[kListener]);
      } else {
        self2[kSignal].removeListener("abort", self2[kListener]);
      }
      self2[kSignal] = null;
      self2[kListener] = null;
    }
    __name(removeSignal, "removeSignal");
    module.exports = {
      addSignal,
      removeSignal
    };
  }
});

// node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS({
  "node_modules/undici/lib/api/api-request.js"(exports2, module) {
    "use strict";
    var Readable5 = require_readable();
    var {
      InvalidArgumentError,
      RequestAbortedError
    } = require_errors();
    var util3 = require_util();
    var { getResolveErrorBodyCallback } = require_util3();
    var { AsyncResource } = __require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var RequestHandler = class extends AsyncResource {
      static {
        __name(this, "RequestHandler");
      }
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body: body2, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) {
            throw new InvalidArgumentError("invalid highWaterMark");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_REQUEST");
        } catch (err) {
          if (util3.isStream(body2)) {
            util3.destroy(body2.on("error", util3.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.body = body2;
        this.trailers = {};
        this.context = null;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError;
        this.highWaterMark = highWaterMark;
        if (util3.isStream(body2)) {
          body2.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;
        const headers = responseHeaders === "raw" ? util3.parseRawHeaders(rawHeaders) : util3.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        const parsedHeaders = responseHeaders === "raw" ? util3.parseHeaders(rawHeaders) : headers;
        const contentType2 = parsedHeaders["content-type"];
        const body2 = new Readable5({ resume, abort, contentType: contentType2, highWaterMark });
        this.callback = null;
        this.res = body2;
        if (callback !== null) {
          if (this.throwOnError && statusCode >= 400) {
            this.runInAsyncScope(
              getResolveErrorBodyCallback,
              null,
              { callback, body: body2, contentType: contentType2, statusCode, statusMessage, headers }
            );
          } else {
            this.runInAsyncScope(callback, null, null, {
              statusCode,
              headers,
              trailers: this.trailers,
              opaque,
              body: body2,
              context
            });
          }
        }
      }
      onData(chunk) {
        const { res } = this;
        return res.push(chunk);
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        util3.parseHeaders(trailers, this.trailers);
        res.push(null);
      }
      onError(err) {
        const { res, callback, body: body2, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (res) {
          this.res = null;
          queueMicrotask(() => {
            util3.destroy(res, err);
          });
        }
        if (body2) {
          this.body = null;
          util3.destroy(body2, err);
        }
      }
    };
    function request3(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve2, reject) => {
          request3.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve2(data);
          });
        });
      }
      try {
        this.dispatch(opts, new RequestHandler(opts, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    __name(request3, "request");
    module.exports = request3;
    module.exports.RequestHandler = RequestHandler;
  }
});

// node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS({
  "node_modules/undici/lib/api/api-stream.js"(exports2, module) {
    "use strict";
    var { finished, PassThrough } = __require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util3 = require_util();
    var { getResolveErrorBodyCallback } = require_util3();
    var { AsyncResource } = __require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var StreamHandler = class extends AsyncResource {
      static {
        __name(this, "StreamHandler");
      }
      constructor(opts, factory, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body: body2, onInfo, responseHeaders, throwOnError } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (typeof factory !== "function") {
            throw new InvalidArgumentError("invalid factory");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_STREAM");
        } catch (err) {
          if (util3.isStream(body2)) {
            util3.destroy(body2.on("error", util3.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.factory = factory;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.context = null;
        this.trailers = null;
        this.body = body2;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError || false;
        if (util3.isStream(body2)) {
          body2.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { factory, opaque, context, callback, responseHeaders } = this;
        const headers = responseHeaders === "raw" ? util3.parseRawHeaders(rawHeaders) : util3.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.factory = null;
        let res;
        if (this.throwOnError && statusCode >= 400) {
          const parsedHeaders = responseHeaders === "raw" ? util3.parseHeaders(rawHeaders) : headers;
          const contentType2 = parsedHeaders["content-type"];
          res = new PassThrough();
          this.callback = null;
          this.runInAsyncScope(
            getResolveErrorBodyCallback,
            null,
            { callback, body: res, contentType: contentType2, statusCode, statusMessage, headers }
          );
        } else {
          if (factory === null) {
            return;
          }
          res = this.runInAsyncScope(factory, null, {
            statusCode,
            headers,
            opaque,
            context
          });
          if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
            throw new InvalidReturnValueError("expected Writable");
          }
          finished(res, { readable: false }, (err) => {
            const { callback: callback2, res: res2, opaque: opaque2, trailers, abort } = this;
            this.res = null;
            if (err || !res2.readable) {
              util3.destroy(res2, err);
            }
            this.callback = null;
            this.runInAsyncScope(callback2, null, err || null, { opaque: opaque2, trailers });
            if (err) {
              abort();
            }
          });
        }
        res.on("drain", resume);
        this.res = res;
        const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
        return needDrain !== true;
      }
      onData(chunk) {
        const { res } = this;
        return res ? res.write(chunk) : true;
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        if (!res) {
          return;
        }
        this.trailers = util3.parseHeaders(trailers);
        res.end();
      }
      onError(err) {
        const { res, callback, opaque, body: body2 } = this;
        removeSignal(this);
        this.factory = null;
        if (res) {
          this.res = null;
          util3.destroy(res, err);
        } else if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (body2) {
          this.body = null;
          util3.destroy(body2, err);
        }
      }
    };
    function stream(opts, factory, callback) {
      if (callback === void 0) {
        return new Promise((resolve2, reject) => {
          stream.call(this, opts, factory, (err, data) => {
            return err ? reject(err) : resolve2(data);
          });
        });
      }
      try {
        this.dispatch(opts, new StreamHandler(opts, factory, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    __name(stream, "stream");
    module.exports = stream;
  }
});

// node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS({
  "node_modules/undici/lib/api/api-pipeline.js"(exports2, module) {
    "use strict";
    var {
      Readable: Readable5,
      Duplex,
      PassThrough
    } = __require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util3 = require_util();
    var { AsyncResource } = __require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var assert2 = __require("assert");
    var kResume = Symbol("resume");
    var PipelineRequest = class extends Readable5 {
      static {
        __name(this, "PipelineRequest");
      }
      constructor() {
        super({ autoDestroy: true });
        this[kResume] = null;
      }
      _read() {
        const { [kResume]: resume } = this;
        if (resume) {
          this[kResume] = null;
          resume();
        }
      }
      _destroy(err, callback) {
        this._read();
        callback(err);
      }
    };
    var PipelineResponse = class extends Readable5 {
      static {
        __name(this, "PipelineResponse");
      }
      constructor(resume) {
        super({ autoDestroy: true });
        this[kResume] = resume;
      }
      _read() {
        this[kResume]();
      }
      _destroy(err, callback) {
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        callback(err);
      }
    };
    var PipelineHandler = class extends AsyncResource {
      static {
        __name(this, "PipelineHandler");
      }
      constructor(opts, handler) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof handler !== "function") {
          throw new InvalidArgumentError("invalid handler");
        }
        const { signal, method, opaque, onInfo, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_PIPELINE");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.handler = handler;
        this.abort = null;
        this.context = null;
        this.onInfo = onInfo || null;
        this.req = new PipelineRequest().on("error", util3.nop);
        this.ret = new Duplex({
          readableObjectMode: opts.objectMode,
          autoDestroy: true,
          read: /* @__PURE__ */ __name(() => {
            const { body: body2 } = this;
            if (body2 && body2.resume) {
              body2.resume();
            }
          }, "read"),
          write: /* @__PURE__ */ __name((chunk, encoding, callback) => {
            const { req } = this;
            if (req.push(chunk, encoding) || req._readableState.destroyed) {
              callback();
            } else {
              req[kResume] = callback;
            }
          }, "write"),
          destroy: /* @__PURE__ */ __name((err, callback) => {
            const { body: body2, req, res, ret, abort } = this;
            if (!err && !ret._readableState.endEmitted) {
              err = new RequestAbortedError();
            }
            if (abort && err) {
              abort();
            }
            util3.destroy(body2, err);
            util3.destroy(req, err);
            util3.destroy(res, err);
            removeSignal(this);
            callback(err);
          }, "destroy")
        }).on("prefinish", () => {
          const { req } = this;
          req.push(null);
        });
        this.res = null;
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        const { ret, res } = this;
        assert2(!res, "pipeline cannot be retried");
        if (ret.destroyed) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders(statusCode, rawHeaders, resume) {
        const { opaque, handler, context } = this;
        if (statusCode < 200) {
          if (this.onInfo) {
            const headers = this.responseHeaders === "raw" ? util3.parseRawHeaders(rawHeaders) : util3.parseHeaders(rawHeaders);
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.res = new PipelineResponse(resume);
        let body2;
        try {
          this.handler = null;
          const headers = this.responseHeaders === "raw" ? util3.parseRawHeaders(rawHeaders) : util3.parseHeaders(rawHeaders);
          body2 = this.runInAsyncScope(handler, null, {
            statusCode,
            headers,
            opaque,
            body: this.res,
            context
          });
        } catch (err) {
          this.res.on("error", util3.nop);
          throw err;
        }
        if (!body2 || typeof body2.on !== "function") {
          throw new InvalidReturnValueError("expected Readable");
        }
        body2.on("data", (chunk) => {
          const { ret, body: body3 } = this;
          if (!ret.push(chunk) && body3.pause) {
            body3.pause();
          }
        }).on("error", (err) => {
          const { ret } = this;
          util3.destroy(ret, err);
        }).on("end", () => {
          const { ret } = this;
          ret.push(null);
        }).on("close", () => {
          const { ret } = this;
          if (!ret._readableState.ended) {
            util3.destroy(ret, new RequestAbortedError());
          }
        });
        this.body = body2;
      }
      onData(chunk) {
        const { res } = this;
        return res.push(chunk);
      }
      onComplete(trailers) {
        const { res } = this;
        res.push(null);
      }
      onError(err) {
        const { ret } = this;
        this.handler = null;
        util3.destroy(ret, err);
      }
    };
    function pipeline(opts, handler) {
      try {
        const pipelineHandler = new PipelineHandler(opts, handler);
        this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
        return pipelineHandler.ret;
      } catch (err) {
        return new PassThrough().destroy(err);
      }
    }
    __name(pipeline, "pipeline");
    module.exports = pipeline;
  }
});

// node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS({
  "node_modules/undici/lib/api/api-upgrade.js"(exports2, module) {
    "use strict";
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var { AsyncResource } = __require("async_hooks");
    var util3 = require_util();
    var { addSignal, removeSignal } = require_abort_signal();
    var assert2 = __require("assert");
    var UpgradeHandler = class extends AsyncResource {
      static {
        __name(this, "UpgradeHandler");
      }
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_UPGRADE");
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.abort = null;
        this.context = null;
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = null;
      }
      onHeaders() {
        throw new SocketError("bad upgrade", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context } = this;
        assert2.strictEqual(statusCode, 101);
        removeSignal(this);
        this.callback = null;
        const headers = this.responseHeaders === "raw" ? util3.parseRawHeaders(rawHeaders) : util3.parseHeaders(rawHeaders);
        this.runInAsyncScope(callback, null, null, {
          headers,
          socket,
          opaque,
          context
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function upgrade(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve2, reject) => {
          upgrade.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve2(data);
          });
        });
      }
      try {
        const upgradeHandler = new UpgradeHandler(opts, callback);
        this.dispatch({
          ...opts,
          method: opts.method || "GET",
          upgrade: opts.protocol || "Websocket"
        }, upgradeHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    __name(upgrade, "upgrade");
    module.exports = upgrade;
  }
});

// node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS({
  "node_modules/undici/lib/api/api-connect.js"(exports2, module) {
    "use strict";
    var { AsyncResource } = __require("async_hooks");
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var util3 = require_util();
    var { addSignal, removeSignal } = require_abort_signal();
    var ConnectHandler = class extends AsyncResource {
      static {
        __name(this, "ConnectHandler");
      }
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_CONNECT");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.callback = callback;
        this.abort = null;
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders() {
        throw new SocketError("bad connect", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context } = this;
        removeSignal(this);
        this.callback = null;
        let headers = rawHeaders;
        if (headers != null) {
          headers = this.responseHeaders === "raw" ? util3.parseRawHeaders(rawHeaders) : util3.parseHeaders(rawHeaders);
        }
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          socket,
          opaque,
          context
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function connect(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve2, reject) => {
          connect.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve2(data);
          });
        });
      }
      try {
        const connectHandler = new ConnectHandler(opts, callback);
        this.dispatch({ ...opts, method: "CONNECT" }, connectHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    __name(connect, "connect");
    module.exports = connect;
  }
});

// node_modules/undici/lib/api/index.js
var require_api = __commonJS({
  "node_modules/undici/lib/api/index.js"(exports2, module) {
    "use strict";
    module.exports.request = require_api_request();
    module.exports.stream = require_api_stream();
    module.exports.pipeline = require_api_pipeline();
    module.exports.upgrade = require_api_upgrade();
    module.exports.connect = require_api_connect();
  }
});

// node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS({
  "node_modules/undici/lib/mock/mock-errors.js"(exports2, module) {
    "use strict";
    var { UndiciError } = require_errors();
    var MockNotMatchedError = class _MockNotMatchedError extends UndiciError {
      static {
        __name(this, "MockNotMatchedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _MockNotMatchedError);
        this.name = "MockNotMatchedError";
        this.message = message || "The request does not match any registered mock dispatches";
        this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
      }
    };
    module.exports = {
      MockNotMatchedError
    };
  }
});

// node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS({
  "node_modules/undici/lib/mock/mock-symbols.js"(exports2, module) {
    "use strict";
    module.exports = {
      kAgent: Symbol("agent"),
      kOptions: Symbol("options"),
      kFactory: Symbol("factory"),
      kDispatches: Symbol("dispatches"),
      kDispatchKey: Symbol("dispatch key"),
      kDefaultHeaders: Symbol("default headers"),
      kDefaultTrailers: Symbol("default trailers"),
      kContentLength: Symbol("content length"),
      kMockAgent: Symbol("mock agent"),
      kMockAgentSet: Symbol("mock agent set"),
      kMockAgentGet: Symbol("mock agent get"),
      kMockDispatch: Symbol("mock dispatch"),
      kClose: Symbol("close"),
      kOriginalClose: Symbol("original agent close"),
      kOrigin: Symbol("origin"),
      kIsMockActive: Symbol("is mock active"),
      kNetConnect: Symbol("net connect"),
      kGetNetConnect: Symbol("get net connect"),
      kConnected: Symbol("connected")
    };
  }
});

// node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS({
  "node_modules/undici/lib/mock/mock-utils.js"(exports2, module) {
    "use strict";
    var { MockNotMatchedError } = require_mock_errors();
    var {
      kDispatches,
      kMockAgent,
      kOriginalDispatch,
      kOrigin,
      kGetNetConnect
    } = require_mock_symbols();
    var { buildURL, nop } = require_util();
    var { STATUS_CODES: STATUS_CODES2 } = __require("http");
    var {
      types: {
        isPromise: isPromise2
      }
    } = __require("util");
    function matchValue(match3, value) {
      if (typeof match3 === "string") {
        return match3 === value;
      }
      if (match3 instanceof RegExp) {
        return match3.test(value);
      }
      if (typeof match3 === "function") {
        return match3(value) === true;
      }
      return false;
    }
    __name(matchValue, "matchValue");
    function lowerCaseEntries(headers) {
      return Object.fromEntries(
        Object.entries(headers).map(([headerName, headerValue]) => {
          return [headerName.toLocaleLowerCase(), headerValue];
        })
      );
    }
    __name(lowerCaseEntries, "lowerCaseEntries");
    function getHeaderByName(headers, key) {
      if (Array.isArray(headers)) {
        for (let i3 = 0; i3 < headers.length; i3 += 2) {
          if (headers[i3].toLocaleLowerCase() === key.toLocaleLowerCase()) {
            return headers[i3 + 1];
          }
        }
        return void 0;
      } else if (typeof headers.get === "function") {
        return headers.get(key);
      } else {
        return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
      }
    }
    __name(getHeaderByName, "getHeaderByName");
    function buildHeadersFromArray(headers) {
      const clone = headers.slice();
      const entries2 = [];
      for (let index2 = 0; index2 < clone.length; index2 += 2) {
        entries2.push([clone[index2], clone[index2 + 1]]);
      }
      return Object.fromEntries(entries2);
    }
    __name(buildHeadersFromArray, "buildHeadersFromArray");
    function matchHeaders(mockDispatch2, headers) {
      if (typeof mockDispatch2.headers === "function") {
        if (Array.isArray(headers)) {
          headers = buildHeadersFromArray(headers);
        }
        return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});
      }
      if (typeof mockDispatch2.headers === "undefined") {
        return true;
      }
      if (typeof headers !== "object" || typeof mockDispatch2.headers !== "object") {
        return false;
      }
      for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {
        const headerValue = getHeaderByName(headers, matchHeaderName);
        if (!matchValue(matchHeaderValue, headerValue)) {
          return false;
        }
      }
      return true;
    }
    __name(matchHeaders, "matchHeaders");
    function safeUrl(path14) {
      if (typeof path14 !== "string") {
        return path14;
      }
      const pathSegments = path14.split("?");
      if (pathSegments.length !== 2) {
        return path14;
      }
      const qp = new URLSearchParams(pathSegments.pop());
      qp.sort();
      return [...pathSegments, qp.toString()].join("?");
    }
    __name(safeUrl, "safeUrl");
    function matchKey(mockDispatch2, { path: path14, method, body: body2, headers }) {
      const pathMatch = matchValue(mockDispatch2.path, path14);
      const methodMatch = matchValue(mockDispatch2.method, method);
      const bodyMatch = typeof mockDispatch2.body !== "undefined" ? matchValue(mockDispatch2.body, body2) : true;
      const headersMatch = matchHeaders(mockDispatch2, headers);
      return pathMatch && methodMatch && bodyMatch && headersMatch;
    }
    __name(matchKey, "matchKey");
    function getResponseData(data) {
      if (Buffer.isBuffer(data)) {
        return data;
      } else if (typeof data === "object") {
        return JSON.stringify(data);
      } else {
        return data.toString();
      }
    }
    __name(getResponseData, "getResponseData");
    function getMockDispatch(mockDispatches, key) {
      const basePath = key.query ? buildURL(key.path, key.query) : key.path;
      const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
      let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path14 }) => matchValue(safeUrl(path14), resolvedPath));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ body: body2 }) => typeof body2 !== "undefined" ? matchValue(body2, key.body) : true);
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key.headers));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
      }
      return matchedMockDispatches[0];
    }
    __name(getMockDispatch, "getMockDispatch");
    function addMockDispatch(mockDispatches, key, data) {
      const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };
      const replyData = typeof data === "function" ? { callback: data } : { ...data };
      const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };
      mockDispatches.push(newMockDispatch);
      return newMockDispatch;
    }
    __name(addMockDispatch, "addMockDispatch");
    function deleteMockDispatch(mockDispatches, key) {
      const index2 = mockDispatches.findIndex((dispatch) => {
        if (!dispatch.consumed) {
          return false;
        }
        return matchKey(dispatch, key);
      });
      if (index2 !== -1) {
        mockDispatches.splice(index2, 1);
      }
    }
    __name(deleteMockDispatch, "deleteMockDispatch");
    function buildKey(opts) {
      const { path: path14, method, body: body2, headers, query } = opts;
      return {
        path: path14,
        method,
        body: body2,
        headers,
        query
      };
    }
    __name(buildKey, "buildKey");
    function generateKeyValues(data) {
      return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
        ...keyValuePairs,
        Buffer.from(`${key}`),
        Array.isArray(value) ? value.map((x3) => Buffer.from(`${x3}`)) : Buffer.from(`${value}`)
      ], []);
    }
    __name(generateKeyValues, "generateKeyValues");
    function getStatusText(statusCode) {
      return STATUS_CODES2[statusCode] || "unknown";
    }
    __name(getStatusText, "getStatusText");
    async function getResponse(body2) {
      const buffers = [];
      for await (const data of body2) {
        buffers.push(data);
      }
      return Buffer.concat(buffers).toString("utf8");
    }
    __name(getResponse, "getResponse");
    function mockDispatch(opts, handler) {
      const key = buildKey(opts);
      const mockDispatch2 = getMockDispatch(this[kDispatches], key);
      mockDispatch2.timesInvoked++;
      if (mockDispatch2.data.callback) {
        mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };
      }
      const { data: { statusCode, data, headers, trailers, error }, delay: delay5, persist } = mockDispatch2;
      const { timesInvoked, times } = mockDispatch2;
      mockDispatch2.consumed = !persist && timesInvoked >= times;
      mockDispatch2.pending = timesInvoked < times;
      if (error !== null) {
        deleteMockDispatch(this[kDispatches], key);
        handler.onError(error);
        return true;
      }
      if (typeof delay5 === "number" && delay5 > 0) {
        setTimeout(() => {
          handleReply(this[kDispatches]);
        }, delay5);
      } else {
        handleReply(this[kDispatches]);
      }
      function handleReply(mockDispatches, _data = data) {
        const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
        const body2 = typeof _data === "function" ? _data({ ...opts, headers: optsHeaders }) : _data;
        if (isPromise2(body2)) {
          body2.then((newData) => handleReply(mockDispatches, newData));
          return;
        }
        const responseData = getResponseData(body2);
        const responseHeaders = generateKeyValues(headers);
        const responseTrailers = generateKeyValues(trailers);
        handler.abort = nop;
        handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode));
        handler.onData(Buffer.from(responseData));
        handler.onComplete(responseTrailers);
        deleteMockDispatch(mockDispatches, key);
      }
      __name(handleReply, "handleReply");
      function resume() {
      }
      __name(resume, "resume");
      return true;
    }
    __name(mockDispatch, "mockDispatch");
    function buildMockDispatch() {
      const agent = this[kMockAgent];
      const origin = this[kOrigin];
      const originalDispatch = this[kOriginalDispatch];
      return /* @__PURE__ */ __name(function dispatch(opts, handler) {
        if (agent.isMockActive) {
          try {
            mockDispatch.call(this, opts, handler);
          } catch (error) {
            if (error instanceof MockNotMatchedError) {
              const netConnect = agent[kGetNetConnect]();
              if (netConnect === false) {
                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
              }
              if (checkNetConnect(netConnect, origin)) {
                originalDispatch.call(this, opts, handler);
              } else {
                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
              }
            } else {
              throw error;
            }
          }
        } else {
          originalDispatch.call(this, opts, handler);
        }
      }, "dispatch");
    }
    __name(buildMockDispatch, "buildMockDispatch");
    function checkNetConnect(netConnect, origin) {
      const url2 = new URL(origin);
      if (netConnect === true) {
        return true;
      } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url2.host))) {
        return true;
      }
      return false;
    }
    __name(checkNetConnect, "checkNetConnect");
    function buildMockOptions(opts) {
      if (opts) {
        const { agent, ...mockOptions } = opts;
        return mockOptions;
      }
    }
    __name(buildMockOptions, "buildMockOptions");
    module.exports = {
      getResponseData,
      getMockDispatch,
      addMockDispatch,
      deleteMockDispatch,
      buildKey,
      generateKeyValues,
      matchValue,
      getResponse,
      getStatusText,
      mockDispatch,
      buildMockDispatch,
      checkNetConnect,
      buildMockOptions,
      getHeaderByName
    };
  }
});

// node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS({
  "node_modules/undici/lib/mock/mock-interceptor.js"(exports2, module) {
    "use strict";
    var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kDispatchKey,
      kDefaultHeaders,
      kDefaultTrailers,
      kContentLength,
      kMockDispatch
    } = require_mock_symbols();
    var { InvalidArgumentError } = require_errors();
    var { buildURL } = require_util();
    var MockScope = class {
      static {
        __name(this, "MockScope");
      }
      constructor(mockDispatch) {
        this[kMockDispatch] = mockDispatch;
      }
      /**
       * Delay a reply by a set amount in ms.
       */
      delay(waitInMs) {
        if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) {
          throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
        }
        this[kMockDispatch].delay = waitInMs;
        return this;
      }
      /**
       * For a defined reply, never mark as consumed.
       */
      persist() {
        this[kMockDispatch].persist = true;
        return this;
      }
      /**
       * Allow one to define a reply for a set amount of matching requests.
       */
      times(repeatTimes) {
        if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
          throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
        }
        this[kMockDispatch].times = repeatTimes;
        return this;
      }
    };
    var MockInterceptor = class {
      static {
        __name(this, "MockInterceptor");
      }
      constructor(opts, mockDispatches) {
        if (typeof opts !== "object") {
          throw new InvalidArgumentError("opts must be an object");
        }
        if (typeof opts.path === "undefined") {
          throw new InvalidArgumentError("opts.path must be defined");
        }
        if (typeof opts.method === "undefined") {
          opts.method = "GET";
        }
        if (typeof opts.path === "string") {
          if (opts.query) {
            opts.path = buildURL(opts.path, opts.query);
          } else {
            const parsedURL = new URL(opts.path, "data://");
            opts.path = parsedURL.pathname + parsedURL.search;
          }
        }
        if (typeof opts.method === "string") {
          opts.method = opts.method.toUpperCase();
        }
        this[kDispatchKey] = buildKey(opts);
        this[kDispatches] = mockDispatches;
        this[kDefaultHeaders] = {};
        this[kDefaultTrailers] = {};
        this[kContentLength] = false;
      }
      createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
        const responseData = getResponseData(data);
        const contentLength2 = this[kContentLength] ? { "content-length": responseData.length } : {};
        const headers = { ...this[kDefaultHeaders], ...contentLength2, ...responseOptions.headers };
        const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };
        return { statusCode, data, headers, trailers };
      }
      validateReplyParameters(statusCode, data, responseOptions) {
        if (typeof statusCode === "undefined") {
          throw new InvalidArgumentError("statusCode must be defined");
        }
        if (typeof data === "undefined") {
          throw new InvalidArgumentError("data must be defined");
        }
        if (typeof responseOptions !== "object") {
          throw new InvalidArgumentError("responseOptions must be an object");
        }
      }
      /**
       * Mock an undici request with a defined reply.
       */
      reply(replyData) {
        if (typeof replyData === "function") {
          const wrappedDefaultsCallback = /* @__PURE__ */ __name((opts) => {
            const resolvedData = replyData(opts);
            if (typeof resolvedData !== "object") {
              throw new InvalidArgumentError("reply options callback must return an object");
            }
            const { statusCode: statusCode2, data: data2 = "", responseOptions: responseOptions2 = {} } = resolvedData;
            this.validateReplyParameters(statusCode2, data2, responseOptions2);
            return {
              ...this.createMockScopeDispatchData(statusCode2, data2, responseOptions2)
            };
          }, "wrappedDefaultsCallback");
          const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
          return new MockScope(newMockDispatch2);
        }
        const [statusCode, data = "", responseOptions = {}] = [...arguments];
        this.validateReplyParameters(statusCode, data, responseOptions);
        const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
        return new MockScope(newMockDispatch);
      }
      /**
       * Mock an undici request with a defined error.
       */
      replyWithError(error) {
        if (typeof error === "undefined") {
          throw new InvalidArgumentError("error must be defined");
        }
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error });
        return new MockScope(newMockDispatch);
      }
      /**
       * Set default reply headers on the interceptor for subsequent replies
       */
      defaultReplyHeaders(headers) {
        if (typeof headers === "undefined") {
          throw new InvalidArgumentError("headers must be defined");
        }
        this[kDefaultHeaders] = headers;
        return this;
      }
      /**
       * Set default reply trailers on the interceptor for subsequent replies
       */
      defaultReplyTrailers(trailers) {
        if (typeof trailers === "undefined") {
          throw new InvalidArgumentError("trailers must be defined");
        }
        this[kDefaultTrailers] = trailers;
        return this;
      }
      /**
       * Set reply content length header for replies on the interceptor
       */
      replyContentLength() {
        this[kContentLength] = true;
        return this;
      }
    };
    module.exports.MockInterceptor = MockInterceptor;
    module.exports.MockScope = MockScope;
  }
});

// node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS({
  "node_modules/undici/lib/mock/mock-client.js"(exports2, module) {
    "use strict";
    var { promisify: promisify2 } = __require("util");
    var Client = require_client();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockClient = class extends Client {
      static {
        __name(this, "MockClient");
      }
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify2(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module.exports = MockClient;
  }
});

// node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS({
  "node_modules/undici/lib/mock/mock-pool.js"(exports2, module) {
    "use strict";
    var { promisify: promisify2 } = __require("util");
    var Pool = require_pool();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockPool = class extends Pool {
      static {
        __name(this, "MockPool");
      }
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify2(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module.exports = MockPool;
  }
});

// node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS({
  "node_modules/undici/lib/mock/pluralizer.js"(exports2, module) {
    "use strict";
    var singulars = {
      pronoun: "it",
      is: "is",
      was: "was",
      this: "this"
    };
    var plurals = {
      pronoun: "they",
      is: "are",
      was: "were",
      this: "these"
    };
    module.exports = class Pluralizer {
      static {
        __name(this, "Pluralizer");
      }
      constructor(singular, plural) {
        this.singular = singular;
        this.plural = plural;
      }
      pluralize(count) {
        const one = count === 1;
        const keys = one ? singulars : plurals;
        const noun = one ? this.singular : this.plural;
        return { ...keys, count, noun };
      }
    };
  }
});

// node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS({
  "node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports2, module) {
    "use strict";
    var { Transform: Transform3 } = __require("stream");
    var { Console } = __require("console");
    module.exports = class PendingInterceptorsFormatter {
      static {
        __name(this, "PendingInterceptorsFormatter");
      }
      constructor({ disableColors } = {}) {
        this.transform = new Transform3({
          transform(chunk, _enc, cb) {
            cb(null, chunk);
          }
        });
        this.logger = new Console({
          stdout: this.transform,
          inspectOptions: {
            colors: !disableColors && !process.env.CI
          }
        });
      }
      format(pendingInterceptors) {
        const withPrettyHeaders = pendingInterceptors.map(
          ({ method, path: path14, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
            Method: method,
            Origin: origin,
            Path: path14,
            "Status code": statusCode,
            Persistent: persist ? "\u2705" : "\u274C",
            Invocations: timesInvoked,
            Remaining: persist ? Infinity : times - timesInvoked
          })
        );
        this.logger.table(withPrettyHeaders);
        return this.transform.read().toString();
      }
    };
  }
});

// node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS({
  "node_modules/undici/lib/mock/mock-agent.js"(exports2, module) {
    "use strict";
    var { kClients } = require_symbols();
    var Agent3 = require_agent();
    var {
      kAgent,
      kMockAgentSet,
      kMockAgentGet,
      kDispatches,
      kIsMockActive,
      kNetConnect,
      kGetNetConnect,
      kOptions,
      kFactory
    } = require_mock_symbols();
    var MockClient = require_mock_client();
    var MockPool = require_mock_pool();
    var { matchValue, buildMockOptions } = require_mock_utils();
    var { InvalidArgumentError, UndiciError } = require_errors();
    var Dispatcher = require_dispatcher();
    var Pluralizer = require_pluralizer();
    var PendingInterceptorsFormatter = require_pending_interceptors_formatter();
    var FakeWeakRef = class {
      static {
        __name(this, "FakeWeakRef");
      }
      constructor(value) {
        this.value = value;
      }
      deref() {
        return this.value;
      }
    };
    var MockAgent = class extends Dispatcher {
      static {
        __name(this, "MockAgent");
      }
      constructor(opts) {
        super(opts);
        this[kNetConnect] = true;
        this[kIsMockActive] = true;
        if (opts && opts.agent && typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        const agent = opts && opts.agent ? opts.agent : new Agent3(opts);
        this[kAgent] = agent;
        this[kClients] = agent[kClients];
        this[kOptions] = buildMockOptions(opts);
      }
      get(origin) {
        let dispatcher = this[kMockAgentGet](origin);
        if (!dispatcher) {
          dispatcher = this[kFactory](origin);
          this[kMockAgentSet](origin, dispatcher);
        }
        return dispatcher;
      }
      dispatch(opts, handler) {
        this.get(opts.origin);
        return this[kAgent].dispatch(opts, handler);
      }
      async close() {
        await this[kAgent].close();
        this[kClients].clear();
      }
      deactivate() {
        this[kIsMockActive] = false;
      }
      activate() {
        this[kIsMockActive] = true;
      }
      enableNetConnect(matcher) {
        if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
          if (Array.isArray(this[kNetConnect])) {
            this[kNetConnect].push(matcher);
          } else {
            this[kNetConnect] = [matcher];
          }
        } else if (typeof matcher === "undefined") {
          this[kNetConnect] = true;
        } else {
          throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
        }
      }
      disableNetConnect() {
        this[kNetConnect] = false;
      }
      // This is required to bypass issues caused by using global symbols - see:
      // https://github.com/nodejs/undici/issues/1447
      get isMockActive() {
        return this[kIsMockActive];
      }
      [kMockAgentSet](origin, dispatcher) {
        this[kClients].set(origin, new FakeWeakRef(dispatcher));
      }
      [kFactory](origin) {
        const mockOptions = Object.assign({ agent: this }, this[kOptions]);
        return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
      }
      [kMockAgentGet](origin) {
        const ref = this[kClients].get(origin);
        if (ref) {
          return ref.deref();
        }
        if (typeof origin !== "string") {
          const dispatcher = this[kFactory]("http://localhost:9999");
          this[kMockAgentSet](origin, dispatcher);
          return dispatcher;
        }
        for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
          const nonExplicitDispatcher = nonExplicitRef.deref();
          if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
            const dispatcher = this[kFactory](origin);
            this[kMockAgentSet](origin, dispatcher);
            dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
            return dispatcher;
          }
        }
      }
      [kGetNetConnect]() {
        return this[kNetConnect];
      }
      pendingInterceptors() {
        const mockAgentClients = this[kClients];
        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending }) => pending);
      }
      assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
        const pending = this.pendingInterceptors();
        if (pending.length === 0) {
          return;
        }
        const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
        throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
      }
    };
    module.exports = MockAgent;
  }
});

// node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS({
  "node_modules/undici/lib/proxy-agent.js"(exports2, module) {
    "use strict";
    var { kProxy, kClose, kDestroy, kInterceptors } = require_symbols();
    var { URL: URL2 } = __require("url");
    var Agent3 = require_agent();
    var Pool = require_pool();
    var DispatcherBase = require_dispatcher_base();
    var { InvalidArgumentError, RequestAbortedError } = require_errors();
    var buildConnector = require_connect();
    var kAgent = Symbol("proxy agent");
    var kClient = Symbol("proxy client");
    var kProxyHeaders = Symbol("proxy headers");
    var kRequestTls = Symbol("request tls settings");
    var kProxyTls = Symbol("proxy tls settings");
    var kConnectEndpoint = Symbol("connect endpoint function");
    function defaultProtocolPort(protocol) {
      return protocol === "https:" ? 443 : 80;
    }
    __name(defaultProtocolPort, "defaultProtocolPort");
    function buildProxyOptions(opts) {
      if (typeof opts === "string") {
        opts = { uri: opts };
      }
      if (!opts || !opts.uri) {
        throw new InvalidArgumentError("Proxy opts.uri is mandatory");
      }
      return {
        uri: opts.uri,
        protocol: opts.protocol || "https"
      };
    }
    __name(buildProxyOptions, "buildProxyOptions");
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    __name(defaultFactory, "defaultFactory");
    var ProxyAgent = class extends DispatcherBase {
      static {
        __name(this, "ProxyAgent");
      }
      constructor(opts) {
        super(opts);
        this[kProxy] = buildProxyOptions(opts);
        this[kAgent] = new Agent3(opts);
        this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
        if (typeof opts === "string") {
          opts = { uri: opts };
        }
        if (!opts || !opts.uri) {
          throw new InvalidArgumentError("Proxy opts.uri is mandatory");
        }
        const { clientFactory = defaultFactory } = opts;
        if (typeof clientFactory !== "function") {
          throw new InvalidArgumentError("Proxy opts.clientFactory must be a function.");
        }
        this[kRequestTls] = opts.requestTls;
        this[kProxyTls] = opts.proxyTls;
        this[kProxyHeaders] = opts.headers || {};
        const resolvedUrl = new URL2(opts.uri);
        const { origin, port, host, username, password } = resolvedUrl;
        if (opts.auth && opts.token) {
          throw new InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
        } else if (opts.auth) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
        } else if (opts.token) {
          this[kProxyHeaders]["proxy-authorization"] = opts.token;
        } else if (username && password) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
        }
        const connect = buildConnector({ ...opts.proxyTls });
        this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
        this[kClient] = clientFactory(resolvedUrl, { connect });
        this[kAgent] = new Agent3({
          ...opts,
          connect: /* @__PURE__ */ __name(async (opts2, callback) => {
            let requestedHost = opts2.host;
            if (!opts2.port) {
              requestedHost += `:${defaultProtocolPort(opts2.protocol)}`;
            }
            try {
              const { socket, statusCode } = await this[kClient].connect({
                origin,
                port,
                path: requestedHost,
                signal: opts2.signal,
                headers: {
                  ...this[kProxyHeaders],
                  host
                }
              });
              if (statusCode !== 200) {
                socket.on("error", () => {
                }).destroy();
                callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
              }
              if (opts2.protocol !== "https:") {
                callback(null, socket);
                return;
              }
              let servername;
              if (this[kRequestTls]) {
                servername = this[kRequestTls].servername;
              } else {
                servername = opts2.servername;
              }
              this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);
            } catch (err) {
              callback(err);
            }
          }, "connect")
        });
      }
      dispatch(opts, handler) {
        const { host } = new URL2(opts.origin);
        const headers = buildHeaders(opts.headers);
        throwIfProxyAuthIsSent(headers);
        return this[kAgent].dispatch(
          {
            ...opts,
            headers: {
              ...headers,
              host
            }
          },
          handler
        );
      }
      async [kClose]() {
        await this[kAgent].close();
        await this[kClient].close();
      }
      async [kDestroy]() {
        await this[kAgent].destroy();
        await this[kClient].destroy();
      }
    };
    function buildHeaders(headers) {
      if (Array.isArray(headers)) {
        const headersPair = {};
        for (let i3 = 0; i3 < headers.length; i3 += 2) {
          headersPair[headers[i3]] = headers[i3 + 1];
        }
        return headersPair;
      }
      return headers;
    }
    __name(buildHeaders, "buildHeaders");
    function throwIfProxyAuthIsSent(headers) {
      const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
      if (existProxyAuth) {
        throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
      }
    }
    __name(throwIfProxyAuthIsSent, "throwIfProxyAuthIsSent");
    module.exports = ProxyAgent;
  }
});

// node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS({
  "node_modules/undici/lib/handler/RetryHandler.js"(exports2, module) {
    "use strict";
    var assert2 = __require("assert");
    var { kRetryHandlerDefaultRetry } = require_symbols();
    var { RequestRetryError } = require_errors();
    var { isDisturbed, parseHeaders, parseRangeHeader } = require_util();
    function calculateRetryAfterHeader(retryAfter) {
      const current2 = Date.now();
      const diff = new Date(retryAfter).getTime() - current2;
      return diff;
    }
    __name(calculateRetryAfterHeader, "calculateRetryAfterHeader");
    var RetryHandler = class _RetryHandler {
      static {
        __name(this, "RetryHandler");
      }
      constructor(opts, handlers) {
        const { retryOptions, ...dispatchOpts } = opts;
        const {
          // Retry scoped
          retry: retryFn,
          maxRetries,
          maxTimeout,
          minTimeout,
          timeoutFactor,
          // Response scoped
          methods,
          errorCodes,
          retryAfter,
          statusCodes
        } = retryOptions ?? {};
        this.dispatch = handlers.dispatch;
        this.handler = handlers.handler;
        this.opts = dispatchOpts;
        this.abort = null;
        this.aborted = false;
        this.retryOpts = {
          retry: retryFn ?? _RetryHandler[kRetryHandlerDefaultRetry],
          retryAfter: retryAfter ?? true,
          maxTimeout: maxTimeout ?? 30 * 1e3,
          // 30s,
          timeout: minTimeout ?? 500,
          // .5s
          timeoutFactor: timeoutFactor ?? 2,
          maxRetries: maxRetries ?? 5,
          // What errors we should retry
          methods: methods ?? ["GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE"],
          // Indicates which errors to retry
          statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
          // List of errors to retry
          errorCodes: errorCodes ?? [
            "ECONNRESET",
            "ECONNREFUSED",
            "ENOTFOUND",
            "ENETDOWN",
            "ENETUNREACH",
            "EHOSTDOWN",
            "EHOSTUNREACH",
            "EPIPE"
          ]
        };
        this.retryCount = 0;
        this.start = 0;
        this.end = null;
        this.etag = null;
        this.resume = null;
        this.handler.onConnect((reason) => {
          this.aborted = true;
          if (this.abort) {
            this.abort(reason);
          } else {
            this.reason = reason;
          }
        });
      }
      onRequestSent() {
        if (this.handler.onRequestSent) {
          this.handler.onRequestSent();
        }
      }
      onUpgrade(statusCode, headers, socket) {
        if (this.handler.onUpgrade) {
          this.handler.onUpgrade(statusCode, headers, socket);
        }
      }
      onConnect(abort) {
        if (this.aborted) {
          abort(this.reason);
        } else {
          this.abort = abort;
        }
      }
      onBodySent(chunk) {
        if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
      }
      static [kRetryHandlerDefaultRetry](err, { state: state3, opts }, cb) {
        const { statusCode, code, headers } = err;
        const { method, retryOptions } = opts;
        const {
          maxRetries,
          timeout,
          maxTimeout,
          timeoutFactor,
          statusCodes,
          errorCodes,
          methods
        } = retryOptions;
        let { counter, currentTimeout } = state3;
        currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
        if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
          cb(err);
          return;
        }
        if (Array.isArray(methods) && !methods.includes(method)) {
          cb(err);
          return;
        }
        if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
          cb(err);
          return;
        }
        if (counter > maxRetries) {
          cb(err);
          return;
        }
        let retryAfterHeader = headers != null && headers["retry-after"];
        if (retryAfterHeader) {
          retryAfterHeader = Number(retryAfterHeader);
          retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3;
        }
        const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
        state3.currentTimeout = retryTimeout;
        setTimeout(() => cb(null), retryTimeout);
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const headers = parseHeaders(rawHeaders);
        this.retryCount += 1;
        if (statusCode >= 300) {
          this.abort(
            new RequestRetryError("Request failed", statusCode, {
              headers,
              count: this.retryCount
            })
          );
          return false;
        }
        if (this.resume != null) {
          this.resume = null;
          if (statusCode !== 206) {
            return true;
          }
          const contentRange = parseRangeHeader(headers["content-range"]);
          if (!contentRange) {
            this.abort(
              new RequestRetryError("Content-Range mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          if (this.etag != null && this.etag !== headers.etag) {
            this.abort(
              new RequestRetryError("ETag mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          const { start, size, end = size } = contentRange;
          assert2(this.start === start, "content-range mismatch");
          assert2(this.end == null || this.end === end, "content-range mismatch");
          this.resume = resume;
          return true;
        }
        if (this.end == null) {
          if (statusCode === 206) {
            const range2 = parseRangeHeader(headers["content-range"]);
            if (range2 == null) {
              return this.handler.onHeaders(
                statusCode,
                rawHeaders,
                resume,
                statusMessage
              );
            }
            const { start, size, end = size } = range2;
            assert2(
              start != null && Number.isFinite(start) && this.start !== start,
              "content-range mismatch"
            );
            assert2(Number.isFinite(start));
            assert2(
              end != null && Number.isFinite(end) && this.end !== end,
              "invalid content-length"
            );
            this.start = start;
            this.end = end;
          }
          if (this.end == null) {
            const contentLength2 = headers["content-length"];
            this.end = contentLength2 != null ? Number(contentLength2) : null;
          }
          assert2(Number.isFinite(this.start));
          assert2(
            this.end == null || Number.isFinite(this.end),
            "invalid content-length"
          );
          this.resume = resume;
          this.etag = headers.etag != null ? headers.etag : null;
          return this.handler.onHeaders(
            statusCode,
            rawHeaders,
            resume,
            statusMessage
          );
        }
        const err = new RequestRetryError("Request failed", statusCode, {
          headers,
          count: this.retryCount
        });
        this.abort(err);
        return false;
      }
      onData(chunk) {
        this.start += chunk.length;
        return this.handler.onData(chunk);
      }
      onComplete(rawTrailers) {
        this.retryCount = 0;
        return this.handler.onComplete(rawTrailers);
      }
      onError(err) {
        if (this.aborted || isDisturbed(this.opts.body)) {
          return this.handler.onError(err);
        }
        this.retryOpts.retry(
          err,
          {
            state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
            opts: { retryOptions: this.retryOpts, ...this.opts }
          },
          onRetry.bind(this)
        );
        function onRetry(err2) {
          if (err2 != null || this.aborted || isDisturbed(this.opts.body)) {
            return this.handler.onError(err2);
          }
          if (this.start !== 0) {
            this.opts = {
              ...this.opts,
              headers: {
                ...this.opts.headers,
                range: `bytes=${this.start}-${this.end ?? ""}`
              }
            };
          }
          try {
            this.dispatch(this.opts, this);
          } catch (err3) {
            this.handler.onError(err3);
          }
        }
        __name(onRetry, "onRetry");
      }
    };
    module.exports = RetryHandler;
  }
});

// node_modules/undici/lib/global.js
var require_global2 = __commonJS({
  "node_modules/undici/lib/global.js"(exports2, module) {
    "use strict";
    var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
    var { InvalidArgumentError } = require_errors();
    var Agent3 = require_agent();
    if (getGlobalDispatcher() === void 0) {
      setGlobalDispatcher(new Agent3());
    }
    function setGlobalDispatcher(agent) {
      if (!agent || typeof agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument agent must implement Agent");
      }
      Object.defineProperty(globalThis, globalDispatcher, {
        value: agent,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    __name(setGlobalDispatcher, "setGlobalDispatcher");
    function getGlobalDispatcher() {
      return globalThis[globalDispatcher];
    }
    __name(getGlobalDispatcher, "getGlobalDispatcher");
    module.exports = {
      setGlobalDispatcher,
      getGlobalDispatcher
    };
  }
});

// node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS({
  "node_modules/undici/lib/handler/DecoratorHandler.js"(exports2, module) {
    "use strict";
    module.exports = class DecoratorHandler {
      static {
        __name(this, "DecoratorHandler");
      }
      constructor(handler) {
        this.handler = handler;
      }
      onConnect(...args) {
        return this.handler.onConnect(...args);
      }
      onError(...args) {
        return this.handler.onError(...args);
      }
      onUpgrade(...args) {
        return this.handler.onUpgrade(...args);
      }
      onHeaders(...args) {
        return this.handler.onHeaders(...args);
      }
      onData(...args) {
        return this.handler.onData(...args);
      }
      onComplete(...args) {
        return this.handler.onComplete(...args);
      }
      onBodySent(...args) {
        return this.handler.onBodySent(...args);
      }
    };
  }
});

// node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS({
  "node_modules/undici/lib/fetch/headers.js"(exports2, module) {
    "use strict";
    var { kHeadersList, kConstruct } = require_symbols();
    var { kGuard } = require_symbols2();
    var { kEnumerableProperty } = require_util();
    var {
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue
    } = require_util2();
    var { webidl } = require_webidl();
    var assert2 = __require("assert");
    var kHeadersMap = Symbol("headers map");
    var kHeadersSortedMap = Symbol("headers map sorted");
    function isHTTPWhiteSpaceCharCode(code) {
      return code === 10 || code === 13 || code === 9 || code === 32;
    }
    __name(isHTTPWhiteSpaceCharCode, "isHTTPWhiteSpaceCharCode");
    function headerValueNormalize(potentialValue) {
      let i3 = 0;
      let j3 = potentialValue.length;
      while (j3 > i3 && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j3 - 1))) --j3;
      while (j3 > i3 && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i3))) ++i3;
      return i3 === 0 && j3 === potentialValue.length ? potentialValue : potentialValue.substring(i3, j3);
    }
    __name(headerValueNormalize, "headerValueNormalize");
    function fill(headers, object) {
      if (Array.isArray(object)) {
        for (let i3 = 0; i3 < object.length; ++i3) {
          const header = object[i3];
          if (header.length !== 2) {
            throw webidl.errors.exception({
              header: "Headers constructor",
              message: `expected name/value pair to be length 2, found ${header.length}.`
            });
          }
          appendHeader(headers, header[0], header[1]);
        }
      } else if (typeof object === "object" && object !== null) {
        const keys = Object.keys(object);
        for (let i3 = 0; i3 < keys.length; ++i3) {
          appendHeader(headers, keys[i3], object[keys[i3]]);
        }
      } else {
        throw webidl.errors.conversionFailed({
          prefix: "Headers constructor",
          argument: "Argument 1",
          types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
        });
      }
    }
    __name(fill, "fill");
    function appendHeader(headers, name2, value) {
      value = headerValueNormalize(value);
      if (!isValidHeaderName(name2)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value: name2,
          type: "header name"
        });
      } else if (!isValidHeaderValue(value)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value,
          type: "header value"
        });
      }
      if (headers[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (headers[kGuard] === "request-no-cors") {
      }
      return headers[kHeadersList].append(name2, value);
    }
    __name(appendHeader, "appendHeader");
    var HeadersList = class _HeadersList {
      static {
        __name(this, "HeadersList");
      }
      /** @type {[string, string][]|null} */
      cookies = null;
      constructor(init2) {
        if (init2 instanceof _HeadersList) {
          this[kHeadersMap] = new Map(init2[kHeadersMap]);
          this[kHeadersSortedMap] = init2[kHeadersSortedMap];
          this.cookies = init2.cookies === null ? null : [...init2.cookies];
        } else {
          this[kHeadersMap] = new Map(init2);
          this[kHeadersSortedMap] = null;
        }
      }
      // https://fetch.spec.whatwg.org/#header-list-contains
      contains(name2) {
        name2 = name2.toLowerCase();
        return this[kHeadersMap].has(name2);
      }
      clear() {
        this[kHeadersMap].clear();
        this[kHeadersSortedMap] = null;
        this.cookies = null;
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-append
      append(name2, value) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name2.toLowerCase();
        const exists = this[kHeadersMap].get(lowercaseName);
        if (exists) {
          const delimiter2 = lowercaseName === "cookie" ? "; " : ", ";
          this[kHeadersMap].set(lowercaseName, {
            name: exists.name,
            value: `${exists.value}${delimiter2}${value}`
          });
        } else {
          this[kHeadersMap].set(lowercaseName, { name: name2, value });
        }
        if (lowercaseName === "set-cookie") {
          this.cookies ??= [];
          this.cookies.push(value);
        }
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-set
      set(name2, value) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name2.toLowerCase();
        if (lowercaseName === "set-cookie") {
          this.cookies = [value];
        }
        this[kHeadersMap].set(lowercaseName, { name: name2, value });
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-delete
      delete(name2) {
        this[kHeadersSortedMap] = null;
        name2 = name2.toLowerCase();
        if (name2 === "set-cookie") {
          this.cookies = null;
        }
        this[kHeadersMap].delete(name2);
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-get
      get(name2) {
        const value = this[kHeadersMap].get(name2.toLowerCase());
        return value === void 0 ? null : value.value;
      }
      *[Symbol.iterator]() {
        for (const [name2, { value }] of this[kHeadersMap]) {
          yield [name2, value];
        }
      }
      get entries() {
        const headers = {};
        if (this[kHeadersMap].size) {
          for (const { name: name2, value } of this[kHeadersMap].values()) {
            headers[name2] = value;
          }
        }
        return headers;
      }
    };
    var Headers = class _Headers {
      static {
        __name(this, "Headers");
      }
      constructor(init2 = void 0) {
        if (init2 === kConstruct) {
          return;
        }
        this[kHeadersList] = new HeadersList();
        this[kGuard] = "none";
        if (init2 !== void 0) {
          init2 = webidl.converters.HeadersInit(init2);
          fill(this, init2);
        }
      }
      // https://fetch.spec.whatwg.org/#dom-headers-append
      append(name2, value) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
        name2 = webidl.converters.ByteString(name2);
        value = webidl.converters.ByteString(value);
        return appendHeader(this, name2, value);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-delete
      delete(name2) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
        name2 = webidl.converters.ByteString(name2);
        if (!isValidHeaderName(name2)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.delete",
            value: name2,
            type: "header name"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        if (!this[kHeadersList].contains(name2)) {
          return;
        }
        this[kHeadersList].delete(name2);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-get
      get(name2) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
        name2 = webidl.converters.ByteString(name2);
        if (!isValidHeaderName(name2)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.get",
            value: name2,
            type: "header name"
          });
        }
        return this[kHeadersList].get(name2);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-has
      has(name2) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
        name2 = webidl.converters.ByteString(name2);
        if (!isValidHeaderName(name2)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.has",
            value: name2,
            type: "header name"
          });
        }
        return this[kHeadersList].contains(name2);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-set
      set(name2, value) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
        name2 = webidl.converters.ByteString(name2);
        value = webidl.converters.ByteString(value);
        value = headerValueNormalize(value);
        if (!isValidHeaderName(name2)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: name2,
            type: "header name"
          });
        } else if (!isValidHeaderValue(value)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value,
            type: "header value"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        this[kHeadersList].set(name2, value);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
      getSetCookie() {
        webidl.brandCheck(this, _Headers);
        const list3 = this[kHeadersList].cookies;
        if (list3) {
          return [...list3];
        }
        return [];
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
      get [kHeadersSortedMap]() {
        if (this[kHeadersList][kHeadersSortedMap]) {
          return this[kHeadersList][kHeadersSortedMap];
        }
        const headers = [];
        const names = [...this[kHeadersList]].sort((a3, b3) => a3[0] < b3[0] ? -1 : 1);
        const cookies = this[kHeadersList].cookies;
        for (let i3 = 0; i3 < names.length; ++i3) {
          const [name2, value] = names[i3];
          if (name2 === "set-cookie") {
            for (let j3 = 0; j3 < cookies.length; ++j3) {
              headers.push([name2, cookies[j3]]);
            }
          } else {
            assert2(value !== null);
            headers.push([name2, value]);
          }
        }
        this[kHeadersList][kHeadersSortedMap] = headers;
        return headers;
      }
      keys() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "key"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "value"
        );
      }
      entries() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "key+value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key+value"
        );
      }
      /**
       * @param {(value: string, key: string, self: Headers) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key, value] of this) {
          callbackFn.apply(thisArg, [value, key, this]);
        }
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        webidl.brandCheck(this, _Headers);
        return this[kHeadersList];
      }
    };
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    Object.defineProperties(Headers.prototype, {
      append: kEnumerableProperty,
      delete: kEnumerableProperty,
      get: kEnumerableProperty,
      has: kEnumerableProperty,
      set: kEnumerableProperty,
      getSetCookie: kEnumerableProperty,
      keys: kEnumerableProperty,
      values: kEnumerableProperty,
      entries: kEnumerableProperty,
      forEach: kEnumerableProperty,
      [Symbol.iterator]: { enumerable: false },
      [Symbol.toStringTag]: {
        value: "Headers",
        configurable: true
      }
    });
    webidl.converters.HeadersInit = function(V2) {
      if (webidl.util.Type(V2) === "Object") {
        if (V2[Symbol.iterator]) {
          return webidl.converters["sequence<sequence<ByteString>>"](V2);
        }
        return webidl.converters["record<ByteString, ByteString>"](V2);
      }
      throw webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
      });
    };
    module.exports = {
      fill,
      Headers,
      HeadersList
    };
  }
});

// node_modules/undici/lib/fetch/response.js
var require_response = __commonJS({
  "node_modules/undici/lib/fetch/response.js"(exports2, module) {
    "use strict";
    var { Headers, HeadersList, fill } = require_headers();
    var { extractBody, cloneBody, mixinBody } = require_body();
    var util3 = require_util();
    var { kEnumerableProperty } = util3;
    var {
      isValidReasonPhrase,
      isCancelled,
      isAborted,
      isBlobLike,
      serializeJavascriptValueToJSONString,
      isErrorLike,
      isomorphicEncode
    } = require_util2();
    var {
      redirectStatusSet,
      nullBodyStatus,
      DOMException: DOMException2
    } = require_constants2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { FormData: FormData2 } = require_formdata();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert2 = __require("assert");
    var { types: types2 } = __require("util");
    var ReadableStream2 = globalThis.ReadableStream || __require("stream/web").ReadableStream;
    var textEncoder = new TextEncoder("utf-8");
    var Response = class _Response {
      static {
        __name(this, "Response");
      }
      // Creates network error Response.
      static error() {
        const relevantRealm = { settingsObject: {} };
        const responseObject = new _Response();
        responseObject[kState] = makeNetworkError();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response-json
      static json(data, init2 = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.json" });
        if (init2 !== null) {
          init2 = webidl.converters.ResponseInit(init2);
        }
        const bytes = textEncoder.encode(
          serializeJavascriptValueToJSONString(data)
        );
        const body2 = extractBody(bytes);
        const relevantRealm = { settingsObject: {} };
        const responseObject = new _Response();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "response";
        responseObject[kHeaders][kRealm] = relevantRealm;
        initializeResponse(responseObject, init2, { body: body2[0], type: "application/json" });
        return responseObject;
      }
      // Creates a redirect Response that redirects to url with status status.
      static redirect(url2, status = 302) {
        const relevantRealm = { settingsObject: {} };
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
        url2 = webidl.converters.USVString(url2);
        status = webidl.converters["unsigned short"](status);
        let parsedURL;
        try {
          parsedURL = new URL(url2, getGlobalOrigin());
        } catch (err) {
          throw Object.assign(new TypeError("Failed to parse URL from " + url2), {
            cause: err
          });
        }
        if (!redirectStatusSet.has(status)) {
          throw new RangeError("Invalid status code " + status);
        }
        const responseObject = new _Response();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        responseObject[kState].status = status;
        const value = isomorphicEncode(URLSerializer(parsedURL));
        responseObject[kState].headersList.append("location", value);
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response
      constructor(body2 = null, init2 = {}) {
        if (body2 !== null) {
          body2 = webidl.converters.BodyInit(body2);
        }
        init2 = webidl.converters.ResponseInit(init2);
        this[kRealm] = { settingsObject: {} };
        this[kState] = makeResponse({});
        this[kHeaders] = new Headers(kConstruct);
        this[kHeaders][kGuard] = "response";
        this[kHeaders][kHeadersList] = this[kState].headersList;
        this[kHeaders][kRealm] = this[kRealm];
        let bodyWithType = null;
        if (body2 != null) {
          const [extractedBody, type2] = extractBody(body2);
          bodyWithType = { body: extractedBody, type: type2 };
        }
        initializeResponse(this, init2, bodyWithType);
      }
      // Returns response’s type, e.g., "cors".
      get type() {
        webidl.brandCheck(this, _Response);
        return this[kState].type;
      }
      // Returns response’s URL, if it has one; otherwise the empty string.
      get url() {
        webidl.brandCheck(this, _Response);
        const urlList = this[kState].urlList;
        const url2 = urlList[urlList.length - 1] ?? null;
        if (url2 === null) {
          return "";
        }
        return URLSerializer(url2, true);
      }
      // Returns whether response was obtained through a redirect.
      get redirected() {
        webidl.brandCheck(this, _Response);
        return this[kState].urlList.length > 1;
      }
      // Returns response’s status.
      get status() {
        webidl.brandCheck(this, _Response);
        return this[kState].status;
      }
      // Returns whether response’s status is an ok status.
      get ok() {
        webidl.brandCheck(this, _Response);
        return this[kState].status >= 200 && this[kState].status <= 299;
      }
      // Returns response’s status message.
      get statusText() {
        webidl.brandCheck(this, _Response);
        return this[kState].statusText;
      }
      // Returns response’s headers as Headers.
      get headers() {
        webidl.brandCheck(this, _Response);
        return this[kHeaders];
      }
      get body() {
        webidl.brandCheck(this, _Response);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, _Response);
        return !!this[kState].body && util3.isDisturbed(this[kState].body.stream);
      }
      // Returns a clone of response.
      clone() {
        webidl.brandCheck(this, _Response);
        if (this.bodyUsed || this.body && this.body.locked) {
          throw webidl.errors.exception({
            header: "Response.clone",
            message: "Body has already been consumed."
          });
        }
        const clonedResponse = cloneResponse(this[kState]);
        const clonedResponseObject = new _Response();
        clonedResponseObject[kState] = clonedResponse;
        clonedResponseObject[kRealm] = this[kRealm];
        clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;
        clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        return clonedResponseObject;
      }
    };
    mixinBody(Response);
    Object.defineProperties(Response.prototype, {
      type: kEnumerableProperty,
      url: kEnumerableProperty,
      status: kEnumerableProperty,
      ok: kEnumerableProperty,
      redirected: kEnumerableProperty,
      statusText: kEnumerableProperty,
      headers: kEnumerableProperty,
      clone: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Response",
        configurable: true
      }
    });
    Object.defineProperties(Response, {
      json: kEnumerableProperty,
      redirect: kEnumerableProperty,
      error: kEnumerableProperty
    });
    function cloneResponse(response) {
      if (response.internalResponse) {
        return filterResponse(
          cloneResponse(response.internalResponse),
          response.type
        );
      }
      const newResponse = makeResponse({ ...response, body: null });
      if (response.body != null) {
        newResponse.body = cloneBody(response.body);
      }
      return newResponse;
    }
    __name(cloneResponse, "cloneResponse");
    function makeResponse(init2) {
      return {
        aborted: false,
        rangeRequested: false,
        timingAllowPassed: false,
        requestIncludesCredentials: false,
        type: "default",
        status: 200,
        timingInfo: null,
        cacheState: "",
        statusText: "",
        ...init2,
        headersList: init2.headersList ? new HeadersList(init2.headersList) : new HeadersList(),
        urlList: init2.urlList ? [...init2.urlList] : []
      };
    }
    __name(makeResponse, "makeResponse");
    function makeNetworkError(reason) {
      const isError2 = isErrorLike(reason);
      return makeResponse({
        type: "error",
        status: 0,
        error: isError2 ? reason : new Error(reason ? String(reason) : reason),
        aborted: reason && reason.name === "AbortError"
      });
    }
    __name(makeNetworkError, "makeNetworkError");
    function makeFilteredResponse(response, state3) {
      state3 = {
        internalResponse: response,
        ...state3
      };
      return new Proxy(response, {
        get(target, p3) {
          return p3 in state3 ? state3[p3] : target[p3];
        },
        set(target, p3, value) {
          assert2(!(p3 in state3));
          target[p3] = value;
          return true;
        }
      });
    }
    __name(makeFilteredResponse, "makeFilteredResponse");
    function filterResponse(response, type2) {
      if (type2 === "basic") {
        return makeFilteredResponse(response, {
          type: "basic",
          headersList: response.headersList
        });
      } else if (type2 === "cors") {
        return makeFilteredResponse(response, {
          type: "cors",
          headersList: response.headersList
        });
      } else if (type2 === "opaque") {
        return makeFilteredResponse(response, {
          type: "opaque",
          urlList: Object.freeze([]),
          status: 0,
          statusText: "",
          body: null
        });
      } else if (type2 === "opaqueredirect") {
        return makeFilteredResponse(response, {
          type: "opaqueredirect",
          status: 0,
          statusText: "",
          headersList: [],
          body: null
        });
      } else {
        assert2(false);
      }
    }
    __name(filterResponse, "filterResponse");
    function makeAppropriateNetworkError(fetchParams, err = null) {
      assert2(isCancelled(fetchParams));
      return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException2("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError(Object.assign(new DOMException2("Request was cancelled."), { cause: err }));
    }
    __name(makeAppropriateNetworkError, "makeAppropriateNetworkError");
    function initializeResponse(response, init2, body2) {
      if (init2.status !== null && (init2.status < 200 || init2.status > 599)) {
        throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
      }
      if ("statusText" in init2 && init2.statusText != null) {
        if (!isValidReasonPhrase(String(init2.statusText))) {
          throw new TypeError("Invalid statusText");
        }
      }
      if ("status" in init2 && init2.status != null) {
        response[kState].status = init2.status;
      }
      if ("statusText" in init2 && init2.statusText != null) {
        response[kState].statusText = init2.statusText;
      }
      if ("headers" in init2 && init2.headers != null) {
        fill(response[kHeaders], init2.headers);
      }
      if (body2) {
        if (nullBodyStatus.includes(response.status)) {
          throw webidl.errors.exception({
            header: "Response constructor",
            message: "Invalid response status code " + response.status
          });
        }
        response[kState].body = body2.body;
        if (body2.type != null && !response[kState].headersList.contains("Content-Type")) {
          response[kState].headersList.append("content-type", body2.type);
        }
      }
    }
    __name(initializeResponse, "initializeResponse");
    webidl.converters.ReadableStream = webidl.interfaceConverter(
      ReadableStream2
    );
    webidl.converters.FormData = webidl.interfaceConverter(
      FormData2
    );
    webidl.converters.URLSearchParams = webidl.interfaceConverter(
      URLSearchParams
    );
    webidl.converters.XMLHttpRequestBodyInit = function(V2) {
      if (typeof V2 === "string") {
        return webidl.converters.USVString(V2);
      }
      if (isBlobLike(V2)) {
        return webidl.converters.Blob(V2, { strict: false });
      }
      if (types2.isArrayBuffer(V2) || types2.isTypedArray(V2) || types2.isDataView(V2)) {
        return webidl.converters.BufferSource(V2);
      }
      if (util3.isFormDataLike(V2)) {
        return webidl.converters.FormData(V2, { strict: false });
      }
      if (V2 instanceof URLSearchParams) {
        return webidl.converters.URLSearchParams(V2);
      }
      return webidl.converters.DOMString(V2);
    };
    webidl.converters.BodyInit = function(V2) {
      if (V2 instanceof ReadableStream2) {
        return webidl.converters.ReadableStream(V2);
      }
      if (V2?.[Symbol.asyncIterator]) {
        return V2;
      }
      return webidl.converters.XMLHttpRequestBodyInit(V2);
    };
    webidl.converters.ResponseInit = webidl.dictionaryConverter([
      {
        key: "status",
        converter: webidl.converters["unsigned short"],
        defaultValue: 200
      },
      {
        key: "statusText",
        converter: webidl.converters.ByteString,
        defaultValue: ""
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      }
    ]);
    module.exports = {
      makeNetworkError,
      makeResponse,
      makeAppropriateNetworkError,
      filterResponse,
      Response,
      cloneResponse
    };
  }
});

// node_modules/undici/lib/fetch/request.js
var require_request2 = __commonJS({
  "node_modules/undici/lib/fetch/request.js"(exports2, module) {
    "use strict";
    var { extractBody, mixinBody, cloneBody } = require_body();
    var { Headers, fill: fillHeaders, HeadersList } = require_headers();
    var { FinalizationRegistry } = require_dispatcher_weakref()();
    var util3 = require_util();
    var {
      isValidHTTPToken,
      sameOrigin,
      normalizeMethod,
      makePolicyContainer,
      normalizeMethodRecord
    } = require_util2();
    var {
      forbiddenMethodsSet,
      corsSafeListedMethodsSet,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      requestDuplex
    } = require_constants2();
    var { kEnumerableProperty } = util3;
    var { kHeaders, kSignal, kState, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert2 = __require("assert");
    var { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __require("events");
    var TransformStream = globalThis.TransformStream;
    var kAbortController = Symbol("abortController");
    var requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
      signal.removeEventListener("abort", abort);
    });
    var Request = class _Request {
      static {
        __name(this, "Request");
      }
      // https://fetch.spec.whatwg.org/#dom-request
      constructor(input, init2 = {}) {
        if (input === kConstruct) {
          return;
        }
        webidl.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
        input = webidl.converters.RequestInfo(input);
        init2 = webidl.converters.RequestInit(init2);
        this[kRealm] = {
          settingsObject: {
            baseUrl: getGlobalOrigin(),
            get origin() {
              return this.baseUrl?.origin;
            },
            policyContainer: makePolicyContainer()
          }
        };
        let request3 = null;
        let fallbackMode = null;
        const baseUrl = this[kRealm].settingsObject.baseUrl;
        let signal = null;
        if (typeof input === "string") {
          let parsedURL;
          try {
            parsedURL = new URL(input, baseUrl);
          } catch (err) {
            throw new TypeError("Failed to parse URL from " + input, { cause: err });
          }
          if (parsedURL.username || parsedURL.password) {
            throw new TypeError(
              "Request cannot be constructed from a URL that includes credentials: " + input
            );
          }
          request3 = makeRequest({ urlList: [parsedURL] });
          fallbackMode = "cors";
        } else {
          assert2(input instanceof _Request);
          request3 = input[kState];
          signal = input[kSignal];
        }
        const origin = this[kRealm].settingsObject.origin;
        let window2 = "client";
        if (request3.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin(request3.window, origin)) {
          window2 = request3.window;
        }
        if (init2.window != null) {
          throw new TypeError(`'window' option '${window2}' must be null`);
        }
        if ("window" in init2) {
          window2 = "no-window";
        }
        request3 = makeRequest({
          // URL request’s URL.
          // undici implementation note: this is set as the first item in request's urlList in makeRequest
          // method request’s method.
          method: request3.method,
          // header list A copy of request’s header list.
          // undici implementation note: headersList is cloned in makeRequest
          headersList: request3.headersList,
          // unsafe-request flag Set.
          unsafeRequest: request3.unsafeRequest,
          // client This’s relevant settings object.
          client: this[kRealm].settingsObject,
          // window window.
          window: window2,
          // priority request’s priority.
          priority: request3.priority,
          // origin request’s origin. The propagation of the origin is only significant for navigation requests
          // being handled by a service worker. In this scenario a request can have an origin that is different
          // from the current client.
          origin: request3.origin,
          // referrer request’s referrer.
          referrer: request3.referrer,
          // referrer policy request’s referrer policy.
          referrerPolicy: request3.referrerPolicy,
          // mode request’s mode.
          mode: request3.mode,
          // credentials mode request’s credentials mode.
          credentials: request3.credentials,
          // cache mode request’s cache mode.
          cache: request3.cache,
          // redirect mode request’s redirect mode.
          redirect: request3.redirect,
          // integrity metadata request’s integrity metadata.
          integrity: request3.integrity,
          // keepalive request’s keepalive.
          keepalive: request3.keepalive,
          // reload-navigation flag request’s reload-navigation flag.
          reloadNavigation: request3.reloadNavigation,
          // history-navigation flag request’s history-navigation flag.
          historyNavigation: request3.historyNavigation,
          // URL list A clone of request’s URL list.
          urlList: [...request3.urlList]
        });
        const initHasKey = Object.keys(init2).length !== 0;
        if (initHasKey) {
          if (request3.mode === "navigate") {
            request3.mode = "same-origin";
          }
          request3.reloadNavigation = false;
          request3.historyNavigation = false;
          request3.origin = "client";
          request3.referrer = "client";
          request3.referrerPolicy = "";
          request3.url = request3.urlList[request3.urlList.length - 1];
          request3.urlList = [request3.url];
        }
        if (init2.referrer !== void 0) {
          const referrer = init2.referrer;
          if (referrer === "") {
            request3.referrer = "no-referrer";
          } else {
            let parsedReferrer;
            try {
              parsedReferrer = new URL(referrer, baseUrl);
            } catch (err) {
              throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
            }
            if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {
              request3.referrer = "client";
            } else {
              request3.referrer = parsedReferrer;
            }
          }
        }
        if (init2.referrerPolicy !== void 0) {
          request3.referrerPolicy = init2.referrerPolicy;
        }
        let mode;
        if (init2.mode !== void 0) {
          mode = init2.mode;
        } else {
          mode = fallbackMode;
        }
        if (mode === "navigate") {
          throw webidl.errors.exception({
            header: "Request constructor",
            message: "invalid request mode navigate."
          });
        }
        if (mode != null) {
          request3.mode = mode;
        }
        if (init2.credentials !== void 0) {
          request3.credentials = init2.credentials;
        }
        if (init2.cache !== void 0) {
          request3.cache = init2.cache;
        }
        if (request3.cache === "only-if-cached" && request3.mode !== "same-origin") {
          throw new TypeError(
            "'only-if-cached' can be set only with 'same-origin' mode"
          );
        }
        if (init2.redirect !== void 0) {
          request3.redirect = init2.redirect;
        }
        if (init2.integrity != null) {
          request3.integrity = String(init2.integrity);
        }
        if (init2.keepalive !== void 0) {
          request3.keepalive = Boolean(init2.keepalive);
        }
        if (init2.method !== void 0) {
          let method = init2.method;
          if (!isValidHTTPToken(method)) {
            throw new TypeError(`'${method}' is not a valid HTTP method.`);
          }
          if (forbiddenMethodsSet.has(method.toUpperCase())) {
            throw new TypeError(`'${method}' HTTP method is unsupported.`);
          }
          method = normalizeMethodRecord[method] ?? normalizeMethod(method);
          request3.method = method;
        }
        if (init2.signal !== void 0) {
          signal = init2.signal;
        }
        this[kState] = request3;
        const ac = new AbortController();
        this[kSignal] = ac.signal;
        this[kSignal][kRealm] = this[kRealm];
        if (signal != null) {
          if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") {
            throw new TypeError(
              "Failed to construct 'Request': member signal is not of type AbortSignal."
            );
          }
          if (signal.aborted) {
            ac.abort(signal.reason);
          } else {
            this[kAbortController] = ac;
            const acRef = new WeakRef(ac);
            const abort = /* @__PURE__ */ __name(function() {
              const ac2 = acRef.deref();
              if (ac2 !== void 0) {
                ac2.abort(this.reason);
              }
            }, "abort");
            try {
              if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) {
                setMaxListeners(100, signal);
              } else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) {
                setMaxListeners(100, signal);
              }
            } catch {
            }
            util3.addAbortListener(signal, abort);
            requestFinalizer.register(ac, { signal, abort });
          }
        }
        this[kHeaders] = new Headers(kConstruct);
        this[kHeaders][kHeadersList] = request3.headersList;
        this[kHeaders][kGuard] = "request";
        this[kHeaders][kRealm] = this[kRealm];
        if (mode === "no-cors") {
          if (!corsSafeListedMethodsSet.has(request3.method)) {
            throw new TypeError(
              `'${request3.method} is unsupported in no-cors mode.`
            );
          }
          this[kHeaders][kGuard] = "request-no-cors";
        }
        if (initHasKey) {
          const headersList = this[kHeaders][kHeadersList];
          const headers = init2.headers !== void 0 ? init2.headers : new HeadersList(headersList);
          headersList.clear();
          if (headers instanceof HeadersList) {
            for (const [key, val] of headers) {
              headersList.append(key, val);
            }
            headersList.cookies = headers.cookies;
          } else {
            fillHeaders(this[kHeaders], headers);
          }
        }
        const inputBody = input instanceof _Request ? input[kState].body : null;
        if ((init2.body != null || inputBody != null) && (request3.method === "GET" || request3.method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body.");
        }
        let initBody = null;
        if (init2.body != null) {
          const [extractedBody, contentType2] = extractBody(
            init2.body,
            request3.keepalive
          );
          initBody = extractedBody;
          if (contentType2 && !this[kHeaders][kHeadersList].contains("content-type")) {
            this[kHeaders].append("content-type", contentType2);
          }
        }
        const inputOrInitBody = initBody ?? inputBody;
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
          if (initBody != null && init2.duplex == null) {
            throw new TypeError("RequestInit: duplex option is required when sending a body.");
          }
          if (request3.mode !== "same-origin" && request3.mode !== "cors") {
            throw new TypeError(
              'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
            );
          }
          request3.useCORSPreflightFlag = true;
        }
        let finalBody = inputOrInitBody;
        if (initBody == null && inputBody != null) {
          if (util3.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
            throw new TypeError(
              "Cannot construct a Request with a Request object that has already been used."
            );
          }
          if (!TransformStream) {
            TransformStream = __require("stream/web").TransformStream;
          }
          const identityTransform = new TransformStream();
          inputBody.stream.pipeThrough(identityTransform);
          finalBody = {
            source: inputBody.source,
            length: inputBody.length,
            stream: identityTransform.readable
          };
        }
        this[kState].body = finalBody;
      }
      // Returns request’s HTTP method, which is "GET" by default.
      get method() {
        webidl.brandCheck(this, _Request);
        return this[kState].method;
      }
      // Returns the URL of request as a string.
      get url() {
        webidl.brandCheck(this, _Request);
        return URLSerializer(this[kState].url);
      }
      // Returns a Headers object consisting of the headers associated with request.
      // Note that headers added in the network layer by the user agent will not
      // be accounted for in this object, e.g., the "Host" header.
      get headers() {
        webidl.brandCheck(this, _Request);
        return this[kHeaders];
      }
      // Returns the kind of resource requested by request, e.g., "document"
      // or "script".
      get destination() {
        webidl.brandCheck(this, _Request);
        return this[kState].destination;
      }
      // Returns the referrer of request. Its value can be a same-origin URL if
      // explicitly set in init, the empty string to indicate no referrer, and
      // "about:client" when defaulting to the global’s default. This is used
      // during fetching to determine the value of the `Referer` header of the
      // request being made.
      get referrer() {
        webidl.brandCheck(this, _Request);
        if (this[kState].referrer === "no-referrer") {
          return "";
        }
        if (this[kState].referrer === "client") {
          return "about:client";
        }
        return this[kState].referrer.toString();
      }
      // Returns the referrer policy associated with request.
      // This is used during fetching to compute the value of the request’s
      // referrer.
      get referrerPolicy() {
        webidl.brandCheck(this, _Request);
        return this[kState].referrerPolicy;
      }
      // Returns the mode associated with request, which is a string indicating
      // whether the request will use CORS, or will be restricted to same-origin
      // URLs.
      get mode() {
        webidl.brandCheck(this, _Request);
        return this[kState].mode;
      }
      // Returns the credentials mode associated with request,
      // which is a string indicating whether credentials will be sent with the
      // request always, never, or only when sent to a same-origin URL.
      get credentials() {
        return this[kState].credentials;
      }
      // Returns the cache mode associated with request,
      // which is a string indicating how the request will
      // interact with the browser’s cache when fetching.
      get cache() {
        webidl.brandCheck(this, _Request);
        return this[kState].cache;
      }
      // Returns the redirect mode associated with request,
      // which is a string indicating how redirects for the
      // request will be handled during fetching. A request
      // will follow redirects by default.
      get redirect() {
        webidl.brandCheck(this, _Request);
        return this[kState].redirect;
      }
      // Returns request’s subresource integrity metadata, which is a
      // cryptographic hash of the resource being fetched. Its value
      // consists of multiple hashes separated by whitespace. [SRI]
      get integrity() {
        webidl.brandCheck(this, _Request);
        return this[kState].integrity;
      }
      // Returns a boolean indicating whether or not request can outlive the
      // global in which it was created.
      get keepalive() {
        webidl.brandCheck(this, _Request);
        return this[kState].keepalive;
      }
      // Returns a boolean indicating whether or not request is for a reload
      // navigation.
      get isReloadNavigation() {
        webidl.brandCheck(this, _Request);
        return this[kState].reloadNavigation;
      }
      // Returns a boolean indicating whether or not request is for a history
      // navigation (a.k.a. back-foward navigation).
      get isHistoryNavigation() {
        webidl.brandCheck(this, _Request);
        return this[kState].historyNavigation;
      }
      // Returns the signal associated with request, which is an AbortSignal
      // object indicating whether or not request has been aborted, and its
      // abort event handler.
      get signal() {
        webidl.brandCheck(this, _Request);
        return this[kSignal];
      }
      get body() {
        webidl.brandCheck(this, _Request);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, _Request);
        return !!this[kState].body && util3.isDisturbed(this[kState].body.stream);
      }
      get duplex() {
        webidl.brandCheck(this, _Request);
        return "half";
      }
      // Returns a clone of request.
      clone() {
        webidl.brandCheck(this, _Request);
        if (this.bodyUsed || this.body?.locked) {
          throw new TypeError("unusable");
        }
        const clonedRequest = cloneRequest(this[kState]);
        const clonedRequestObject = new _Request(kConstruct);
        clonedRequestObject[kState] = clonedRequest;
        clonedRequestObject[kRealm] = this[kRealm];
        clonedRequestObject[kHeaders] = new Headers(kConstruct);
        clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
        clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        const ac = new AbortController();
        if (this.signal.aborted) {
          ac.abort(this.signal.reason);
        } else {
          util3.addAbortListener(
            this.signal,
            () => {
              ac.abort(this.signal.reason);
            }
          );
        }
        clonedRequestObject[kSignal] = ac.signal;
        return clonedRequestObject;
      }
    };
    mixinBody(Request);
    function makeRequest(init2) {
      const request3 = {
        method: "GET",
        localURLsOnly: false,
        unsafeRequest: false,
        body: null,
        client: null,
        reservedClient: null,
        replacesClientId: "",
        window: "client",
        keepalive: false,
        serviceWorkers: "all",
        initiator: "",
        destination: "",
        priority: null,
        origin: "client",
        policyContainer: "client",
        referrer: "client",
        referrerPolicy: "",
        mode: "no-cors",
        useCORSPreflightFlag: false,
        credentials: "same-origin",
        useCredentials: false,
        cache: "default",
        redirect: "follow",
        integrity: "",
        cryptoGraphicsNonceMetadata: "",
        parserMetadata: "",
        reloadNavigation: false,
        historyNavigation: false,
        userActivation: false,
        taintedOrigin: false,
        redirectCount: 0,
        responseTainting: "basic",
        preventNoCacheCacheControlHeaderModification: false,
        done: false,
        timingAllowFailed: false,
        ...init2,
        headersList: init2.headersList ? new HeadersList(init2.headersList) : new HeadersList()
      };
      request3.url = request3.urlList[0];
      return request3;
    }
    __name(makeRequest, "makeRequest");
    function cloneRequest(request3) {
      const newRequest = makeRequest({ ...request3, body: null });
      if (request3.body != null) {
        newRequest.body = cloneBody(request3.body);
      }
      return newRequest;
    }
    __name(cloneRequest, "cloneRequest");
    Object.defineProperties(Request.prototype, {
      method: kEnumerableProperty,
      url: kEnumerableProperty,
      headers: kEnumerableProperty,
      redirect: kEnumerableProperty,
      clone: kEnumerableProperty,
      signal: kEnumerableProperty,
      duplex: kEnumerableProperty,
      destination: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      isHistoryNavigation: kEnumerableProperty,
      isReloadNavigation: kEnumerableProperty,
      keepalive: kEnumerableProperty,
      integrity: kEnumerableProperty,
      cache: kEnumerableProperty,
      credentials: kEnumerableProperty,
      attribute: kEnumerableProperty,
      referrerPolicy: kEnumerableProperty,
      referrer: kEnumerableProperty,
      mode: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Request",
        configurable: true
      }
    });
    webidl.converters.Request = webidl.interfaceConverter(
      Request
    );
    webidl.converters.RequestInfo = function(V2) {
      if (typeof V2 === "string") {
        return webidl.converters.USVString(V2);
      }
      if (V2 instanceof Request) {
        return webidl.converters.Request(V2);
      }
      return webidl.converters.USVString(V2);
    };
    webidl.converters.AbortSignal = webidl.interfaceConverter(
      AbortSignal
    );
    webidl.converters.RequestInit = webidl.dictionaryConverter([
      {
        key: "method",
        converter: webidl.converters.ByteString
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      },
      {
        key: "body",
        converter: webidl.nullableConverter(
          webidl.converters.BodyInit
        )
      },
      {
        key: "referrer",
        converter: webidl.converters.USVString
      },
      {
        key: "referrerPolicy",
        converter: webidl.converters.DOMString,
        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
        allowedValues: referrerPolicy
      },
      {
        key: "mode",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#concept-request-mode
        allowedValues: requestMode
      },
      {
        key: "credentials",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcredentials
        allowedValues: requestCredentials
      },
      {
        key: "cache",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcache
        allowedValues: requestCache
      },
      {
        key: "redirect",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestredirect
        allowedValues: requestRedirect
      },
      {
        key: "integrity",
        converter: webidl.converters.DOMString
      },
      {
        key: "keepalive",
        converter: webidl.converters.boolean
      },
      {
        key: "signal",
        converter: webidl.nullableConverter(
          (signal) => webidl.converters.AbortSignal(
            signal,
            { strict: false }
          )
        )
      },
      {
        key: "window",
        converter: webidl.converters.any
      },
      {
        key: "duplex",
        converter: webidl.converters.DOMString,
        allowedValues: requestDuplex
      }
    ]);
    module.exports = { Request, makeRequest };
  }
});

// node_modules/undici/lib/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/undici/lib/fetch/index.js"(exports2, module) {
    "use strict";
    var {
      Response,
      makeNetworkError,
      makeAppropriateNetworkError,
      filterResponse,
      makeResponse
    } = require_response();
    var { Headers } = require_headers();
    var { Request, makeRequest } = require_request2();
    var zlib2 = __require("zlib");
    var {
      bytesMatch,
      makePolicyContainer,
      clonePolicyContainer,
      requestBadPort,
      TAOCheck,
      appendRequestOriginHeader,
      responseLocationURL,
      requestCurrentURL,
      setRequestReferrerPolicyOnRedirect,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      createOpaqueTimingInfo,
      appendFetchMetadata,
      corsCheck,
      crossOriginResourcePolicyCheck,
      determineRequestsReferrer,
      coarsenedSharedCurrentTime,
      createDeferredPromise,
      isBlobLike,
      sameOrigin,
      isCancelled,
      isAborted,
      isErrorLike,
      fullyReadBody,
      readableStreamClose,
      isomorphicEncode,
      urlIsLocal,
      urlIsHttpHttpsScheme,
      urlHasHttpsScheme
    } = require_util2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var assert2 = __require("assert");
    var { safelyExtractBody } = require_body();
    var {
      redirectStatusSet,
      nullBodyStatus,
      safeMethodsSet,
      requestBodyHeader,
      subresourceSet,
      DOMException: DOMException2
    } = require_constants2();
    var { kHeadersList } = require_symbols();
    var EE = __require("events");
    var { Readable: Readable5, pipeline } = __require("stream");
    var { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util();
    var { dataURLProcessor, serializeAMimeType } = require_dataURL();
    var { TransformStream } = __require("stream/web");
    var { getGlobalDispatcher } = require_global2();
    var { webidl } = require_webidl();
    var { STATUS_CODES: STATUS_CODES2 } = __require("http");
    var GET_OR_HEAD = ["GET", "HEAD"];
    var resolveObjectURL;
    var ReadableStream2 = globalThis.ReadableStream;
    var Fetch = class extends EE {
      static {
        __name(this, "Fetch");
      }
      constructor(dispatcher) {
        super();
        this.dispatcher = dispatcher;
        this.connection = null;
        this.dump = false;
        this.state = "ongoing";
        this.setMaxListeners(21);
      }
      terminate(reason) {
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "terminated";
        this.connection?.destroy(reason);
        this.emit("terminated", reason);
      }
      // https://fetch.spec.whatwg.org/#fetch-controller-abort
      abort(error) {
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "aborted";
        if (!error) {
          error = new DOMException2("The operation was aborted.", "AbortError");
        }
        this.serializedAbortReason = error;
        this.connection?.destroy(error);
        this.emit("terminated", error);
      }
    };
    function fetch(input, init2 = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
      const p3 = createDeferredPromise();
      let requestObject;
      try {
        requestObject = new Request(input, init2);
      } catch (e3) {
        p3.reject(e3);
        return p3.promise;
      }
      const request3 = requestObject[kState];
      if (requestObject.signal.aborted) {
        abortFetch(p3, request3, null, requestObject.signal.reason);
        return p3.promise;
      }
      const globalObject = request3.client.globalObject;
      if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") {
        request3.serviceWorkers = "none";
      }
      let responseObject = null;
      const relevantRealm = null;
      let locallyAborted = false;
      let controller = null;
      addAbortListener(
        requestObject.signal,
        () => {
          locallyAborted = true;
          assert2(controller != null);
          controller.abort(requestObject.signal.reason);
          abortFetch(p3, request3, responseObject, requestObject.signal.reason);
        }
      );
      const handleFetchDone = /* @__PURE__ */ __name((response) => finalizeAndReportTiming(response, "fetch"), "handleFetchDone");
      const processResponse = /* @__PURE__ */ __name((response) => {
        if (locallyAborted) {
          return Promise.resolve();
        }
        if (response.aborted) {
          abortFetch(p3, request3, responseObject, controller.serializedAbortReason);
          return Promise.resolve();
        }
        if (response.type === "error") {
          p3.reject(
            Object.assign(new TypeError("fetch failed"), { cause: response.error })
          );
          return Promise.resolve();
        }
        responseObject = new Response();
        responseObject[kState] = response;
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = response.headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        p3.resolve(responseObject);
      }, "processResponse");
      controller = fetching({
        request: request3,
        processResponseEndOfBody: handleFetchDone,
        processResponse,
        dispatcher: init2.dispatcher ?? getGlobalDispatcher()
        // undici
      });
      return p3.promise;
    }
    __name(fetch, "fetch");
    function finalizeAndReportTiming(response, initiatorType = "other") {
      if (response.type === "error" && response.aborted) {
        return;
      }
      if (!response.urlList?.length) {
        return;
      }
      const originalURL = response.urlList[0];
      let timingInfo = response.timingInfo;
      let cacheState = response.cacheState;
      if (!urlIsHttpHttpsScheme(originalURL)) {
        return;
      }
      if (timingInfo === null) {
        return;
      }
      if (!response.timingAllowPassed) {
        timingInfo = createOpaqueTimingInfo({
          startTime: timingInfo.startTime
        });
        cacheState = "";
      }
      timingInfo.endTime = coarsenedSharedCurrentTime();
      response.timingInfo = timingInfo;
      markResourceTiming(
        timingInfo,
        originalURL,
        initiatorType,
        globalThis,
        cacheState
      );
    }
    __name(finalizeAndReportTiming, "finalizeAndReportTiming");
    function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis2, cacheState) {
      if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {
        performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis2, cacheState);
      }
    }
    __name(markResourceTiming, "markResourceTiming");
    function abortFetch(p3, request3, responseObject, error) {
      if (!error) {
        error = new DOMException2("The operation was aborted.", "AbortError");
      }
      p3.reject(error);
      if (request3.body != null && isReadable(request3.body?.stream)) {
        request3.body.stream.cancel(error).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
      if (responseObject == null) {
        return;
      }
      const response = responseObject[kState];
      if (response.body != null && isReadable(response.body?.stream)) {
        response.body.stream.cancel(error).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
    }
    __name(abortFetch, "abortFetch");
    function fetching({
      request: request3,
      processRequestBodyChunkLength,
      processRequestEndOfBody,
      processResponse,
      processResponseEndOfBody,
      processResponseConsumeBody,
      useParallelQueue = false,
      dispatcher
      // undici
    }) {
      let taskDestination = null;
      let crossOriginIsolatedCapability = false;
      if (request3.client != null) {
        taskDestination = request3.client.globalObject;
        crossOriginIsolatedCapability = request3.client.crossOriginIsolatedCapability;
      }
      const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
      const timingInfo = createOpaqueTimingInfo({
        startTime: currenTime
      });
      const fetchParams = {
        controller: new Fetch(dispatcher),
        request: request3,
        timingInfo,
        processRequestBodyChunkLength,
        processRequestEndOfBody,
        processResponse,
        processResponseConsumeBody,
        processResponseEndOfBody,
        taskDestination,
        crossOriginIsolatedCapability
      };
      assert2(!request3.body || request3.body.stream);
      if (request3.window === "client") {
        request3.window = request3.client?.globalObject?.constructor?.name === "Window" ? request3.client : "no-window";
      }
      if (request3.origin === "client") {
        request3.origin = request3.client?.origin;
      }
      if (request3.policyContainer === "client") {
        if (request3.client != null) {
          request3.policyContainer = clonePolicyContainer(
            request3.client.policyContainer
          );
        } else {
          request3.policyContainer = makePolicyContainer();
        }
      }
      if (!request3.headersList.contains("accept")) {
        const value = "*/*";
        request3.headersList.append("accept", value);
      }
      if (!request3.headersList.contains("accept-language")) {
        request3.headersList.append("accept-language", "*");
      }
      if (request3.priority === null) {
      }
      if (subresourceSet.has(request3.destination)) {
      }
      mainFetch(fetchParams).catch((err) => {
        fetchParams.controller.terminate(err);
      });
      return fetchParams.controller;
    }
    __name(fetching, "fetching");
    async function mainFetch(fetchParams, recursive = false) {
      const request3 = fetchParams.request;
      let response = null;
      if (request3.localURLsOnly && !urlIsLocal(requestCurrentURL(request3))) {
        response = makeNetworkError("local URLs only");
      }
      tryUpgradeRequestToAPotentiallyTrustworthyURL(request3);
      if (requestBadPort(request3) === "blocked") {
        response = makeNetworkError("bad port");
      }
      if (request3.referrerPolicy === "") {
        request3.referrerPolicy = request3.policyContainer.referrerPolicy;
      }
      if (request3.referrer !== "no-referrer") {
        request3.referrer = determineRequestsReferrer(request3);
      }
      if (response === null) {
        response = await (async () => {
          const currentURL = requestCurrentURL(request3);
          if (
            // - request’s current URL’s origin is same origin with request’s origin,
            //   and request’s response tainting is "basic"
            sameOrigin(currentURL, request3.url) && request3.responseTainting === "basic" || // request’s current URL’s scheme is "data"
            currentURL.protocol === "data:" || // - request’s mode is "navigate" or "websocket"
            (request3.mode === "navigate" || request3.mode === "websocket")
          ) {
            request3.responseTainting = "basic";
            return await schemeFetch(fetchParams);
          }
          if (request3.mode === "same-origin") {
            return makeNetworkError('request mode cannot be "same-origin"');
          }
          if (request3.mode === "no-cors") {
            if (request3.redirect !== "follow") {
              return makeNetworkError(
                'redirect mode cannot be "follow" for "no-cors" request'
              );
            }
            request3.responseTainting = "opaque";
            return await schemeFetch(fetchParams);
          }
          if (!urlIsHttpHttpsScheme(requestCurrentURL(request3))) {
            return makeNetworkError("URL scheme must be a HTTP(S) scheme");
          }
          request3.responseTainting = "cors";
          return await httpFetch(fetchParams);
        })();
      }
      if (recursive) {
        return response;
      }
      if (response.status !== 0 && !response.internalResponse) {
        if (request3.responseTainting === "cors") {
        }
        if (request3.responseTainting === "basic") {
          response = filterResponse(response, "basic");
        } else if (request3.responseTainting === "cors") {
          response = filterResponse(response, "cors");
        } else if (request3.responseTainting === "opaque") {
          response = filterResponse(response, "opaque");
        } else {
          assert2(false);
        }
      }
      let internalResponse = response.status === 0 ? response : response.internalResponse;
      if (internalResponse.urlList.length === 0) {
        internalResponse.urlList.push(...request3.urlList);
      }
      if (!request3.timingAllowFailed) {
        response.timingAllowPassed = true;
      }
      if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request3.headers.contains("range")) {
        response = internalResponse = makeNetworkError();
      }
      if (response.status !== 0 && (request3.method === "HEAD" || request3.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
        internalResponse.body = null;
        fetchParams.controller.dump = true;
      }
      if (request3.integrity) {
        const processBodyError = /* @__PURE__ */ __name((reason) => fetchFinale(fetchParams, makeNetworkError(reason)), "processBodyError");
        if (request3.responseTainting === "opaque" || response.body == null) {
          processBodyError(response.error);
          return;
        }
        const processBody = /* @__PURE__ */ __name((bytes) => {
          if (!bytesMatch(bytes, request3.integrity)) {
            processBodyError("integrity mismatch");
            return;
          }
          response.body = safelyExtractBody(bytes)[0];
          fetchFinale(fetchParams, response);
        }, "processBody");
        await fullyReadBody(response.body, processBody, processBodyError);
      } else {
        fetchFinale(fetchParams, response);
      }
    }
    __name(mainFetch, "mainFetch");
    function schemeFetch(fetchParams) {
      if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
        return Promise.resolve(makeAppropriateNetworkError(fetchParams));
      }
      const { request: request3 } = fetchParams;
      const { protocol: scheme } = requestCurrentURL(request3);
      switch (scheme) {
        case "about:": {
          return Promise.resolve(makeNetworkError("about scheme is not supported"));
        }
        case "blob:": {
          if (!resolveObjectURL) {
            resolveObjectURL = __require("buffer").resolveObjectURL;
          }
          const blobURLEntry = requestCurrentURL(request3);
          if (blobURLEntry.search.length !== 0) {
            return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
          }
          const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
          if (request3.method !== "GET" || !isBlobLike(blobURLEntryObject)) {
            return Promise.resolve(makeNetworkError("invalid method"));
          }
          const bodyWithType = safelyExtractBody(blobURLEntryObject);
          const body2 = bodyWithType[0];
          const length = isomorphicEncode(`${body2.length}`);
          const type2 = bodyWithType[1] ?? "";
          const response = makeResponse({
            statusText: "OK",
            headersList: [
              ["content-length", { name: "Content-Length", value: length }],
              ["content-type", { name: "Content-Type", value: type2 }]
            ]
          });
          response.body = body2;
          return Promise.resolve(response);
        }
        case "data:": {
          const currentURL = requestCurrentURL(request3);
          const dataURLStruct = dataURLProcessor(currentURL);
          if (dataURLStruct === "failure") {
            return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
          }
          const mimeType = serializeAMimeType(dataURLStruct.mimeType);
          return Promise.resolve(makeResponse({
            statusText: "OK",
            headersList: [
              ["content-type", { name: "Content-Type", value: mimeType }]
            ],
            body: safelyExtractBody(dataURLStruct.body)[0]
          }));
        }
        case "file:": {
          return Promise.resolve(makeNetworkError("not implemented... yet..."));
        }
        case "http:":
        case "https:": {
          return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
        }
        default: {
          return Promise.resolve(makeNetworkError("unknown scheme"));
        }
      }
    }
    __name(schemeFetch, "schemeFetch");
    function finalizeResponse(fetchParams, response) {
      fetchParams.request.done = true;
      if (fetchParams.processResponseDone != null) {
        queueMicrotask(() => fetchParams.processResponseDone(response));
      }
    }
    __name(finalizeResponse, "finalizeResponse");
    function fetchFinale(fetchParams, response) {
      if (response.type === "error") {
        response.urlList = [fetchParams.request.urlList[0]];
        response.timingInfo = createOpaqueTimingInfo({
          startTime: fetchParams.timingInfo.startTime
        });
      }
      const processResponseEndOfBody = /* @__PURE__ */ __name(() => {
        fetchParams.request.done = true;
        if (fetchParams.processResponseEndOfBody != null) {
          queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
        }
      }, "processResponseEndOfBody");
      if (fetchParams.processResponse != null) {
        queueMicrotask(() => fetchParams.processResponse(response));
      }
      if (response.body == null) {
        processResponseEndOfBody();
      } else {
        const identityTransformAlgorithm = /* @__PURE__ */ __name((chunk, controller) => {
          controller.enqueue(chunk);
        }, "identityTransformAlgorithm");
        const transformStream = new TransformStream({
          start() {
          },
          transform: identityTransformAlgorithm,
          flush: processResponseEndOfBody
        }, {
          size() {
            return 1;
          }
        }, {
          size() {
            return 1;
          }
        });
        response.body = { stream: response.body.stream.pipeThrough(transformStream) };
      }
      if (fetchParams.processResponseConsumeBody != null) {
        const processBody = /* @__PURE__ */ __name((nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes), "processBody");
        const processBodyError = /* @__PURE__ */ __name((failure) => fetchParams.processResponseConsumeBody(response, failure), "processBodyError");
        if (response.body == null) {
          queueMicrotask(() => processBody(null));
        } else {
          return fullyReadBody(response.body, processBody, processBodyError);
        }
        return Promise.resolve();
      }
    }
    __name(fetchFinale, "fetchFinale");
    async function httpFetch(fetchParams) {
      const request3 = fetchParams.request;
      let response = null;
      let actualResponse = null;
      const timingInfo = fetchParams.timingInfo;
      if (request3.serviceWorkers === "all") {
      }
      if (response === null) {
        if (request3.redirect === "follow") {
          request3.serviceWorkers = "none";
        }
        actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
        if (request3.responseTainting === "cors" && corsCheck(request3, response) === "failure") {
          return makeNetworkError("cors failure");
        }
        if (TAOCheck(request3, response) === "failure") {
          request3.timingAllowFailed = true;
        }
      }
      if ((request3.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(
        request3.origin,
        request3.client,
        request3.destination,
        actualResponse
      ) === "blocked") {
        return makeNetworkError("blocked");
      }
      if (redirectStatusSet.has(actualResponse.status)) {
        if (request3.redirect !== "manual") {
          fetchParams.controller.connection.destroy();
        }
        if (request3.redirect === "error") {
          response = makeNetworkError("unexpected redirect");
        } else if (request3.redirect === "manual") {
          response = actualResponse;
        } else if (request3.redirect === "follow") {
          response = await httpRedirectFetch(fetchParams, response);
        } else {
          assert2(false);
        }
      }
      response.timingInfo = timingInfo;
      return response;
    }
    __name(httpFetch, "httpFetch");
    function httpRedirectFetch(fetchParams, response) {
      const request3 = fetchParams.request;
      const actualResponse = response.internalResponse ? response.internalResponse : response;
      let locationURL;
      try {
        locationURL = responseLocationURL(
          actualResponse,
          requestCurrentURL(request3).hash
        );
        if (locationURL == null) {
          return response;
        }
      } catch (err) {
        return Promise.resolve(makeNetworkError(err));
      }
      if (!urlIsHttpHttpsScheme(locationURL)) {
        return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
      }
      if (request3.redirectCount === 20) {
        return Promise.resolve(makeNetworkError("redirect count exceeded"));
      }
      request3.redirectCount += 1;
      if (request3.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request3, locationURL)) {
        return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'));
      }
      if (request3.responseTainting === "cors" && (locationURL.username || locationURL.password)) {
        return Promise.resolve(makeNetworkError(
          'URL cannot contain credentials for request mode "cors"'
        ));
      }
      if (actualResponse.status !== 303 && request3.body != null && request3.body.source == null) {
        return Promise.resolve(makeNetworkError());
      }
      if ([301, 302].includes(actualResponse.status) && request3.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request3.method)) {
        request3.method = "GET";
        request3.body = null;
        for (const headerName of requestBodyHeader) {
          request3.headersList.delete(headerName);
        }
      }
      if (!sameOrigin(requestCurrentURL(request3), locationURL)) {
        request3.headersList.delete("authorization");
        request3.headersList.delete("proxy-authorization", true);
        request3.headersList.delete("cookie");
        request3.headersList.delete("host");
      }
      if (request3.body != null) {
        assert2(request3.body.source != null);
        request3.body = safelyExtractBody(request3.body.source)[0];
      }
      const timingInfo = fetchParams.timingInfo;
      timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
      if (timingInfo.redirectStartTime === 0) {
        timingInfo.redirectStartTime = timingInfo.startTime;
      }
      request3.urlList.push(locationURL);
      setRequestReferrerPolicyOnRedirect(request3, actualResponse);
      return mainFetch(fetchParams, true);
    }
    __name(httpRedirectFetch, "httpRedirectFetch");
    async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
      const request3 = fetchParams.request;
      let httpFetchParams = null;
      let httpRequest = null;
      let response = null;
      const httpCache = null;
      const revalidatingFlag = false;
      if (request3.window === "no-window" && request3.redirect === "error") {
        httpFetchParams = fetchParams;
        httpRequest = request3;
      } else {
        httpRequest = makeRequest(request3);
        httpFetchParams = { ...fetchParams };
        httpFetchParams.request = httpRequest;
      }
      const includeCredentials = request3.credentials === "include" || request3.credentials === "same-origin" && request3.responseTainting === "basic";
      const contentLength2 = httpRequest.body ? httpRequest.body.length : null;
      let contentLengthHeaderValue = null;
      if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) {
        contentLengthHeaderValue = "0";
      }
      if (contentLength2 != null) {
        contentLengthHeaderValue = isomorphicEncode(`${contentLength2}`);
      }
      if (contentLengthHeaderValue != null) {
        httpRequest.headersList.append("content-length", contentLengthHeaderValue);
      }
      if (contentLength2 != null && httpRequest.keepalive) {
      }
      if (httpRequest.referrer instanceof URL) {
        httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
      }
      appendRequestOriginHeader(httpRequest);
      appendFetchMetadata(httpRequest);
      if (!httpRequest.headersList.contains("user-agent")) {
        httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
      }
      if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) {
        httpRequest.headersList.append("cache-control", "max-age=0");
      }
      if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
        if (!httpRequest.headersList.contains("pragma")) {
          httpRequest.headersList.append("pragma", "no-cache");
        }
        if (!httpRequest.headersList.contains("cache-control")) {
          httpRequest.headersList.append("cache-control", "no-cache");
        }
      }
      if (httpRequest.headersList.contains("range")) {
        httpRequest.headersList.append("accept-encoding", "identity");
      }
      if (!httpRequest.headersList.contains("accept-encoding")) {
        if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
          httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
        } else {
          httpRequest.headersList.append("accept-encoding", "gzip, deflate");
        }
      }
      httpRequest.headersList.delete("host");
      if (includeCredentials) {
      }
      if (httpCache == null) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {
      }
      if (response == null) {
        if (httpRequest.mode === "only-if-cached") {
          return makeNetworkError("only if cached");
        }
        const forwardResponse = await httpNetworkFetch(
          httpFetchParams,
          includeCredentials,
          isNewConnectionFetch
        );
        if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {
        }
        if (revalidatingFlag && forwardResponse.status === 304) {
        }
        if (response == null) {
          response = forwardResponse;
        }
      }
      response.urlList = [...httpRequest.urlList];
      if (httpRequest.headersList.contains("range")) {
        response.rangeRequested = true;
      }
      response.requestIncludesCredentials = includeCredentials;
      if (response.status === 407) {
        if (request3.window === "no-window") {
          return makeNetworkError();
        }
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        return makeNetworkError("proxy authentication required");
      }
      if (
        // response’s status is 421
        response.status === 421 && // isNewConnectionFetch is false
        !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
        (request3.body == null || request3.body.source != null)
      ) {
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        fetchParams.controller.connection.destroy();
        response = await httpNetworkOrCacheFetch(
          fetchParams,
          isAuthenticationFetch,
          true
        );
      }
      if (isAuthenticationFetch) {
      }
      return response;
    }
    __name(httpNetworkOrCacheFetch, "httpNetworkOrCacheFetch");
    async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
      assert2(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
      fetchParams.controller.connection = {
        abort: null,
        destroyed: false,
        destroy(err) {
          if (!this.destroyed) {
            this.destroyed = true;
            this.abort?.(err ?? new DOMException2("The operation was aborted.", "AbortError"));
          }
        }
      };
      const request3 = fetchParams.request;
      let response = null;
      const timingInfo = fetchParams.timingInfo;
      const httpCache = null;
      if (httpCache == null) {
        request3.cache = "no-store";
      }
      const newConnection = forceNewConnection ? "yes" : "no";
      if (request3.mode === "websocket") {
      } else {
      }
      let requestBody = null;
      if (request3.body == null && fetchParams.processRequestEndOfBody) {
        queueMicrotask(() => fetchParams.processRequestEndOfBody());
      } else if (request3.body != null) {
        const processBodyChunk = /* @__PURE__ */ __name(async function* (bytes) {
          if (isCancelled(fetchParams)) {
            return;
          }
          yield bytes;
          fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
        }, "processBodyChunk");
        const processEndOfBody = /* @__PURE__ */ __name(() => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (fetchParams.processRequestEndOfBody) {
            fetchParams.processRequestEndOfBody();
          }
        }, "processEndOfBody");
        const processBodyError = /* @__PURE__ */ __name((e3) => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (e3.name === "AbortError") {
            fetchParams.controller.abort();
          } else {
            fetchParams.controller.terminate(e3);
          }
        }, "processBodyError");
        requestBody = async function* () {
          try {
            for await (const bytes of request3.body.stream) {
              yield* processBodyChunk(bytes);
            }
            processEndOfBody();
          } catch (err) {
            processBodyError(err);
          }
        }();
      }
      try {
        const { body: body2, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
        if (socket) {
          response = makeResponse({ status, statusText, headersList, socket });
        } else {
          const iterator = body2[Symbol.asyncIterator]();
          fetchParams.controller.next = () => iterator.next();
          response = makeResponse({ status, statusText, headersList });
        }
      } catch (err) {
        if (err.name === "AbortError") {
          fetchParams.controller.connection.destroy();
          return makeAppropriateNetworkError(fetchParams, err);
        }
        return makeNetworkError(err);
      }
      const pullAlgorithm = /* @__PURE__ */ __name(() => {
        fetchParams.controller.resume();
      }, "pullAlgorithm");
      const cancelAlgorithm = /* @__PURE__ */ __name((reason) => {
        fetchParams.controller.abort(reason);
      }, "cancelAlgorithm");
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      const stream = new ReadableStream2(
        {
          async start(controller) {
            fetchParams.controller.controller = controller;
          },
          async pull(controller) {
            await pullAlgorithm(controller);
          },
          async cancel(reason) {
            await cancelAlgorithm(reason);
          }
        },
        {
          highWaterMark: 0,
          size() {
            return 1;
          }
        }
      );
      response.body = { stream };
      fetchParams.controller.on("terminated", onAborted);
      fetchParams.controller.resume = async () => {
        while (true) {
          let bytes;
          let isFailure;
          try {
            const { done, value } = await fetchParams.controller.next();
            if (isAborted(fetchParams)) {
              break;
            }
            bytes = done ? void 0 : value;
          } catch (err) {
            if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
              bytes = void 0;
            } else {
              bytes = err;
              isFailure = true;
            }
          }
          if (bytes === void 0) {
            readableStreamClose(fetchParams.controller.controller);
            finalizeResponse(fetchParams, response);
            return;
          }
          timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
          if (isFailure) {
            fetchParams.controller.terminate(bytes);
            return;
          }
          fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
          if (isErrored(stream)) {
            fetchParams.controller.terminate();
            return;
          }
          if (!fetchParams.controller.controller.desiredSize) {
            return;
          }
        }
      };
      function onAborted(reason) {
        if (isAborted(fetchParams)) {
          response.aborted = true;
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(
              fetchParams.controller.serializedAbortReason
            );
          }
        } else {
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(new TypeError("terminated", {
              cause: isErrorLike(reason) ? reason : void 0
            }));
          }
        }
        fetchParams.controller.connection.destroy();
      }
      __name(onAborted, "onAborted");
      return response;
      async function dispatch({ body: body2 }) {
        const url2 = requestCurrentURL(request3);
        const agent = fetchParams.controller.dispatcher;
        return new Promise((resolve2, reject) => agent.dispatch(
          {
            path: url2.pathname + url2.search,
            origin: url2.origin,
            method: request3.method,
            body: fetchParams.controller.dispatcher.isMockActive ? request3.body && (request3.body.source || request3.body.stream) : body2,
            headers: request3.headersList.entries,
            maxRedirections: 0,
            upgrade: request3.mode === "websocket" ? "websocket" : void 0
          },
          {
            body: null,
            abort: null,
            onConnect(abort) {
              const { connection } = fetchParams.controller;
              if (connection.destroyed) {
                abort(new DOMException2("The operation was aborted.", "AbortError"));
              } else {
                fetchParams.controller.on("terminated", abort);
                this.abort = connection.abort = abort;
              }
            },
            onHeaders(status, headersList, resume, statusText) {
              if (status < 200) {
                return;
              }
              let codings = [];
              let location = "";
              const headers = new Headers();
              if (Array.isArray(headersList)) {
                for (let n3 = 0; n3 < headersList.length; n3 += 2) {
                  const key = headersList[n3 + 0].toString("latin1");
                  const val = headersList[n3 + 1].toString("latin1");
                  if (key.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x3) => x3.trim());
                  } else if (key.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key, val);
                }
              } else {
                const keys = Object.keys(headersList);
                for (const key of keys) {
                  const val = headersList[key];
                  if (key.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x3) => x3.trim()).reverse();
                  } else if (key.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key, val);
                }
              }
              this.body = new Readable5({ read: resume });
              const decoders = [];
              const willFollow = request3.redirect === "follow" && location && redirectStatusSet.has(status);
              if (request3.method !== "HEAD" && request3.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) {
                for (const coding of codings) {
                  if (coding === "x-gzip" || coding === "gzip") {
                    decoders.push(zlib2.createGunzip({
                      // Be less strict when decoding compressed responses, since sometimes
                      // servers send slightly invalid responses that are still accepted
                      // by common browsers.
                      // Always using Z_SYNC_FLUSH is what cURL does.
                      flush: zlib2.constants.Z_SYNC_FLUSH,
                      finishFlush: zlib2.constants.Z_SYNC_FLUSH
                    }));
                  } else if (coding === "deflate") {
                    decoders.push(zlib2.createInflate());
                  } else if (coding === "br") {
                    decoders.push(zlib2.createBrotliDecompress());
                  } else {
                    decoders.length = 0;
                    break;
                  }
                }
              }
              resolve2({
                status,
                statusText,
                headersList: headers[kHeadersList],
                body: decoders.length ? pipeline(this.body, ...decoders, () => {
                }) : this.body.on("error", () => {
                })
              });
              return true;
            },
            onData(chunk) {
              if (fetchParams.controller.dump) {
                return;
              }
              const bytes = chunk;
              timingInfo.encodedBodySize += bytes.byteLength;
              return this.body.push(bytes);
            },
            onComplete() {
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              fetchParams.controller.ended = true;
              this.body.push(null);
            },
            onError(error) {
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              this.body?.destroy(error);
              fetchParams.controller.terminate(error);
              reject(error);
            },
            onUpgrade(status, headersList, socket) {
              if (status !== 101) {
                return;
              }
              const headers = new Headers();
              for (let n3 = 0; n3 < headersList.length; n3 += 2) {
                const key = headersList[n3 + 0].toString("latin1");
                const val = headersList[n3 + 1].toString("latin1");
                headers[kHeadersList].append(key, val);
              }
              resolve2({
                status,
                statusText: STATUS_CODES2[status],
                headersList: headers[kHeadersList],
                socket
              });
              return true;
            }
          }
        ));
      }
      __name(dispatch, "dispatch");
    }
    __name(httpNetworkFetch, "httpNetworkFetch");
    module.exports = {
      fetch,
      Fetch,
      fetching,
      finalizeAndReportTiming
    };
  }
});

// node_modules/undici/lib/fileapi/symbols.js
var require_symbols3 = __commonJS({
  "node_modules/undici/lib/fileapi/symbols.js"(exports2, module) {
    "use strict";
    module.exports = {
      kState: Symbol("FileReader state"),
      kResult: Symbol("FileReader result"),
      kError: Symbol("FileReader error"),
      kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
      kEvents: Symbol("FileReader events"),
      kAborted: Symbol("FileReader aborted")
    };
  }
});

// node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS({
  "node_modules/undici/lib/fileapi/progressevent.js"(exports2, module) {
    "use strict";
    var { webidl } = require_webidl();
    var kState = Symbol("ProgressEvent state");
    var ProgressEvent = class _ProgressEvent extends Event {
      static {
        __name(this, "ProgressEvent");
      }
      constructor(type2, eventInitDict = {}) {
        type2 = webidl.converters.DOMString(type2);
        eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});
        super(type2, eventInitDict);
        this[kState] = {
          lengthComputable: eventInitDict.lengthComputable,
          loaded: eventInitDict.loaded,
          total: eventInitDict.total
        };
      }
      get lengthComputable() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].lengthComputable;
      }
      get loaded() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].loaded;
      }
      get total() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].total;
      }
    };
    webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
      {
        key: "lengthComputable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "loaded",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "total",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ]);
    module.exports = {
      ProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS({
  "node_modules/undici/lib/fileapi/encoding.js"(exports2, module) {
    "use strict";
    function getEncoding(label) {
      if (!label) {
        return "failure";
      }
      switch (label.trim().toLowerCase()) {
        case "unicode-1-1-utf-8":
        case "unicode11utf8":
        case "unicode20utf8":
        case "utf-8":
        case "utf8":
        case "x-unicode20utf8":
          return "UTF-8";
        case "866":
        case "cp866":
        case "csibm866":
        case "ibm866":
          return "IBM866";
        case "csisolatin2":
        case "iso-8859-2":
        case "iso-ir-101":
        case "iso8859-2":
        case "iso88592":
        case "iso_8859-2":
        case "iso_8859-2:1987":
        case "l2":
        case "latin2":
          return "ISO-8859-2";
        case "csisolatin3":
        case "iso-8859-3":
        case "iso-ir-109":
        case "iso8859-3":
        case "iso88593":
        case "iso_8859-3":
        case "iso_8859-3:1988":
        case "l3":
        case "latin3":
          return "ISO-8859-3";
        case "csisolatin4":
        case "iso-8859-4":
        case "iso-ir-110":
        case "iso8859-4":
        case "iso88594":
        case "iso_8859-4":
        case "iso_8859-4:1988":
        case "l4":
        case "latin4":
          return "ISO-8859-4";
        case "csisolatincyrillic":
        case "cyrillic":
        case "iso-8859-5":
        case "iso-ir-144":
        case "iso8859-5":
        case "iso88595":
        case "iso_8859-5":
        case "iso_8859-5:1988":
          return "ISO-8859-5";
        case "arabic":
        case "asmo-708":
        case "csiso88596e":
        case "csiso88596i":
        case "csisolatinarabic":
        case "ecma-114":
        case "iso-8859-6":
        case "iso-8859-6-e":
        case "iso-8859-6-i":
        case "iso-ir-127":
        case "iso8859-6":
        case "iso88596":
        case "iso_8859-6":
        case "iso_8859-6:1987":
          return "ISO-8859-6";
        case "csisolatingreek":
        case "ecma-118":
        case "elot_928":
        case "greek":
        case "greek8":
        case "iso-8859-7":
        case "iso-ir-126":
        case "iso8859-7":
        case "iso88597":
        case "iso_8859-7":
        case "iso_8859-7:1987":
        case "sun_eu_greek":
          return "ISO-8859-7";
        case "csiso88598e":
        case "csisolatinhebrew":
        case "hebrew":
        case "iso-8859-8":
        case "iso-8859-8-e":
        case "iso-ir-138":
        case "iso8859-8":
        case "iso88598":
        case "iso_8859-8":
        case "iso_8859-8:1988":
        case "visual":
          return "ISO-8859-8";
        case "csiso88598i":
        case "iso-8859-8-i":
        case "logical":
          return "ISO-8859-8-I";
        case "csisolatin6":
        case "iso-8859-10":
        case "iso-ir-157":
        case "iso8859-10":
        case "iso885910":
        case "l6":
        case "latin6":
          return "ISO-8859-10";
        case "iso-8859-13":
        case "iso8859-13":
        case "iso885913":
          return "ISO-8859-13";
        case "iso-8859-14":
        case "iso8859-14":
        case "iso885914":
          return "ISO-8859-14";
        case "csisolatin9":
        case "iso-8859-15":
        case "iso8859-15":
        case "iso885915":
        case "iso_8859-15":
        case "l9":
          return "ISO-8859-15";
        case "iso-8859-16":
          return "ISO-8859-16";
        case "cskoi8r":
        case "koi":
        case "koi8":
        case "koi8-r":
        case "koi8_r":
          return "KOI8-R";
        case "koi8-ru":
        case "koi8-u":
          return "KOI8-U";
        case "csmacintosh":
        case "mac":
        case "macintosh":
        case "x-mac-roman":
          return "macintosh";
        case "iso-8859-11":
        case "iso8859-11":
        case "iso885911":
        case "tis-620":
        case "windows-874":
          return "windows-874";
        case "cp1250":
        case "windows-1250":
        case "x-cp1250":
          return "windows-1250";
        case "cp1251":
        case "windows-1251":
        case "x-cp1251":
          return "windows-1251";
        case "ansi_x3.4-1968":
        case "ascii":
        case "cp1252":
        case "cp819":
        case "csisolatin1":
        case "ibm819":
        case "iso-8859-1":
        case "iso-ir-100":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "iso_8859-1:1987":
        case "l1":
        case "latin1":
        case "us-ascii":
        case "windows-1252":
        case "x-cp1252":
          return "windows-1252";
        case "cp1253":
        case "windows-1253":
        case "x-cp1253":
          return "windows-1253";
        case "cp1254":
        case "csisolatin5":
        case "iso-8859-9":
        case "iso-ir-148":
        case "iso8859-9":
        case "iso88599":
        case "iso_8859-9":
        case "iso_8859-9:1989":
        case "l5":
        case "latin5":
        case "windows-1254":
        case "x-cp1254":
          return "windows-1254";
        case "cp1255":
        case "windows-1255":
        case "x-cp1255":
          return "windows-1255";
        case "cp1256":
        case "windows-1256":
        case "x-cp1256":
          return "windows-1256";
        case "cp1257":
        case "windows-1257":
        case "x-cp1257":
          return "windows-1257";
        case "cp1258":
        case "windows-1258":
        case "x-cp1258":
          return "windows-1258";
        case "x-mac-cyrillic":
        case "x-mac-ukrainian":
          return "x-mac-cyrillic";
        case "chinese":
        case "csgb2312":
        case "csiso58gb231280":
        case "gb2312":
        case "gb_2312":
        case "gb_2312-80":
        case "gbk":
        case "iso-ir-58":
        case "x-gbk":
          return "GBK";
        case "gb18030":
          return "gb18030";
        case "big5":
        case "big5-hkscs":
        case "cn-big5":
        case "csbig5":
        case "x-x-big5":
          return "Big5";
        case "cseucpkdfmtjapanese":
        case "euc-jp":
        case "x-euc-jp":
          return "EUC-JP";
        case "csiso2022jp":
        case "iso-2022-jp":
          return "ISO-2022-JP";
        case "csshiftjis":
        case "ms932":
        case "ms_kanji":
        case "shift-jis":
        case "shift_jis":
        case "sjis":
        case "windows-31j":
        case "x-sjis":
          return "Shift_JIS";
        case "cseuckr":
        case "csksc56011987":
        case "euc-kr":
        case "iso-ir-149":
        case "korean":
        case "ks_c_5601-1987":
        case "ks_c_5601-1989":
        case "ksc5601":
        case "ksc_5601":
        case "windows-949":
          return "EUC-KR";
        case "csiso2022kr":
        case "hz-gb-2312":
        case "iso-2022-cn":
        case "iso-2022-cn-ext":
        case "iso-2022-kr":
        case "replacement":
          return "replacement";
        case "unicodefffe":
        case "utf-16be":
          return "UTF-16BE";
        case "csunicode":
        case "iso-10646-ucs-2":
        case "ucs-2":
        case "unicode":
        case "unicodefeff":
        case "utf-16":
        case "utf-16le":
          return "UTF-16LE";
        case "x-user-defined":
          return "x-user-defined";
        default:
          return "failure";
      }
    }
    __name(getEncoding, "getEncoding");
    module.exports = {
      getEncoding
    };
  }
});

// node_modules/undici/lib/fileapi/util.js
var require_util4 = __commonJS({
  "node_modules/undici/lib/fileapi/util.js"(exports2, module) {
    "use strict";
    var {
      kState,
      kError,
      kResult,
      kAborted,
      kLastProgressEventFired
    } = require_symbols3();
    var { ProgressEvent } = require_progressevent();
    var { getEncoding } = require_encoding();
    var { DOMException: DOMException2 } = require_constants2();
    var { serializeAMimeType, parseMIMEType } = require_dataURL();
    var { types: types2 } = __require("util");
    var { StringDecoder } = __require("string_decoder");
    var { btoa: btoa2 } = __require("buffer");
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    function readOperation(fr2, blob, type2, encodingName) {
      if (fr2[kState] === "loading") {
        throw new DOMException2("Invalid state", "InvalidStateError");
      }
      fr2[kState] = "loading";
      fr2[kResult] = null;
      fr2[kError] = null;
      const stream = blob.stream();
      const reader = stream.getReader();
      const bytes = [];
      let chunkPromise = reader.read();
      let isFirstChunk = true;
      (async () => {
        while (!fr2[kAborted]) {
          try {
            const { done, value } = await chunkPromise;
            if (isFirstChunk && !fr2[kAborted]) {
              queueMicrotask(() => {
                fireAProgressEvent("loadstart", fr2);
              });
            }
            isFirstChunk = false;
            if (!done && types2.isUint8Array(value)) {
              bytes.push(value);
              if ((fr2[kLastProgressEventFired] === void 0 || Date.now() - fr2[kLastProgressEventFired] >= 50) && !fr2[kAborted]) {
                fr2[kLastProgressEventFired] = Date.now();
                queueMicrotask(() => {
                  fireAProgressEvent("progress", fr2);
                });
              }
              chunkPromise = reader.read();
            } else if (done) {
              queueMicrotask(() => {
                fr2[kState] = "done";
                try {
                  const result = packageData(bytes, type2, blob.type, encodingName);
                  if (fr2[kAborted]) {
                    return;
                  }
                  fr2[kResult] = result;
                  fireAProgressEvent("load", fr2);
                } catch (error) {
                  fr2[kError] = error;
                  fireAProgressEvent("error", fr2);
                }
                if (fr2[kState] !== "loading") {
                  fireAProgressEvent("loadend", fr2);
                }
              });
              break;
            }
          } catch (error) {
            if (fr2[kAborted]) {
              return;
            }
            queueMicrotask(() => {
              fr2[kState] = "done";
              fr2[kError] = error;
              fireAProgressEvent("error", fr2);
              if (fr2[kState] !== "loading") {
                fireAProgressEvent("loadend", fr2);
              }
            });
            break;
          }
        }
      })();
    }
    __name(readOperation, "readOperation");
    function fireAProgressEvent(e3, reader) {
      const event = new ProgressEvent(e3, {
        bubbles: false,
        cancelable: false
      });
      reader.dispatchEvent(event);
    }
    __name(fireAProgressEvent, "fireAProgressEvent");
    function packageData(bytes, type2, mimeType, encodingName) {
      switch (type2) {
        case "DataURL": {
          let dataURL = "data:";
          const parsed = parseMIMEType(mimeType || "application/octet-stream");
          if (parsed !== "failure") {
            dataURL += serializeAMimeType(parsed);
          }
          dataURL += ";base64,";
          const decoder = new StringDecoder("latin1");
          for (const chunk of bytes) {
            dataURL += btoa2(decoder.write(chunk));
          }
          dataURL += btoa2(decoder.end());
          return dataURL;
        }
        case "Text": {
          let encoding = "failure";
          if (encodingName) {
            encoding = getEncoding(encodingName);
          }
          if (encoding === "failure" && mimeType) {
            const type3 = parseMIMEType(mimeType);
            if (type3 !== "failure") {
              encoding = getEncoding(type3.parameters.get("charset"));
            }
          }
          if (encoding === "failure") {
            encoding = "UTF-8";
          }
          return decode(bytes, encoding);
        }
        case "ArrayBuffer": {
          const sequence = combineByteSequences(bytes);
          return sequence.buffer;
        }
        case "BinaryString": {
          let binaryString = "";
          const decoder = new StringDecoder("latin1");
          for (const chunk of bytes) {
            binaryString += decoder.write(chunk);
          }
          binaryString += decoder.end();
          return binaryString;
        }
      }
    }
    __name(packageData, "packageData");
    function decode(ioQueue, encoding) {
      const bytes = combineByteSequences(ioQueue);
      const BOMEncoding = BOMSniffing(bytes);
      let slice = 0;
      if (BOMEncoding !== null) {
        encoding = BOMEncoding;
        slice = BOMEncoding === "UTF-8" ? 3 : 2;
      }
      const sliced = bytes.slice(slice);
      return new TextDecoder(encoding).decode(sliced);
    }
    __name(decode, "decode");
    function BOMSniffing(ioQueue) {
      const [a3, b3, c3] = ioQueue;
      if (a3 === 239 && b3 === 187 && c3 === 191) {
        return "UTF-8";
      } else if (a3 === 254 && b3 === 255) {
        return "UTF-16BE";
      } else if (a3 === 255 && b3 === 254) {
        return "UTF-16LE";
      }
      return null;
    }
    __name(BOMSniffing, "BOMSniffing");
    function combineByteSequences(sequences) {
      const size = sequences.reduce((a3, b3) => {
        return a3 + b3.byteLength;
      }, 0);
      let offset = 0;
      return sequences.reduce((a3, b3) => {
        a3.set(b3, offset);
        offset += b3.byteLength;
        return a3;
      }, new Uint8Array(size));
    }
    __name(combineByteSequences, "combineByteSequences");
    module.exports = {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS({
  "node_modules/undici/lib/fileapi/filereader.js"(exports2, module) {
    "use strict";
    var {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    } = require_util4();
    var {
      kState,
      kError,
      kResult,
      kEvents,
      kAborted
    } = require_symbols3();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var FileReader = class _FileReader extends EventTarget {
      static {
        __name(this, "FileReader");
      }
      constructor() {
        super();
        this[kState] = "empty";
        this[kResult] = null;
        this[kError] = null;
        this[kEvents] = {
          loadend: null,
          error: null,
          abort: null,
          load: null,
          progress: null,
          loadstart: null
        };
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
       * @param {import('buffer').Blob} blob
       */
      readAsArrayBuffer(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "ArrayBuffer");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsBinaryString
       * @param {import('buffer').Blob} blob
       */
      readAsBinaryString(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "BinaryString");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsDataText
       * @param {import('buffer').Blob} blob
       * @param {string?} encoding
       */
      readAsText(blob, encoding = void 0) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
        blob = webidl.converters.Blob(blob, { strict: false });
        if (encoding !== void 0) {
          encoding = webidl.converters.DOMString(encoding);
        }
        readOperation(this, blob, "Text", encoding);
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
       * @param {import('buffer').Blob} blob
       */
      readAsDataURL(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "DataURL");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-abort
       */
      abort() {
        if (this[kState] === "empty" || this[kState] === "done") {
          this[kResult] = null;
          return;
        }
        if (this[kState] === "loading") {
          this[kState] = "done";
          this[kResult] = null;
        }
        this[kAborted] = true;
        fireAProgressEvent("abort", this);
        if (this[kState] !== "loading") {
          fireAProgressEvent("loadend", this);
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
       */
      get readyState() {
        webidl.brandCheck(this, _FileReader);
        switch (this[kState]) {
          case "empty":
            return this.EMPTY;
          case "loading":
            return this.LOADING;
          case "done":
            return this.DONE;
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-result
       */
      get result() {
        webidl.brandCheck(this, _FileReader);
        return this[kResult];
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-error
       */
      get error() {
        webidl.brandCheck(this, _FileReader);
        return this[kError];
      }
      get onloadend() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].loadend;
      }
      set onloadend(fn2) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].loadend) {
          this.removeEventListener("loadend", this[kEvents].loadend);
        }
        if (typeof fn2 === "function") {
          this[kEvents].loadend = fn2;
          this.addEventListener("loadend", fn2);
        } else {
          this[kEvents].loadend = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].error;
      }
      set onerror(fn2) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].error) {
          this.removeEventListener("error", this[kEvents].error);
        }
        if (typeof fn2 === "function") {
          this[kEvents].error = fn2;
          this.addEventListener("error", fn2);
        } else {
          this[kEvents].error = null;
        }
      }
      get onloadstart() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].loadstart;
      }
      set onloadstart(fn2) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].loadstart) {
          this.removeEventListener("loadstart", this[kEvents].loadstart);
        }
        if (typeof fn2 === "function") {
          this[kEvents].loadstart = fn2;
          this.addEventListener("loadstart", fn2);
        } else {
          this[kEvents].loadstart = null;
        }
      }
      get onprogress() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].progress;
      }
      set onprogress(fn2) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].progress) {
          this.removeEventListener("progress", this[kEvents].progress);
        }
        if (typeof fn2 === "function") {
          this[kEvents].progress = fn2;
          this.addEventListener("progress", fn2);
        } else {
          this[kEvents].progress = null;
        }
      }
      get onload() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].load;
      }
      set onload(fn2) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].load) {
          this.removeEventListener("load", this[kEvents].load);
        }
        if (typeof fn2 === "function") {
          this[kEvents].load = fn2;
          this.addEventListener("load", fn2);
        } else {
          this[kEvents].load = null;
        }
      }
      get onabort() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].abort;
      }
      set onabort(fn2) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].abort) {
          this.removeEventListener("abort", this[kEvents].abort);
        }
        if (typeof fn2 === "function") {
          this[kEvents].abort = fn2;
          this.addEventListener("abort", fn2);
        } else {
          this[kEvents].abort = null;
        }
      }
    };
    FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
    FileReader.LOADING = FileReader.prototype.LOADING = 1;
    FileReader.DONE = FileReader.prototype.DONE = 2;
    Object.defineProperties(FileReader.prototype, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors,
      readAsArrayBuffer: kEnumerableProperty,
      readAsBinaryString: kEnumerableProperty,
      readAsText: kEnumerableProperty,
      readAsDataURL: kEnumerableProperty,
      abort: kEnumerableProperty,
      readyState: kEnumerableProperty,
      result: kEnumerableProperty,
      error: kEnumerableProperty,
      onloadstart: kEnumerableProperty,
      onprogress: kEnumerableProperty,
      onload: kEnumerableProperty,
      onabort: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onloadend: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "FileReader",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(FileReader, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors
    });
    module.exports = {
      FileReader
    };
  }
});

// node_modules/undici/lib/cache/symbols.js
var require_symbols4 = __commonJS({
  "node_modules/undici/lib/cache/symbols.js"(exports2, module) {
    "use strict";
    module.exports = {
      kConstruct: require_symbols().kConstruct
    };
  }
});

// node_modules/undici/lib/cache/util.js
var require_util5 = __commonJS({
  "node_modules/undici/lib/cache/util.js"(exports2, module) {
    "use strict";
    var assert2 = __require("assert");
    var { URLSerializer } = require_dataURL();
    var { isValidHeaderName } = require_util2();
    function urlEquals(A3, B3, excludeFragment = false) {
      const serializedA = URLSerializer(A3, excludeFragment);
      const serializedB = URLSerializer(B3, excludeFragment);
      return serializedA === serializedB;
    }
    __name(urlEquals, "urlEquals");
    function fieldValues(header) {
      assert2(header !== null);
      const values = [];
      for (let value of header.split(",")) {
        value = value.trim();
        if (!value.length) {
          continue;
        } else if (!isValidHeaderName(value)) {
          continue;
        }
        values.push(value);
      }
      return values;
    }
    __name(fieldValues, "fieldValues");
    module.exports = {
      urlEquals,
      fieldValues
    };
  }
});

// node_modules/undici/lib/cache/cache.js
var require_cache = __commonJS({
  "node_modules/undici/lib/cache/cache.js"(exports2, module) {
    "use strict";
    var { kConstruct } = require_symbols4();
    var { urlEquals, fieldValues: getFieldValues } = require_util5();
    var { kEnumerableProperty, isDisturbed } = require_util();
    var { kHeadersList } = require_symbols();
    var { webidl } = require_webidl();
    var { Response, cloneResponse } = require_response();
    var { Request } = require_request2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { fetching } = require_fetch();
    var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util2();
    var assert2 = __require("assert");
    var { getGlobalDispatcher } = require_global2();
    var Cache = class _Cache {
      static {
        __name(this, "Cache");
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
       * @type {requestResponseList}
       */
      #relevantRequestResponseList;
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
        this.#relevantRequestResponseList = arguments[1];
      }
      async match(request3, options = {}) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
        request3 = webidl.converters.RequestInfo(request3);
        options = webidl.converters.CacheQueryOptions(options);
        const p3 = await this.matchAll(request3, options);
        if (p3.length === 0) {
          return;
        }
        return p3[0];
      }
      async matchAll(request3 = void 0, options = {}) {
        webidl.brandCheck(this, _Cache);
        if (request3 !== void 0) request3 = webidl.converters.RequestInfo(request3);
        options = webidl.converters.CacheQueryOptions(options);
        let r3 = null;
        if (request3 !== void 0) {
          if (request3 instanceof Request) {
            r3 = request3[kState];
            if (r3.method !== "GET" && !options.ignoreMethod) {
              return [];
            }
          } else if (typeof request3 === "string") {
            r3 = new Request(request3)[kState];
          }
        }
        const responses = [];
        if (request3 === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            responses.push(requestResponse[1]);
          }
        } else {
          const requestResponses = this.#queryCache(r3, options);
          for (const requestResponse of requestResponses) {
            responses.push(requestResponse[1]);
          }
        }
        const responseList = [];
        for (const response of responses) {
          const responseObject = new Response(response.body?.source ?? null);
          const body2 = responseObject[kState].body;
          responseObject[kState] = response;
          responseObject[kState].body = body2;
          responseObject[kHeaders][kHeadersList] = response.headersList;
          responseObject[kHeaders][kGuard] = "immutable";
          responseList.push(responseObject);
        }
        return Object.freeze(responseList);
      }
      async add(request3) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
        request3 = webidl.converters.RequestInfo(request3);
        const requests = [request3];
        const responseArrayPromise = this.addAll(requests);
        return await responseArrayPromise;
      }
      async addAll(requests) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
        requests = webidl.converters["sequence<RequestInfo>"](requests);
        const responsePromises = [];
        const requestList = [];
        for (const request3 of requests) {
          if (typeof request3 === "string") {
            continue;
          }
          const r3 = request3[kState];
          if (!urlIsHttpHttpsScheme(r3.url) || r3.method !== "GET") {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme when method is not GET."
            });
          }
        }
        const fetchControllers = [];
        for (const request3 of requests) {
          const r3 = new Request(request3)[kState];
          if (!urlIsHttpHttpsScheme(r3.url)) {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme."
            });
          }
          r3.initiator = "fetch";
          r3.destination = "subresource";
          requestList.push(r3);
          const responsePromise = createDeferredPromise();
          fetchControllers.push(fetching({
            request: r3,
            dispatcher: getGlobalDispatcher(),
            processResponse(response) {
              if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) {
                responsePromise.reject(webidl.errors.exception({
                  header: "Cache.addAll",
                  message: "Received an invalid status code or the request failed."
                }));
              } else if (response.headersList.contains("vary")) {
                const fieldValues = getFieldValues(response.headersList.get("vary"));
                for (const fieldValue of fieldValues) {
                  if (fieldValue === "*") {
                    responsePromise.reject(webidl.errors.exception({
                      header: "Cache.addAll",
                      message: "invalid vary field value"
                    }));
                    for (const controller of fetchControllers) {
                      controller.abort();
                    }
                    return;
                  }
                }
              }
            },
            processResponseEndOfBody(response) {
              if (response.aborted) {
                responsePromise.reject(new DOMException("aborted", "AbortError"));
                return;
              }
              responsePromise.resolve(response);
            }
          }));
          responsePromises.push(responsePromise.promise);
        }
        const p3 = Promise.all(responsePromises);
        const responses = await p3;
        const operations = [];
        let index2 = 0;
        for (const response of responses) {
          const operation = {
            type: "put",
            // 7.3.2
            request: requestList[index2],
            // 7.3.3
            response
            // 7.3.4
          };
          operations.push(operation);
          index2++;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e3) {
          errorData = e3;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(void 0);
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async put(request3, response) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
        request3 = webidl.converters.RequestInfo(request3);
        response = webidl.converters.Response(response);
        let innerRequest = null;
        if (request3 instanceof Request) {
          innerRequest = request3[kState];
        } else {
          innerRequest = new Request(request3)[kState];
        }
        if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Expected an http/s scheme when method is not GET"
          });
        }
        const innerResponse = response[kState];
        if (innerResponse.status === 206) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Got 206 status"
          });
        }
        if (innerResponse.headersList.contains("vary")) {
          const fieldValues = getFieldValues(innerResponse.headersList.get("vary"));
          for (const fieldValue of fieldValues) {
            if (fieldValue === "*") {
              throw webidl.errors.exception({
                header: "Cache.put",
                message: "Got * vary field value"
              });
            }
          }
        }
        if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Response body is locked or disturbed"
          });
        }
        const clonedResponse = cloneResponse(innerResponse);
        const bodyReadPromise = createDeferredPromise();
        if (innerResponse.body != null) {
          const stream = innerResponse.body.stream;
          const reader = stream.getReader();
          readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
        } else {
          bodyReadPromise.resolve(void 0);
        }
        const operations = [];
        const operation = {
          type: "put",
          // 14.
          request: innerRequest,
          // 15.
          response: clonedResponse
          // 16.
        };
        operations.push(operation);
        const bytes = await bodyReadPromise.promise;
        if (clonedResponse.body != null) {
          clonedResponse.body.source = bytes;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e3) {
          errorData = e3;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve();
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async delete(request3, options = {}) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
        request3 = webidl.converters.RequestInfo(request3);
        options = webidl.converters.CacheQueryOptions(options);
        let r3 = null;
        if (request3 instanceof Request) {
          r3 = request3[kState];
          if (r3.method !== "GET" && !options.ignoreMethod) {
            return false;
          }
        } else {
          assert2(typeof request3 === "string");
          r3 = new Request(request3)[kState];
        }
        const operations = [];
        const operation = {
          type: "delete",
          request: r3,
          options
        };
        operations.push(operation);
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        let requestResponses;
        try {
          requestResponses = this.#batchCacheOperations(operations);
        } catch (e3) {
          errorData = e3;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(!!requestResponses?.length);
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
       * @param {any} request
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @returns {readonly Request[]}
       */
      async keys(request3 = void 0, options = {}) {
        webidl.brandCheck(this, _Cache);
        if (request3 !== void 0) request3 = webidl.converters.RequestInfo(request3);
        options = webidl.converters.CacheQueryOptions(options);
        let r3 = null;
        if (request3 !== void 0) {
          if (request3 instanceof Request) {
            r3 = request3[kState];
            if (r3.method !== "GET" && !options.ignoreMethod) {
              return [];
            }
          } else if (typeof request3 === "string") {
            r3 = new Request(request3)[kState];
          }
        }
        const promise = createDeferredPromise();
        const requests = [];
        if (request3 === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            requests.push(requestResponse[0]);
          }
        } else {
          const requestResponses = this.#queryCache(r3, options);
          for (const requestResponse of requestResponses) {
            requests.push(requestResponse[0]);
          }
        }
        queueMicrotask(() => {
          const requestList = [];
          for (const request4 of requests) {
            const requestObject = new Request("https://a");
            requestObject[kState] = request4;
            requestObject[kHeaders][kHeadersList] = request4.headersList;
            requestObject[kHeaders][kGuard] = "immutable";
            requestObject[kRealm] = request4.client;
            requestList.push(requestObject);
          }
          promise.resolve(Object.freeze(requestList));
        });
        return promise.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
       * @param {CacheBatchOperation[]} operations
       * @returns {requestResponseList}
       */
      #batchCacheOperations(operations) {
        const cache = this.#relevantRequestResponseList;
        const backupCache = [...cache];
        const addedItems = [];
        const resultList = [];
        try {
          for (const operation of operations) {
            if (operation.type !== "delete" && operation.type !== "put") {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: 'operation type does not match "delete" or "put"'
              });
            }
            if (operation.type === "delete" && operation.response != null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "delete operation should not have an associated response"
              });
            }
            if (this.#queryCache(operation.request, operation.options, addedItems).length) {
              throw new DOMException("???", "InvalidStateError");
            }
            let requestResponses;
            if (operation.type === "delete") {
              requestResponses = this.#queryCache(operation.request, operation.options);
              if (requestResponses.length === 0) {
                return [];
              }
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert2(idx !== -1);
                cache.splice(idx, 1);
              }
            } else if (operation.type === "put") {
              if (operation.response == null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "put operation should have an associated response"
                });
              }
              const r3 = operation.request;
              if (!urlIsHttpHttpsScheme(r3.url)) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "expected http or https scheme"
                });
              }
              if (r3.method !== "GET") {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "not get method"
                });
              }
              if (operation.options != null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "options must not be defined"
                });
              }
              requestResponses = this.#queryCache(operation.request);
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert2(idx !== -1);
                cache.splice(idx, 1);
              }
              cache.push([operation.request, operation.response]);
              addedItems.push([operation.request, operation.response]);
            }
            resultList.push([operation.request, operation.response]);
          }
          return resultList;
        } catch (e3) {
          this.#relevantRequestResponseList.length = 0;
          this.#relevantRequestResponseList = backupCache;
          throw e3;
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#query-cache
       * @param {any} requestQuery
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @param {requestResponseList} targetStorage
       * @returns {requestResponseList}
       */
      #queryCache(requestQuery, options, targetStorage) {
        const resultList = [];
        const storage = targetStorage ?? this.#relevantRequestResponseList;
        for (const requestResponse of storage) {
          const [cachedRequest, cachedResponse] = requestResponse;
          if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
            resultList.push(requestResponse);
          }
        }
        return resultList;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
       * @param {any} requestQuery
       * @param {any} request
       * @param {any | null} response
       * @param {import('../../types/cache').CacheQueryOptions | undefined} options
       * @returns {boolean}
       */
      #requestMatchesCachedItem(requestQuery, request3, response = null, options) {
        const queryURL = new URL(requestQuery.url);
        const cachedURL = new URL(request3.url);
        if (options?.ignoreSearch) {
          cachedURL.search = "";
          queryURL.search = "";
        }
        if (!urlEquals(queryURL, cachedURL, true)) {
          return false;
        }
        if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) {
          return true;
        }
        const fieldValues = getFieldValues(response.headersList.get("vary"));
        for (const fieldValue of fieldValues) {
          if (fieldValue === "*") {
            return false;
          }
          const requestValue = request3.headersList.get(fieldValue);
          const queryValue = requestQuery.headersList.get(fieldValue);
          if (requestValue !== queryValue) {
            return false;
          }
        }
        return true;
      }
    };
    Object.defineProperties(Cache.prototype, {
      [Symbol.toStringTag]: {
        value: "Cache",
        configurable: true
      },
      match: kEnumerableProperty,
      matchAll: kEnumerableProperty,
      add: kEnumerableProperty,
      addAll: kEnumerableProperty,
      put: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    var cacheQueryOptionConverters = [
      {
        key: "ignoreSearch",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreMethod",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreVary",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);
    webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
      ...cacheQueryOptionConverters,
      {
        key: "cacheName",
        converter: webidl.converters.DOMString
      }
    ]);
    webidl.converters.Response = webidl.interfaceConverter(Response);
    webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(
      webidl.converters.RequestInfo
    );
    module.exports = {
      Cache
    };
  }
});

// node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS({
  "node_modules/undici/lib/cache/cachestorage.js"(exports2, module) {
    "use strict";
    var { kConstruct } = require_symbols4();
    var { Cache } = require_cache();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var CacheStorage = class _CacheStorage {
      static {
        __name(this, "CacheStorage");
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
       * @type {Map<string, import('./cache').requestResponseList}
       */
      #caches = /* @__PURE__ */ new Map();
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
      }
      async match(request3, options = {}) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
        request3 = webidl.converters.RequestInfo(request3);
        options = webidl.converters.MultiCacheQueryOptions(options);
        if (options.cacheName != null) {
          if (this.#caches.has(options.cacheName)) {
            const cacheList = this.#caches.get(options.cacheName);
            const cache = new Cache(kConstruct, cacheList);
            return await cache.match(request3, options);
          }
        } else {
          for (const cacheList of this.#caches.values()) {
            const cache = new Cache(kConstruct, cacheList);
            const response = await cache.match(request3, options);
            if (response !== void 0) {
              return response;
            }
          }
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async has(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.has(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
       * @param {string} cacheName
       * @returns {Promise<Cache>}
       */
      async open(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
        cacheName = webidl.converters.DOMString(cacheName);
        if (this.#caches.has(cacheName)) {
          const cache2 = this.#caches.get(cacheName);
          return new Cache(kConstruct, cache2);
        }
        const cache = [];
        this.#caches.set(cacheName, cache);
        return new Cache(kConstruct, cache);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async delete(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.delete(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
       * @returns {string[]}
       */
      async keys() {
        webidl.brandCheck(this, _CacheStorage);
        const keys = this.#caches.keys();
        return [...keys];
      }
    };
    Object.defineProperties(CacheStorage.prototype, {
      [Symbol.toStringTag]: {
        value: "CacheStorage",
        configurable: true
      },
      match: kEnumerableProperty,
      has: kEnumerableProperty,
      open: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    module.exports = {
      CacheStorage
    };
  }
});

// node_modules/undici/lib/cookies/constants.js
var require_constants4 = __commonJS({
  "node_modules/undici/lib/cookies/constants.js"(exports2, module) {
    "use strict";
    var maxAttributeValueSize = 1024;
    var maxNameValuePairSize = 4096;
    module.exports = {
      maxAttributeValueSize,
      maxNameValuePairSize
    };
  }
});

// node_modules/undici/lib/cookies/util.js
var require_util6 = __commonJS({
  "node_modules/undici/lib/cookies/util.js"(exports2, module) {
    "use strict";
    var assert2 = __require("assert");
    var { kHeadersList } = require_symbols();
    function isCTLExcludingHtab(value) {
      if (value.length === 0) {
        return false;
      }
      for (const char of value) {
        const code = char.charCodeAt(0);
        if (code >= 0 || code <= 8 || (code >= 10 || code <= 31) || code === 127) {
          return false;
        }
      }
    }
    __name(isCTLExcludingHtab, "isCTLExcludingHtab");
    function validateCookieName(name2) {
      for (const char of name2) {
        const code = char.charCodeAt(0);
        if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") {
          throw new Error("Invalid cookie name");
        }
      }
    }
    __name(validateCookieName, "validateCookieName");
    function validateCookieValue(value) {
      for (const char of value) {
        const code = char.charCodeAt(0);
        if (code < 33 || // exclude CTLs (0-31)
        code === 34 || code === 44 || code === 59 || code === 92 || code > 126) {
          throw new Error("Invalid header value");
        }
      }
    }
    __name(validateCookieValue, "validateCookieValue");
    function validateCookiePath(path14) {
      for (const char of path14) {
        const code = char.charCodeAt(0);
        if (code < 33 || char === ";") {
          throw new Error("Invalid cookie path");
        }
      }
    }
    __name(validateCookiePath, "validateCookiePath");
    function validateCookieDomain(domain) {
      if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) {
        throw new Error("Invalid cookie domain");
      }
    }
    __name(validateCookieDomain, "validateCookieDomain");
    function toIMFDate(date) {
      if (typeof date === "number") {
        date = new Date(date);
      }
      const days = [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
      ];
      const months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      const dayName = days[date.getUTCDay()];
      const day = date.getUTCDate().toString().padStart(2, "0");
      const month = months[date.getUTCMonth()];
      const year = date.getUTCFullYear();
      const hour = date.getUTCHours().toString().padStart(2, "0");
      const minute = date.getUTCMinutes().toString().padStart(2, "0");
      const second = date.getUTCSeconds().toString().padStart(2, "0");
      return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
    }
    __name(toIMFDate, "toIMFDate");
    function validateCookieMaxAge(maxAge) {
      if (maxAge < 0) {
        throw new Error("Invalid cookie max-age");
      }
    }
    __name(validateCookieMaxAge, "validateCookieMaxAge");
    function stringify(cookie) {
      if (cookie.name.length === 0) {
        return null;
      }
      validateCookieName(cookie.name);
      validateCookieValue(cookie.value);
      const out = [`${cookie.name}=${cookie.value}`];
      if (cookie.name.startsWith("__Secure-")) {
        cookie.secure = true;
      }
      if (cookie.name.startsWith("__Host-")) {
        cookie.secure = true;
        cookie.domain = null;
        cookie.path = "/";
      }
      if (cookie.secure) {
        out.push("Secure");
      }
      if (cookie.httpOnly) {
        out.push("HttpOnly");
      }
      if (typeof cookie.maxAge === "number") {
        validateCookieMaxAge(cookie.maxAge);
        out.push(`Max-Age=${cookie.maxAge}`);
      }
      if (cookie.domain) {
        validateCookieDomain(cookie.domain);
        out.push(`Domain=${cookie.domain}`);
      }
      if (cookie.path) {
        validateCookiePath(cookie.path);
        out.push(`Path=${cookie.path}`);
      }
      if (cookie.expires && cookie.expires.toString() !== "Invalid Date") {
        out.push(`Expires=${toIMFDate(cookie.expires)}`);
      }
      if (cookie.sameSite) {
        out.push(`SameSite=${cookie.sameSite}`);
      }
      for (const part of cookie.unparsed) {
        if (!part.includes("=")) {
          throw new Error("Invalid unparsed");
        }
        const [key, ...value] = part.split("=");
        out.push(`${key.trim()}=${value.join("=")}`);
      }
      return out.join("; ");
    }
    __name(stringify, "stringify");
    var kHeadersListNode;
    function getHeadersList(headers) {
      if (headers[kHeadersList]) {
        return headers[kHeadersList];
      }
      if (!kHeadersListNode) {
        kHeadersListNode = Object.getOwnPropertySymbols(headers).find(
          (symbol) => symbol.description === "headers list"
        );
        assert2(kHeadersListNode, "Headers cannot be parsed");
      }
      const headersList = headers[kHeadersListNode];
      assert2(headersList);
      return headersList;
    }
    __name(getHeadersList, "getHeadersList");
    module.exports = {
      isCTLExcludingHtab,
      stringify,
      getHeadersList
    };
  }
});

// node_modules/undici/lib/cookies/parse.js
var require_parse = __commonJS({
  "node_modules/undici/lib/cookies/parse.js"(exports2, module) {
    "use strict";
    var { maxNameValuePairSize, maxAttributeValueSize } = require_constants4();
    var { isCTLExcludingHtab } = require_util6();
    var { collectASequenceOfCodePointsFast } = require_dataURL();
    var assert2 = __require("assert");
    function parseSetCookie(header) {
      if (isCTLExcludingHtab(header)) {
        return null;
      }
      let nameValuePair = "";
      let unparsedAttributes = "";
      let name2 = "";
      let value = "";
      if (header.includes(";")) {
        const position2 = { position: 0 };
        nameValuePair = collectASequenceOfCodePointsFast(";", header, position2);
        unparsedAttributes = header.slice(position2.position);
      } else {
        nameValuePair = header;
      }
      if (!nameValuePair.includes("=")) {
        value = nameValuePair;
      } else {
        const position2 = { position: 0 };
        name2 = collectASequenceOfCodePointsFast(
          "=",
          nameValuePair,
          position2
        );
        value = nameValuePair.slice(position2.position + 1);
      }
      name2 = name2.trim();
      value = value.trim();
      if (name2.length + value.length > maxNameValuePairSize) {
        return null;
      }
      return {
        name: name2,
        value,
        ...parseUnparsedAttributes(unparsedAttributes)
      };
    }
    __name(parseSetCookie, "parseSetCookie");
    function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
      if (unparsedAttributes.length === 0) {
        return cookieAttributeList;
      }
      assert2(unparsedAttributes[0] === ";");
      unparsedAttributes = unparsedAttributes.slice(1);
      let cookieAv = "";
      if (unparsedAttributes.includes(";")) {
        cookieAv = collectASequenceOfCodePointsFast(
          ";",
          unparsedAttributes,
          { position: 0 }
        );
        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
      } else {
        cookieAv = unparsedAttributes;
        unparsedAttributes = "";
      }
      let attributeName = "";
      let attributeValue = "";
      if (cookieAv.includes("=")) {
        const position2 = { position: 0 };
        attributeName = collectASequenceOfCodePointsFast(
          "=",
          cookieAv,
          position2
        );
        attributeValue = cookieAv.slice(position2.position + 1);
      } else {
        attributeName = cookieAv;
      }
      attributeName = attributeName.trim();
      attributeValue = attributeValue.trim();
      if (attributeValue.length > maxAttributeValueSize) {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      const attributeNameLowercase = attributeName.toLowerCase();
      if (attributeNameLowercase === "expires") {
        const expiryTime = new Date(attributeValue);
        cookieAttributeList.expires = expiryTime;
      } else if (attributeNameLowercase === "max-age") {
        const charCode = attributeValue.charCodeAt(0);
        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        if (!/^\d+$/.test(attributeValue)) {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        const deltaSeconds = Number(attributeValue);
        cookieAttributeList.maxAge = deltaSeconds;
      } else if (attributeNameLowercase === "domain") {
        let cookieDomain = attributeValue;
        if (cookieDomain[0] === ".") {
          cookieDomain = cookieDomain.slice(1);
        }
        cookieDomain = cookieDomain.toLowerCase();
        cookieAttributeList.domain = cookieDomain;
      } else if (attributeNameLowercase === "path") {
        let cookiePath = "";
        if (attributeValue.length === 0 || attributeValue[0] !== "/") {
          cookiePath = "/";
        } else {
          cookiePath = attributeValue;
        }
        cookieAttributeList.path = cookiePath;
      } else if (attributeNameLowercase === "secure") {
        cookieAttributeList.secure = true;
      } else if (attributeNameLowercase === "httponly") {
        cookieAttributeList.httpOnly = true;
      } else if (attributeNameLowercase === "samesite") {
        let enforcement = "Default";
        const attributeValueLowercase = attributeValue.toLowerCase();
        if (attributeValueLowercase.includes("none")) {
          enforcement = "None";
        }
        if (attributeValueLowercase.includes("strict")) {
          enforcement = "Strict";
        }
        if (attributeValueLowercase.includes("lax")) {
          enforcement = "Lax";
        }
        cookieAttributeList.sameSite = enforcement;
      } else {
        cookieAttributeList.unparsed ??= [];
        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
      }
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    }
    __name(parseUnparsedAttributes, "parseUnparsedAttributes");
    module.exports = {
      parseSetCookie,
      parseUnparsedAttributes
    };
  }
});

// node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS({
  "node_modules/undici/lib/cookies/index.js"(exports2, module) {
    "use strict";
    var { parseSetCookie } = require_parse();
    var { stringify, getHeadersList } = require_util6();
    var { webidl } = require_webidl();
    var { Headers } = require_headers();
    function getCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getCookies" });
      webidl.brandCheck(headers, Headers, { strict: false });
      const cookie = headers.get("cookie");
      const out = {};
      if (!cookie) {
        return out;
      }
      for (const piece of cookie.split(";")) {
        const [name2, ...value] = piece.split("=");
        out[name2.trim()] = value.join("=");
      }
      return out;
    }
    __name(getCookies, "getCookies");
    function deleteCookie(headers, name2, attributes) {
      webidl.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
      webidl.brandCheck(headers, Headers, { strict: false });
      name2 = webidl.converters.DOMString(name2);
      attributes = webidl.converters.DeleteCookieAttributes(attributes);
      setCookie(headers, {
        name: name2,
        value: "",
        expires: /* @__PURE__ */ new Date(0),
        ...attributes
      });
    }
    __name(deleteCookie, "deleteCookie");
    function getSetCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
      webidl.brandCheck(headers, Headers, { strict: false });
      const cookies = getHeadersList(headers).cookies;
      if (!cookies) {
        return [];
      }
      return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
    }
    __name(getSetCookies, "getSetCookies");
    function setCookie(headers, cookie) {
      webidl.argumentLengthCheck(arguments, 2, { header: "setCookie" });
      webidl.brandCheck(headers, Headers, { strict: false });
      cookie = webidl.converters.Cookie(cookie);
      const str = stringify(cookie);
      if (str) {
        headers.append("Set-Cookie", stringify(cookie));
      }
    }
    __name(setCookie, "setCookie");
    webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      }
    ]);
    webidl.converters.Cookie = webidl.dictionaryConverter([
      {
        converter: webidl.converters.DOMString,
        key: "name"
      },
      {
        converter: webidl.converters.DOMString,
        key: "value"
      },
      {
        converter: webidl.nullableConverter((value) => {
          if (typeof value === "number") {
            return webidl.converters["unsigned long long"](value);
          }
          return new Date(value);
        }),
        key: "expires",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters["long long"]),
        key: "maxAge",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "secure",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "httpOnly",
        defaultValue: null
      },
      {
        converter: webidl.converters.USVString,
        key: "sameSite",
        allowedValues: ["Strict", "Lax", "None"]
      },
      {
        converter: webidl.sequenceConverter(webidl.converters.DOMString),
        key: "unparsed",
        defaultValue: []
      }
    ]);
    module.exports = {
      getCookies,
      deleteCookie,
      getSetCookies,
      setCookie
    };
  }
});

// node_modules/undici/lib/websocket/constants.js
var require_constants5 = __commonJS({
  "node_modules/undici/lib/websocket/constants.js"(exports2, module) {
    "use strict";
    var uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    var states = {
      CONNECTING: 0,
      OPEN: 1,
      CLOSING: 2,
      CLOSED: 3
    };
    var opcodes = {
      CONTINUATION: 0,
      TEXT: 1,
      BINARY: 2,
      CLOSE: 8,
      PING: 9,
      PONG: 10
    };
    var maxUnsigned16Bit = 2 ** 16 - 1;
    var parserStates = {
      INFO: 0,
      PAYLOADLENGTH_16: 2,
      PAYLOADLENGTH_64: 3,
      READ_DATA: 4
    };
    var emptyBuffer = Buffer.allocUnsafe(0);
    module.exports = {
      uid,
      staticPropertyDescriptors,
      states,
      opcodes,
      maxUnsigned16Bit,
      parserStates,
      emptyBuffer
    };
  }
});

// node_modules/undici/lib/websocket/symbols.js
var require_symbols5 = __commonJS({
  "node_modules/undici/lib/websocket/symbols.js"(exports2, module) {
    "use strict";
    module.exports = {
      kWebSocketURL: Symbol("url"),
      kReadyState: Symbol("ready state"),
      kController: Symbol("controller"),
      kResponse: Symbol("response"),
      kBinaryType: Symbol("binary type"),
      kSentClose: Symbol("sent close"),
      kReceivedClose: Symbol("received close"),
      kByteParser: Symbol("byte parser")
    };
  }
});

// node_modules/undici/lib/websocket/events.js
var require_events = __commonJS({
  "node_modules/undici/lib/websocket/events.js"(exports2, module) {
    "use strict";
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var { MessagePort } = __require("worker_threads");
    var MessageEvent = class _MessageEvent extends Event {
      static {
        __name(this, "MessageEvent");
      }
      #eventInit;
      constructor(type2, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
        type2 = webidl.converters.DOMString(type2);
        eventInitDict = webidl.converters.MessageEventInit(eventInitDict);
        super(type2, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get data() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.data;
      }
      get origin() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.origin;
      }
      get lastEventId() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.lastEventId;
      }
      get source() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.source;
      }
      get ports() {
        webidl.brandCheck(this, _MessageEvent);
        if (!Object.isFrozen(this.#eventInit.ports)) {
          Object.freeze(this.#eventInit.ports);
        }
        return this.#eventInit.ports;
      }
      initMessageEvent(type2, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
        webidl.brandCheck(this, _MessageEvent);
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
        return new _MessageEvent(type2, {
          bubbles,
          cancelable,
          data,
          origin,
          lastEventId,
          source,
          ports
        });
      }
    };
    var CloseEvent = class _CloseEvent extends Event {
      static {
        __name(this, "CloseEvent");
      }
      #eventInit;
      constructor(type2, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
        type2 = webidl.converters.DOMString(type2);
        eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
        super(type2, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get wasClean() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.wasClean;
      }
      get code() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.code;
      }
      get reason() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.reason;
      }
    };
    var ErrorEvent = class _ErrorEvent extends Event {
      static {
        __name(this, "ErrorEvent");
      }
      #eventInit;
      constructor(type2, eventInitDict) {
        webidl.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
        super(type2, eventInitDict);
        type2 = webidl.converters.DOMString(type2);
        eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
        this.#eventInit = eventInitDict;
      }
      get message() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.message;
      }
      get filename() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.filename;
      }
      get lineno() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.lineno;
      }
      get colno() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.colno;
      }
      get error() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.error;
      }
    };
    Object.defineProperties(MessageEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "MessageEvent",
        configurable: true
      },
      data: kEnumerableProperty,
      origin: kEnumerableProperty,
      lastEventId: kEnumerableProperty,
      source: kEnumerableProperty,
      ports: kEnumerableProperty,
      initMessageEvent: kEnumerableProperty
    });
    Object.defineProperties(CloseEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "CloseEvent",
        configurable: true
      },
      reason: kEnumerableProperty,
      code: kEnumerableProperty,
      wasClean: kEnumerableProperty
    });
    Object.defineProperties(ErrorEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "ErrorEvent",
        configurable: true
      },
      message: kEnumerableProperty,
      filename: kEnumerableProperty,
      lineno: kEnumerableProperty,
      colno: kEnumerableProperty,
      error: kEnumerableProperty
    });
    webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
    webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(
      webidl.converters.MessagePort
    );
    var eventInit = [
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.MessageEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "data",
        converter: webidl.converters.any,
        defaultValue: null
      },
      {
        key: "origin",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lastEventId",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "source",
        // Node doesn't implement WindowProxy or ServiceWorker, so the only
        // valid value for source is a MessagePort.
        converter: webidl.nullableConverter(webidl.converters.MessagePort),
        defaultValue: null
      },
      {
        key: "ports",
        converter: webidl.converters["sequence<MessagePort>"],
        get defaultValue() {
          return [];
        }
      }
    ]);
    webidl.converters.CloseEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "wasClean",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "code",
        converter: webidl.converters["unsigned short"],
        defaultValue: 0
      },
      {
        key: "reason",
        converter: webidl.converters.USVString,
        defaultValue: ""
      }
    ]);
    webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "message",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "filename",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lineno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "colno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "error",
        converter: webidl.converters.any
      }
    ]);
    module.exports = {
      MessageEvent,
      CloseEvent,
      ErrorEvent
    };
  }
});

// node_modules/undici/lib/websocket/util.js
var require_util7 = __commonJS({
  "node_modules/undici/lib/websocket/util.js"(exports2, module) {
    "use strict";
    var { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require_symbols5();
    var { states, opcodes } = require_constants5();
    var { MessageEvent, ErrorEvent } = require_events();
    function isEstablished(ws) {
      return ws[kReadyState] === states.OPEN;
    }
    __name(isEstablished, "isEstablished");
    function isClosing(ws) {
      return ws[kReadyState] === states.CLOSING;
    }
    __name(isClosing, "isClosing");
    function isClosed(ws) {
      return ws[kReadyState] === states.CLOSED;
    }
    __name(isClosed, "isClosed");
    function fireEvent(e3, target, eventConstructor = Event, eventInitDict) {
      const event = new eventConstructor(e3, eventInitDict);
      target.dispatchEvent(event);
    }
    __name(fireEvent, "fireEvent");
    function websocketMessageReceived(ws, type2, data) {
      if (ws[kReadyState] !== states.OPEN) {
        return;
      }
      let dataForEvent;
      if (type2 === opcodes.TEXT) {
        try {
          dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
        } catch {
          failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
          return;
        }
      } else if (type2 === opcodes.BINARY) {
        if (ws[kBinaryType] === "blob") {
          dataForEvent = new Blob([data]);
        } else {
          dataForEvent = new Uint8Array(data).buffer;
        }
      }
      fireEvent("message", ws, MessageEvent, {
        origin: ws[kWebSocketURL].origin,
        data: dataForEvent
      });
    }
    __name(websocketMessageReceived, "websocketMessageReceived");
    function isValidSubprotocol(protocol) {
      if (protocol.length === 0) {
        return false;
      }
      for (const char of protocol) {
        const code = char.charCodeAt(0);
        if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || // SP
        code === 9) {
          return false;
        }
      }
      return true;
    }
    __name(isValidSubprotocol, "isValidSubprotocol");
    function isValidStatusCode(code) {
      if (code >= 1e3 && code < 1015) {
        return code !== 1004 && // reserved
        code !== 1005 && // "MUST NOT be set as a status code"
        code !== 1006;
      }
      return code >= 3e3 && code <= 4999;
    }
    __name(isValidStatusCode, "isValidStatusCode");
    function failWebsocketConnection(ws, reason) {
      const { [kController]: controller, [kResponse]: response } = ws;
      controller.abort();
      if (response?.socket && !response.socket.destroyed) {
        response.socket.destroy();
      }
      if (reason) {
        fireEvent("error", ws, ErrorEvent, {
          error: new Error(reason)
        });
      }
    }
    __name(failWebsocketConnection, "failWebsocketConnection");
    module.exports = {
      isEstablished,
      isClosing,
      isClosed,
      fireEvent,
      isValidSubprotocol,
      isValidStatusCode,
      failWebsocketConnection,
      websocketMessageReceived
    };
  }
});

// node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS({
  "node_modules/undici/lib/websocket/connection.js"(exports2, module) {
    "use strict";
    var diagnosticsChannel = __require("diagnostics_channel");
    var { uid, states } = require_constants5();
    var {
      kReadyState,
      kSentClose,
      kByteParser,
      kReceivedClose
    } = require_symbols5();
    var { fireEvent, failWebsocketConnection } = require_util7();
    var { CloseEvent } = require_events();
    var { makeRequest } = require_request2();
    var { fetching } = require_fetch();
    var { Headers } = require_headers();
    var { getGlobalDispatcher } = require_global2();
    var { kHeadersList } = require_symbols();
    var channels = {};
    channels.open = diagnosticsChannel.channel("undici:websocket:open");
    channels.close = diagnosticsChannel.channel("undici:websocket:close");
    channels.socketError = diagnosticsChannel.channel("undici:websocket:socket_error");
    var crypto;
    try {
      crypto = __require("crypto");
    } catch {
    }
    function establishWebSocketConnection(url2, protocols, ws, onEstablish, options) {
      const requestURL = url2;
      requestURL.protocol = url2.protocol === "ws:" ? "http:" : "https:";
      const request3 = makeRequest({
        urlList: [requestURL],
        serviceWorkers: "none",
        referrer: "no-referrer",
        mode: "websocket",
        credentials: "include",
        cache: "no-store",
        redirect: "error"
      });
      if (options.headers) {
        const headersList = new Headers(options.headers)[kHeadersList];
        request3.headersList = headersList;
      }
      const keyValue = crypto.randomBytes(16).toString("base64");
      request3.headersList.append("sec-websocket-key", keyValue);
      request3.headersList.append("sec-websocket-version", "13");
      for (const protocol of protocols) {
        request3.headersList.append("sec-websocket-protocol", protocol);
      }
      const permessageDeflate = "";
      const controller = fetching({
        request: request3,
        useParallelQueue: true,
        dispatcher: options.dispatcher ?? getGlobalDispatcher(),
        processResponse(response) {
          if (response.type === "error" || response.status !== 101) {
            failWebsocketConnection(ws, "Received network error or non-101 status code.");
            return;
          }
          if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Server did not respond with sent protocols.");
            return;
          }
          if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
            failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
            return;
          }
          if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
            failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
            return;
          }
          const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
          const digest2 = crypto.createHash("sha1").update(keyValue + uid).digest("base64");
          if (secWSAccept !== digest2) {
            failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
            return;
          }
          const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
          if (secExtension !== null && secExtension !== permessageDeflate) {
            failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
            return;
          }
          const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
          if (secProtocol !== null && secProtocol !== request3.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
            return;
          }
          response.socket.on("data", onSocketData);
          response.socket.on("close", onSocketClose);
          response.socket.on("error", onSocketError);
          if (channels.open.hasSubscribers) {
            channels.open.publish({
              address: response.socket.address(),
              protocol: secProtocol,
              extensions: secExtension
            });
          }
          onEstablish(response);
        }
      });
      return controller;
    }
    __name(establishWebSocketConnection, "establishWebSocketConnection");
    function onSocketData(chunk) {
      if (!this.ws[kByteParser].write(chunk)) {
        this.pause();
      }
    }
    __name(onSocketData, "onSocketData");
    function onSocketClose() {
      const { ws } = this;
      const wasClean = ws[kSentClose] && ws[kReceivedClose];
      let code = 1005;
      let reason = "";
      const result = ws[kByteParser].closingInfo;
      if (result) {
        code = result.code ?? 1005;
        reason = result.reason;
      } else if (!ws[kSentClose]) {
        code = 1006;
      }
      ws[kReadyState] = states.CLOSED;
      fireEvent("close", ws, CloseEvent, {
        wasClean,
        code,
        reason
      });
      if (channels.close.hasSubscribers) {
        channels.close.publish({
          websocket: ws,
          code,
          reason
        });
      }
    }
    __name(onSocketClose, "onSocketClose");
    function onSocketError(error) {
      const { ws } = this;
      ws[kReadyState] = states.CLOSING;
      if (channels.socketError.hasSubscribers) {
        channels.socketError.publish(error);
      }
      this.destroy();
    }
    __name(onSocketError, "onSocketError");
    module.exports = {
      establishWebSocketConnection
    };
  }
});

// node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS({
  "node_modules/undici/lib/websocket/frame.js"(exports2, module) {
    "use strict";
    var { maxUnsigned16Bit } = require_constants5();
    var crypto;
    try {
      crypto = __require("crypto");
    } catch {
    }
    var WebsocketFrameSend = class {
      static {
        __name(this, "WebsocketFrameSend");
      }
      /**
       * @param {Buffer|undefined} data
       */
      constructor(data) {
        this.frameData = data;
        this.maskKey = crypto.randomBytes(4);
      }
      createFrame(opcode) {
        const bodyLength = this.frameData?.byteLength ?? 0;
        let payloadLength = bodyLength;
        let offset = 6;
        if (bodyLength > maxUnsigned16Bit) {
          offset += 8;
          payloadLength = 127;
        } else if (bodyLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const buffer2 = Buffer.allocUnsafe(bodyLength + offset);
        buffer2[0] = buffer2[1] = 0;
        buffer2[0] |= 128;
        buffer2[0] = (buffer2[0] & 240) + opcode;
        /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
        buffer2[offset - 4] = this.maskKey[0];
        buffer2[offset - 3] = this.maskKey[1];
        buffer2[offset - 2] = this.maskKey[2];
        buffer2[offset - 1] = this.maskKey[3];
        buffer2[1] = payloadLength;
        if (payloadLength === 126) {
          buffer2.writeUInt16BE(bodyLength, 2);
        } else if (payloadLength === 127) {
          buffer2[2] = buffer2[3] = 0;
          buffer2.writeUIntBE(bodyLength, 4, 6);
        }
        buffer2[1] |= 128;
        for (let i3 = 0; i3 < bodyLength; i3++) {
          buffer2[offset + i3] = this.frameData[i3] ^ this.maskKey[i3 % 4];
        }
        return buffer2;
      }
    };
    module.exports = {
      WebsocketFrameSend
    };
  }
});

// node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS({
  "node_modules/undici/lib/websocket/receiver.js"(exports2, module) {
    "use strict";
    var { Writable } = __require("stream");
    var diagnosticsChannel = __require("diagnostics_channel");
    var { parserStates, opcodes, states, emptyBuffer } = require_constants5();
    var { kReadyState, kSentClose, kResponse, kReceivedClose } = require_symbols5();
    var { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require_util7();
    var { WebsocketFrameSend } = require_frame();
    var channels = {};
    channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
    channels.pong = diagnosticsChannel.channel("undici:websocket:pong");
    var ByteParser = class extends Writable {
      static {
        __name(this, "ByteParser");
      }
      #buffers = [];
      #byteOffset = 0;
      #state = parserStates.INFO;
      #info = {};
      #fragments = [];
      constructor(ws) {
        super();
        this.ws = ws;
      }
      /**
       * @param {Buffer} chunk
       * @param {() => void} callback
       */
      _write(chunk, _3, callback) {
        this.#buffers.push(chunk);
        this.#byteOffset += chunk.length;
        this.run(callback);
      }
      /**
       * Runs whenever a new chunk is received.
       * Callback is called whenever there are no more chunks buffering,
       * or not enough bytes are buffered to parse.
       */
      run(callback) {
        while (true) {
          if (this.#state === parserStates.INFO) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer2 = this.consume(2);
            this.#info.fin = (buffer2[0] & 128) !== 0;
            this.#info.opcode = buffer2[0] & 15;
            this.#info.originalOpcode ??= this.#info.opcode;
            this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;
            if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
              failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
              return;
            }
            const payloadLength = buffer2[1] & 127;
            if (payloadLength <= 125) {
              this.#info.payloadLength = payloadLength;
              this.#state = parserStates.READ_DATA;
            } else if (payloadLength === 126) {
              this.#state = parserStates.PAYLOADLENGTH_16;
            } else if (payloadLength === 127) {
              this.#state = parserStates.PAYLOADLENGTH_64;
            }
            if (this.#info.fragmented && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
              return;
            } else if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
              return;
            } else if (this.#info.opcode === opcodes.CLOSE) {
              if (payloadLength === 1) {
                failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
                return;
              }
              const body2 = this.consume(payloadLength);
              this.#info.closeInfo = this.parseCloseBody(false, body2);
              if (!this.ws[kSentClose]) {
                const body3 = Buffer.allocUnsafe(2);
                body3.writeUInt16BE(this.#info.closeInfo.code, 0);
                const closeFrame = new WebsocketFrameSend(body3);
                this.ws[kResponse].socket.write(
                  closeFrame.createFrame(opcodes.CLOSE),
                  (err) => {
                    if (!err) {
                      this.ws[kSentClose] = true;
                    }
                  }
                );
              }
              this.ws[kReadyState] = states.CLOSING;
              this.ws[kReceivedClose] = true;
              this.end();
              return;
            } else if (this.#info.opcode === opcodes.PING) {
              const body2 = this.consume(payloadLength);
              if (!this.ws[kReceivedClose]) {
                const frame = new WebsocketFrameSend(body2);
                this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));
                if (channels.ping.hasSubscribers) {
                  channels.ping.publish({
                    payload: body2
                  });
                }
              }
              this.#state = parserStates.INFO;
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            } else if (this.#info.opcode === opcodes.PONG) {
              const body2 = this.consume(payloadLength);
              if (channels.pong.hasSubscribers) {
                channels.pong.publish({
                  payload: body2
                });
              }
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            }
          } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer2 = this.consume(2);
            this.#info.payloadLength = buffer2.readUInt16BE(0);
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
            if (this.#byteOffset < 8) {
              return callback();
            }
            const buffer2 = this.consume(8);
            const upper = buffer2.readUInt32BE(0);
            if (upper > 2 ** 31 - 1) {
              failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
              return;
            }
            const lower = buffer2.readUInt32BE(4);
            this.#info.payloadLength = (upper << 8) + lower;
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.READ_DATA) {
            if (this.#byteOffset < this.#info.payloadLength) {
              return callback();
            } else if (this.#byteOffset >= this.#info.payloadLength) {
              const body2 = this.consume(this.#info.payloadLength);
              this.#fragments.push(body2);
              if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {
                const fullMessage = Buffer.concat(this.#fragments);
                websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
                this.#info = {};
                this.#fragments.length = 0;
              }
              this.#state = parserStates.INFO;
            }
          }
          if (this.#byteOffset > 0) {
            continue;
          } else {
            callback();
            break;
          }
        }
      }
      /**
       * Take n bytes from the buffered Buffers
       * @param {number} n
       * @returns {Buffer|null}
       */
      consume(n3) {
        if (n3 > this.#byteOffset) {
          return null;
        } else if (n3 === 0) {
          return emptyBuffer;
        }
        if (this.#buffers[0].length === n3) {
          this.#byteOffset -= this.#buffers[0].length;
          return this.#buffers.shift();
        }
        const buffer2 = Buffer.allocUnsafe(n3);
        let offset = 0;
        while (offset !== n3) {
          const next2 = this.#buffers[0];
          const { length } = next2;
          if (length + offset === n3) {
            buffer2.set(this.#buffers.shift(), offset);
            break;
          } else if (length + offset > n3) {
            buffer2.set(next2.subarray(0, n3 - offset), offset);
            this.#buffers[0] = next2.subarray(n3 - offset);
            break;
          } else {
            buffer2.set(this.#buffers.shift(), offset);
            offset += next2.length;
          }
        }
        this.#byteOffset -= n3;
        return buffer2;
      }
      parseCloseBody(onlyCode, data) {
        let code;
        if (data.length >= 2) {
          code = data.readUInt16BE(0);
        }
        if (onlyCode) {
          if (!isValidStatusCode(code)) {
            return null;
          }
          return { code };
        }
        let reason = data.subarray(2);
        if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {
          reason = reason.subarray(3);
        }
        if (code !== void 0 && !isValidStatusCode(code)) {
          return null;
        }
        try {
          reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
        } catch {
          return null;
        }
        return { code, reason };
      }
      get closingInfo() {
        return this.#info.closeInfo;
      }
    };
    module.exports = {
      ByteParser
    };
  }
});

// node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS({
  "node_modules/undici/lib/websocket/websocket.js"(exports2, module) {
    "use strict";
    var { webidl } = require_webidl();
    var { DOMException: DOMException2 } = require_constants2();
    var { URLSerializer } = require_dataURL();
    var { getGlobalOrigin } = require_global();
    var { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants5();
    var {
      kWebSocketURL,
      kReadyState,
      kController,
      kBinaryType,
      kResponse,
      kSentClose,
      kByteParser
    } = require_symbols5();
    var { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util7();
    var { establishWebSocketConnection } = require_connection();
    var { WebsocketFrameSend } = require_frame();
    var { ByteParser } = require_receiver();
    var { kEnumerableProperty, isBlobLike } = require_util();
    var { getGlobalDispatcher } = require_global2();
    var { types: types2 } = __require("util");
    var experimentalWarned = false;
    var WebSocket = class _WebSocket extends EventTarget {
      static {
        __name(this, "WebSocket");
      }
      #events = {
        open: null,
        error: null,
        close: null,
        message: null
      };
      #bufferedAmount = 0;
      #protocol = "";
      #extensions = "";
      /**
       * @param {string} url
       * @param {string|string[]} protocols
       */
      constructor(url2, protocols = []) {
        super();
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
        if (!experimentalWarned) {
          experimentalWarned = true;
          process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
            code: "UNDICI-WS"
          });
        }
        const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
        url2 = webidl.converters.USVString(url2);
        protocols = options.protocols;
        const baseURL = getGlobalOrigin();
        let urlRecord;
        try {
          urlRecord = new URL(url2, baseURL);
        } catch (e3) {
          throw new DOMException2(e3, "SyntaxError");
        }
        if (urlRecord.protocol === "http:") {
          urlRecord.protocol = "ws:";
        } else if (urlRecord.protocol === "https:") {
          urlRecord.protocol = "wss:";
        }
        if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") {
          throw new DOMException2(
            `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
            "SyntaxError"
          );
        }
        if (urlRecord.hash || urlRecord.href.endsWith("#")) {
          throw new DOMException2("Got fragment", "SyntaxError");
        }
        if (typeof protocols === "string") {
          protocols = [protocols];
        }
        if (protocols.length !== new Set(protocols.map((p3) => p3.toLowerCase())).size) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        if (protocols.length > 0 && !protocols.every((p3) => isValidSubprotocol(p3))) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        this[kWebSocketURL] = new URL(urlRecord.href);
        this[kController] = establishWebSocketConnection(
          urlRecord,
          protocols,
          this,
          (response) => this.#onConnectionEstablished(response),
          options
        );
        this[kReadyState] = _WebSocket.CONNECTING;
        this[kBinaryType] = "blob";
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-close
       * @param {number|undefined} code
       * @param {string|undefined} reason
       */
      close(code = void 0, reason = void 0) {
        webidl.brandCheck(this, _WebSocket);
        if (code !== void 0) {
          code = webidl.converters["unsigned short"](code, { clamp: true });
        }
        if (reason !== void 0) {
          reason = webidl.converters.USVString(reason);
        }
        if (code !== void 0) {
          if (code !== 1e3 && (code < 3e3 || code > 4999)) {
            throw new DOMException2("invalid code", "InvalidAccessError");
          }
        }
        let reasonByteLength = 0;
        if (reason !== void 0) {
          reasonByteLength = Buffer.byteLength(reason);
          if (reasonByteLength > 123) {
            throw new DOMException2(
              `Reason must be less than 123 bytes; received ${reasonByteLength}`,
              "SyntaxError"
            );
          }
        }
        if (this[kReadyState] === _WebSocket.CLOSING || this[kReadyState] === _WebSocket.CLOSED) {
        } else if (!isEstablished(this)) {
          failWebsocketConnection(this, "Connection was closed before it was established.");
          this[kReadyState] = _WebSocket.CLOSING;
        } else if (!isClosing(this)) {
          const frame = new WebsocketFrameSend();
          if (code !== void 0 && reason === void 0) {
            frame.frameData = Buffer.allocUnsafe(2);
            frame.frameData.writeUInt16BE(code, 0);
          } else if (code !== void 0 && reason !== void 0) {
            frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
            frame.frameData.writeUInt16BE(code, 0);
            frame.frameData.write(reason, 2, "utf-8");
          } else {
            frame.frameData = emptyBuffer;
          }
          const socket = this[kResponse].socket;
          socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
            if (!err) {
              this[kSentClose] = true;
            }
          });
          this[kReadyState] = states.CLOSING;
        } else {
          this[kReadyState] = _WebSocket.CLOSING;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-send
       * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
       */
      send(data) {
        webidl.brandCheck(this, _WebSocket);
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
        data = webidl.converters.WebSocketSendData(data);
        if (this[kReadyState] === _WebSocket.CONNECTING) {
          throw new DOMException2("Sent before connected.", "InvalidStateError");
        }
        if (!isEstablished(this) || isClosing(this)) {
          return;
        }
        const socket = this[kResponse].socket;
        if (typeof data === "string") {
          const value = Buffer.from(data);
          const frame = new WebsocketFrameSend(value);
          const buffer2 = frame.createFrame(opcodes.TEXT);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer2, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        } else if (types2.isArrayBuffer(data)) {
          const value = Buffer.from(data);
          const frame = new WebsocketFrameSend(value);
          const buffer2 = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer2, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        } else if (ArrayBuffer.isView(data)) {
          const ab = Buffer.from(data, data.byteOffset, data.byteLength);
          const frame = new WebsocketFrameSend(ab);
          const buffer2 = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += ab.byteLength;
          socket.write(buffer2, () => {
            this.#bufferedAmount -= ab.byteLength;
          });
        } else if (isBlobLike(data)) {
          const frame = new WebsocketFrameSend();
          data.arrayBuffer().then((ab) => {
            const value = Buffer.from(ab);
            frame.frameData = value;
            const buffer2 = frame.createFrame(opcodes.BINARY);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer2, () => {
              this.#bufferedAmount -= value.byteLength;
            });
          });
        }
      }
      get readyState() {
        webidl.brandCheck(this, _WebSocket);
        return this[kReadyState];
      }
      get bufferedAmount() {
        webidl.brandCheck(this, _WebSocket);
        return this.#bufferedAmount;
      }
      get url() {
        webidl.brandCheck(this, _WebSocket);
        return URLSerializer(this[kWebSocketURL]);
      }
      get extensions() {
        webidl.brandCheck(this, _WebSocket);
        return this.#extensions;
      }
      get protocol() {
        webidl.brandCheck(this, _WebSocket);
        return this.#protocol;
      }
      get onopen() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.open;
      }
      set onopen(fn2) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.open) {
          this.removeEventListener("open", this.#events.open);
        }
        if (typeof fn2 === "function") {
          this.#events.open = fn2;
          this.addEventListener("open", fn2);
        } else {
          this.#events.open = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.error;
      }
      set onerror(fn2) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.error) {
          this.removeEventListener("error", this.#events.error);
        }
        if (typeof fn2 === "function") {
          this.#events.error = fn2;
          this.addEventListener("error", fn2);
        } else {
          this.#events.error = null;
        }
      }
      get onclose() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.close;
      }
      set onclose(fn2) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.close) {
          this.removeEventListener("close", this.#events.close);
        }
        if (typeof fn2 === "function") {
          this.#events.close = fn2;
          this.addEventListener("close", fn2);
        } else {
          this.#events.close = null;
        }
      }
      get onmessage() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.message;
      }
      set onmessage(fn2) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.message) {
          this.removeEventListener("message", this.#events.message);
        }
        if (typeof fn2 === "function") {
          this.#events.message = fn2;
          this.addEventListener("message", fn2);
        } else {
          this.#events.message = null;
        }
      }
      get binaryType() {
        webidl.brandCheck(this, _WebSocket);
        return this[kBinaryType];
      }
      set binaryType(type2) {
        webidl.brandCheck(this, _WebSocket);
        if (type2 !== "blob" && type2 !== "arraybuffer") {
          this[kBinaryType] = "blob";
        } else {
          this[kBinaryType] = type2;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
       */
      #onConnectionEstablished(response) {
        this[kResponse] = response;
        const parser = new ByteParser(this);
        parser.on("drain", /* @__PURE__ */ __name(function onParserDrain() {
          this.ws[kResponse].socket.resume();
        }, "onParserDrain"));
        response.socket.ws = this;
        this[kByteParser] = parser;
        this[kReadyState] = states.OPEN;
        const extensions = response.headersList.get("sec-websocket-extensions");
        if (extensions !== null) {
          this.#extensions = extensions;
        }
        const protocol = response.headersList.get("sec-websocket-protocol");
        if (protocol !== null) {
          this.#protocol = protocol;
        }
        fireEvent("open", this);
      }
    };
    WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
    WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
    WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
    WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
    Object.defineProperties(WebSocket.prototype, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors,
      url: kEnumerableProperty,
      readyState: kEnumerableProperty,
      bufferedAmount: kEnumerableProperty,
      onopen: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onclose: kEnumerableProperty,
      close: kEnumerableProperty,
      onmessage: kEnumerableProperty,
      binaryType: kEnumerableProperty,
      send: kEnumerableProperty,
      extensions: kEnumerableProperty,
      protocol: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "WebSocket",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(WebSocket, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors
    });
    webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(
      webidl.converters.DOMString
    );
    webidl.converters["DOMString or sequence<DOMString>"] = function(V2) {
      if (webidl.util.Type(V2) === "Object" && Symbol.iterator in V2) {
        return webidl.converters["sequence<DOMString>"](V2);
      }
      return webidl.converters.DOMString(V2);
    };
    webidl.converters.WebSocketInit = webidl.dictionaryConverter([
      {
        key: "protocols",
        converter: webidl.converters["DOMString or sequence<DOMString>"],
        get defaultValue() {
          return [];
        }
      },
      {
        key: "dispatcher",
        converter: /* @__PURE__ */ __name((V2) => V2, "converter"),
        get defaultValue() {
          return getGlobalDispatcher();
        }
      },
      {
        key: "headers",
        converter: webidl.nullableConverter(webidl.converters.HeadersInit)
      }
    ]);
    webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V2) {
      if (webidl.util.Type(V2) === "Object" && !(Symbol.iterator in V2)) {
        return webidl.converters.WebSocketInit(V2);
      }
      return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V2) };
    };
    webidl.converters.WebSocketSendData = function(V2) {
      if (webidl.util.Type(V2) === "Object") {
        if (isBlobLike(V2)) {
          return webidl.converters.Blob(V2, { strict: false });
        }
        if (ArrayBuffer.isView(V2) || types2.isAnyArrayBuffer(V2)) {
          return webidl.converters.BufferSource(V2);
        }
      }
      return webidl.converters.USVString(V2);
    };
    module.exports = {
      WebSocket
    };
  }
});

// node_modules/undici/index.js
var require_undici = __commonJS({
  "node_modules/undici/index.js"(exports2, module) {
    "use strict";
    var Client = require_client();
    var Dispatcher = require_dispatcher();
    var errors = require_errors();
    var Pool = require_pool();
    var BalancedPool = require_balanced_pool();
    var Agent3 = require_agent();
    var util3 = require_util();
    var { InvalidArgumentError } = errors;
    var api = require_api();
    var buildConnector = require_connect();
    var MockClient = require_mock_client();
    var MockAgent = require_mock_agent();
    var MockPool = require_mock_pool();
    var mockErrors = require_mock_errors();
    var ProxyAgent = require_proxy_agent();
    var RetryHandler = require_RetryHandler();
    var { getGlobalDispatcher, setGlobalDispatcher } = require_global2();
    var DecoratorHandler = require_DecoratorHandler();
    var RedirectHandler = require_RedirectHandler();
    var createRedirectInterceptor = require_redirectInterceptor();
    var hasCrypto;
    try {
      __require("crypto");
      hasCrypto = true;
    } catch {
      hasCrypto = false;
    }
    Object.assign(Dispatcher.prototype, api);
    module.exports.Dispatcher = Dispatcher;
    module.exports.Client = Client;
    module.exports.Pool = Pool;
    module.exports.BalancedPool = BalancedPool;
    module.exports.Agent = Agent3;
    module.exports.ProxyAgent = ProxyAgent;
    module.exports.RetryHandler = RetryHandler;
    module.exports.DecoratorHandler = DecoratorHandler;
    module.exports.RedirectHandler = RedirectHandler;
    module.exports.createRedirectInterceptor = createRedirectInterceptor;
    module.exports.buildConnector = buildConnector;
    module.exports.errors = errors;
    function makeDispatcher(fn2) {
      return (url2, opts, handler) => {
        if (typeof opts === "function") {
          handler = opts;
          opts = null;
        }
        if (!url2 || typeof url2 !== "string" && typeof url2 !== "object" && !(url2 instanceof URL)) {
          throw new InvalidArgumentError("invalid url");
        }
        if (opts != null && typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (opts && opts.path != null) {
          if (typeof opts.path !== "string") {
            throw new InvalidArgumentError("invalid opts.path");
          }
          let path14 = opts.path;
          if (!opts.path.startsWith("/")) {
            path14 = `/${path14}`;
          }
          url2 = new URL(util3.parseOrigin(url2).origin + path14);
        } else {
          if (!opts) {
            opts = typeof url2 === "object" ? url2 : {};
          }
          url2 = util3.parseURL(url2);
        }
        const { agent, dispatcher = getGlobalDispatcher() } = opts;
        if (agent) {
          throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
        }
        return fn2.call(dispatcher, {
          ...opts,
          origin: url2.origin,
          path: url2.search ? `${url2.pathname}${url2.search}` : url2.pathname,
          method: opts.method || (opts.body ? "PUT" : "GET")
        }, handler);
      };
    }
    __name(makeDispatcher, "makeDispatcher");
    module.exports.setGlobalDispatcher = setGlobalDispatcher;
    module.exports.getGlobalDispatcher = getGlobalDispatcher;
    if (util3.nodeMajor > 16 || util3.nodeMajor === 16 && util3.nodeMinor >= 8) {
      let fetchImpl = null;
      module.exports.fetch = /* @__PURE__ */ __name(async function fetch(resource) {
        if (!fetchImpl) {
          fetchImpl = require_fetch().fetch;
        }
        try {
          return await fetchImpl(...arguments);
        } catch (err) {
          if (typeof err === "object") {
            Error.captureStackTrace(err, this);
          }
          throw err;
        }
      }, "fetch");
      module.exports.Headers = require_headers().Headers;
      module.exports.Response = require_response().Response;
      module.exports.Request = require_request2().Request;
      module.exports.FormData = require_formdata().FormData;
      module.exports.File = require_file().File;
      module.exports.FileReader = require_filereader().FileReader;
      const { setGlobalOrigin, getGlobalOrigin } = require_global();
      module.exports.setGlobalOrigin = setGlobalOrigin;
      module.exports.getGlobalOrigin = getGlobalOrigin;
      const { CacheStorage } = require_cachestorage();
      const { kConstruct } = require_symbols4();
      module.exports.caches = new CacheStorage(kConstruct);
    }
    if (util3.nodeMajor >= 16) {
      const { deleteCookie, getCookies, getSetCookies, setCookie } = require_cookies();
      module.exports.deleteCookie = deleteCookie;
      module.exports.getCookies = getCookies;
      module.exports.getSetCookies = getSetCookies;
      module.exports.setCookie = setCookie;
      const { parseMIMEType, serializeAMimeType } = require_dataURL();
      module.exports.parseMIMEType = parseMIMEType;
      module.exports.serializeAMimeType = serializeAMimeType;
    }
    if (util3.nodeMajor >= 18 && hasCrypto) {
      const { WebSocket } = require_websocket();
      module.exports.WebSocket = WebSocket;
    }
    module.exports.request = makeDispatcher(api.request);
    module.exports.stream = makeDispatcher(api.stream);
    module.exports.pipeline = makeDispatcher(api.pipeline);
    module.exports.connect = makeDispatcher(api.connect);
    module.exports.upgrade = makeDispatcher(api.upgrade);
    module.exports.MockClient = MockClient;
    module.exports.MockPool = MockPool;
    module.exports.MockAgent = MockAgent;
    module.exports.mockErrors = mockErrors;
  }
});

// node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({
  "node_modules/@actions/http-client/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpClient = exports2.isHttps = exports2.HttpClientResponse = exports2.HttpClientError = exports2.getProxyUrl = exports2.MediaTypes = exports2.Headers = exports2.HttpCodes = void 0;
    var http2 = __importStar(__require("http"));
    var https2 = __importStar(__require("https"));
    var pm = __importStar(require_proxy());
    var tunnel = __importStar(require_tunnel2());
    var undici_1 = require_undici();
    var HttpCodes2;
    (function(HttpCodes3) {
      HttpCodes3[HttpCodes3["OK"] = 200] = "OK";
      HttpCodes3[HttpCodes3["MultipleChoices"] = 300] = "MultipleChoices";
      HttpCodes3[HttpCodes3["MovedPermanently"] = 301] = "MovedPermanently";
      HttpCodes3[HttpCodes3["ResourceMoved"] = 302] = "ResourceMoved";
      HttpCodes3[HttpCodes3["SeeOther"] = 303] = "SeeOther";
      HttpCodes3[HttpCodes3["NotModified"] = 304] = "NotModified";
      HttpCodes3[HttpCodes3["UseProxy"] = 305] = "UseProxy";
      HttpCodes3[HttpCodes3["SwitchProxy"] = 306] = "SwitchProxy";
      HttpCodes3[HttpCodes3["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      HttpCodes3[HttpCodes3["PermanentRedirect"] = 308] = "PermanentRedirect";
      HttpCodes3[HttpCodes3["BadRequest"] = 400] = "BadRequest";
      HttpCodes3[HttpCodes3["Unauthorized"] = 401] = "Unauthorized";
      HttpCodes3[HttpCodes3["PaymentRequired"] = 402] = "PaymentRequired";
      HttpCodes3[HttpCodes3["Forbidden"] = 403] = "Forbidden";
      HttpCodes3[HttpCodes3["NotFound"] = 404] = "NotFound";
      HttpCodes3[HttpCodes3["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      HttpCodes3[HttpCodes3["NotAcceptable"] = 406] = "NotAcceptable";
      HttpCodes3[HttpCodes3["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      HttpCodes3[HttpCodes3["RequestTimeout"] = 408] = "RequestTimeout";
      HttpCodes3[HttpCodes3["Conflict"] = 409] = "Conflict";
      HttpCodes3[HttpCodes3["Gone"] = 410] = "Gone";
      HttpCodes3[HttpCodes3["TooManyRequests"] = 429] = "TooManyRequests";
      HttpCodes3[HttpCodes3["InternalServerError"] = 500] = "InternalServerError";
      HttpCodes3[HttpCodes3["NotImplemented"] = 501] = "NotImplemented";
      HttpCodes3[HttpCodes3["BadGateway"] = 502] = "BadGateway";
      HttpCodes3[HttpCodes3["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      HttpCodes3[HttpCodes3["GatewayTimeout"] = 504] = "GatewayTimeout";
    })(HttpCodes2 || (exports2.HttpCodes = HttpCodes2 = {}));
    var Headers;
    (function(Headers2) {
      Headers2["Accept"] = "accept";
      Headers2["ContentType"] = "content-type";
    })(Headers || (exports2.Headers = Headers = {}));
    var MediaTypes;
    (function(MediaTypes2) {
      MediaTypes2["ApplicationJson"] = "application/json";
    })(MediaTypes || (exports2.MediaTypes = MediaTypes = {}));
    function getProxyUrl2(serverUrl) {
      const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
      return proxyUrl ? proxyUrl.href : "";
    }
    __name(getProxyUrl2, "getProxyUrl");
    exports2.getProxyUrl = getProxyUrl2;
    var HttpRedirectCodes = [
      HttpCodes2.MovedPermanently,
      HttpCodes2.ResourceMoved,
      HttpCodes2.SeeOther,
      HttpCodes2.TemporaryRedirect,
      HttpCodes2.PermanentRedirect
    ];
    var HttpResponseRetryCodes = [
      HttpCodes2.BadGateway,
      HttpCodes2.ServiceUnavailable,
      HttpCodes2.GatewayTimeout
    ];
    var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientError2 = class _HttpClientError extends Error {
      static {
        __name(this, "HttpClientError");
      }
      constructor(message, statusCode) {
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, _HttpClientError.prototype);
      }
    };
    exports2.HttpClientError = HttpClientError2;
    var HttpClientResponse = class {
      static {
        __name(this, "HttpClientResponse");
      }
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return __awaiter6(this, void 0, void 0, function* () {
          return new Promise((resolve2) => __awaiter6(this, void 0, void 0, function* () {
            let output = Buffer.alloc(0);
            this.message.on("data", (chunk) => {
              output = Buffer.concat([output, chunk]);
            });
            this.message.on("end", () => {
              resolve2(output.toString());
            });
          }));
        });
      }
      readBodyBuffer() {
        return __awaiter6(this, void 0, void 0, function* () {
          return new Promise((resolve2) => __awaiter6(this, void 0, void 0, function* () {
            const chunks = [];
            this.message.on("data", (chunk) => {
              chunks.push(chunk);
            });
            this.message.on("end", () => {
              resolve2(Buffer.concat(chunks));
            });
          }));
        });
      }
    };
    exports2.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      const parsedUrl = new URL(requestUrl);
      return parsedUrl.protocol === "https:";
    }
    __name(isHttps, "isHttps");
    exports2.isHttps = isHttps;
    var HttpClient2 = class {
      static {
        __name(this, "HttpClient");
      }
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return __awaiter6(this, void 0, void 0, function* () {
          return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
        });
      }
      get(requestUrl, additionalHeaders) {
        return __awaiter6(this, void 0, void 0, function* () {
          return this.request("GET", requestUrl, null, additionalHeaders || {});
        });
      }
      del(requestUrl, additionalHeaders) {
        return __awaiter6(this, void 0, void 0, function* () {
          return this.request("DELETE", requestUrl, null, additionalHeaders || {});
        });
      }
      post(requestUrl, data, additionalHeaders) {
        return __awaiter6(this, void 0, void 0, function* () {
          return this.request("POST", requestUrl, data, additionalHeaders || {});
        });
      }
      patch(requestUrl, data, additionalHeaders) {
        return __awaiter6(this, void 0, void 0, function* () {
          return this.request("PATCH", requestUrl, data, additionalHeaders || {});
        });
      }
      put(requestUrl, data, additionalHeaders) {
        return __awaiter6(this, void 0, void 0, function* () {
          return this.request("PUT", requestUrl, data, additionalHeaders || {});
        });
      }
      head(requestUrl, additionalHeaders) {
        return __awaiter6(this, void 0, void 0, function* () {
          return this.request("HEAD", requestUrl, null, additionalHeaders || {});
        });
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter6(this, void 0, void 0, function* () {
          return this.request(verb, requestUrl, stream, additionalHeaders);
        });
      }
      /**
       * Gets a typed object from an endpoint
       * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
       */
      getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter6(this, void 0, void 0, function* () {
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          const res = yield this.get(requestUrl, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter6(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.post(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter6(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.put(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter6(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.patch(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      /**
       * Makes a raw http request.
       * All other methods such as get, post, patch, and request ultimately call this.
       * Prefer get, del, post and patch
       */
      request(verb, requestUrl, data, headers) {
        return __awaiter6(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error("Client has already been disposed.");
          }
          const parsedUrl = new URL(requestUrl);
          let info3 = this._prepareRequest(verb, parsedUrl, headers);
          const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
          let numTries = 0;
          let response;
          do {
            response = yield this.requestRaw(info3, data);
            if (response && response.message && response.message.statusCode === HttpCodes2.Unauthorized) {
              let authenticationHandler;
              for (const handler of this.handlers) {
                if (handler.canHandleAuthentication(response)) {
                  authenticationHandler = handler;
                  break;
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info3, data);
              } else {
                return response;
              }
            }
            let redirectsRemaining = this._maxRedirects;
            while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
              const redirectUrl = response.message.headers["location"];
              if (!redirectUrl) {
                break;
              }
              const parsedRedirectUrl = new URL(redirectUrl);
              if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
                throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
              }
              yield response.readBody();
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (const header in headers) {
                  if (header.toLowerCase() === "authorization") {
                    delete headers[header];
                  }
                }
              }
              info3 = this._prepareRequest(verb, parsedRedirectUrl, headers);
              response = yield this.requestRaw(info3, data);
              redirectsRemaining--;
            }
            if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
              return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
              yield response.readBody();
              yield this._performExponentialBackoff(numTries);
            }
          } while (numTries < maxTries);
          return response;
        });
      }
      /**
       * Needs to be called if keepAlive is set to true in request options.
       */
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      /**
       * Raw request.
       * @param info
       * @param data
       */
      requestRaw(info3, data) {
        return __awaiter6(this, void 0, void 0, function* () {
          return new Promise((resolve2, reject) => {
            function callbackForResult(err, res) {
              if (err) {
                reject(err);
              } else if (!res) {
                reject(new Error("Unknown error"));
              } else {
                resolve2(res);
              }
            }
            __name(callbackForResult, "callbackForResult");
            this.requestRawWithCallback(info3, data, callbackForResult);
          });
        });
      }
      /**
       * Raw request with callback.
       * @param info
       * @param data
       * @param onResult
       */
      requestRawWithCallback(info3, data, onResult) {
        if (typeof data === "string") {
          if (!info3.options.headers) {
            info3.options.headers = {};
          }
          info3.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        function handleResult(err, res) {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        }
        __name(handleResult, "handleResult");
        const req = info3.httpModule.request(info3.options, (msg) => {
          const res = new HttpClientResponse(msg);
          handleResult(void 0, res);
        });
        let socket;
        req.on("socket", (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.end();
          }
          handleResult(new Error(`Request timeout: ${info3.options.path}`));
        });
        req.on("error", function(err) {
          handleResult(err);
        });
        if (data && typeof data === "string") {
          req.write(data, "utf8");
        }
        if (data && typeof data !== "string") {
          data.on("close", function() {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      /**
       * Gets an http agent. This function is useful when you need an http agent that handles
       * routing through a proxy server - depending upon the url and proxy environment variables.
       * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
       */
      getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
      }
      getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) {
          return;
        }
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
      }
      _prepareRequest(method, requestUrl, headers) {
        const info3 = {};
        info3.parsedUrl = requestUrl;
        const usingSsl = info3.parsedUrl.protocol === "https:";
        info3.httpModule = usingSsl ? https2 : http2;
        const defaultPort = usingSsl ? 443 : 80;
        info3.options = {};
        info3.options.host = info3.parsedUrl.hostname;
        info3.options.port = info3.parsedUrl.port ? parseInt(info3.parsedUrl.port) : defaultPort;
        info3.options.path = (info3.parsedUrl.pathname || "") + (info3.parsedUrl.search || "");
        info3.options.method = method;
        info3.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info3.options.headers["user-agent"] = this.userAgent;
        }
        info3.options.agent = this._getAgent(info3.parsedUrl);
        if (this.handlers) {
          for (const handler of this.handlers) {
            handler.prepareRequest(info3.options);
          }
        }
        return info3;
      }
      _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
      }
      _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (!useProxy) {
          agent = this._agent;
        }
        if (agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http2.globalAgent.maxSockets;
        }
        if (proxyUrl && proxyUrl.hostname) {
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
              proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
            }), { host: proxyUrl.hostname, port: proxyUrl.port })
          };
          let tunnelAgent;
          const overHttps = proxyUrl.protocol === "https:";
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (!agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https2.Agent(options) : new http2.Agent(options);
          this._agent = agent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
          });
        }
        return agent;
      }
      _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) {
          proxyAgent = this._proxyAgentDispatcher;
        }
        if (proxyAgent) {
          return proxyAgent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, (proxyUrl.username || proxyUrl.password) && {
          token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}`
        }));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) {
          proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
            rejectUnauthorized: false
          });
        }
        return proxyAgent;
      }
      _performExponentialBackoff(retryNumber) {
        return __awaiter6(this, void 0, void 0, function* () {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
          const ms2 = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
          return new Promise((resolve2) => setTimeout(() => resolve2(), ms2));
        });
      }
      _processResponse(res, options) {
        return __awaiter6(this, void 0, void 0, function* () {
          return new Promise((resolve2, reject) => __awaiter6(this, void 0, void 0, function* () {
            const statusCode = res.message.statusCode || 0;
            const response = {
              statusCode,
              result: null,
              headers: {}
            };
            if (statusCode === HttpCodes2.NotFound) {
              resolve2(response);
            }
            function dateTimeDeserializer(key, value) {
              if (typeof value === "string") {
                const a3 = new Date(value);
                if (!isNaN(a3.valueOf())) {
                  return a3;
                }
              }
              return value;
            }
            __name(dateTimeDeserializer, "dateTimeDeserializer");
            let obj;
            let contents;
            try {
              contents = yield res.readBody();
              if (contents && contents.length > 0) {
                if (options && options.deserializeDates) {
                  obj = JSON.parse(contents, dateTimeDeserializer);
                } else {
                  obj = JSON.parse(contents);
                }
                response.result = obj;
              }
              response.headers = res.message.headers;
            } catch (err) {
            }
            if (statusCode > 299) {
              let msg;
              if (obj && obj.message) {
                msg = obj.message;
              } else if (contents && contents.length > 0) {
                msg = contents;
              } else {
                msg = `Failed request: (${statusCode})`;
              }
              const err = new HttpClientError2(msg, statusCode);
              err.result = response.result;
              reject(err);
            } else {
              resolve2(response);
            }
          }));
        });
      }
    };
    exports2.HttpClient = HttpClient2;
    var lowercaseKeys = /* @__PURE__ */ __name((obj) => Object.keys(obj).reduce((c3, k3) => (c3[k3.toLowerCase()] = obj[k3], c3), {}), "lowercaseKeys");
  }
});

// node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({
  "node_modules/@actions/http-client/lib/auth.js"(exports2) {
    "use strict";
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PersonalAccessTokenCredentialHandler = exports2.BearerCredentialHandler = exports2.BasicCredentialHandler = void 0;
    var BasicCredentialHandler = class {
      static {
        __name(this, "BasicCredentialHandler");
      }
      constructor(username, password) {
        this.username = username;
        this.password = password;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter6(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports2.BasicCredentialHandler = BasicCredentialHandler;
    var BearerCredentialHandler = class {
      static {
        __name(this, "BearerCredentialHandler");
      }
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Bearer ${this.token}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter6(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports2.BearerCredentialHandler = BearerCredentialHandler;
    var PersonalAccessTokenCredentialHandler = class {
      static {
        __name(this, "PersonalAccessTokenCredentialHandler");
      }
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter6(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports2.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({
  "node_modules/@actions/core/lib/oidc-utils.js"(exports2) {
    "use strict";
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OidcClient = void 0;
    var http_client_1 = require_lib();
    var auth_1 = require_auth();
    var core_1 = require_core();
    var OidcClient = class _OidcClient {
      static {
        __name(this, "OidcClient");
      }
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry
        };
        return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(_OidcClient.getRequestToken())], requestOptions);
      }
      static getRequestToken() {
        const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
        if (!token) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        }
        return token;
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
        if (!runtimeUrl) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        }
        return runtimeUrl;
      }
      static getCall(id_token_url) {
        var _a4;
        return __awaiter6(this, void 0, void 0, function* () {
          const httpclient = _OidcClient.createHttpClient();
          const res = yield httpclient.getJson(id_token_url).catch((error) => {
            throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.message}`);
          });
          const id_token = (_a4 = res.result) === null || _a4 === void 0 ? void 0 : _a4.value;
          if (!id_token) {
            throw new Error("Response json body do not have ID Token field");
          }
          return id_token;
        });
      }
      static getIDToken(audience) {
        return __awaiter6(this, void 0, void 0, function* () {
          try {
            let id_token_url = _OidcClient.getIDTokenUrl();
            if (audience) {
              const encodedAudience = encodeURIComponent(audience);
              id_token_url = `${id_token_url}&audience=${encodedAudience}`;
            }
            (0, core_1.debug)(`ID token url is ${id_token_url}`);
            const id_token = yield _OidcClient.getCall(id_token_url);
            (0, core_1.setSecret)(id_token);
            return id_token;
          } catch (error) {
            throw new Error(`Error message: ${error.message}`);
          }
        });
      }
    };
    exports2.OidcClient = OidcClient;
  }
});

// node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({
  "node_modules/@actions/core/lib/summary.js"(exports2) {
    "use strict";
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.summary = exports2.markdownSummary = exports2.SUMMARY_DOCS_URL = exports2.SUMMARY_ENV_VAR = void 0;
    var os_1 = __require("os");
    var fs_1 = __require("fs");
    var { access: access2, appendFile, writeFile: writeFile3 } = fs_1.promises;
    exports2.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
    exports2.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    var Summary = class {
      static {
        __name(this, "Summary");
      }
      constructor() {
        this._buffer = "";
      }
      /**
       * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
       * Also checks r/w permissions.
       *
       * @returns step summary file path
       */
      filePath() {
        return __awaiter6(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath;
          }
          const pathFromEnv = process.env[exports2.SUMMARY_ENV_VAR];
          if (!pathFromEnv) {
            throw new Error(`Unable to find environment variable for $${exports2.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          }
          try {
            yield access2(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
          } catch (_a4) {
            throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
          }
          this._filePath = pathFromEnv;
          return this._filePath;
        });
      }
      /**
       * Wraps content in an HTML tag, adding any HTML attributes
       *
       * @param {string} tag HTML tag to wrap
       * @param {string | null} content content within the tag
       * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
       *
       * @returns {string} content wrapped in HTML element
       */
      wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
        if (!content) {
          return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
      }
      /**
       * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
       *
       * @param {SummaryWriteOptions} [options] (optional) options for write operation
       *
       * @returns {Promise<Summary>} summary instance
       */
      write(options) {
        return __awaiter6(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
          const filePath = yield this.filePath();
          const writeFunc = overwrite ? writeFile3 : appendFile;
          yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
          return this.emptyBuffer();
        });
      }
      /**
       * Clears the summary buffer and wipes the summary file
       *
       * @returns {Summary} summary instance
       */
      clear() {
        return __awaiter6(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true });
        });
      }
      /**
       * Returns the current summary buffer as a string
       *
       * @returns {string} string of summary buffer
       */
      stringify() {
        return this._buffer;
      }
      /**
       * If the summary buffer is empty
       *
       * @returns {boolen} true if the buffer is empty
       */
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      /**
       * Resets the summary buffer without writing to summary file
       *
       * @returns {Summary} summary instance
       */
      emptyBuffer() {
        this._buffer = "";
        return this;
      }
      /**
       * Adds raw text to the summary buffer
       *
       * @param {string} text content to add
       * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
       *
       * @returns {Summary} summary instance
       */
      addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
      }
      /**
       * Adds the operating system-specific end-of-line marker to the buffer
       *
       * @returns {Summary} summary instance
       */
      addEOL() {
        return this.addRaw(os_1.EOL);
      }
      /**
       * Adds an HTML codeblock to the summary buffer
       *
       * @param {string} code content to render within fenced code block
       * @param {string} lang (optional) language to syntax highlight code
       *
       * @returns {Summary} summary instance
       */
      addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && { lang });
        const element = this.wrap("pre", this.wrap("code", code), attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML list to the summary buffer
       *
       * @param {string[]} items list of items to render
       * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
       *
       * @returns {Summary} summary instance
       */
      addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item) => this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML table to the summary buffer
       *
       * @param {SummaryTableCell[]} rows table rows
       *
       * @returns {Summary} summary instance
       */
      addTable(rows) {
        const tableBody = rows.map((row) => {
          const cells = row.map((cell) => {
            if (typeof cell === "string") {
              return this.wrap("td", cell);
            }
            const { header, data, colspan, rowspan } = cell;
            const tag = header ? "th" : "td";
            const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
            return this.wrap(tag, data, attrs);
          }).join("");
          return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds a collapsable HTML details element to the summary buffer
       *
       * @param {string} label text for the closed state
       * @param {string} content collapsable content
       *
       * @returns {Summary} summary instance
       */
      addDetails(label, content) {
        const element = this.wrap("details", this.wrap("summary", label) + content);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML image tag to the summary buffer
       *
       * @param {string} src path to the image you to embed
       * @param {string} alt text description of the image
       * @param {SummaryImageOptions} options (optional) addition image attributes
       *
       * @returns {Summary} summary instance
       */
      addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
        const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML section heading element
       *
       * @param {string} text heading text
       * @param {number | string} [level=1] (optional) the heading level, default: 1
       *
       * @returns {Summary} summary instance
       */
      addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML thematic break (<hr>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML line break (<br>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML blockquote to the summary buffer
       *
       * @param {string} text quote text
       * @param {string} cite (optional) citation url
       *
       * @returns {Summary} summary instance
       */
      addQuote(text, cite) {
        const attrs = Object.assign({}, cite && { cite });
        const element = this.wrap("blockquote", text, attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML anchor tag to the summary buffer
       *
       * @param {string} text link text/content
       * @param {string} href hyperlink
       *
       * @returns {Summary} summary instance
       */
      addLink(text, href) {
        const element = this.wrap("a", text, { href });
        return this.addRaw(element).addEOL();
      }
    };
    var _summary = new Summary();
    exports2.markdownSummary = _summary;
    exports2.summary = _summary;
  }
});

// node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({
  "node_modules/@actions/core/lib/path-utils.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toPlatformPath = exports2.toWin32Path = exports2.toPosixPath = void 0;
    var path14 = __importStar(__require("path"));
    function toPosixPath(pth) {
      return pth.replace(/[\\]/g, "/");
    }
    __name(toPosixPath, "toPosixPath");
    exports2.toPosixPath = toPosixPath;
    function toWin32Path(pth) {
      return pth.replace(/[/]/g, "\\");
    }
    __name(toWin32Path, "toWin32Path");
    exports2.toWin32Path = toWin32Path;
    function toPlatformPath(pth) {
      return pth.replace(/[/\\]/g, path14.sep);
    }
    __name(toPlatformPath, "toPlatformPath");
    exports2.toPlatformPath = toPlatformPath;
  }
});

// node_modules/@actions/io/lib/io-util.js
var require_io_util = __commonJS({
  "node_modules/@actions/io/lib/io-util.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var _a4;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCmdPath = exports2.tryGetExecutablePath = exports2.isRooted = exports2.isDirectory = exports2.exists = exports2.READONLY = exports2.UV_FS_O_EXLOCK = exports2.IS_WINDOWS = exports2.unlink = exports2.symlink = exports2.stat = exports2.rmdir = exports2.rm = exports2.rename = exports2.readlink = exports2.readdir = exports2.open = exports2.mkdir = exports2.lstat = exports2.copyFile = exports2.chmod = void 0;
    var fs4 = __importStar(__require("fs"));
    var path14 = __importStar(__require("path"));
    _a4 = fs4.promises, exports2.chmod = _a4.chmod, exports2.copyFile = _a4.copyFile, exports2.lstat = _a4.lstat, exports2.mkdir = _a4.mkdir, exports2.open = _a4.open, exports2.readdir = _a4.readdir, exports2.readlink = _a4.readlink, exports2.rename = _a4.rename, exports2.rm = _a4.rm, exports2.rmdir = _a4.rmdir, exports2.stat = _a4.stat, exports2.symlink = _a4.symlink, exports2.unlink = _a4.unlink;
    exports2.IS_WINDOWS = process.platform === "win32";
    exports2.UV_FS_O_EXLOCK = 268435456;
    exports2.READONLY = fs4.constants.O_RDONLY;
    function exists(fsPath) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          yield exports2.stat(fsPath);
        } catch (err) {
          if (err.code === "ENOENT") {
            return false;
          }
          throw err;
        }
        return true;
      });
    }
    __name(exists, "exists");
    exports2.exists = exists;
    function isDirectory(fsPath, useStat = false) {
      return __awaiter6(this, void 0, void 0, function* () {
        const stats = useStat ? yield exports2.stat(fsPath) : yield exports2.lstat(fsPath);
        return stats.isDirectory();
      });
    }
    __name(isDirectory, "isDirectory");
    exports2.isDirectory = isDirectory;
    function isRooted(p3) {
      p3 = normalizeSeparators(p3);
      if (!p3) {
        throw new Error('isRooted() parameter "p" cannot be empty');
      }
      if (exports2.IS_WINDOWS) {
        return p3.startsWith("\\") || /^[A-Z]:/i.test(p3);
      }
      return p3.startsWith("/");
    }
    __name(isRooted, "isRooted");
    exports2.isRooted = isRooted;
    function tryGetExecutablePath(filePath, extensions) {
      return __awaiter6(this, void 0, void 0, function* () {
        let stats = void 0;
        try {
          stats = yield exports2.stat(filePath);
        } catch (err) {
          if (err.code !== "ENOENT") {
            console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
          }
        }
        if (stats && stats.isFile()) {
          if (exports2.IS_WINDOWS) {
            const upperExt = path14.extname(filePath).toUpperCase();
            if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) {
              return filePath;
            }
          } else {
            if (isUnixExecutable(stats)) {
              return filePath;
            }
          }
        }
        const originalFilePath = filePath;
        for (const extension of extensions) {
          filePath = originalFilePath + extension;
          stats = void 0;
          try {
            stats = yield exports2.stat(filePath);
          } catch (err) {
            if (err.code !== "ENOENT") {
              console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
            }
          }
          if (stats && stats.isFile()) {
            if (exports2.IS_WINDOWS) {
              try {
                const directory = path14.dirname(filePath);
                const upperName = path14.basename(filePath).toUpperCase();
                for (const actualName of yield exports2.readdir(directory)) {
                  if (upperName === actualName.toUpperCase()) {
                    filePath = path14.join(directory, actualName);
                    break;
                  }
                }
              } catch (err) {
                console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
              }
              return filePath;
            } else {
              if (isUnixExecutable(stats)) {
                return filePath;
              }
            }
          }
        }
        return "";
      });
    }
    __name(tryGetExecutablePath, "tryGetExecutablePath");
    exports2.tryGetExecutablePath = tryGetExecutablePath;
    function normalizeSeparators(p3) {
      p3 = p3 || "";
      if (exports2.IS_WINDOWS) {
        p3 = p3.replace(/\//g, "\\");
        return p3.replace(/\\\\+/g, "\\");
      }
      return p3.replace(/\/\/+/g, "/");
    }
    __name(normalizeSeparators, "normalizeSeparators");
    function isUnixExecutable(stats) {
      return (stats.mode & 1) > 0 || (stats.mode & 8) > 0 && stats.gid === process.getgid() || (stats.mode & 64) > 0 && stats.uid === process.getuid();
    }
    __name(isUnixExecutable, "isUnixExecutable");
    function getCmdPath() {
      var _a5;
      return (_a5 = process.env["COMSPEC"]) !== null && _a5 !== void 0 ? _a5 : `cmd.exe`;
    }
    __name(getCmdPath, "getCmdPath");
    exports2.getCmdPath = getCmdPath;
  }
});

// node_modules/@actions/io/lib/io.js
var require_io = __commonJS({
  "node_modules/@actions/io/lib/io.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.findInPath = exports2.which = exports2.mkdirP = exports2.rmRF = exports2.mv = exports2.cp = void 0;
    var assert_1 = __require("assert");
    var path14 = __importStar(__require("path"));
    var ioUtil = __importStar(require_io_util());
    function cp(source, dest, options = {}) {
      return __awaiter6(this, void 0, void 0, function* () {
        const { force, recursive, copySourceDirectory } = readCopyOptions(options);
        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
        if (destStat && destStat.isFile() && !force) {
          return;
        }
        const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path14.join(dest, path14.basename(source)) : dest;
        if (!(yield ioUtil.exists(source))) {
          throw new Error(`no such file or directory: ${source}`);
        }
        const sourceStat = yield ioUtil.stat(source);
        if (sourceStat.isDirectory()) {
          if (!recursive) {
            throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
          } else {
            yield cpDirRecursive(source, newDest, 0, force);
          }
        } else {
          if (path14.relative(source, newDest) === "") {
            throw new Error(`'${newDest}' and '${source}' are the same file`);
          }
          yield copyFile(source, newDest, force);
        }
      });
    }
    __name(cp, "cp");
    exports2.cp = cp;
    function mv(source, dest, options = {}) {
      return __awaiter6(this, void 0, void 0, function* () {
        if (yield ioUtil.exists(dest)) {
          let destExists = true;
          if (yield ioUtil.isDirectory(dest)) {
            dest = path14.join(dest, path14.basename(source));
            destExists = yield ioUtil.exists(dest);
          }
          if (destExists) {
            if (options.force == null || options.force) {
              yield rmRF2(dest);
            } else {
              throw new Error("Destination already exists");
            }
          }
        }
        yield mkdirP(path14.dirname(dest));
        yield ioUtil.rename(source, dest);
      });
    }
    __name(mv, "mv");
    exports2.mv = mv;
    function rmRF2(inputPath) {
      return __awaiter6(this, void 0, void 0, function* () {
        if (ioUtil.IS_WINDOWS) {
          if (/[*"<>|]/.test(inputPath)) {
            throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
          }
        }
        try {
          yield ioUtil.rm(inputPath, {
            force: true,
            maxRetries: 3,
            recursive: true,
            retryDelay: 300
          });
        } catch (err) {
          throw new Error(`File was unable to be removed ${err}`);
        }
      });
    }
    __name(rmRF2, "rmRF");
    exports2.rmRF = rmRF2;
    function mkdirP(fsPath) {
      return __awaiter6(this, void 0, void 0, function* () {
        assert_1.ok(fsPath, "a path argument must be provided");
        yield ioUtil.mkdir(fsPath, { recursive: true });
      });
    }
    __name(mkdirP, "mkdirP");
    exports2.mkdirP = mkdirP;
    function which(tool, check) {
      return __awaiter6(this, void 0, void 0, function* () {
        if (!tool) {
          throw new Error("parameter 'tool' is required");
        }
        if (check) {
          const result = yield which(tool, false);
          if (!result) {
            if (ioUtil.IS_WINDOWS) {
              throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
            } else {
              throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
            }
          }
          return result;
        }
        const matches = yield findInPath(tool);
        if (matches && matches.length > 0) {
          return matches[0];
        }
        return "";
      });
    }
    __name(which, "which");
    exports2.which = which;
    function findInPath(tool) {
      return __awaiter6(this, void 0, void 0, function* () {
        if (!tool) {
          throw new Error("parameter 'tool' is required");
        }
        const extensions = [];
        if (ioUtil.IS_WINDOWS && process.env["PATHEXT"]) {
          for (const extension of process.env["PATHEXT"].split(path14.delimiter)) {
            if (extension) {
              extensions.push(extension);
            }
          }
        }
        if (ioUtil.isRooted(tool)) {
          const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
          if (filePath) {
            return [filePath];
          }
          return [];
        }
        if (tool.includes(path14.sep)) {
          return [];
        }
        const directories = [];
        if (process.env.PATH) {
          for (const p3 of process.env.PATH.split(path14.delimiter)) {
            if (p3) {
              directories.push(p3);
            }
          }
        }
        const matches = [];
        for (const directory of directories) {
          const filePath = yield ioUtil.tryGetExecutablePath(path14.join(directory, tool), extensions);
          if (filePath) {
            matches.push(filePath);
          }
        }
        return matches;
      });
    }
    __name(findInPath, "findInPath");
    exports2.findInPath = findInPath;
    function readCopyOptions(options) {
      const force = options.force == null ? true : options.force;
      const recursive = Boolean(options.recursive);
      const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
      return { force, recursive, copySourceDirectory };
    }
    __name(readCopyOptions, "readCopyOptions");
    function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
      return __awaiter6(this, void 0, void 0, function* () {
        if (currentDepth >= 255)
          return;
        currentDepth++;
        yield mkdirP(destDir);
        const files = yield ioUtil.readdir(sourceDir);
        for (const fileName of files) {
          const srcFile = `${sourceDir}/${fileName}`;
          const destFile = `${destDir}/${fileName}`;
          const srcFileStat = yield ioUtil.lstat(srcFile);
          if (srcFileStat.isDirectory()) {
            yield cpDirRecursive(srcFile, destFile, currentDepth, force);
          } else {
            yield copyFile(srcFile, destFile, force);
          }
        }
        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
      });
    }
    __name(cpDirRecursive, "cpDirRecursive");
    function copyFile(srcFile, destFile, force) {
      return __awaiter6(this, void 0, void 0, function* () {
        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
          try {
            yield ioUtil.lstat(destFile);
            yield ioUtil.unlink(destFile);
          } catch (e3) {
            if (e3.code === "EPERM") {
              yield ioUtil.chmod(destFile, "0666");
              yield ioUtil.unlink(destFile);
            }
          }
          const symlinkFull = yield ioUtil.readlink(srcFile);
          yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? "junction" : null);
        } else if (!(yield ioUtil.exists(destFile)) || force) {
          yield ioUtil.copyFile(srcFile, destFile);
        }
      });
    }
    __name(copyFile, "copyFile");
  }
});

// node_modules/@actions/exec/lib/toolrunner.js
var require_toolrunner = __commonJS({
  "node_modules/@actions/exec/lib/toolrunner.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.argStringToArray = exports2.ToolRunner = void 0;
    var os5 = __importStar(__require("os"));
    var events = __importStar(__require("events"));
    var child = __importStar(__require("child_process"));
    var path14 = __importStar(__require("path"));
    var io2 = __importStar(require_io());
    var ioUtil = __importStar(require_io_util());
    var timers_1 = __require("timers");
    var IS_WINDOWS = process.platform === "win32";
    var ToolRunner = class extends events.EventEmitter {
      static {
        __name(this, "ToolRunner");
      }
      constructor(toolPath, args, options) {
        super();
        if (!toolPath) {
          throw new Error("Parameter 'toolPath' cannot be null or empty.");
        }
        this.toolPath = toolPath;
        this.args = args || [];
        this.options = options || {};
      }
      _debug(message) {
        if (this.options.listeners && this.options.listeners.debug) {
          this.options.listeners.debug(message);
        }
      }
      _getCommandString(options, noPrefix) {
        const toolPath = this._getSpawnFileName();
        const args = this._getSpawnArgs(options);
        let cmd = noPrefix ? "" : "[command]";
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            cmd += toolPath;
            for (const a3 of args) {
              cmd += ` ${a3}`;
            }
          } else if (options.windowsVerbatimArguments) {
            cmd += `"${toolPath}"`;
            for (const a3 of args) {
              cmd += ` ${a3}`;
            }
          } else {
            cmd += this._windowsQuoteCmdArg(toolPath);
            for (const a3 of args) {
              cmd += ` ${this._windowsQuoteCmdArg(a3)}`;
            }
          }
        } else {
          cmd += toolPath;
          for (const a3 of args) {
            cmd += ` ${a3}`;
          }
        }
        return cmd;
      }
      _processLineBuffer(data, strBuffer, onLine) {
        try {
          let s3 = strBuffer + data.toString();
          let n3 = s3.indexOf(os5.EOL);
          while (n3 > -1) {
            const line = s3.substring(0, n3);
            onLine(line);
            s3 = s3.substring(n3 + os5.EOL.length);
            n3 = s3.indexOf(os5.EOL);
          }
          return s3;
        } catch (err) {
          this._debug(`error processing line. Failed with error ${err}`);
          return "";
        }
      }
      _getSpawnFileName() {
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            return process.env["COMSPEC"] || "cmd.exe";
          }
        }
        return this.toolPath;
      }
      _getSpawnArgs(options) {
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
            for (const a3 of this.args) {
              argline += " ";
              argline += options.windowsVerbatimArguments ? a3 : this._windowsQuoteCmdArg(a3);
            }
            argline += '"';
            return [argline];
          }
        }
        return this.args;
      }
      _endsWith(str, end) {
        return str.endsWith(end);
      }
      _isCmdFile() {
        const upperToolPath = this.toolPath.toUpperCase();
        return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
      }
      _windowsQuoteCmdArg(arg) {
        if (!this._isCmdFile()) {
          return this._uvQuoteCmdArg(arg);
        }
        if (!arg) {
          return '""';
        }
        const cmdSpecialChars = [
          " ",
          "	",
          "&",
          "(",
          ")",
          "[",
          "]",
          "{",
          "}",
          "^",
          "=",
          ";",
          "!",
          "'",
          "+",
          ",",
          "`",
          "~",
          "|",
          "<",
          ">",
          '"'
        ];
        let needsQuotes = false;
        for (const char of arg) {
          if (cmdSpecialChars.some((x3) => x3 === char)) {
            needsQuotes = true;
            break;
          }
        }
        if (!needsQuotes) {
          return arg;
        }
        let reverse = '"';
        let quoteHit = true;
        for (let i3 = arg.length; i3 > 0; i3--) {
          reverse += arg[i3 - 1];
          if (quoteHit && arg[i3 - 1] === "\\") {
            reverse += "\\";
          } else if (arg[i3 - 1] === '"') {
            quoteHit = true;
            reverse += '"';
          } else {
            quoteHit = false;
          }
        }
        reverse += '"';
        return reverse.split("").reverse().join("");
      }
      _uvQuoteCmdArg(arg) {
        if (!arg) {
          return '""';
        }
        if (!arg.includes(" ") && !arg.includes("	") && !arg.includes('"')) {
          return arg;
        }
        if (!arg.includes('"') && !arg.includes("\\")) {
          return `"${arg}"`;
        }
        let reverse = '"';
        let quoteHit = true;
        for (let i3 = arg.length; i3 > 0; i3--) {
          reverse += arg[i3 - 1];
          if (quoteHit && arg[i3 - 1] === "\\") {
            reverse += "\\";
          } else if (arg[i3 - 1] === '"') {
            quoteHit = true;
            reverse += "\\";
          } else {
            quoteHit = false;
          }
        }
        reverse += '"';
        return reverse.split("").reverse().join("");
      }
      _cloneExecOptions(options) {
        options = options || {};
        const result = {
          cwd: options.cwd || process.cwd(),
          env: options.env || process.env,
          silent: options.silent || false,
          windowsVerbatimArguments: options.windowsVerbatimArguments || false,
          failOnStdErr: options.failOnStdErr || false,
          ignoreReturnCode: options.ignoreReturnCode || false,
          delay: options.delay || 1e4
        };
        result.outStream = options.outStream || process.stdout;
        result.errStream = options.errStream || process.stderr;
        return result;
      }
      _getSpawnOptions(options, toolPath) {
        options = options || {};
        const result = {};
        result.cwd = options.cwd;
        result.env = options.env;
        result["windowsVerbatimArguments"] = options.windowsVerbatimArguments || this._isCmdFile();
        if (options.windowsVerbatimArguments) {
          result.argv0 = `"${toolPath}"`;
        }
        return result;
      }
      /**
       * Exec a tool.
       * Output will be streamed to the live console.
       * Returns promise with return code
       *
       * @param     tool     path to tool to exec
       * @param     options  optional exec options.  See ExecOptions
       * @returns   number
       */
      exec() {
        return __awaiter6(this, void 0, void 0, function* () {
          if (!ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\"))) {
            this.toolPath = path14.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
          }
          this.toolPath = yield io2.which(this.toolPath, true);
          return new Promise((resolve2, reject) => __awaiter6(this, void 0, void 0, function* () {
            this._debug(`exec tool: ${this.toolPath}`);
            this._debug("arguments:");
            for (const arg of this.args) {
              this._debug(`   ${arg}`);
            }
            const optionsNonNull = this._cloneExecOptions(this.options);
            if (!optionsNonNull.silent && optionsNonNull.outStream) {
              optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os5.EOL);
            }
            const state3 = new ExecState(optionsNonNull, this.toolPath);
            state3.on("debug", (message) => {
              this._debug(message);
            });
            if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {
              return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
            }
            const fileName = this._getSpawnFileName();
            const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
            let stdbuffer = "";
            if (cp.stdout) {
              cp.stdout.on("data", (data) => {
                if (this.options.listeners && this.options.listeners.stdout) {
                  this.options.listeners.stdout(data);
                }
                if (!optionsNonNull.silent && optionsNonNull.outStream) {
                  optionsNonNull.outStream.write(data);
                }
                stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
                  if (this.options.listeners && this.options.listeners.stdline) {
                    this.options.listeners.stdline(line);
                  }
                });
              });
            }
            let errbuffer = "";
            if (cp.stderr) {
              cp.stderr.on("data", (data) => {
                state3.processStderr = true;
                if (this.options.listeners && this.options.listeners.stderr) {
                  this.options.listeners.stderr(data);
                }
                if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
                  const s3 = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
                  s3.write(data);
                }
                errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
                  if (this.options.listeners && this.options.listeners.errline) {
                    this.options.listeners.errline(line);
                  }
                });
              });
            }
            cp.on("error", (err) => {
              state3.processError = err.message;
              state3.processExited = true;
              state3.processClosed = true;
              state3.CheckComplete();
            });
            cp.on("exit", (code) => {
              state3.processExitCode = code;
              state3.processExited = true;
              this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
              state3.CheckComplete();
            });
            cp.on("close", (code) => {
              state3.processExitCode = code;
              state3.processExited = true;
              state3.processClosed = true;
              this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
              state3.CheckComplete();
            });
            state3.on("done", (error, exitCode) => {
              if (stdbuffer.length > 0) {
                this.emit("stdline", stdbuffer);
              }
              if (errbuffer.length > 0) {
                this.emit("errline", errbuffer);
              }
              cp.removeAllListeners();
              if (error) {
                reject(error);
              } else {
                resolve2(exitCode);
              }
            });
            if (this.options.input) {
              if (!cp.stdin) {
                throw new Error("child process missing stdin");
              }
              cp.stdin.end(this.options.input);
            }
          }));
        });
      }
    };
    exports2.ToolRunner = ToolRunner;
    function argStringToArray(argString) {
      const args = [];
      let inQuotes = false;
      let escaped = false;
      let arg = "";
      function append(c3) {
        if (escaped && c3 !== '"') {
          arg += "\\";
        }
        arg += c3;
        escaped = false;
      }
      __name(append, "append");
      for (let i3 = 0; i3 < argString.length; i3++) {
        const c3 = argString.charAt(i3);
        if (c3 === '"') {
          if (!escaped) {
            inQuotes = !inQuotes;
          } else {
            append(c3);
          }
          continue;
        }
        if (c3 === "\\" && escaped) {
          append(c3);
          continue;
        }
        if (c3 === "\\" && inQuotes) {
          escaped = true;
          continue;
        }
        if (c3 === " " && !inQuotes) {
          if (arg.length > 0) {
            args.push(arg);
            arg = "";
          }
          continue;
        }
        append(c3);
      }
      if (arg.length > 0) {
        args.push(arg.trim());
      }
      return args;
    }
    __name(argStringToArray, "argStringToArray");
    exports2.argStringToArray = argStringToArray;
    var ExecState = class _ExecState extends events.EventEmitter {
      static {
        __name(this, "ExecState");
      }
      constructor(options, toolPath) {
        super();
        this.processClosed = false;
        this.processError = "";
        this.processExitCode = 0;
        this.processExited = false;
        this.processStderr = false;
        this.delay = 1e4;
        this.done = false;
        this.timeout = null;
        if (!toolPath) {
          throw new Error("toolPath must not be empty");
        }
        this.options = options;
        this.toolPath = toolPath;
        if (options.delay) {
          this.delay = options.delay;
        }
      }
      CheckComplete() {
        if (this.done) {
          return;
        }
        if (this.processClosed) {
          this._setResult();
        } else if (this.processExited) {
          this.timeout = timers_1.setTimeout(_ExecState.HandleTimeout, this.delay, this);
        }
      }
      _debug(message) {
        this.emit("debug", message);
      }
      _setResult() {
        let error;
        if (this.processExited) {
          if (this.processError) {
            error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
          } else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
            error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
          } else if (this.processStderr && this.options.failOnStdErr) {
            error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
          }
        }
        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }
        this.done = true;
        this.emit("done", error, this.processExitCode);
      }
      static HandleTimeout(state3) {
        if (state3.done) {
          return;
        }
        if (!state3.processClosed && state3.processExited) {
          const message = `The STDIO streams did not close within ${state3.delay / 1e3} seconds of the exit event from process '${state3.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
          state3._debug(message);
        }
        state3._setResult();
      }
    };
  }
});

// node_modules/@actions/exec/lib/exec.js
var require_exec = __commonJS({
  "node_modules/@actions/exec/lib/exec.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getExecOutput = exports2.exec = void 0;
    var string_decoder_1 = __require("string_decoder");
    var tr2 = __importStar(require_toolrunner());
    function exec2(commandLine, args, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        const commandArgs2 = tr2.argStringToArray(commandLine);
        if (commandArgs2.length === 0) {
          throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
        }
        const toolPath = commandArgs2[0];
        args = commandArgs2.slice(1).concat(args || []);
        const runner = new tr2.ToolRunner(toolPath, args, options);
        return runner.exec();
      });
    }
    __name(exec2, "exec");
    exports2.exec = exec2;
    function getExecOutput2(commandLine, args, options) {
      var _a4, _b2;
      return __awaiter6(this, void 0, void 0, function* () {
        let stdout2 = "";
        let stderr2 = "";
        const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
        const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
        const originalStdoutListener = (_a4 = options === null || options === void 0 ? void 0 : options.listeners) === null || _a4 === void 0 ? void 0 : _a4.stdout;
        const originalStdErrListener = (_b2 = options === null || options === void 0 ? void 0 : options.listeners) === null || _b2 === void 0 ? void 0 : _b2.stderr;
        const stdErrListener = /* @__PURE__ */ __name((data) => {
          stderr2 += stderrDecoder.write(data);
          if (originalStdErrListener) {
            originalStdErrListener(data);
          }
        }, "stdErrListener");
        const stdOutListener = /* @__PURE__ */ __name((data) => {
          stdout2 += stdoutDecoder.write(data);
          if (originalStdoutListener) {
            originalStdoutListener(data);
          }
        }, "stdOutListener");
        const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });
        const exitCode = yield exec2(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
        stdout2 += stdoutDecoder.end();
        stderr2 += stderrDecoder.end();
        return {
          exitCode,
          stdout: stdout2,
          stderr: stderr2
        };
      });
    }
    __name(getExecOutput2, "getExecOutput");
    exports2.getExecOutput = getExecOutput2;
  }
});

// node_modules/@actions/core/lib/platform.js
var require_platform = __commonJS({
  "node_modules/@actions/core/lib/platform.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDetails = exports2.isLinux = exports2.isMacOS = exports2.isWindows = exports2.arch = exports2.platform = void 0;
    var os_1 = __importDefault(__require("os"));
    var exec2 = __importStar(require_exec());
    var getWindowsInfo = /* @__PURE__ */ __name(() => __awaiter6(void 0, void 0, void 0, function* () {
      const { stdout: version3 } = yield exec2.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"', void 0, {
        silent: true
      });
      const { stdout: name2 } = yield exec2.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"', void 0, {
        silent: true
      });
      return {
        name: name2.trim(),
        version: version3.trim()
      };
    }), "getWindowsInfo");
    var getMacOsInfo = /* @__PURE__ */ __name(() => __awaiter6(void 0, void 0, void 0, function* () {
      var _a4, _b2, _c2, _d2;
      const { stdout: stdout2 } = yield exec2.getExecOutput("sw_vers", void 0, {
        silent: true
      });
      const version3 = (_b2 = (_a4 = stdout2.match(/ProductVersion:\s*(.+)/)) === null || _a4 === void 0 ? void 0 : _a4[1]) !== null && _b2 !== void 0 ? _b2 : "";
      const name2 = (_d2 = (_c2 = stdout2.match(/ProductName:\s*(.+)/)) === null || _c2 === void 0 ? void 0 : _c2[1]) !== null && _d2 !== void 0 ? _d2 : "";
      return {
        name: name2,
        version: version3
      };
    }), "getMacOsInfo");
    var getLinuxInfo = /* @__PURE__ */ __name(() => __awaiter6(void 0, void 0, void 0, function* () {
      const { stdout: stdout2 } = yield exec2.getExecOutput("lsb_release", ["-i", "-r", "-s"], {
        silent: true
      });
      const [name2, version3] = stdout2.trim().split("\n");
      return {
        name: name2,
        version: version3
      };
    }), "getLinuxInfo");
    exports2.platform = os_1.default.platform();
    exports2.arch = os_1.default.arch();
    exports2.isWindows = exports2.platform === "win32";
    exports2.isMacOS = exports2.platform === "darwin";
    exports2.isLinux = exports2.platform === "linux";
    function getDetails() {
      return __awaiter6(this, void 0, void 0, function* () {
        return Object.assign(Object.assign({}, yield exports2.isWindows ? getWindowsInfo() : exports2.isMacOS ? getMacOsInfo() : getLinuxInfo()), {
          platform: exports2.platform,
          arch: exports2.arch,
          isWindows: exports2.isWindows,
          isMacOS: exports2.isMacOS,
          isLinux: exports2.isLinux
        });
      });
    }
    __name(getDetails, "getDetails");
    exports2.getDetails = getDetails;
  }
});

// node_modules/@actions/core/lib/core.js
var require_core = __commonJS({
  "node_modules/@actions/core/lib/core.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.platform = exports2.toPlatformPath = exports2.toWin32Path = exports2.toPosixPath = exports2.markdownSummary = exports2.summary = exports2.getIDToken = exports2.getState = exports2.saveState = exports2.group = exports2.endGroup = exports2.startGroup = exports2.info = exports2.notice = exports2.warning = exports2.error = exports2.debug = exports2.isDebug = exports2.setFailed = exports2.setCommandEcho = exports2.setOutput = exports2.getBooleanInput = exports2.getMultilineInput = exports2.getInput = exports2.addPath = exports2.setSecret = exports2.exportVariable = exports2.ExitCode = void 0;
    var command_1 = require_command();
    var file_command_1 = require_file_command();
    var utils_1 = require_utils();
    var os5 = __importStar(__require("os"));
    var path14 = __importStar(__require("path"));
    var oidc_utils_1 = require_oidc_utils();
    var ExitCode;
    (function(ExitCode2) {
      ExitCode2[ExitCode2["Success"] = 0] = "Success";
      ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
    })(ExitCode || (exports2.ExitCode = ExitCode = {}));
    function exportVariable2(name2, val) {
      const convertedVal = (0, utils_1.toCommandValue)(val);
      process.env[name2] = convertedVal;
      const filePath = process.env["GITHUB_ENV"] || "";
      if (filePath) {
        return (0, file_command_1.issueFileCommand)("ENV", (0, file_command_1.prepareKeyValueMessage)(name2, val));
      }
      (0, command_1.issueCommand)("set-env", { name: name2 }, convertedVal);
    }
    __name(exportVariable2, "exportVariable");
    exports2.exportVariable = exportVariable2;
    function setSecret(secret) {
      (0, command_1.issueCommand)("add-mask", {}, secret);
    }
    __name(setSecret, "setSecret");
    exports2.setSecret = setSecret;
    function addPath2(inputPath) {
      const filePath = process.env["GITHUB_PATH"] || "";
      if (filePath) {
        (0, file_command_1.issueFileCommand)("PATH", inputPath);
      } else {
        (0, command_1.issueCommand)("add-path", {}, inputPath);
      }
      process.env["PATH"] = `${inputPath}${path14.delimiter}${process.env["PATH"]}`;
    }
    __name(addPath2, "addPath");
    exports2.addPath = addPath2;
    function getInput2(name2, options) {
      const val = process.env[`INPUT_${name2.replace(/ /g, "_").toUpperCase()}`] || "";
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name2}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    __name(getInput2, "getInput");
    exports2.getInput = getInput2;
    function getMultilineInput(name2, options) {
      const inputs = getInput2(name2, options).split("\n").filter((x3) => x3 !== "");
      if (options && options.trimWhitespace === false) {
        return inputs;
      }
      return inputs.map((input) => input.trim());
    }
    __name(getMultilineInput, "getMultilineInput");
    exports2.getMultilineInput = getMultilineInput;
    function getBooleanInput2(name2, options) {
      const trueValue = ["true", "True", "TRUE"];
      const falseValue = ["false", "False", "FALSE"];
      const val = getInput2(name2, options);
      if (trueValue.includes(val))
        return true;
      if (falseValue.includes(val))
        return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name2}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    __name(getBooleanInput2, "getBooleanInput");
    exports2.getBooleanInput = getBooleanInput2;
    function setOutput3(name2, value) {
      const filePath = process.env["GITHUB_OUTPUT"] || "";
      if (filePath) {
        return (0, file_command_1.issueFileCommand)("OUTPUT", (0, file_command_1.prepareKeyValueMessage)(name2, value));
      }
      process.stdout.write(os5.EOL);
      (0, command_1.issueCommand)("set-output", { name: name2 }, (0, utils_1.toCommandValue)(value));
    }
    __name(setOutput3, "setOutput");
    exports2.setOutput = setOutput3;
    function setCommandEcho(enabled2) {
      (0, command_1.issue)("echo", enabled2 ? "on" : "off");
    }
    __name(setCommandEcho, "setCommandEcho");
    exports2.setCommandEcho = setCommandEcho;
    function setFailed2(message) {
      process.exitCode = ExitCode.Failure;
      error(message);
    }
    __name(setFailed2, "setFailed");
    exports2.setFailed = setFailed2;
    function isDebug3() {
      return process.env["RUNNER_DEBUG"] === "1";
    }
    __name(isDebug3, "isDebug");
    exports2.isDebug = isDebug3;
    function debug3(message) {
      (0, command_1.issueCommand)("debug", {}, message);
    }
    __name(debug3, "debug");
    exports2.debug = debug3;
    function error(message, properties = {}) {
      (0, command_1.issueCommand)("error", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
    }
    __name(error, "error");
    exports2.error = error;
    function warning2(message, properties = {}) {
      (0, command_1.issueCommand)("warning", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
    }
    __name(warning2, "warning");
    exports2.warning = warning2;
    function notice2(message, properties = {}) {
      (0, command_1.issueCommand)("notice", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
    }
    __name(notice2, "notice");
    exports2.notice = notice2;
    function info3(message) {
      process.stdout.write(message + os5.EOL);
    }
    __name(info3, "info");
    exports2.info = info3;
    function startGroup(name2) {
      (0, command_1.issue)("group", name2);
    }
    __name(startGroup, "startGroup");
    exports2.startGroup = startGroup;
    function endGroup() {
      (0, command_1.issue)("endgroup");
    }
    __name(endGroup, "endGroup");
    exports2.endGroup = endGroup;
    function group2(name2, fn2) {
      return __awaiter6(this, void 0, void 0, function* () {
        startGroup(name2);
        let result;
        try {
          result = yield fn2();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    __name(group2, "group");
    exports2.group = group2;
    function saveState3(name2, value) {
      const filePath = process.env["GITHUB_STATE"] || "";
      if (filePath) {
        return (0, file_command_1.issueFileCommand)("STATE", (0, file_command_1.prepareKeyValueMessage)(name2, value));
      }
      (0, command_1.issueCommand)("save-state", { name: name2 }, (0, utils_1.toCommandValue)(value));
    }
    __name(saveState3, "saveState");
    exports2.saveState = saveState3;
    function getState3(name2) {
      return process.env[`STATE_${name2}`] || "";
    }
    __name(getState3, "getState");
    exports2.getState = getState3;
    function getIDToken(aud) {
      return __awaiter6(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    __name(getIDToken, "getIDToken");
    exports2.getIDToken = getIDToken;
    var summary_1 = require_summary();
    Object.defineProperty(exports2, "summary", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return summary_1.summary;
    }, "get") });
    var summary_2 = require_summary();
    Object.defineProperty(exports2, "markdownSummary", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return summary_2.markdownSummary;
    }, "get") });
    var path_utils_1 = require_path_utils();
    Object.defineProperty(exports2, "toPosixPath", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return path_utils_1.toPosixPath;
    }, "get") });
    Object.defineProperty(exports2, "toWin32Path", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return path_utils_1.toWin32Path;
    }, "get") });
    Object.defineProperty(exports2, "toPlatformPath", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return path_utils_1.toPlatformPath;
    }, "get") });
    exports2.platform = __importStar(require_platform());
  }
});

// node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({
  "node_modules/source-map/lib/base64.js"(exports2) {
    "use strict";
    var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    exports2.encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    exports2.decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
  }
});

// node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({
  "node_modules/source-map/lib/base64-vlq.js"(exports2) {
    "use strict";
    var base64 = require_base64();
    var VLQ_BASE_SHIFT = 5;
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    var VLQ_BASE_MASK = VLQ_BASE - 1;
    var VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    __name(toVLQSigned, "toVLQSigned");
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    __name(fromVLQSigned, "fromVLQSigned");
    exports2.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);
      return encoded;
    }, "base64VLQ_encode");
    exports2.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    }, "base64VLQ_decode");
  }
});

// node_modules/source-map/lib/util.js
var require_util8 = __commonJS({
  "node_modules/source-map/lib/util.js"(exports2) {
    "use strict";
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    __name(getArg, "getArg");
    exports2.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
      var match3 = aUrl.match(urlRegexp);
      if (!match3) {
        return null;
      }
      return {
        scheme: match3[1],
        auth: match3[2],
        host: match3[3],
        port: match3[4],
        path: match3[5]
      };
    }
    __name(urlParse, "urlParse");
    exports2.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url2 = "";
      if (aParsedUrl.scheme) {
        url2 += aParsedUrl.scheme + ":";
      }
      url2 += "//";
      if (aParsedUrl.auth) {
        url2 += aParsedUrl.auth + "@";
      }
      if (aParsedUrl.host) {
        url2 += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url2 += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url2 += aParsedUrl.path;
      }
      return url2;
    }
    __name(urlGenerate, "urlGenerate");
    exports2.urlGenerate = urlGenerate;
    function normalize4(aPath) {
      var path14 = aPath;
      var url2 = urlParse(aPath);
      if (url2) {
        if (!url2.path) {
          return aPath;
        }
        path14 = url2.path;
      }
      var isAbsolute = exports2.isAbsolute(path14);
      var parts = path14.split(/\/+/);
      for (var part, up = 0, i3 = parts.length - 1; i3 >= 0; i3--) {
        part = parts[i3];
        if (part === ".") {
          parts.splice(i3, 1);
        } else if (part === "..") {
          up++;
        } else if (up > 0) {
          if (part === "") {
            parts.splice(i3 + 1, up);
            up = 0;
          } else {
            parts.splice(i3, 2);
            up--;
          }
        }
      }
      path14 = parts.join("/");
      if (path14 === "") {
        path14 = isAbsolute ? "/" : ".";
      }
      if (url2) {
        url2.path = path14;
        return urlGenerate(url2);
      }
      return path14;
    }
    __name(normalize4, "normalize");
    exports2.normalize = normalize4;
    function join9(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || "/";
      }
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === "/" ? aPath : normalize4(aRoot.replace(/\/+$/, "") + "/" + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    __name(join9, "join");
    exports2.join = join9;
    exports2.isAbsolute = function(aPath) {
      return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
    };
    function relative(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      aRoot = aRoot.replace(/\/$/, "");
      var level = 0;
      while (aPath.indexOf(aRoot + "/") !== 0) {
        var index2 = aRoot.lastIndexOf("/");
        if (index2 < 0) {
          return aPath;
        }
        aRoot = aRoot.slice(0, index2);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }
        ++level;
      }
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    __name(relative, "relative");
    exports2.relative = relative;
    var supportsNullProto = function() {
      var obj = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in obj);
    }();
    function identity(s3) {
      return s3;
    }
    __name(identity, "identity");
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return "$" + aStr;
      }
      return aStr;
    }
    __name(toSetString, "toSetString");
    exports2.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    __name(fromSetString, "fromSetString");
    exports2.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s3) {
      if (!s3) {
        return false;
      }
      var length = s3.length;
      if (length < 9) {
        return false;
      }
      if (s3.charCodeAt(length - 1) !== 95 || s3.charCodeAt(length - 2) !== 95 || s3.charCodeAt(length - 3) !== 111 || s3.charCodeAt(length - 4) !== 116 || s3.charCodeAt(length - 5) !== 111 || s3.charCodeAt(length - 6) !== 114 || s3.charCodeAt(length - 7) !== 112 || s3.charCodeAt(length - 8) !== 95 || s3.charCodeAt(length - 9) !== 95) {
        return false;
      }
      for (var i3 = length - 10; i3 >= 0; i3--) {
        if (s3.charCodeAt(i3) !== 36) {
          return false;
        }
      }
      return true;
    }
    __name(isProtoString, "isProtoString");
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    __name(compareByOriginalPositions, "compareByOriginalPositions");
    exports2.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    __name(compareByGeneratedPositionsDeflated, "compareByGeneratedPositionsDeflated");
    exports2.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 === null) {
        return 1;
      }
      if (aStr2 === null) {
        return -1;
      }
      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }
    __name(strcmp, "strcmp");
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    __name(compareByGeneratedPositionsInflated, "compareByGeneratedPositionsInflated");
    exports2.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
    }
    __name(parseSourceMapInput, "parseSourceMapInput");
    exports2.parseSourceMapInput = parseSourceMapInput;
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      sourceURL = sourceURL || "";
      if (sourceRoot) {
        if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
          sourceRoot += "/";
        }
        sourceURL = sourceRoot + sourceURL;
      }
      if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
          throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
          var index2 = parsed.path.lastIndexOf("/");
          if (index2 >= 0) {
            parsed.path = parsed.path.substring(0, index2 + 1);
          }
        }
        sourceURL = join9(urlGenerate(parsed), sourceURL);
      }
      return normalize4(sourceURL);
    }
    __name(computeSourceURL, "computeSourceURL");
    exports2.computeSourceURL = computeSourceURL;
  }
});

// node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({
  "node_modules/source-map/lib/array-set.js"(exports2) {
    "use strict";
    var util3 = require_util8();
    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== "undefined";
    function ArraySet() {
      this._array = [];
      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
    }
    __name(ArraySet, "ArraySet");
    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set2 = new ArraySet();
      for (var i3 = 0, len = aArray.length; i3 < len; i3++) {
        set2.add(aArray[i3], aAllowDuplicates);
      }
      return set2;
    }, "ArraySet_fromArray");
    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    }, "ArraySet_size");
    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util3.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    }, "ArraySet_add");
    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util3.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    }, "ArraySet_has");
    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util3.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('"' + aStr + '" is not in the set.');
    }, "ArraySet_indexOf");
    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error("No element indexed by " + aIdx);
    }, "ArraySet_at");
    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {
      return this._array.slice();
    }, "ArraySet_toArray");
    exports2.ArraySet = ArraySet;
  }
});

// node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({
  "node_modules/source-map/lib/mapping-list.js"(exports2) {
    "use strict";
    var util3 = require_util8();
    function generatedPositionAfter(mappingA, mappingB) {
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util3.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    __name(generatedPositionAfter, "generatedPositionAfter");
    function MappingList() {
      this._array = [];
      this._sorted = true;
      this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    __name(MappingList, "MappingList");
    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    }, "MappingList_forEach");
    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    }, "MappingList_add");
    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util3.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    }, "MappingList_toArray");
    exports2.MappingList = MappingList;
  }
});

// node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({
  "node_modules/source-map/lib/source-map-generator.js"(exports2) {
    "use strict";
    var base64VLQ = require_base64_vlq();
    var util3 = require_util8();
    var ArraySet = require_array_set().ArraySet;
    var MappingList = require_mapping_list().MappingList;
    function SourceMapGenerator(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util3.getArg(aArgs, "file", null);
      this._sourceRoot = util3.getArg(aArgs, "sourceRoot", null);
      this._skipValidation = util3.getArg(aArgs, "skipValidation", false);
      this._sources = new ArraySet();
      this._names = new ArraySet();
      this._mappings = new MappingList();
      this._sourcesContents = null;
    }
    __name(SourceMapGenerator, "SourceMapGenerator");
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util3.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util3.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    }, "SourceMapGenerator_fromSourceMap");
    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {
      var generated = util3.getArg(aArgs, "generated");
      var original = util3.getArg(aArgs, "original", null);
      var source = util3.getArg(aArgs, "source", null);
      var name2 = util3.getArg(aArgs, "name", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name2);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name2 != null) {
        name2 = String(name2);
        if (!this._names.has(name2)) {
          this._names.add(name2);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name: name2
      });
    }, "SourceMapGenerator_addMapping");
    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util3.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = /* @__PURE__ */ Object.create(null);
        }
        this._sourcesContents[util3.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util3.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    }, "SourceMapGenerator_setSourceContent");
    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util3.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet();
      var newNames = new ArraySet();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util3.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util3.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name2 = mapping.name;
        if (name2 != null && !newNames.has(name2)) {
          newNames.add(name2);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util3.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util3.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    }, "SourceMapGenerator_applySourceMap");
    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error(
          "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
        );
      }
      if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    }, "SourceMapGenerator_validateMapping");
    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = "";
      var next2;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i3 = 0, len = mappings.length; i3 < len; i3++) {
        mapping = mappings[i3];
        next2 = "";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next2 += ";";
            previousGeneratedLine++;
          }
        } else {
          if (i3 > 0) {
            if (!util3.compareByGeneratedPositionsInflated(mapping, mappings[i3 - 1])) {
              continue;
            }
            next2 += ",";
          }
        }
        next2 += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next2 += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next2 += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next2 += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next2 += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result += next2;
      }
      return result;
    }, "SourceMapGenerator_serializeMappings");
    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util3.relative(aSourceRoot, source);
        }
        var key = util3.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    }, "SourceMapGenerator_generateSourcesContent");
    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }
      return map;
    }, "SourceMapGenerator_toJSON");
    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    }, "SourceMapGenerator_toString");
    exports2.SourceMapGenerator = SourceMapGenerator;
  }
});

// node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS({
  "node_modules/source-map/lib/binary-search.js"(exports2) {
    "use strict";
    exports2.GREATEST_LOWER_BOUND = 1;
    exports2.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        return mid;
      } else if (cmp > 0) {
        if (aHigh - mid > 1) {
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports2.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      } else {
        if (mid - aLow > 1) {
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports2.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }
    __name(recursiveSearch, "recursiveSearch");
    exports2.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }
      var index2 = recursiveSearch(
        -1,
        aHaystack.length,
        aNeedle,
        aHaystack,
        aCompare,
        aBias || exports2.GREATEST_LOWER_BOUND
      );
      if (index2 < 0) {
        return -1;
      }
      while (index2 - 1 >= 0) {
        if (aCompare(aHaystack[index2], aHaystack[index2 - 1], true) !== 0) {
          break;
        }
        --index2;
      }
      return index2;
    }, "search");
  }
});

// node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS({
  "node_modules/source-map/lib/quick-sort.js"(exports2) {
    "use strict";
    function swap(ary, x3, y3) {
      var temp = ary[x3];
      ary[x3] = ary[y3];
      ary[y3] = temp;
    }
    __name(swap, "swap");
    function randomIntInRange(low, high) {
      return Math.round(low + Math.random() * (high - low));
    }
    __name(randomIntInRange, "randomIntInRange");
    function doQuickSort(ary, comparator, p3, r3) {
      if (p3 < r3) {
        var pivotIndex = randomIntInRange(p3, r3);
        var i3 = p3 - 1;
        swap(ary, pivotIndex, r3);
        var pivot = ary[r3];
        for (var j3 = p3; j3 < r3; j3++) {
          if (comparator(ary[j3], pivot) <= 0) {
            i3 += 1;
            swap(ary, i3, j3);
          }
        }
        swap(ary, i3 + 1, j3);
        var q2 = i3 + 1;
        doQuickSort(ary, comparator, p3, q2 - 1);
        doQuickSort(ary, comparator, q2 + 1, r3);
      }
    }
    __name(doQuickSort, "doQuickSort");
    exports2.quickSort = function(ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };
  }
});

// node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS({
  "node_modules/source-map/lib/source-map-consumer.js"(exports2) {
    "use strict";
    var util3 = require_util8();
    var binarySearch = require_binary_search();
    var ArraySet = require_array_set().ArraySet;
    var base64VLQ = require_base64_vlq();
    var quickSort = require_quick_sort().quickSort;
    function SourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util3.parseSourceMapInput(aSourceMap);
      }
      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
    }
    __name(SourceMapConsumer, "SourceMapConsumer");
    SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
      configurable: true,
      enumerable: true,
      get: /* @__PURE__ */ __name(function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }, "get")
    });
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
      configurable: true,
      enumerable: true,
      get: /* @__PURE__ */ __name(function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }, "get")
    });
    SourceMapConsumer.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index2) {
      var c3 = aStr.charAt(index2);
      return c3 === ";" || c3 === ",";
    }, "SourceMapConsumer_charIsMappingSeparator");
    SourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    }, "SourceMapConsumer_parseMappings");
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util3.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    }, "SourceMapConsumer_eachMapping");
    SourceMapConsumer.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util3.getArg(aArgs, "line");
      var needle = {
        source: util3.getArg(aArgs, "source"),
        originalLine: line,
        originalColumn: util3.getArg(aArgs, "column", 0)
      };
      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }
      var mappings = [];
      var index2 = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util3.compareByOriginalPositions,
        binarySearch.LEAST_UPPER_BOUND
      );
      if (index2 >= 0) {
        var mapping = this._originalMappings[index2];
        if (aArgs.column === void 0) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util3.getArg(mapping, "generatedLine", null),
              column: util3.getArg(mapping, "generatedColumn", null),
              lastColumn: util3.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index2];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util3.getArg(mapping, "generatedLine", null),
              column: util3.getArg(mapping, "generatedColumn", null),
              lastColumn: util3.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index2];
          }
        }
      }
      return mappings;
    }, "SourceMapConsumer_allGeneratedPositionsFor");
    exports2.SourceMapConsumer = SourceMapConsumer;
    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util3.parseSourceMapInput(aSourceMap);
      }
      var version3 = util3.getArg(sourceMap, "version");
      var sources = util3.getArg(sourceMap, "sources");
      var names = util3.getArg(sourceMap, "names", []);
      var sourceRoot = util3.getArg(sourceMap, "sourceRoot", null);
      var sourcesContent = util3.getArg(sourceMap, "sourcesContent", null);
      var mappings = util3.getArg(sourceMap, "mappings");
      var file = util3.getArg(sourceMap, "file", null);
      if (version3 != this._version) {
        throw new Error("Unsupported version: " + version3);
      }
      if (sourceRoot) {
        sourceRoot = util3.normalize(sourceRoot);
      }
      sources = sources.map(String).map(util3.normalize).map(function(source) {
        return sourceRoot && util3.isAbsolute(sourceRoot) && util3.isAbsolute(source) ? util3.relative(sourceRoot, source) : source;
      });
      this._names = ArraySet.fromArray(names.map(String), true);
      this._sources = ArraySet.fromArray(sources, true);
      this._absoluteSources = this._sources.toArray().map(function(s3) {
        return util3.computeSourceURL(sourceRoot, s3, aSourceMapURL);
      });
      this.sourceRoot = sourceRoot;
      this.sourcesContent = sourcesContent;
      this._mappings = mappings;
      this._sourceMapURL = aSourceMapURL;
      this.file = file;
    }
    __name(BasicSourceMapConsumer, "BasicSourceMapConsumer");
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util3.relative(this.sourceRoot, relativeSource);
      }
      if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
      }
      var i3;
      for (i3 = 0; i3 < this._absoluteSources.length; ++i3) {
        if (this._absoluteSources[i3] == aSource) {
          return i3;
        }
      }
      return -1;
    };
    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);
      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(
        smc._sources.toArray(),
        smc.sourceRoot
      );
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function(s3) {
        return util3.computeSourceURL(smc.sourceRoot, s3, aSourceMapURL);
      });
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i3 = 0, length = generatedMappings.length; i3 < length; i3++) {
        var srcMapping = generatedMappings[i3];
        var destMapping = new Mapping();
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort(smc.__originalMappings, util3.compareByOriginalPositions);
      return smc;
    }, "SourceMapConsumer_fromSourceMap");
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
      get: /* @__PURE__ */ __name(function() {
        return this._absoluteSources.slice();
      }, "get")
    });
    function Mapping() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }
    __name(Mapping, "Mapping");
    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index2 = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;
      while (index2 < length) {
        if (aStr.charAt(index2) === ";") {
          generatedLine++;
          index2++;
          previousGeneratedColumn = 0;
        } else if (aStr.charAt(index2) === ",") {
          index2++;
        } else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;
          for (end = index2; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index2, end);
          segment = cachedSegments[str];
          if (segment) {
            index2 += str.length;
          } else {
            segment = [];
            while (index2 < end) {
              base64VLQ.decode(aStr, index2, temp);
              value = temp.value;
              index2 = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error("Found a source, but no line and column");
            }
            if (segment.length === 3) {
              throw new Error("Found a source and line, but no column");
            }
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === "number") {
            originalMappings.push(mapping);
          }
        }
      }
      quickSort(generatedMappings, util3.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;
      quickSort(originalMappings, util3.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    }, "SourceMapConsumer_parseMappings");
    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
      }
      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    }, "SourceMapConsumer_findMapping");
    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {
      for (var index2 = 0; index2 < this._generatedMappings.length; ++index2) {
        var mapping = this._generatedMappings[index2];
        if (index2 + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index2 + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    }, "SourceMapConsumer_computeColumnSpans");
    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util3.getArg(aArgs, "line"),
        generatedColumn: util3.getArg(aArgs, "column")
      };
      var index2 = this._findMapping(
        needle,
        this._generatedMappings,
        "generatedLine",
        "generatedColumn",
        util3.compareByGeneratedPositionsDeflated,
        util3.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
      );
      if (index2 >= 0) {
        var mapping = this._generatedMappings[index2];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util3.getArg(mapping, "source", null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util3.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name2 = util3.getArg(mapping, "name", null);
          if (name2 !== null) {
            name2 = this._names.at(name2);
          }
          return {
            source,
            line: util3.getArg(mapping, "originalLine", null),
            column: util3.getArg(mapping, "originalColumn", null),
            name: name2
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }, "SourceMapConsumer_originalPositionFor");
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    }, "BasicSourceMapConsumer_hasContentsOfAllSources");
    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      var index2 = this._findSourceIndex(aSource);
      if (index2 >= 0) {
        return this.sourcesContent[index2];
      }
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util3.relative(this.sourceRoot, relativeSource);
      }
      var url2;
      if (this.sourceRoot != null && (url2 = util3.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url2.scheme == "file" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url2.path || url2.path == "/") && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    }, "SourceMapConsumer_sourceContentFor");
    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util3.getArg(aArgs, "source");
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      var needle = {
        source,
        originalLine: util3.getArg(aArgs, "line"),
        originalColumn: util3.getArg(aArgs, "column")
      };
      var index2 = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util3.compareByOriginalPositions,
        util3.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
      );
      if (index2 >= 0) {
        var mapping = this._originalMappings[index2];
        if (mapping.source === needle.source) {
          return {
            line: util3.getArg(mapping, "generatedLine", null),
            column: util3.getArg(mapping, "generatedColumn", null),
            lastColumn: util3.getArg(mapping, "lastGeneratedColumn", null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }, "SourceMapConsumer_generatedPositionFor");
    exports2.BasicSourceMapConsumer = BasicSourceMapConsumer;
    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util3.parseSourceMapInput(aSourceMap);
      }
      var version3 = util3.getArg(sourceMap, "version");
      var sections = util3.getArg(sourceMap, "sections");
      if (version3 != this._version) {
        throw new Error("Unsupported version: " + version3);
      }
      this._sources = new ArraySet();
      this._names = new ArraySet();
      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function(s3) {
        if (s3.url) {
          throw new Error("Support for url field in sections not implemented.");
        }
        var offset = util3.getArg(s3, "offset");
        var offsetLine = util3.getArg(offset, "line");
        var offsetColumn = util3.getArg(offset, "column");
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
          throw new Error("Section offsets must be ordered and non-overlapping.");
        }
        lastOffset = offset;
        return {
          generatedOffset: {
            // The offset fields are 0-based, but we use 1-based indices when
            // encoding/decoding from VLQ.
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer(util3.getArg(s3, "map"), aSourceMapURL)
        };
      });
    }
    __name(IndexedSourceMapConsumer, "IndexedSourceMapConsumer");
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
      get: /* @__PURE__ */ __name(function() {
        var sources = [];
        for (var i3 = 0; i3 < this._sections.length; i3++) {
          for (var j3 = 0; j3 < this._sections[i3].consumer.sources.length; j3++) {
            sources.push(this._sections[i3].consumer.sources[j3]);
          }
        }
        return sources;
      }, "get")
    });
    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util3.getArg(aArgs, "line"),
        generatedColumn: util3.getArg(aArgs, "column")
      };
      var sectionIndex = binarySearch.search(
        needle,
        this._sections,
        function(needle2, section2) {
          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
          if (cmp) {
            return cmp;
          }
          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
        }
      );
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    }, "IndexedSourceMapConsumer_originalPositionFor");
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function(s3) {
        return s3.consumer.hasContentsOfAllSources();
      });
    }, "IndexedSourceMapConsumer_hasContentsOfAllSources");
    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i3 = 0; i3 < this._sections.length; i3++) {
        var section = this._sections[i3];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    }, "IndexedSourceMapConsumer_sourceContentFor");
    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i3 = 0; i3 < this._sections.length; i3++) {
        var section = this._sections[i3];
        if (section.consumer._findSourceIndex(util3.getArg(aArgs, "source")) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    }, "IndexedSourceMapConsumer_generatedPositionFor");
    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i3 = 0; i3 < this._sections.length; i3++) {
        var section = this._sections[i3];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j3 = 0; j3 < sectionMappings.length; j3++) {
          var mapping = sectionMappings[j3];
          var source = section.consumer._sources.at(mapping.source);
          source = util3.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name2 = null;
          if (mapping.name) {
            name2 = section.consumer._names.at(mapping.name);
            this._names.add(name2);
            name2 = this._names.indexOf(name2);
          }
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: name2
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === "number") {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort(this.__generatedMappings, util3.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util3.compareByOriginalPositions);
    }, "IndexedSourceMapConsumer_parseMappings");
    exports2.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  }
});

// node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS({
  "node_modules/source-map/lib/source-node.js"(exports2) {
    "use strict";
    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    var util3 = require_util8();
    var REGEX_NEWLINE = /(\r?\n)/;
    var NEWLINE_CODE = 10;
    var isSourceNode = "$$$isSourceNode$$$";
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [];
      this.sourceContents = {};
      this.line = aLine == null ? null : aLine;
      this.column = aColumn == null ? null : aColumn;
      this.source = aSource == null ? null : aSource;
      this.name = aName == null ? null : aName;
      this[isSourceNode] = true;
      if (aChunks != null) this.add(aChunks);
    }
    __name(SourceNode, "SourceNode");
    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node = new SourceNode();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var remainingLinesIndex = 0;
      var shiftNextLine = /* @__PURE__ */ __name(function() {
        var lineContents = getNextLine();
        var newLine = getNextLine() || "";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
        __name(getNextLine, "getNextLine");
      }, "shiftNextLine");
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node.add(remainingLines.splice(remainingLinesIndex).join(""));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util3.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });
      return node;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0) {
          node.add(code);
        } else {
          var source = aRelativePath ? util3.join(aRelativePath, mapping.source) : mapping.source;
          node.add(new SourceNode(
            mapping.originalLine,
            mapping.originalColumn,
            source,
            code,
            mapping.name
          ));
        }
      }
      __name(addMappingWithCode, "addMappingWithCode");
    }, "SourceNode_fromStringWithSourceMap");
    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      }
      return this;
    }, "SourceNode_add");
    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i3 = aChunk.length - 1; i3 >= 0; i3--) {
          this.prepend(aChunk[i3]);
        }
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      }
      return this;
    }, "SourceNode_prepend");
    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {
      var chunk;
      for (var i3 = 0, len = this.children.length; i3 < len; i3++) {
        chunk = this.children[i3];
        if (chunk[isSourceNode]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== "") {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    }, "SourceNode_walk");
    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {
      var newChildren;
      var i3;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i3 = 0; i3 < len - 1; i3++) {
          newChildren.push(this.children[i3]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i3]);
        this.children = newChildren;
      }
      return this;
    }, "SourceNode_join");
    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === "string") {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push("".replace(aPattern, aReplacement));
      }
      return this;
    }, "SourceNode_replaceRight");
    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util3.toSetString(aSourceFile)] = aSourceContent;
    }, "SourceNode_setSourceContent");
    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {
      for (var i3 = 0, len = this.children.length; i3 < len; i3++) {
        if (this.children[i3][isSourceNode]) {
          this.children[i3].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i3 = 0, len = sources.length; i3 < len; i3++) {
        aFn(util3.fromSetString(sources[i3]), this.sourceContents[sources[i3]]);
      }
    }, "SourceNode_walkSourceContents");
    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {
      var str = "";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    }, "SourceNode_toString");
    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map = new SourceMapGenerator(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length = chunk.length; idx < length; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
      });
      return { code: generated.code, map };
    }, "SourceNode_toStringWithSourceMap");
    exports2.SourceNode = SourceNode;
  }
});

// node_modules/source-map/source-map.js
var require_source_map = __commonJS({
  "node_modules/source-map/source-map.js"(exports2) {
    "use strict";
    exports2.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    exports2.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
    exports2.SourceNode = require_source_node().SourceNode;
  }
});

// node_modules/buffer-from/index.js
var require_buffer_from = __commonJS({
  "node_modules/buffer-from/index.js"(exports2, module) {
    "use strict";
    var toString4 = Object.prototype.toString;
    var isModern = typeof Buffer !== "undefined" && typeof Buffer.alloc === "function" && typeof Buffer.allocUnsafe === "function" && typeof Buffer.from === "function";
    function isArrayBuffer2(input) {
      return toString4.call(input).slice(8, -1) === "ArrayBuffer";
    }
    __name(isArrayBuffer2, "isArrayBuffer");
    function fromArrayBuffer(obj, byteOffset, length) {
      byteOffset >>>= 0;
      var maxLength = obj.byteLength - byteOffset;
      if (maxLength < 0) {
        throw new RangeError("'offset' is out of bounds");
      }
      if (length === void 0) {
        length = maxLength;
      } else {
        length >>>= 0;
        if (length > maxLength) {
          throw new RangeError("'length' is out of bounds");
        }
      }
      return isModern ? Buffer.from(obj.slice(byteOffset, byteOffset + length)) : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)));
    }
    __name(fromArrayBuffer, "fromArrayBuffer");
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding');
      }
      return isModern ? Buffer.from(string, encoding) : new Buffer(string, encoding);
    }
    __name(fromString, "fromString");
    function bufferFrom(value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('"value" argument must not be a number');
      }
      if (isArrayBuffer2(value)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      return isModern ? Buffer.from(value) : new Buffer(value);
    }
    __name(bufferFrom, "bufferFrom");
    module.exports = bufferFrom;
  }
});

// node_modules/source-map-support/source-map-support.js
var require_source_map_support = __commonJS({
  "node_modules/source-map-support/source-map-support.js"(exports2, module) {
    "use strict";
    var SourceMapConsumer = require_source_map().SourceMapConsumer;
    var path14 = __require("path");
    var fs4;
    try {
      fs4 = __require("fs");
      if (!fs4.existsSync || !fs4.readFileSync) {
        fs4 = null;
      }
    } catch (err) {
    }
    var bufferFrom = require_buffer_from();
    function dynamicRequire(mod, request3) {
      return mod.require(request3);
    }
    __name(dynamicRequire, "dynamicRequire");
    var errorFormatterInstalled = false;
    var uncaughtShimInstalled = false;
    var emptyCacheBetweenOperations = false;
    var environment = "auto";
    var fileContentsCache = {};
    var sourceMapCache = {};
    var reSourceMap = /^data:application\/json[^,]+base64,/;
    var retrieveFileHandlers = [];
    var retrieveMapHandlers = [];
    function isInBrowser() {
      if (environment === "browser")
        return true;
      if (environment === "node")
        return false;
      return typeof window !== "undefined" && typeof XMLHttpRequest === "function" && !(window.require && window.module && window.process && window.process.type === "renderer");
    }
    __name(isInBrowser, "isInBrowser");
    function hasGlobalProcessEventEmitter() {
      return typeof process === "object" && process !== null && typeof process.on === "function";
    }
    __name(hasGlobalProcessEventEmitter, "hasGlobalProcessEventEmitter");
    function globalProcessVersion() {
      if (typeof process === "object" && process !== null) {
        return process.version;
      } else {
        return "";
      }
    }
    __name(globalProcessVersion, "globalProcessVersion");
    function globalProcessStderr() {
      if (typeof process === "object" && process !== null) {
        return process.stderr;
      }
    }
    __name(globalProcessStderr, "globalProcessStderr");
    function globalProcessExit(code) {
      if (typeof process === "object" && process !== null && typeof process.exit === "function") {
        return process.exit(code);
      }
    }
    __name(globalProcessExit, "globalProcessExit");
    function handlerExec(list3) {
      return function(arg) {
        for (var i3 = 0; i3 < list3.length; i3++) {
          var ret = list3[i3](arg);
          if (ret) {
            return ret;
          }
        }
        return null;
      };
    }
    __name(handlerExec, "handlerExec");
    var retrieveFile = handlerExec(retrieveFileHandlers);
    retrieveFileHandlers.push(function(path15) {
      path15 = path15.trim();
      if (/^file:/.test(path15)) {
        path15 = path15.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
          return drive ? "" : (
            // file:///C:/dir/file -> C:/dir/file
            "/"
          );
        });
      }
      if (path15 in fileContentsCache) {
        return fileContentsCache[path15];
      }
      var contents = "";
      try {
        if (!fs4) {
          var xhr = new XMLHttpRequest();
          xhr.open(
            "GET",
            path15,
            /** async */
            false
          );
          xhr.send(null);
          if (xhr.readyState === 4 && xhr.status === 200) {
            contents = xhr.responseText;
          }
        } else if (fs4.existsSync(path15)) {
          contents = fs4.readFileSync(path15, "utf8");
        }
      } catch (er2) {
      }
      return fileContentsCache[path15] = contents;
    });
    function supportRelativeURL(file, url2) {
      if (!file) return url2;
      var dir = path14.dirname(file);
      var match3 = /^\w+:\/\/[^\/]*/.exec(dir);
      var protocol = match3 ? match3[0] : "";
      var startPath = dir.slice(protocol.length);
      if (protocol && /^\/\w\:/.test(startPath)) {
        protocol += "/";
        return protocol + path14.resolve(dir.slice(protocol.length), url2).replace(/\\/g, "/");
      }
      return protocol + path14.resolve(dir.slice(protocol.length), url2);
    }
    __name(supportRelativeURL, "supportRelativeURL");
    function retrieveSourceMapURL(source) {
      var fileData;
      if (isInBrowser()) {
        try {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", source, false);
          xhr.send(null);
          fileData = xhr.readyState === 4 ? xhr.responseText : null;
          var sourceMapHeader = xhr.getResponseHeader("SourceMap") || xhr.getResponseHeader("X-SourceMap");
          if (sourceMapHeader) {
            return sourceMapHeader;
          }
        } catch (e3) {
        }
      }
      fileData = retrieveFile(source);
      var re2 = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
      var lastMatch, match3;
      while (match3 = re2.exec(fileData)) lastMatch = match3;
      if (!lastMatch) return null;
      return lastMatch[1];
    }
    __name(retrieveSourceMapURL, "retrieveSourceMapURL");
    var retrieveSourceMap = handlerExec(retrieveMapHandlers);
    retrieveMapHandlers.push(function(source) {
      var sourceMappingURL = retrieveSourceMapURL(source);
      if (!sourceMappingURL) return null;
      var sourceMapData;
      if (reSourceMap.test(sourceMappingURL)) {
        var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1);
        sourceMapData = bufferFrom(rawData, "base64").toString();
        sourceMappingURL = source;
      } else {
        sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
        sourceMapData = retrieveFile(sourceMappingURL);
      }
      if (!sourceMapData) {
        return null;
      }
      return {
        url: sourceMappingURL,
        map: sourceMapData
      };
    });
    function mapSourcePosition(position2) {
      var sourceMap = sourceMapCache[position2.source];
      if (!sourceMap) {
        var urlAndMap = retrieveSourceMap(position2.source);
        if (urlAndMap) {
          sourceMap = sourceMapCache[position2.source] = {
            url: urlAndMap.url,
            map: new SourceMapConsumer(urlAndMap.map)
          };
          if (sourceMap.map.sourcesContent) {
            sourceMap.map.sources.forEach(function(source, i3) {
              var contents = sourceMap.map.sourcesContent[i3];
              if (contents) {
                var url2 = supportRelativeURL(sourceMap.url, source);
                fileContentsCache[url2] = contents;
              }
            });
          }
        } else {
          sourceMap = sourceMapCache[position2.source] = {
            url: null,
            map: null
          };
        }
      }
      if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === "function") {
        var originalPosition = sourceMap.map.originalPositionFor(position2);
        if (originalPosition.source !== null) {
          originalPosition.source = supportRelativeURL(
            sourceMap.url,
            originalPosition.source
          );
          return originalPosition;
        }
      }
      return position2;
    }
    __name(mapSourcePosition, "mapSourcePosition");
    function mapEvalOrigin(origin) {
      var match3 = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
      if (match3) {
        var position2 = mapSourcePosition({
          source: match3[2],
          line: +match3[3],
          column: match3[4] - 1
        });
        return "eval at " + match3[1] + " (" + position2.source + ":" + position2.line + ":" + (position2.column + 1) + ")";
      }
      match3 = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
      if (match3) {
        return "eval at " + match3[1] + " (" + mapEvalOrigin(match3[2]) + ")";
      }
      return origin;
    }
    __name(mapEvalOrigin, "mapEvalOrigin");
    function CallSiteToString() {
      var fileName;
      var fileLocation = "";
      if (this.isNative()) {
        fileLocation = "native";
      } else {
        fileName = this.getScriptNameOrSourceURL();
        if (!fileName && this.isEval()) {
          fileLocation = this.getEvalOrigin();
          fileLocation += ", ";
        }
        if (fileName) {
          fileLocation += fileName;
        } else {
          fileLocation += "<anonymous>";
        }
        var lineNumber = this.getLineNumber();
        if (lineNumber != null) {
          fileLocation += ":" + lineNumber;
          var columnNumber = this.getColumnNumber();
          if (columnNumber) {
            fileLocation += ":" + columnNumber;
          }
        }
      }
      var line = "";
      var functionName = this.getFunctionName();
      var addSuffix = true;
      var isConstructor2 = this.isConstructor();
      var isMethodCall = !(this.isToplevel() || isConstructor2);
      if (isMethodCall) {
        var typeName = this.getTypeName();
        if (typeName === "[object Object]") {
          typeName = "null";
        }
        var methodName = this.getMethodName();
        if (functionName) {
          if (typeName && functionName.indexOf(typeName) != 0) {
            line += typeName + ".";
          }
          line += functionName;
          if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
            line += " [as " + methodName + "]";
          }
        } else {
          line += typeName + "." + (methodName || "<anonymous>");
        }
      } else if (isConstructor2) {
        line += "new " + (functionName || "<anonymous>");
      } else if (functionName) {
        line += functionName;
      } else {
        line += fileLocation;
        addSuffix = false;
      }
      if (addSuffix) {
        line += " (" + fileLocation + ")";
      }
      return line;
    }
    __name(CallSiteToString, "CallSiteToString");
    function cloneCallSite(frame) {
      var object = {};
      Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name2) {
        object[name2] = /^(?:is|get)/.test(name2) ? function() {
          return frame[name2].call(frame);
        } : frame[name2];
      });
      object.toString = CallSiteToString;
      return object;
    }
    __name(cloneCallSite, "cloneCallSite");
    function wrapCallSite(frame, state3) {
      if (state3 === void 0) {
        state3 = { nextPosition: null, curPosition: null };
      }
      if (frame.isNative()) {
        state3.curPosition = null;
        return frame;
      }
      var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
      if (source) {
        var line = frame.getLineNumber();
        var column = frame.getColumnNumber() - 1;
        var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
        var headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;
        if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
          column -= headerLength;
        }
        var position2 = mapSourcePosition({
          source,
          line,
          column
        });
        state3.curPosition = position2;
        frame = cloneCallSite(frame);
        var originalFunctionName = frame.getFunctionName;
        frame.getFunctionName = function() {
          if (state3.nextPosition == null) {
            return originalFunctionName();
          }
          return state3.nextPosition.name || originalFunctionName();
        };
        frame.getFileName = function() {
          return position2.source;
        };
        frame.getLineNumber = function() {
          return position2.line;
        };
        frame.getColumnNumber = function() {
          return position2.column + 1;
        };
        frame.getScriptNameOrSourceURL = function() {
          return position2.source;
        };
        return frame;
      }
      var origin = frame.isEval() && frame.getEvalOrigin();
      if (origin) {
        origin = mapEvalOrigin(origin);
        frame = cloneCallSite(frame);
        frame.getEvalOrigin = function() {
          return origin;
        };
        return frame;
      }
      return frame;
    }
    __name(wrapCallSite, "wrapCallSite");
    function prepareStackTrace(error, stack) {
      if (emptyCacheBetweenOperations) {
        fileContentsCache = {};
        sourceMapCache = {};
      }
      var name2 = error.name || "Error";
      var message = error.message || "";
      var errorString = name2 + ": " + message;
      var state3 = { nextPosition: null, curPosition: null };
      var processedStack = [];
      for (var i3 = stack.length - 1; i3 >= 0; i3--) {
        processedStack.push("\n    at " + wrapCallSite(stack[i3], state3));
        state3.nextPosition = state3.curPosition;
      }
      state3.curPosition = state3.nextPosition = null;
      return errorString + processedStack.reverse().join("");
    }
    __name(prepareStackTrace, "prepareStackTrace");
    function getErrorSource(error) {
      var match3 = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
      if (match3) {
        var source = match3[1];
        var line = +match3[2];
        var column = +match3[3];
        var contents = fileContentsCache[source];
        if (!contents && fs4 && fs4.existsSync(source)) {
          try {
            contents = fs4.readFileSync(source, "utf8");
          } catch (er2) {
            contents = "";
          }
        }
        if (contents) {
          var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
          if (code) {
            return source + ":" + line + "\n" + code + "\n" + new Array(column).join(" ") + "^";
          }
        }
      }
      return null;
    }
    __name(getErrorSource, "getErrorSource");
    function printErrorAndExit(error) {
      var source = getErrorSource(error);
      var stderr2 = globalProcessStderr();
      if (stderr2 && stderr2._handle && stderr2._handle.setBlocking) {
        stderr2._handle.setBlocking(true);
      }
      if (source) {
        console.error();
        console.error(source);
      }
      console.error(error.stack);
      globalProcessExit(1);
    }
    __name(printErrorAndExit, "printErrorAndExit");
    function shimEmitUncaughtException() {
      var origEmit = process.emit;
      process.emit = function(type2) {
        if (type2 === "uncaughtException") {
          var hasStack = arguments[1] && arguments[1].stack;
          var hasListeners = this.listeners(type2).length > 0;
          if (hasStack && !hasListeners) {
            return printErrorAndExit(arguments[1]);
          }
        }
        return origEmit.apply(this, arguments);
      };
    }
    __name(shimEmitUncaughtException, "shimEmitUncaughtException");
    var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
    var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);
    exports2.wrapCallSite = wrapCallSite;
    exports2.getErrorSource = getErrorSource;
    exports2.mapSourcePosition = mapSourcePosition;
    exports2.retrieveSourceMap = retrieveSourceMap;
    exports2.install = function(options) {
      options = options || {};
      if (options.environment) {
        environment = options.environment;
        if (["node", "browser", "auto"].indexOf(environment) === -1) {
          throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}");
        }
      }
      if (options.retrieveFile) {
        if (options.overrideRetrieveFile) {
          retrieveFileHandlers.length = 0;
        }
        retrieveFileHandlers.unshift(options.retrieveFile);
      }
      if (options.retrieveSourceMap) {
        if (options.overrideRetrieveSourceMap) {
          retrieveMapHandlers.length = 0;
        }
        retrieveMapHandlers.unshift(options.retrieveSourceMap);
      }
      if (options.hookRequire && !isInBrowser()) {
        var Module = dynamicRequire(module, "module");
        var $compile = Module.prototype._compile;
        if (!$compile.__sourceMapSupport) {
          Module.prototype._compile = function(content, filename) {
            fileContentsCache[filename] = content;
            sourceMapCache[filename] = void 0;
            return $compile.call(this, content, filename);
          };
          Module.prototype._compile.__sourceMapSupport = true;
        }
      }
      if (!emptyCacheBetweenOperations) {
        emptyCacheBetweenOperations = "emptyCacheBetweenOperations" in options ? options.emptyCacheBetweenOperations : false;
      }
      if (!errorFormatterInstalled) {
        errorFormatterInstalled = true;
        Error.prepareStackTrace = prepareStackTrace;
      }
      if (!uncaughtShimInstalled) {
        var installHandler = "handleUncaughtExceptions" in options ? options.handleUncaughtExceptions : true;
        try {
          var worker_threads = dynamicRequire(module, "worker_threads");
          if (worker_threads.isMainThread === false) {
            installHandler = false;
          }
        } catch (e3) {
        }
        if (installHandler && hasGlobalProcessEventEmitter()) {
          uncaughtShimInstalled = true;
          shimEmitUncaughtException();
        }
      }
    };
    exports2.resetRetrieveHandlers = function() {
      retrieveFileHandlers.length = 0;
      retrieveMapHandlers.length = 0;
      retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
      retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);
      retrieveSourceMap = handlerExec(retrieveMapHandlers);
      retrieveFile = handlerExec(retrieveFileHandlers);
    };
  }
});

// node_modules/semver/internal/constants.js
var require_constants6 = __commonJS({
  "node_modules/semver/internal/constants.js"(exports2, module) {
    "use strict";
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER2 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER: MAX_SAFE_INTEGER2,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports2, module) {
    "use strict";
    var debug3 = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module.exports = debug3;
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports2, module) {
    "use strict";
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants6();
    var debug3 = require_debug();
    exports2 = module.exports = {};
    var re2 = exports2.re = [];
    var safeRe = exports2.safeRe = [];
    var src = exports2.src = [];
    var safeSrc = exports2.safeSrc = [];
    var t3 = exports2.t = {};
    var R2 = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = /* @__PURE__ */ __name((value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    }, "makeSafeRegex");
    var createToken = /* @__PURE__ */ __name((name2, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index2 = R2++;
      debug3(name2, index2, value);
      t3[name2] = index2;
      src[index2] = value;
      safeSrc[index2] = safe;
      re2[index2] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index2] = new RegExp(safe, isGlobal ? "g" : void 0);
    }, "createToken");
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t3.NUMERICIDENTIFIER]})\\.(${src[t3.NUMERICIDENTIFIER]})\\.(${src[t3.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t3.NUMERICIDENTIFIERLOOSE]})\\.(${src[t3.NUMERICIDENTIFIERLOOSE]})\\.(${src[t3.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t3.NUMERICIDENTIFIER]}|${src[t3.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t3.NUMERICIDENTIFIERLOOSE]}|${src[t3.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t3.PRERELEASEIDENTIFIER]}(?:\\.${src[t3.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t3.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t3.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t3.BUILDIDENTIFIER]}(?:\\.${src[t3.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t3.MAINVERSION]}${src[t3.PRERELEASE]}?${src[t3.BUILD]}?`);
    createToken("FULL", `^${src[t3.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t3.MAINVERSIONLOOSE]}${src[t3.PRERELEASELOOSE]}?${src[t3.BUILD]}?`);
    createToken("LOOSE", `^${src[t3.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t3.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t3.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t3.XRANGEIDENTIFIER]})(?:\\.(${src[t3.XRANGEIDENTIFIER]})(?:\\.(${src[t3.XRANGEIDENTIFIER]})(?:${src[t3.PRERELEASE]})?${src[t3.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t3.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t3.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t3.XRANGEIDENTIFIERLOOSE]})(?:${src[t3.PRERELEASELOOSE]})?${src[t3.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t3.GTLT]}\\s*${src[t3.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t3.GTLT]}\\s*${src[t3.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
    createToken("COERCE", `${src[t3.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t3.COERCEPLAIN] + `(?:${src[t3.PRERELEASE]})?(?:${src[t3.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t3.COERCE], true);
    createToken("COERCERTLFULL", src[t3.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t3.LONETILDE]}\\s+`, true);
    exports2.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t3.LONETILDE]}${src[t3.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t3.LONETILDE]}${src[t3.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t3.LONECARET]}\\s+`, true);
    exports2.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t3.LONECARET]}${src[t3.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t3.LONECARET]}${src[t3.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t3.GTLT]}\\s*(${src[t3.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t3.GTLT]}\\s*(${src[t3.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t3.GTLT]}\\s*(${src[t3.LOOSEPLAIN]}|${src[t3.XRANGEPLAIN]})`, true);
    exports2.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t3.XRANGEPLAIN]})\\s+-\\s+(${src[t3.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t3.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t3.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports2, module) {
    "use strict";
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = /* @__PURE__ */ __name((options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    }, "parseOptions");
    module.exports = parseOptions;
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports2, module) {
    "use strict";
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = /* @__PURE__ */ __name((a3, b3) => {
      const anum = numeric.test(a3);
      const bnum = numeric.test(b3);
      if (anum && bnum) {
        a3 = +a3;
        b3 = +b3;
      }
      return a3 === b3 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a3 < b3 ? -1 : 1;
    }, "compareIdentifiers");
    var rcompareIdentifiers = /* @__PURE__ */ __name((a3, b3) => compareIdentifiers(b3, a3), "rcompareIdentifiers");
    module.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports2, module) {
    "use strict";
    var debug3 = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER2 } = require_constants6();
    var { safeRe: re2, safeSrc: src, t: t3 } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class _SemVer {
      static {
        __name(this, "SemVer");
      }
      constructor(version3, options) {
        options = parseOptions(options);
        if (version3 instanceof _SemVer) {
          if (version3.loose === !!options.loose && version3.includePrerelease === !!options.includePrerelease) {
            return version3;
          } else {
            version3 = version3.version;
          }
        } else if (typeof version3 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version3}".`);
        }
        if (version3.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug3("SemVer", version3, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m3 = version3.trim().match(options.loose ? re2[t3.LOOSE] : re2[t3.FULL]);
        if (!m3) {
          throw new TypeError(`Invalid Version: ${version3}`);
        }
        this.raw = version3;
        this.major = +m3[1];
        this.minor = +m3[2];
        this.patch = +m3[3];
        if (this.major > MAX_SAFE_INTEGER2 || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER2 || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER2 || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m3[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m3[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER2) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m3[5] ? m3[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug3("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof _SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new _SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i3 = 0;
        do {
          const a3 = this.prerelease[i3];
          const b3 = other.prerelease[i3];
          debug3("prerelease compare", i3, a3, b3);
          if (a3 === void 0 && b3 === void 0) {
            return 0;
          } else if (b3 === void 0) {
            return 1;
          } else if (a3 === void 0) {
            return -1;
          } else if (a3 === b3) {
            continue;
          } else {
            return compareIdentifiers(a3, b3);
          }
        } while (++i3);
      }
      compareBuild(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        let i3 = 0;
        do {
          const a3 = this.build[i3];
          const b3 = other.build[i3];
          debug3("build compare", i3, a3, b3);
          if (a3 === void 0 && b3 === void 0) {
            return 0;
          } else if (b3 === void 0) {
            return 1;
          } else if (a3 === void 0) {
            return -1;
          } else if (a3 === b3) {
            continue;
          } else {
            return compareIdentifiers(a3, b3);
          }
        } while (++i3);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release2, identifier, identifierBase) {
        if (release2.startsWith("pre")) {
          if (!identifier && identifierBase === false) {
            throw new Error("invalid increment argument: identifier is empty");
          }
          if (identifier) {
            const r3 = new RegExp(`^${this.options.loose ? src[t3.PRERELEASELOOSE] : src[t3.PRERELEASE]}$`);
            const match3 = `-${identifier}`.match(r3);
            if (!match3 || match3[1] !== identifier) {
              throw new Error(`invalid identifier: ${identifier}`);
            }
          }
        }
        switch (release2) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          // If the input is a non-prerelease version, this acts the same as
          // prepatch.
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "release":
            if (this.prerelease.length === 0) {
              throw new Error(`version ${this.raw} is not a prerelease`);
            }
            this.prerelease.length = 0;
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          // This probably shouldn't be used publicly.
          // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i3 = this.prerelease.length;
              while (--i3 >= 0) {
                if (typeof this.prerelease[i3] === "number") {
                  this.prerelease[i3]++;
                  i3 = -2;
                }
              }
              if (i3 === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release2}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module.exports = SemVer;
  }
});

// node_modules/semver/functions/parse.js
var require_parse2 = __commonJS({
  "node_modules/semver/functions/parse.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var parse3 = /* @__PURE__ */ __name((version3, options, throwErrors = false) => {
      if (version3 instanceof SemVer) {
        return version3;
      }
      try {
        return new SemVer(version3, options);
      } catch (er2) {
        if (!throwErrors) {
          return null;
        }
        throw er2;
      }
    }, "parse");
    module.exports = parse3;
  }
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports2, module) {
    "use strict";
    var parse3 = require_parse2();
    var valid = /* @__PURE__ */ __name((version3, options) => {
      const v3 = parse3(version3, options);
      return v3 ? v3.version : null;
    }, "valid");
    module.exports = valid;
  }
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports2, module) {
    "use strict";
    var parse3 = require_parse2();
    var clean = /* @__PURE__ */ __name((version3, options) => {
      const s3 = parse3(version3.trim().replace(/^[=v]+/, ""), options);
      return s3 ? s3.version : null;
    }, "clean");
    module.exports = clean;
  }
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var inc = /* @__PURE__ */ __name((version3, release2, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version3 instanceof SemVer ? version3.version : version3,
          options
        ).inc(release2, identifier, identifierBase).version;
      } catch (er2) {
        return null;
      }
    }, "inc");
    module.exports = inc;
  }
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports2, module) {
    "use strict";
    var parse3 = require_parse2();
    var diff = /* @__PURE__ */ __name((version1, version22) => {
      const v1 = parse3(version1, null, true);
      const v22 = parse3(version22, null, true);
      const comparison = v1.compare(v22);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v1 : v22;
      const lowVersion = v1Higher ? v22 : v1;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (lowVersion.compareMain(highVersion) === 0) {
          if (lowVersion.minor && !lowVersion.patch) {
            return "minor";
          }
          return "patch";
        }
      }
      const prefix2 = highHasPre ? "pre" : "";
      if (v1.major !== v22.major) {
        return prefix2 + "major";
      }
      if (v1.minor !== v22.minor) {
        return prefix2 + "minor";
      }
      if (v1.patch !== v22.patch) {
        return prefix2 + "patch";
      }
      return "prerelease";
    }, "diff");
    module.exports = diff;
  }
});

// node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var major = /* @__PURE__ */ __name((a3, loose) => new SemVer(a3, loose).major, "major");
    module.exports = major;
  }
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var minor = /* @__PURE__ */ __name((a3, loose) => new SemVer(a3, loose).minor, "minor");
    module.exports = minor;
  }
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var patch2 = /* @__PURE__ */ __name((a3, loose) => new SemVer(a3, loose).patch, "patch");
    module.exports = patch2;
  }
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports2, module) {
    "use strict";
    var parse3 = require_parse2();
    var prerelease = /* @__PURE__ */ __name((version3, options) => {
      const parsed = parse3(version3, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }, "prerelease");
    module.exports = prerelease;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var compare = /* @__PURE__ */ __name((a3, b3, loose) => new SemVer(a3, loose).compare(new SemVer(b3, loose)), "compare");
    module.exports = compare;
  }
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports2, module) {
    "use strict";
    var compare = require_compare();
    var rcompare = /* @__PURE__ */ __name((a3, b3, loose) => compare(b3, a3, loose), "rcompare");
    module.exports = rcompare;
  }
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports2, module) {
    "use strict";
    var compare = require_compare();
    var compareLoose = /* @__PURE__ */ __name((a3, b3) => compare(a3, b3, true), "compareLoose");
    module.exports = compareLoose;
  }
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var compareBuild = /* @__PURE__ */ __name((a3, b3, loose) => {
      const versionA = new SemVer(a3, loose);
      const versionB = new SemVer(b3, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    }, "compareBuild");
    module.exports = compareBuild;
  }
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports2, module) {
    "use strict";
    var compareBuild = require_compare_build();
    var sort = /* @__PURE__ */ __name((list3, loose) => list3.sort((a3, b3) => compareBuild(a3, b3, loose)), "sort");
    module.exports = sort;
  }
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports2, module) {
    "use strict";
    var compareBuild = require_compare_build();
    var rsort = /* @__PURE__ */ __name((list3, loose) => list3.sort((a3, b3) => compareBuild(b3, a3, loose)), "rsort");
    module.exports = rsort;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports2, module) {
    "use strict";
    var compare = require_compare();
    var gt2 = /* @__PURE__ */ __name((a3, b3, loose) => compare(a3, b3, loose) > 0, "gt");
    module.exports = gt2;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports2, module) {
    "use strict";
    var compare = require_compare();
    var lt2 = /* @__PURE__ */ __name((a3, b3, loose) => compare(a3, b3, loose) < 0, "lt");
    module.exports = lt2;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports2, module) {
    "use strict";
    var compare = require_compare();
    var eq = /* @__PURE__ */ __name((a3, b3, loose) => compare(a3, b3, loose) === 0, "eq");
    module.exports = eq;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports2, module) {
    "use strict";
    var compare = require_compare();
    var neq = /* @__PURE__ */ __name((a3, b3, loose) => compare(a3, b3, loose) !== 0, "neq");
    module.exports = neq;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports2, module) {
    "use strict";
    var compare = require_compare();
    var gte = /* @__PURE__ */ __name((a3, b3, loose) => compare(a3, b3, loose) >= 0, "gte");
    module.exports = gte;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports2, module) {
    "use strict";
    var compare = require_compare();
    var lte = /* @__PURE__ */ __name((a3, b3, loose) => compare(a3, b3, loose) <= 0, "lte");
    module.exports = lte;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports2, module) {
    "use strict";
    var eq = require_eq();
    var neq = require_neq();
    var gt2 = require_gt();
    var gte = require_gte();
    var lt2 = require_lt();
    var lte = require_lte();
    var cmp = /* @__PURE__ */ __name((a3, op, b3, loose) => {
      switch (op) {
        case "===":
          if (typeof a3 === "object") {
            a3 = a3.version;
          }
          if (typeof b3 === "object") {
            b3 = b3.version;
          }
          return a3 === b3;
        case "!==":
          if (typeof a3 === "object") {
            a3 = a3.version;
          }
          if (typeof b3 === "object") {
            b3 = b3.version;
          }
          return a3 !== b3;
        case "":
        case "=":
        case "==":
          return eq(a3, b3, loose);
        case "!=":
          return neq(a3, b3, loose);
        case ">":
          return gt2(a3, b3, loose);
        case ">=":
          return gte(a3, b3, loose);
        case "<":
          return lt2(a3, b3, loose);
        case "<=":
          return lte(a3, b3, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    }, "cmp");
    module.exports = cmp;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var parse3 = require_parse2();
    var { safeRe: re2, t: t3 } = require_re();
    var coerce2 = /* @__PURE__ */ __name((version3, options) => {
      if (version3 instanceof SemVer) {
        return version3;
      }
      if (typeof version3 === "number") {
        version3 = String(version3);
      }
      if (typeof version3 !== "string") {
        return null;
      }
      options = options || {};
      let match3 = null;
      if (!options.rtl) {
        match3 = version3.match(options.includePrerelease ? re2[t3.COERCEFULL] : re2[t3.COERCE]);
      } else {
        const coerceRtlRegex = options.includePrerelease ? re2[t3.COERCERTLFULL] : re2[t3.COERCERTL];
        let next2;
        while ((next2 = coerceRtlRegex.exec(version3)) && (!match3 || match3.index + match3[0].length !== version3.length)) {
          if (!match3 || next2.index + next2[0].length !== match3.index + match3[0].length) {
            match3 = next2;
          }
          coerceRtlRegex.lastIndex = next2.index + next2[1].length + next2[2].length;
        }
        coerceRtlRegex.lastIndex = -1;
      }
      if (match3 === null) {
        return null;
      }
      const major = match3[2];
      const minor = match3[3] || "0";
      const patch2 = match3[4] || "0";
      const prerelease = options.includePrerelease && match3[5] ? `-${match3[5]}` : "";
      const build = options.includePrerelease && match3[6] ? `+${match3[6]}` : "";
      return parse3(`${major}.${minor}.${patch2}${prerelease}${build}`, options);
    }, "coerce");
    module.exports = coerce2;
  }
});

// node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({
  "node_modules/semver/internal/lrucache.js"(exports2, module) {
    "use strict";
    var LRUCache = class {
      static {
        __name(this, "LRUCache");
      }
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value = this.map.get(key);
        if (value === void 0) {
          return void 0;
        } else {
          this.map.delete(key);
          this.map.set(key, value);
          return value;
        }
      }
      delete(key) {
        return this.map.delete(key);
      }
      set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key, value);
        }
        return this;
      }
    };
    module.exports = LRUCache;
  }
});

// node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/semver/classes/range.js"(exports2, module) {
    "use strict";
    var SPACE_CHARACTERS = /\s+/g;
    var Range4 = class _Range {
      static {
        __name(this, "Range");
      }
      constructor(range2, options) {
        options = parseOptions(options);
        if (range2 instanceof _Range) {
          if (range2.loose === !!options.loose && range2.includePrerelease === !!options.includePrerelease) {
            return range2;
          } else {
            return new _Range(range2.raw, options);
          }
        }
        if (range2 instanceof Comparator) {
          this.raw = range2.value;
          this.set = [[range2]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range2.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r3) => this.parseRange(r3.trim())).filter((c3) => c3.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c3) => !isNullSet(c3[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c3 of this.set) {
              if (c3.length === 1 && isAny(c3[0])) {
                this.set = [c3];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i3 = 0; i3 < this.set.length; i3++) {
            if (i3 > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i3];
            for (let k3 = 0; k3 < comps.length; k3++) {
              if (k3 > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k3].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range2) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range2;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr2 = loose ? re2[t3.HYPHENRANGELOOSE] : re2[t3.HYPHENRANGE];
        range2 = range2.replace(hr2, hyphenReplace(this.options.includePrerelease));
        debug3("hyphen replace", range2);
        range2 = range2.replace(re2[t3.COMPARATORTRIM], comparatorTrimReplace);
        debug3("comparator trim", range2);
        range2 = range2.replace(re2[t3.TILDETRIM], tildeTrimReplace);
        debug3("tilde trim", range2);
        range2 = range2.replace(re2[t3.CARETTRIM], caretTrimReplace);
        debug3("caret trim", range2);
        let rangeList = range2.split(" ").map((comp26) => parseComparator(comp26, this.options)).join(" ").split(/\s+/).map((comp26) => replaceGTE0(comp26, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp26) => {
            debug3("loose invalid filter", comp26, this.options);
            return !!comp26.match(re2[t3.COMPARATORLOOSE]);
          });
        }
        debug3("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp26) => new Comparator(comp26, this.options));
        for (const comp26 of comparators) {
          if (isNullSet(comp26)) {
            return [comp26];
          }
          rangeMap.set(comp26.value, comp26);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range2, options) {
        if (!(range2 instanceof _Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range2.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version3) {
        if (!version3) {
          return false;
        }
        if (typeof version3 === "string") {
          try {
            version3 = new SemVer(version3, this.options);
          } catch (er2) {
            return false;
          }
        }
        for (let i3 = 0; i3 < this.set.length; i3++) {
          if (testSet(this.set[i3], version3, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module.exports = Range4;
    var LRU = require_lrucache();
    var cache = new LRU();
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug3 = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re2,
      t: t3,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants6();
    var isNullSet = /* @__PURE__ */ __name((c3) => c3.value === "<0.0.0-0", "isNullSet");
    var isAny = /* @__PURE__ */ __name((c3) => c3.value === "", "isAny");
    var isSatisfiable = /* @__PURE__ */ __name((comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    }, "isSatisfiable");
    var parseComparator = /* @__PURE__ */ __name((comp26, options) => {
      debug3("comp", comp26, options);
      comp26 = replaceCarets(comp26, options);
      debug3("caret", comp26);
      comp26 = replaceTildes(comp26, options);
      debug3("tildes", comp26);
      comp26 = replaceXRanges(comp26, options);
      debug3("xrange", comp26);
      comp26 = replaceStars(comp26, options);
      debug3("stars", comp26);
      return comp26;
    }, "parseComparator");
    var isX = /* @__PURE__ */ __name((id) => !id || id.toLowerCase() === "x" || id === "*", "isX");
    var replaceTildes = /* @__PURE__ */ __name((comp26, options) => {
      return comp26.trim().split(/\s+/).map((c3) => replaceTilde(c3, options)).join(" ");
    }, "replaceTildes");
    var replaceTilde = /* @__PURE__ */ __name((comp26, options) => {
      const r3 = options.loose ? re2[t3.TILDELOOSE] : re2[t3.TILDE];
      return comp26.replace(r3, (_3, M2, m3, p3, pr2) => {
        debug3("tilde", comp26, _3, M2, m3, p3, pr2);
        let ret;
        if (isX(M2)) {
          ret = "";
        } else if (isX(m3)) {
          ret = `>=${M2}.0.0 <${+M2 + 1}.0.0-0`;
        } else if (isX(p3)) {
          ret = `>=${M2}.${m3}.0 <${M2}.${+m3 + 1}.0-0`;
        } else if (pr2) {
          debug3("replaceTilde pr", pr2);
          ret = `>=${M2}.${m3}.${p3}-${pr2} <${M2}.${+m3 + 1}.0-0`;
        } else {
          ret = `>=${M2}.${m3}.${p3} <${M2}.${+m3 + 1}.0-0`;
        }
        debug3("tilde return", ret);
        return ret;
      });
    }, "replaceTilde");
    var replaceCarets = /* @__PURE__ */ __name((comp26, options) => {
      return comp26.trim().split(/\s+/).map((c3) => replaceCaret(c3, options)).join(" ");
    }, "replaceCarets");
    var replaceCaret = /* @__PURE__ */ __name((comp26, options) => {
      debug3("caret", comp26, options);
      const r3 = options.loose ? re2[t3.CARETLOOSE] : re2[t3.CARET];
      const z3 = options.includePrerelease ? "-0" : "";
      return comp26.replace(r3, (_3, M2, m3, p3, pr2) => {
        debug3("caret", comp26, _3, M2, m3, p3, pr2);
        let ret;
        if (isX(M2)) {
          ret = "";
        } else if (isX(m3)) {
          ret = `>=${M2}.0.0${z3} <${+M2 + 1}.0.0-0`;
        } else if (isX(p3)) {
          if (M2 === "0") {
            ret = `>=${M2}.${m3}.0${z3} <${M2}.${+m3 + 1}.0-0`;
          } else {
            ret = `>=${M2}.${m3}.0${z3} <${+M2 + 1}.0.0-0`;
          }
        } else if (pr2) {
          debug3("replaceCaret pr", pr2);
          if (M2 === "0") {
            if (m3 === "0") {
              ret = `>=${M2}.${m3}.${p3}-${pr2} <${M2}.${m3}.${+p3 + 1}-0`;
            } else {
              ret = `>=${M2}.${m3}.${p3}-${pr2} <${M2}.${+m3 + 1}.0-0`;
            }
          } else {
            ret = `>=${M2}.${m3}.${p3}-${pr2} <${+M2 + 1}.0.0-0`;
          }
        } else {
          debug3("no pr");
          if (M2 === "0") {
            if (m3 === "0") {
              ret = `>=${M2}.${m3}.${p3}${z3} <${M2}.${m3}.${+p3 + 1}-0`;
            } else {
              ret = `>=${M2}.${m3}.${p3}${z3} <${M2}.${+m3 + 1}.0-0`;
            }
          } else {
            ret = `>=${M2}.${m3}.${p3} <${+M2 + 1}.0.0-0`;
          }
        }
        debug3("caret return", ret);
        return ret;
      });
    }, "replaceCaret");
    var replaceXRanges = /* @__PURE__ */ __name((comp26, options) => {
      debug3("replaceXRanges", comp26, options);
      return comp26.split(/\s+/).map((c3) => replaceXRange(c3, options)).join(" ");
    }, "replaceXRanges");
    var replaceXRange = /* @__PURE__ */ __name((comp26, options) => {
      comp26 = comp26.trim();
      const r3 = options.loose ? re2[t3.XRANGELOOSE] : re2[t3.XRANGE];
      return comp26.replace(r3, (ret, gtlt, M2, m3, p3, pr2) => {
        debug3("xRange", comp26, ret, gtlt, M2, m3, p3, pr2);
        const xM = isX(M2);
        const xm = xM || isX(m3);
        const xp = xm || isX(p3);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr2 = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m3 = 0;
          }
          p3 = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M2 = +M2 + 1;
              m3 = 0;
              p3 = 0;
            } else {
              m3 = +m3 + 1;
              p3 = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M2 = +M2 + 1;
            } else {
              m3 = +m3 + 1;
            }
          }
          if (gtlt === "<") {
            pr2 = "-0";
          }
          ret = `${gtlt + M2}.${m3}.${p3}${pr2}`;
        } else if (xm) {
          ret = `>=${M2}.0.0${pr2} <${+M2 + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M2}.${m3}.0${pr2} <${M2}.${+m3 + 1}.0-0`;
        }
        debug3("xRange return", ret);
        return ret;
      });
    }, "replaceXRange");
    var replaceStars = /* @__PURE__ */ __name((comp26, options) => {
      debug3("replaceStars", comp26, options);
      return comp26.trim().replace(re2[t3.STAR], "");
    }, "replaceStars");
    var replaceGTE0 = /* @__PURE__ */ __name((comp26, options) => {
      debug3("replaceGTE0", comp26, options);
      return comp26.trim().replace(re2[options.includePrerelease ? t3.GTE0PRE : t3.GTE0], "");
    }, "replaceGTE0");
    var hyphenReplace = /* @__PURE__ */ __name((incPr) => ($0, from, fM, fm, fp, fpr, fb, to2, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to2 = "";
      } else if (isX(tm)) {
        to2 = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to2 = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to2 = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to2 = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to2 = `<=${to2}`;
      }
      return `${from} ${to2}`.trim();
    }, "hyphenReplace");
    var testSet = /* @__PURE__ */ __name((set2, version3, options) => {
      for (let i3 = 0; i3 < set2.length; i3++) {
        if (!set2[i3].test(version3)) {
          return false;
        }
      }
      if (version3.prerelease.length && !options.includePrerelease) {
        for (let i3 = 0; i3 < set2.length; i3++) {
          debug3(set2[i3].semver);
          if (set2[i3].semver === Comparator.ANY) {
            continue;
          }
          if (set2[i3].semver.prerelease.length > 0) {
            const allowed = set2[i3].semver;
            if (allowed.major === version3.major && allowed.minor === version3.minor && allowed.patch === version3.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }, "testSet");
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports2, module) {
    "use strict";
    var ANY = Symbol("SemVer ANY");
    var Comparator = class _Comparator {
      static {
        __name(this, "Comparator");
      }
      static get ANY() {
        return ANY;
      }
      constructor(comp26, options) {
        options = parseOptions(options);
        if (comp26 instanceof _Comparator) {
          if (comp26.loose === !!options.loose) {
            return comp26;
          } else {
            comp26 = comp26.value;
          }
        }
        comp26 = comp26.trim().split(/\s+/).join(" ");
        debug3("comparator", comp26, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp26);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug3("comp", this);
      }
      parse(comp26) {
        const r3 = this.options.loose ? re2[t3.COMPARATORLOOSE] : re2[t3.COMPARATOR];
        const m3 = comp26.match(r3);
        if (!m3) {
          throw new TypeError(`Invalid comparator: ${comp26}`);
        }
        this.operator = m3[1] !== void 0 ? m3[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m3[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m3[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version3) {
        debug3("Comparator.test", version3, this.options.loose);
        if (this.semver === ANY || version3 === ANY) {
          return true;
        }
        if (typeof version3 === "string") {
          try {
            version3 = new SemVer(version3, this.options);
          } catch (er2) {
            return false;
          }
        }
        return cmp(version3, this.operator, this.semver, this.options);
      }
      intersects(comp26, options) {
        if (!(comp26 instanceof _Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range4(comp26.value, options).test(this.value);
        } else if (comp26.operator === "") {
          if (comp26.value === "") {
            return true;
          }
          return new Range4(this.value, options).test(comp26.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp26.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp26.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp26.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp26.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp26.semver.version && this.operator.includes("=") && comp26.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp26.semver, options) && this.operator.startsWith(">") && comp26.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp26.semver, options) && this.operator.startsWith("<") && comp26.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re2, t: t3 } = require_re();
    var cmp = require_cmp();
    var debug3 = require_debug();
    var SemVer = require_semver();
    var Range4 = require_range();
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports2, module) {
    "use strict";
    var Range4 = require_range();
    var satisfies2 = /* @__PURE__ */ __name((version3, range2, options) => {
      try {
        range2 = new Range4(range2, options);
      } catch (er2) {
        return false;
      }
      return range2.test(version3);
    }, "satisfies");
    module.exports = satisfies2;
  }
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports2, module) {
    "use strict";
    var Range4 = require_range();
    var toComparators = /* @__PURE__ */ __name((range2, options) => new Range4(range2, options).set.map((comp26) => comp26.map((c3) => c3.value).join(" ").trim().split(" ")), "toComparators");
    module.exports = toComparators;
  }
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var Range4 = require_range();
    var maxSatisfying = /* @__PURE__ */ __name((versions2, range2, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range4(range2, options);
      } catch (er2) {
        return null;
      }
      versions2.forEach((v3) => {
        if (rangeObj.test(v3)) {
          if (!max || maxSV.compare(v3) === -1) {
            max = v3;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }, "maxSatisfying");
    module.exports = maxSatisfying;
  }
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var Range4 = require_range();
    var minSatisfying = /* @__PURE__ */ __name((versions2, range2, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range4(range2, options);
      } catch (er2) {
        return null;
      }
      versions2.forEach((v3) => {
        if (rangeObj.test(v3)) {
          if (!min || minSV.compare(v3) === 1) {
            min = v3;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }, "minSatisfying");
    module.exports = minSatisfying;
  }
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var Range4 = require_range();
    var gt2 = require_gt();
    var minVersion = /* @__PURE__ */ __name((range2, loose) => {
      range2 = new Range4(range2, loose);
      let minver = new SemVer("0.0.0");
      if (range2.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range2.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i3 = 0; i3 < range2.set.length; ++i3) {
        const comparators = range2.set[i3];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            /* fallthrough */
            case "":
            case ">=":
              if (!setMin || gt2(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            /* istanbul ignore next */
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt2(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range2.test(minver)) {
        return minver;
      }
      return null;
    }, "minVersion");
    module.exports = minVersion;
  }
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports2, module) {
    "use strict";
    var Range4 = require_range();
    var validRange = /* @__PURE__ */ __name((range2, options) => {
      try {
        return new Range4(range2, options).range || "*";
      } catch (er2) {
        return null;
      }
    }, "validRange");
    module.exports = validRange;
  }
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports2, module) {
    "use strict";
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range4 = require_range();
    var satisfies2 = require_satisfies();
    var gt2 = require_gt();
    var lt2 = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = /* @__PURE__ */ __name((version3, range2, hilo, options) => {
      version3 = new SemVer(version3, options);
      range2 = new Range4(range2, options);
      let gtfn, ltefn, ltfn, comp26, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt2;
          ltefn = lte;
          ltfn = lt2;
          comp26 = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt2;
          ltefn = gte;
          ltfn = gt2;
          comp26 = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies2(version3, range2, options)) {
        return false;
      }
      for (let i3 = 0; i3 < range2.set.length; ++i3) {
        const comparators = range2.set[i3];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp26 || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp26) && ltefn(version3, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version3, low.semver)) {
          return false;
        }
      }
      return true;
    }, "outside");
    module.exports = outside;
  }
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports2, module) {
    "use strict";
    var outside = require_outside();
    var gtr = /* @__PURE__ */ __name((version3, range2, options) => outside(version3, range2, ">", options), "gtr");
    module.exports = gtr;
  }
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports2, module) {
    "use strict";
    var outside = require_outside();
    var ltr = /* @__PURE__ */ __name((version3, range2, options) => outside(version3, range2, "<", options), "ltr");
    module.exports = ltr;
  }
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports2, module) {
    "use strict";
    var Range4 = require_range();
    var intersects = /* @__PURE__ */ __name((r1, r22, options) => {
      r1 = new Range4(r1, options);
      r22 = new Range4(r22, options);
      return r1.intersects(r22, options);
    }, "intersects");
    module.exports = intersects;
  }
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports2, module) {
    "use strict";
    var satisfies2 = require_satisfies();
    var compare = require_compare();
    module.exports = (versions2, range2, options) => {
      const set2 = [];
      let first = null;
      let prev = null;
      const v3 = versions2.sort((a3, b3) => compare(a3, b3, options));
      for (const version3 of v3) {
        const included = satisfies2(version3, range2, options);
        if (included) {
          prev = version3;
          if (!first) {
            first = version3;
          }
        } else {
          if (prev) {
            set2.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set2.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set2) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v3[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v3[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range2.raw === "string" ? range2.raw : String(range2);
      return simplified.length < original.length ? simplified : range2;
    };
  }
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports2, module) {
    "use strict";
    var Range4 = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies2 = require_satisfies();
    var compare = require_compare();
    var subset = /* @__PURE__ */ __name((sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range4(sub, options);
      dom = new Range4(dom, options);
      let sawNonNull = false;
      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        if (sawNonNull) {
          return false;
        }
      }
      return true;
    }, "subset");
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = /* @__PURE__ */ __name((sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt2, lt2;
      for (const c3 of sub) {
        if (c3.operator === ">" || c3.operator === ">=") {
          gt2 = higherGT(gt2, c3, options);
        } else if (c3.operator === "<" || c3.operator === "<=") {
          lt2 = lowerLT(lt2, c3, options);
        } else {
          eqSet.add(c3.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt2 && lt2) {
        gtltComp = compare(gt2.semver, lt2.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt2.operator !== ">=" || lt2.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt2 && !satisfies2(eq, String(gt2), options)) {
          return null;
        }
        if (lt2 && !satisfies2(eq, String(lt2), options)) {
          return null;
        }
        for (const c3 of dom) {
          if (!satisfies2(eq, String(c3), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt2 && !options.includePrerelease && lt2.semver.prerelease.length ? lt2.semver : false;
      let needDomGTPre = gt2 && !options.includePrerelease && gt2.semver.prerelease.length ? gt2.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt2.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c3 of dom) {
        hasDomGT = hasDomGT || c3.operator === ">" || c3.operator === ">=";
        hasDomLT = hasDomLT || c3.operator === "<" || c3.operator === "<=";
        if (gt2) {
          if (needDomGTPre) {
            if (c3.semver.prerelease && c3.semver.prerelease.length && c3.semver.major === needDomGTPre.major && c3.semver.minor === needDomGTPre.minor && c3.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c3.operator === ">" || c3.operator === ">=") {
            higher = higherGT(gt2, c3, options);
            if (higher === c3 && higher !== gt2) {
              return false;
            }
          } else if (gt2.operator === ">=" && !satisfies2(gt2.semver, String(c3), options)) {
            return false;
          }
        }
        if (lt2) {
          if (needDomLTPre) {
            if (c3.semver.prerelease && c3.semver.prerelease.length && c3.semver.major === needDomLTPre.major && c3.semver.minor === needDomLTPre.minor && c3.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c3.operator === "<" || c3.operator === "<=") {
            lower = lowerLT(lt2, c3, options);
            if (lower === c3 && lower !== lt2) {
              return false;
            }
          } else if (lt2.operator === "<=" && !satisfies2(lt2.semver, String(c3), options)) {
            return false;
          }
        }
        if (!c3.operator && (lt2 || gt2) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt2 && hasDomLT && !lt2 && gtltComp !== 0) {
        return false;
      }
      if (lt2 && hasDomGT && !gt2 && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    }, "simpleSubset");
    var higherGT = /* @__PURE__ */ __name((a3, b3, options) => {
      if (!a3) {
        return b3;
      }
      const comp26 = compare(a3.semver, b3.semver, options);
      return comp26 > 0 ? a3 : comp26 < 0 ? b3 : b3.operator === ">" && a3.operator === ">=" ? b3 : a3;
    }, "higherGT");
    var lowerLT = /* @__PURE__ */ __name((a3, b3, options) => {
      if (!a3) {
        return b3;
      }
      const comp26 = compare(a3.semver, b3.semver, options);
      return comp26 < 0 ? a3 : comp26 > 0 ? b3 : b3.operator === "<" && a3.operator === "<=" ? b3 : a3;
    }, "lowerLT");
    module.exports = subset;
  }
});

// node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/semver/index.js"(exports2, module) {
    "use strict";
    var internalRe = require_re();
    var constants = require_constants6();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse3 = require_parse2();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch2 = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt2 = require_gt();
    var lt2 = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce2 = require_coerce();
    var Comparator = require_comparator();
    var Range4 = require_range();
    var satisfies2 = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module.exports = {
      parse: parse3,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch: patch2,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt: gt2,
      lt: lt2,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce: coerce2,
      Comparator,
      Range: Range4,
      satisfies: satisfies2,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// node_modules/@actions/tool-cache/lib/manifest.js
var require_manifest = __commonJS({
  "node_modules/@actions/tool-cache/lib/manifest.js"(exports2, module) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2._readLinuxVersionFile = exports2._getOsVersion = exports2._findMatch = void 0;
    var semver = __importStar(require_semver2());
    var core_1 = require_core();
    var os5 = __require("os");
    var cp = __require("child_process");
    var fs4 = __require("fs");
    function _findMatch(versionSpec, stable, candidates, archFilter) {
      return __awaiter6(this, void 0, void 0, function* () {
        const platFilter = os5.platform();
        let result;
        let match3;
        let file;
        for (const candidate of candidates) {
          const version3 = candidate.version;
          (0, core_1.debug)(`check ${version3} satisfies ${versionSpec}`);
          if (semver.satisfies(version3, versionSpec) && (!stable || candidate.stable === stable)) {
            file = candidate.files.find((item) => {
              (0, core_1.debug)(`${item.arch}===${archFilter} && ${item.platform}===${platFilter}`);
              let chk = item.arch === archFilter && item.platform === platFilter;
              if (chk && item.platform_version) {
                const osVersion = module.exports._getOsVersion();
                if (osVersion === item.platform_version) {
                  chk = true;
                } else {
                  chk = semver.satisfies(osVersion, item.platform_version);
                }
              }
              return chk;
            });
            if (file) {
              (0, core_1.debug)(`matched ${candidate.version}`);
              match3 = candidate;
              break;
            }
          }
        }
        if (match3 && file) {
          result = Object.assign({}, match3);
          result.files = [file];
        }
        return result;
      });
    }
    __name(_findMatch, "_findMatch");
    exports2._findMatch = _findMatch;
    function _getOsVersion() {
      const plat = os5.platform();
      let version3 = "";
      if (plat === "darwin") {
        version3 = cp.execSync("sw_vers -productVersion").toString();
      } else if (plat === "linux") {
        const lsbContents = module.exports._readLinuxVersionFile();
        if (lsbContents) {
          const lines = lsbContents.split("\n");
          for (const line of lines) {
            const parts = line.split("=");
            if (parts.length === 2 && (parts[0].trim() === "VERSION_ID" || parts[0].trim() === "DISTRIB_RELEASE")) {
              version3 = parts[1].trim().replace(/^"/, "").replace(/"$/, "");
              break;
            }
          }
        }
      }
      return version3;
    }
    __name(_getOsVersion, "_getOsVersion");
    exports2._getOsVersion = _getOsVersion;
    function _readLinuxVersionFile() {
      const lsbReleaseFile = "/etc/lsb-release";
      const osReleaseFile = "/etc/os-release";
      let contents = "";
      if (fs4.existsSync(lsbReleaseFile)) {
        contents = fs4.readFileSync(lsbReleaseFile).toString();
      } else if (fs4.existsSync(osReleaseFile)) {
        contents = fs4.readFileSync(osReleaseFile).toString();
      }
      return contents;
    }
    __name(_readLinuxVersionFile, "_readLinuxVersionFile");
    exports2._readLinuxVersionFile = _readLinuxVersionFile;
  }
});

// node_modules/@actions/tool-cache/lib/retry-helper.js
var require_retry_helper = __commonJS({
  "node_modules/@actions/tool-cache/lib/retry-helper.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RetryHelper = void 0;
    var core2 = __importStar(require_core());
    var RetryHelper = class {
      static {
        __name(this, "RetryHelper");
      }
      constructor(maxAttempts, minSeconds, maxSeconds) {
        if (maxAttempts < 1) {
          throw new Error("max attempts should be greater than or equal to 1");
        }
        this.maxAttempts = maxAttempts;
        this.minSeconds = Math.floor(minSeconds);
        this.maxSeconds = Math.floor(maxSeconds);
        if (this.minSeconds > this.maxSeconds) {
          throw new Error("min seconds should be less than or equal to max seconds");
        }
      }
      execute(action5, isRetryable) {
        return __awaiter6(this, void 0, void 0, function* () {
          let attempt = 1;
          while (attempt < this.maxAttempts) {
            try {
              return yield action5();
            } catch (err) {
              if (isRetryable && !isRetryable(err)) {
                throw err;
              }
              core2.info(err.message);
            }
            const seconds = this.getSleepAmount();
            core2.info(`Waiting ${seconds} seconds before trying again`);
            yield this.sleep(seconds);
            attempt++;
          }
          return yield action5();
        });
      }
      getSleepAmount() {
        return Math.floor(Math.random() * (this.maxSeconds - this.minSeconds + 1)) + this.minSeconds;
      }
      sleep(seconds) {
        return __awaiter6(this, void 0, void 0, function* () {
          return new Promise((resolve2) => setTimeout(resolve2, seconds * 1e3));
        });
      }
    };
    exports2.RetryHelper = RetryHelper;
  }
});

// node_modules/@actions/tool-cache/lib/tool-cache.js
var require_tool_cache = __commonJS({
  "node_modules/@actions/tool-cache/lib/tool-cache.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateVersions = exports2.isExplicitVersion = exports2.findFromManifest = exports2.getManifestFromRepo = exports2.findAllVersions = exports2.find = exports2.cacheFile = exports2.cacheDir = exports2.extractZip = exports2.extractXar = exports2.extractTar = exports2.extract7z = exports2.downloadTool = exports2.HTTPError = void 0;
    var core2 = __importStar(require_core());
    var io2 = __importStar(require_io());
    var crypto = __importStar(__require("crypto"));
    var fs4 = __importStar(__require("fs"));
    var mm = __importStar(require_manifest());
    var os5 = __importStar(__require("os"));
    var path14 = __importStar(__require("path"));
    var httpm = __importStar(require_lib());
    var semver = __importStar(require_semver2());
    var stream = __importStar(__require("stream"));
    var util3 = __importStar(__require("util"));
    var assert_1 = __require("assert");
    var exec_1 = require_exec();
    var retry_helper_1 = require_retry_helper();
    var HTTPError = class extends Error {
      static {
        __name(this, "HTTPError");
      }
      constructor(httpStatusCode) {
        super(`Unexpected HTTP response: ${httpStatusCode}`);
        this.httpStatusCode = httpStatusCode;
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports2.HTTPError = HTTPError;
    var IS_WINDOWS = process.platform === "win32";
    var IS_MAC = process.platform === "darwin";
    var userAgent = "actions/tool-cache";
    function downloadTool2(url2, dest, auth, headers) {
      return __awaiter6(this, void 0, void 0, function* () {
        dest = dest || path14.join(_getTempDirectory(), crypto.randomUUID());
        yield io2.mkdirP(path14.dirname(dest));
        core2.debug(`Downloading ${url2}`);
        core2.debug(`Destination ${dest}`);
        const maxAttempts = 3;
        const minSeconds = _getGlobal("TEST_DOWNLOAD_TOOL_RETRY_MIN_SECONDS", 10);
        const maxSeconds = _getGlobal("TEST_DOWNLOAD_TOOL_RETRY_MAX_SECONDS", 20);
        const retryHelper = new retry_helper_1.RetryHelper(maxAttempts, minSeconds, maxSeconds);
        return yield retryHelper.execute(() => __awaiter6(this, void 0, void 0, function* () {
          return yield downloadToolAttempt(url2, dest || "", auth, headers);
        }), (err) => {
          if (err instanceof HTTPError && err.httpStatusCode) {
            if (err.httpStatusCode < 500 && err.httpStatusCode !== 408 && err.httpStatusCode !== 429) {
              return false;
            }
          }
          return true;
        });
      });
    }
    __name(downloadTool2, "downloadTool");
    exports2.downloadTool = downloadTool2;
    function downloadToolAttempt(url2, dest, auth, headers) {
      return __awaiter6(this, void 0, void 0, function* () {
        if (fs4.existsSync(dest)) {
          throw new Error(`Destination file path ${dest} already exists`);
        }
        const http2 = new httpm.HttpClient(userAgent, [], {
          allowRetries: false
        });
        if (auth) {
          core2.debug("set auth");
          if (headers === void 0) {
            headers = {};
          }
          headers.authorization = auth;
        }
        const response = yield http2.get(url2, headers);
        if (response.message.statusCode !== 200) {
          const err = new HTTPError(response.message.statusCode);
          core2.debug(`Failed to download from "${url2}". Code(${response.message.statusCode}) Message(${response.message.statusMessage})`);
          throw err;
        }
        const pipeline = util3.promisify(stream.pipeline);
        const responseMessageFactory = _getGlobal("TEST_DOWNLOAD_TOOL_RESPONSE_MESSAGE_FACTORY", () => response.message);
        const readStream = responseMessageFactory();
        let succeeded = false;
        try {
          yield pipeline(readStream, fs4.createWriteStream(dest));
          core2.debug("download complete");
          succeeded = true;
          return dest;
        } finally {
          if (!succeeded) {
            core2.debug("download failed");
            try {
              yield io2.rmRF(dest);
            } catch (err) {
              core2.debug(`Failed to delete '${dest}'. ${err.message}`);
            }
          }
        }
      });
    }
    __name(downloadToolAttempt, "downloadToolAttempt");
    function extract7z(file, dest, _7zPath) {
      return __awaiter6(this, void 0, void 0, function* () {
        (0, assert_1.ok)(IS_WINDOWS, "extract7z() not supported on current OS");
        (0, assert_1.ok)(file, 'parameter "file" is required');
        dest = yield _createExtractFolder(dest);
        const originalCwd = process.cwd();
        process.chdir(dest);
        if (_7zPath) {
          try {
            const logLevel = core2.isDebug() ? "-bb1" : "-bb0";
            const args = [
              "x",
              logLevel,
              "-bd",
              "-sccUTF-8",
              file
            ];
            const options = {
              silent: true
            };
            yield (0, exec_1.exec)(`"${_7zPath}"`, args, options);
          } finally {
            process.chdir(originalCwd);
          }
        } else {
          const escapedScript = path14.join(__dirname, "..", "scripts", "Invoke-7zdec.ps1").replace(/'/g, "''").replace(/"|\n|\r/g, "");
          const escapedFile = file.replace(/'/g, "''").replace(/"|\n|\r/g, "");
          const escapedTarget = dest.replace(/'/g, "''").replace(/"|\n|\r/g, "");
          const command = `& '${escapedScript}' -Source '${escapedFile}' -Target '${escapedTarget}'`;
          const args = [
            "-NoLogo",
            "-Sta",
            "-NoProfile",
            "-NonInteractive",
            "-ExecutionPolicy",
            "Unrestricted",
            "-Command",
            command
          ];
          const options = {
            silent: true
          };
          try {
            const powershellPath = yield io2.which("powershell", true);
            yield (0, exec_1.exec)(`"${powershellPath}"`, args, options);
          } finally {
            process.chdir(originalCwd);
          }
        }
        return dest;
      });
    }
    __name(extract7z, "extract7z");
    exports2.extract7z = extract7z;
    function extractTar2(file, dest, flags = "xz") {
      return __awaiter6(this, void 0, void 0, function* () {
        if (!file) {
          throw new Error("parameter 'file' is required");
        }
        dest = yield _createExtractFolder(dest);
        core2.debug("Checking tar --version");
        let versionOutput = "";
        yield (0, exec_1.exec)("tar --version", [], {
          ignoreReturnCode: true,
          silent: true,
          listeners: {
            stdout: /* @__PURE__ */ __name((data) => versionOutput += data.toString(), "stdout"),
            stderr: /* @__PURE__ */ __name((data) => versionOutput += data.toString(), "stderr")
          }
        });
        core2.debug(versionOutput.trim());
        const isGnuTar = versionOutput.toUpperCase().includes("GNU TAR");
        let args;
        if (flags instanceof Array) {
          args = flags;
        } else {
          args = [flags];
        }
        if (core2.isDebug() && !flags.includes("v")) {
          args.push("-v");
        }
        let destArg = dest;
        let fileArg = file;
        if (IS_WINDOWS && isGnuTar) {
          args.push("--force-local");
          destArg = dest.replace(/\\/g, "/");
          fileArg = file.replace(/\\/g, "/");
        }
        if (isGnuTar) {
          args.push("--warning=no-unknown-keyword");
          args.push("--overwrite");
        }
        args.push("-C", destArg, "-f", fileArg);
        yield (0, exec_1.exec)(`tar`, args);
        return dest;
      });
    }
    __name(extractTar2, "extractTar");
    exports2.extractTar = extractTar2;
    function extractXar(file, dest, flags = []) {
      return __awaiter6(this, void 0, void 0, function* () {
        (0, assert_1.ok)(IS_MAC, "extractXar() not supported on current OS");
        (0, assert_1.ok)(file, 'parameter "file" is required');
        dest = yield _createExtractFolder(dest);
        let args;
        if (flags instanceof Array) {
          args = flags;
        } else {
          args = [flags];
        }
        args.push("-x", "-C", dest, "-f", file);
        if (core2.isDebug()) {
          args.push("-v");
        }
        const xarPath = yield io2.which("xar", true);
        yield (0, exec_1.exec)(`"${xarPath}"`, _unique(args));
        return dest;
      });
    }
    __name(extractXar, "extractXar");
    exports2.extractXar = extractXar;
    function extractZip2(file, dest) {
      return __awaiter6(this, void 0, void 0, function* () {
        if (!file) {
          throw new Error("parameter 'file' is required");
        }
        dest = yield _createExtractFolder(dest);
        if (IS_WINDOWS) {
          yield extractZipWin(file, dest);
        } else {
          yield extractZipNix(file, dest);
        }
        return dest;
      });
    }
    __name(extractZip2, "extractZip");
    exports2.extractZip = extractZip2;
    function extractZipWin(file, dest) {
      return __awaiter6(this, void 0, void 0, function* () {
        const escapedFile = file.replace(/'/g, "''").replace(/"|\n|\r/g, "");
        const escapedDest = dest.replace(/'/g, "''").replace(/"|\n|\r/g, "");
        const pwshPath = yield io2.which("pwsh", false);
        if (pwshPath) {
          const pwshCommand = [
            `$ErrorActionPreference = 'Stop' ;`,
            `try { Add-Type -AssemblyName System.IO.Compression.ZipFile } catch { } ;`,
            `try { [System.IO.Compression.ZipFile]::ExtractToDirectory('${escapedFile}', '${escapedDest}', $true) }`,
            `catch { if (($_.Exception.GetType().FullName -eq 'System.Management.Automation.MethodException') -or ($_.Exception.GetType().FullName -eq 'System.Management.Automation.RuntimeException') ){ Expand-Archive -LiteralPath '${escapedFile}' -DestinationPath '${escapedDest}' -Force } else { throw $_ } } ;`
          ].join(" ");
          const args = [
            "-NoLogo",
            "-NoProfile",
            "-NonInteractive",
            "-ExecutionPolicy",
            "Unrestricted",
            "-Command",
            pwshCommand
          ];
          core2.debug(`Using pwsh at path: ${pwshPath}`);
          yield (0, exec_1.exec)(`"${pwshPath}"`, args);
        } else {
          const powershellCommand = [
            `$ErrorActionPreference = 'Stop' ;`,
            `try { Add-Type -AssemblyName System.IO.Compression.FileSystem } catch { } ;`,
            `if ((Get-Command -Name Expand-Archive -Module Microsoft.PowerShell.Archive -ErrorAction Ignore)) { Expand-Archive -LiteralPath '${escapedFile}' -DestinationPath '${escapedDest}' -Force }`,
            `else {[System.IO.Compression.ZipFile]::ExtractToDirectory('${escapedFile}', '${escapedDest}', $true) }`
          ].join(" ");
          const args = [
            "-NoLogo",
            "-Sta",
            "-NoProfile",
            "-NonInteractive",
            "-ExecutionPolicy",
            "Unrestricted",
            "-Command",
            powershellCommand
          ];
          const powershellPath = yield io2.which("powershell", true);
          core2.debug(`Using powershell at path: ${powershellPath}`);
          yield (0, exec_1.exec)(`"${powershellPath}"`, args);
        }
      });
    }
    __name(extractZipWin, "extractZipWin");
    function extractZipNix(file, dest) {
      return __awaiter6(this, void 0, void 0, function* () {
        const unzipPath = yield io2.which("unzip", true);
        const args = [file];
        if (!core2.isDebug()) {
          args.unshift("-q");
        }
        args.unshift("-o");
        yield (0, exec_1.exec)(`"${unzipPath}"`, args, { cwd: dest });
      });
    }
    __name(extractZipNix, "extractZipNix");
    function cacheDir2(sourceDir, tool, version3, arch5) {
      return __awaiter6(this, void 0, void 0, function* () {
        version3 = semver.clean(version3) || version3;
        arch5 = arch5 || os5.arch();
        core2.debug(`Caching tool ${tool} ${version3} ${arch5}`);
        core2.debug(`source dir: ${sourceDir}`);
        if (!fs4.statSync(sourceDir).isDirectory()) {
          throw new Error("sourceDir is not a directory");
        }
        const destPath = yield _createToolPath(tool, version3, arch5);
        for (const itemName of fs4.readdirSync(sourceDir)) {
          const s3 = path14.join(sourceDir, itemName);
          yield io2.cp(s3, destPath, { recursive: true });
        }
        _completeToolPath(tool, version3, arch5);
        return destPath;
      });
    }
    __name(cacheDir2, "cacheDir");
    exports2.cacheDir = cacheDir2;
    function cacheFile(sourceFile, targetFile, tool, version3, arch5) {
      return __awaiter6(this, void 0, void 0, function* () {
        version3 = semver.clean(version3) || version3;
        arch5 = arch5 || os5.arch();
        core2.debug(`Caching tool ${tool} ${version3} ${arch5}`);
        core2.debug(`source file: ${sourceFile}`);
        if (!fs4.statSync(sourceFile).isFile()) {
          throw new Error("sourceFile is not a file");
        }
        const destFolder = yield _createToolPath(tool, version3, arch5);
        const destPath = path14.join(destFolder, targetFile);
        core2.debug(`destination file ${destPath}`);
        yield io2.cp(sourceFile, destPath);
        _completeToolPath(tool, version3, arch5);
        return destFolder;
      });
    }
    __name(cacheFile, "cacheFile");
    exports2.cacheFile = cacheFile;
    function find(toolName, versionSpec, arch5) {
      if (!toolName) {
        throw new Error("toolName parameter is required");
      }
      if (!versionSpec) {
        throw new Error("versionSpec parameter is required");
      }
      arch5 = arch5 || os5.arch();
      if (!isExplicitVersion(versionSpec)) {
        const localVersions = findAllVersions(toolName, arch5);
        const match3 = evaluateVersions(localVersions, versionSpec);
        versionSpec = match3;
      }
      let toolPath = "";
      if (versionSpec) {
        versionSpec = semver.clean(versionSpec) || "";
        const cachePath = path14.join(_getCacheDirectory(), toolName, versionSpec, arch5);
        core2.debug(`checking cache: ${cachePath}`);
        if (fs4.existsSync(cachePath) && fs4.existsSync(`${cachePath}.complete`)) {
          core2.debug(`Found tool in cache ${toolName} ${versionSpec} ${arch5}`);
          toolPath = cachePath;
        } else {
          core2.debug("not found");
        }
      }
      return toolPath;
    }
    __name(find, "find");
    exports2.find = find;
    function findAllVersions(toolName, arch5) {
      const versions2 = [];
      arch5 = arch5 || os5.arch();
      const toolPath = path14.join(_getCacheDirectory(), toolName);
      if (fs4.existsSync(toolPath)) {
        const children = fs4.readdirSync(toolPath);
        for (const child of children) {
          if (isExplicitVersion(child)) {
            const fullPath = path14.join(toolPath, child, arch5 || "");
            if (fs4.existsSync(fullPath) && fs4.existsSync(`${fullPath}.complete`)) {
              versions2.push(child);
            }
          }
        }
      }
      return versions2;
    }
    __name(findAllVersions, "findAllVersions");
    exports2.findAllVersions = findAllVersions;
    function getManifestFromRepo(owner, repo, auth, branch = "master") {
      return __awaiter6(this, void 0, void 0, function* () {
        let releases = [];
        const treeUrl = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}`;
        const http2 = new httpm.HttpClient("tool-cache");
        const headers = {};
        if (auth) {
          core2.debug("set auth");
          headers.authorization = auth;
        }
        const response = yield http2.getJson(treeUrl, headers);
        if (!response.result) {
          return releases;
        }
        let manifestUrl = "";
        for (const item of response.result.tree) {
          if (item.path === "versions-manifest.json") {
            manifestUrl = item.url;
            break;
          }
        }
        headers["accept"] = "application/vnd.github.VERSION.raw";
        let versionsRaw = yield (yield http2.get(manifestUrl, headers)).readBody();
        if (versionsRaw) {
          versionsRaw = versionsRaw.replace(/^\uFEFF/, "");
          try {
            releases = JSON.parse(versionsRaw);
          } catch (_a4) {
            core2.debug("Invalid json");
          }
        }
        return releases;
      });
    }
    __name(getManifestFromRepo, "getManifestFromRepo");
    exports2.getManifestFromRepo = getManifestFromRepo;
    function findFromManifest(versionSpec, stable, manifest, archFilter = os5.arch()) {
      return __awaiter6(this, void 0, void 0, function* () {
        const match3 = yield mm._findMatch(versionSpec, stable, manifest, archFilter);
        return match3;
      });
    }
    __name(findFromManifest, "findFromManifest");
    exports2.findFromManifest = findFromManifest;
    function _createExtractFolder(dest) {
      return __awaiter6(this, void 0, void 0, function* () {
        if (!dest) {
          dest = path14.join(_getTempDirectory(), crypto.randomUUID());
        }
        yield io2.mkdirP(dest);
        return dest;
      });
    }
    __name(_createExtractFolder, "_createExtractFolder");
    function _createToolPath(tool, version3, arch5) {
      return __awaiter6(this, void 0, void 0, function* () {
        const folderPath = path14.join(_getCacheDirectory(), tool, semver.clean(version3) || version3, arch5 || "");
        core2.debug(`destination ${folderPath}`);
        const markerPath = `${folderPath}.complete`;
        yield io2.rmRF(folderPath);
        yield io2.rmRF(markerPath);
        yield io2.mkdirP(folderPath);
        return folderPath;
      });
    }
    __name(_createToolPath, "_createToolPath");
    function _completeToolPath(tool, version3, arch5) {
      const folderPath = path14.join(_getCacheDirectory(), tool, semver.clean(version3) || version3, arch5 || "");
      const markerPath = `${folderPath}.complete`;
      fs4.writeFileSync(markerPath, "");
      core2.debug("finished caching tool");
    }
    __name(_completeToolPath, "_completeToolPath");
    function isExplicitVersion(versionSpec) {
      const c3 = semver.clean(versionSpec) || "";
      core2.debug(`isExplicit: ${c3}`);
      const valid = semver.valid(c3) != null;
      core2.debug(`explicit? ${valid}`);
      return valid;
    }
    __name(isExplicitVersion, "isExplicitVersion");
    exports2.isExplicitVersion = isExplicitVersion;
    function evaluateVersions(versions2, versionSpec) {
      let version3 = "";
      core2.debug(`evaluating ${versions2.length} versions`);
      versions2 = versions2.sort((a3, b3) => {
        if (semver.gt(a3, b3)) {
          return 1;
        }
        return -1;
      });
      for (let i3 = versions2.length - 1; i3 >= 0; i3--) {
        const potential = versions2[i3];
        const satisfied = semver.satisfies(potential, versionSpec);
        if (satisfied) {
          version3 = potential;
          break;
        }
      }
      if (version3) {
        core2.debug(`matched: ${version3}`);
      } else {
        core2.debug("match not found");
      }
      return version3;
    }
    __name(evaluateVersions, "evaluateVersions");
    exports2.evaluateVersions = evaluateVersions;
    function _getCacheDirectory() {
      const cacheDirectory = process.env["RUNNER_TOOL_CACHE"] || "";
      (0, assert_1.ok)(cacheDirectory, "Expected RUNNER_TOOL_CACHE to be defined");
      return cacheDirectory;
    }
    __name(_getCacheDirectory, "_getCacheDirectory");
    function _getTempDirectory() {
      const tempDirectory = process.env["RUNNER_TEMP"] || "";
      (0, assert_1.ok)(tempDirectory, "Expected RUNNER_TEMP to be defined");
      return tempDirectory;
    }
    __name(_getTempDirectory, "_getTempDirectory");
    function _getGlobal(key, defaultValue) {
      const value = global[key];
      return value !== void 0 ? value : defaultValue;
    }
    __name(_getGlobal, "_getGlobal");
    function _unique(values) {
      return Array.from(new Set(values));
    }
    __name(_unique, "_unique");
  }
});

// node_modules/deline/build/deline.js
var require_deline = __commonJS({
  "node_modules/deline/build/deline.js"(exports2, module) {
    "use strict";
    function deline4(strings) {
      var raw = void 0;
      if (typeof strings === "string") {
        raw = [strings];
      } else {
        raw = strings.raw;
      }
      var resultArr = [];
      for (var i3 = 0; i3 < raw.length; i3++) {
        resultArr.push(raw[i3].replace(/\\\n[ \t]*/g, "").replace(/\\`/g, "`"));
        if (i3 < (arguments.length <= 1 ? 0 : arguments.length - 1)) {
          resultArr.push(arguments.length <= i3 + 1 ? void 0 : arguments[i3 + 1]);
        }
      }
      var result = resultArr.join("").trim();
      var lines = result.split("\n");
      var ret = lines.reduce(function(accumulator, line, idx) {
        var lineTrimmed = line.trim();
        if (accumulator.length > 0 && lineTrimmed === "" && accumulator[accumulator.length] === "\n") {
          return accumulator;
        }
        if (lineTrimmed === "") {
          accumulator.push(accumulator.pop().slice(0, -1));
          accumulator.push("\n");
        } else {
          accumulator.push("" + String(lineTrimmed) + (idx !== lines.length - 1 ? " " : ""));
        }
        return accumulator;
      }, []);
      return ret.join("").trim().replace(/\\n/g, "\n");
    }
    __name(deline4, "deline");
    module.exports = deline4;
  }
});

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "node_modules/balanced-match/index.js"(exports2, module) {
    "use strict";
    module.exports = balanced;
    function balanced(a3, b3, str) {
      if (a3 instanceof RegExp) a3 = maybeMatch(a3, str);
      if (b3 instanceof RegExp) b3 = maybeMatch(b3, str);
      var r3 = range2(a3, b3, str);
      return r3 && {
        start: r3[0],
        end: r3[1],
        pre: str.slice(0, r3[0]),
        body: str.slice(r3[0] + a3.length, r3[1]),
        post: str.slice(r3[1] + b3.length)
      };
    }
    __name(balanced, "balanced");
    function maybeMatch(reg, str) {
      var m3 = str.match(reg);
      return m3 ? m3[0] : null;
    }
    __name(maybeMatch, "maybeMatch");
    balanced.range = range2;
    function range2(a3, b3, str) {
      var begs, beg, left, right, result;
      var ai2 = str.indexOf(a3);
      var bi2 = str.indexOf(b3, ai2 + 1);
      var i3 = ai2;
      if (ai2 >= 0 && bi2 > 0) {
        if (a3 === b3) {
          return [ai2, bi2];
        }
        begs = [];
        left = str.length;
        while (i3 >= 0 && !result) {
          if (i3 == ai2) {
            begs.push(i3);
            ai2 = str.indexOf(a3, i3 + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi2];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi2;
            }
            bi2 = str.indexOf(b3, i3 + 1);
          }
          i3 = ai2 < bi2 && ai2 >= 0 ? ai2 : bi2;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
    __name(range2, "range");
  }
});

// packages/data/node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS({
  "packages/data/node_modules/brace-expansion/index.js"(exports2, module) {
    "use strict";
    var balanced = require_balanced_match();
    module.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    __name(numeric, "numeric");
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    __name(escapeBraces, "escapeBraces");
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    __name(unescapeBraces, "unescapeBraces");
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m3 = balanced("{", "}", str);
      if (!m3)
        return str.split(",");
      var pre = m3.pre;
      var body2 = m3.body;
      var post2 = m3.post;
      var p3 = pre.split(",");
      p3[p3.length - 1] += "{" + body2 + "}";
      var postParts = parseCommaParts(post2);
      if (post2.length) {
        p3[p3.length - 1] += postParts.shift();
        p3.push.apply(p3, postParts);
      }
      parts.push.apply(parts, p3);
      return parts;
    }
    __name(parseCommaParts, "parseCommaParts");
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand2(escapeBraces(str), true).map(unescapeBraces);
    }
    __name(expandTop, "expandTop");
    function embrace(str) {
      return "{" + str + "}";
    }
    __name(embrace, "embrace");
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    __name(isPadded, "isPadded");
    function lte(i3, y3) {
      return i3 <= y3;
    }
    __name(lte, "lte");
    function gte(i3, y3) {
      return i3 >= y3;
    }
    __name(gte, "gte");
    function expand2(str, isTop) {
      var expansions = [];
      var m3 = balanced("{", "}", str);
      if (!m3) return [str];
      var pre = m3.pre;
      var post2 = m3.post.length ? expand2(m3.post, false) : [""];
      if (/\$$/.test(m3.pre)) {
        for (var k3 = 0; k3 < post2.length; k3++) {
          var expansion = pre + "{" + m3.body + "}" + post2[k3];
          expansions.push(expansion);
        }
      } else {
        var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m3.body);
        var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m3.body);
        var isSequence = isNumericSequence || isAlphaSequence;
        var isOptions = m3.body.indexOf(",") >= 0;
        if (!isSequence && !isOptions) {
          if (m3.post.match(/,.*\}/)) {
            str = m3.pre + "{" + m3.body + escClose + m3.post;
            return expand2(str);
          }
          return [str];
        }
        var n3;
        if (isSequence) {
          n3 = m3.body.split(/\.\./);
        } else {
          n3 = parseCommaParts(m3.body);
          if (n3.length === 1) {
            n3 = expand2(n3[0], false).map(embrace);
            if (n3.length === 1) {
              return post2.map(function(p3) {
                return m3.pre + n3[0] + p3;
              });
            }
          }
        }
        var N3;
        if (isSequence) {
          var x3 = numeric(n3[0]);
          var y3 = numeric(n3[1]);
          var width = Math.max(n3[0].length, n3[1].length);
          var incr = n3.length == 3 ? Math.abs(numeric(n3[2])) : 1;
          var test = lte;
          var reverse = y3 < x3;
          if (reverse) {
            incr *= -1;
            test = gte;
          }
          var pad = n3.some(isPadded);
          N3 = [];
          for (var i3 = x3; test(i3, y3); i3 += incr) {
            var c3;
            if (isAlphaSequence) {
              c3 = String.fromCharCode(i3);
              if (c3 === "\\")
                c3 = "";
            } else {
              c3 = String(i3);
              if (pad) {
                var need = width - c3.length;
                if (need > 0) {
                  var z3 = new Array(need + 1).join("0");
                  if (i3 < 0)
                    c3 = "-" + z3 + c3.slice(1);
                  else
                    c3 = z3 + c3;
                }
              }
            }
            N3.push(c3);
          }
        } else {
          N3 = [];
          for (var j3 = 0; j3 < n3.length; j3++) {
            N3.push.apply(N3, expand2(n3[j3], false));
          }
        }
        for (var j3 = 0; j3 < N3.length; j3++) {
          for (var k3 = 0; k3 < post2.length; k3++) {
            var expansion = pre + N3[j3] + post2[k3];
            if (!isTop || isSequence || expansion)
              expansions.push(expansion);
          }
        }
      }
      return expansions;
    }
    __name(expand2, "expand");
  }
});

// node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-glob-options-helper.js
var require_internal_glob_options_helper = __commonJS({
  "node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-glob-options-helper.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOptions = void 0;
    var core2 = __importStar(require_core());
    function getOptions(copy2) {
      const result = {
        followSymbolicLinks: true,
        implicitDescendants: true,
        omitBrokenSymbolicLinks: true
      };
      if (copy2) {
        if (typeof copy2.followSymbolicLinks === "boolean") {
          result.followSymbolicLinks = copy2.followSymbolicLinks;
          core2.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`);
        }
        if (typeof copy2.implicitDescendants === "boolean") {
          result.implicitDescendants = copy2.implicitDescendants;
          core2.debug(`implicitDescendants '${result.implicitDescendants}'`);
        }
        if (typeof copy2.omitBrokenSymbolicLinks === "boolean") {
          result.omitBrokenSymbolicLinks = copy2.omitBrokenSymbolicLinks;
          core2.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`);
        }
      }
      return result;
    }
    __name(getOptions, "getOptions");
    exports2.getOptions = getOptions;
  }
});

// node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-path-helper.js
var require_internal_path_helper = __commonJS({
  "node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-path-helper.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.safeTrimTrailingSeparator = exports2.normalizeSeparators = exports2.hasRoot = exports2.hasAbsoluteRoot = exports2.ensureAbsoluteRoot = exports2.dirname = void 0;
    var path14 = __importStar(__require("path"));
    var assert_1 = __importDefault(__require("assert"));
    var IS_WINDOWS = process.platform === "win32";
    function dirname(p3) {
      p3 = safeTrimTrailingSeparator(p3);
      if (IS_WINDOWS && /^\\\\[^\\]+(\\[^\\]+)?$/.test(p3)) {
        return p3;
      }
      let result = path14.dirname(p3);
      if (IS_WINDOWS && /^\\\\[^\\]+\\[^\\]+\\$/.test(result)) {
        result = safeTrimTrailingSeparator(result);
      }
      return result;
    }
    __name(dirname, "dirname");
    exports2.dirname = dirname;
    function ensureAbsoluteRoot(root, itemPath) {
      assert_1.default(root, `ensureAbsoluteRoot parameter 'root' must not be empty`);
      assert_1.default(itemPath, `ensureAbsoluteRoot parameter 'itemPath' must not be empty`);
      if (hasAbsoluteRoot(itemPath)) {
        return itemPath;
      }
      if (IS_WINDOWS) {
        if (itemPath.match(/^[A-Z]:[^\\/]|^[A-Z]:$/i)) {
          let cwd = process.cwd();
          assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
          if (itemPath[0].toUpperCase() === cwd[0].toUpperCase()) {
            if (itemPath.length === 2) {
              return `${itemPath[0]}:\\${cwd.substr(3)}`;
            } else {
              if (!cwd.endsWith("\\")) {
                cwd += "\\";
              }
              return `${itemPath[0]}:\\${cwd.substr(3)}${itemPath.substr(2)}`;
            }
          } else {
            return `${itemPath[0]}:\\${itemPath.substr(2)}`;
          }
        } else if (normalizeSeparators(itemPath).match(/^\\$|^\\[^\\]/)) {
          const cwd = process.cwd();
          assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
          return `${cwd[0]}:\\${itemPath.substr(1)}`;
        }
      }
      assert_1.default(hasAbsoluteRoot(root), `ensureAbsoluteRoot parameter 'root' must have an absolute root`);
      if (root.endsWith("/") || IS_WINDOWS && root.endsWith("\\")) {
      } else {
        root += path14.sep;
      }
      return root + itemPath;
    }
    __name(ensureAbsoluteRoot, "ensureAbsoluteRoot");
    exports2.ensureAbsoluteRoot = ensureAbsoluteRoot;
    function hasAbsoluteRoot(itemPath) {
      assert_1.default(itemPath, `hasAbsoluteRoot parameter 'itemPath' must not be empty`);
      itemPath = normalizeSeparators(itemPath);
      if (IS_WINDOWS) {
        return itemPath.startsWith("\\\\") || /^[A-Z]:\\/i.test(itemPath);
      }
      return itemPath.startsWith("/");
    }
    __name(hasAbsoluteRoot, "hasAbsoluteRoot");
    exports2.hasAbsoluteRoot = hasAbsoluteRoot;
    function hasRoot(itemPath) {
      assert_1.default(itemPath, `isRooted parameter 'itemPath' must not be empty`);
      itemPath = normalizeSeparators(itemPath);
      if (IS_WINDOWS) {
        return itemPath.startsWith("\\") || /^[A-Z]:/i.test(itemPath);
      }
      return itemPath.startsWith("/");
    }
    __name(hasRoot, "hasRoot");
    exports2.hasRoot = hasRoot;
    function normalizeSeparators(p3) {
      p3 = p3 || "";
      if (IS_WINDOWS) {
        p3 = p3.replace(/\//g, "\\");
        const isUnc = /^\\\\+[^\\]/.test(p3);
        return (isUnc ? "\\" : "") + p3.replace(/\\\\+/g, "\\");
      }
      return p3.replace(/\/\/+/g, "/");
    }
    __name(normalizeSeparators, "normalizeSeparators");
    exports2.normalizeSeparators = normalizeSeparators;
    function safeTrimTrailingSeparator(p3) {
      if (!p3) {
        return "";
      }
      p3 = normalizeSeparators(p3);
      if (!p3.endsWith(path14.sep)) {
        return p3;
      }
      if (p3 === path14.sep) {
        return p3;
      }
      if (IS_WINDOWS && /^[A-Z]:\\$/i.test(p3)) {
        return p3;
      }
      return p3.substr(0, p3.length - 1);
    }
    __name(safeTrimTrailingSeparator, "safeTrimTrailingSeparator");
    exports2.safeTrimTrailingSeparator = safeTrimTrailingSeparator;
  }
});

// node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-match-kind.js
var require_internal_match_kind = __commonJS({
  "node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-match-kind.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MatchKind = void 0;
    var MatchKind;
    (function(MatchKind2) {
      MatchKind2[MatchKind2["None"] = 0] = "None";
      MatchKind2[MatchKind2["Directory"] = 1] = "Directory";
      MatchKind2[MatchKind2["File"] = 2] = "File";
      MatchKind2[MatchKind2["All"] = 3] = "All";
    })(MatchKind = exports2.MatchKind || (exports2.MatchKind = {}));
  }
});

// node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-pattern-helper.js
var require_internal_pattern_helper = __commonJS({
  "node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-pattern-helper.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.partialMatch = exports2.match = exports2.getSearchPaths = void 0;
    var pathHelper = __importStar(require_internal_path_helper());
    var internal_match_kind_1 = require_internal_match_kind();
    var IS_WINDOWS = process.platform === "win32";
    function getSearchPaths(patterns) {
      patterns = patterns.filter((x3) => !x3.negate);
      const searchPathMap = {};
      for (const pattern of patterns) {
        const key = IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath;
        searchPathMap[key] = "candidate";
      }
      const result = [];
      for (const pattern of patterns) {
        const key = IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath;
        if (searchPathMap[key] === "included") {
          continue;
        }
        let foundAncestor = false;
        let tempKey = key;
        let parent = pathHelper.dirname(tempKey);
        while (parent !== tempKey) {
          if (searchPathMap[parent]) {
            foundAncestor = true;
            break;
          }
          tempKey = parent;
          parent = pathHelper.dirname(tempKey);
        }
        if (!foundAncestor) {
          result.push(pattern.searchPath);
          searchPathMap[key] = "included";
        }
      }
      return result;
    }
    __name(getSearchPaths, "getSearchPaths");
    exports2.getSearchPaths = getSearchPaths;
    function match3(patterns, itemPath) {
      let result = internal_match_kind_1.MatchKind.None;
      for (const pattern of patterns) {
        if (pattern.negate) {
          result &= ~pattern.match(itemPath);
        } else {
          result |= pattern.match(itemPath);
        }
      }
      return result;
    }
    __name(match3, "match");
    exports2.match = match3;
    function partialMatch(patterns, itemPath) {
      return patterns.some((x3) => !x3.negate && x3.partialMatch(itemPath));
    }
    __name(partialMatch, "partialMatch");
    exports2.partialMatch = partialMatch;
  }
});

// node_modules/concat-map/index.js
var require_concat_map = __commonJS({
  "node_modules/concat-map/index.js"(exports2, module) {
    "use strict";
    module.exports = function(xs, fn2) {
      var res = [];
      for (var i3 = 0; i3 < xs.length; i3++) {
        var x3 = fn2(xs[i3], i3);
        if (isArray(x3)) res.push.apply(res, x3);
        else res.push(x3);
      }
      return res;
    };
    var isArray = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
  }
});

// node_modules/brace-expansion/index.js
var require_brace_expansion2 = __commonJS({
  "node_modules/brace-expansion/index.js"(exports2, module) {
    "use strict";
    var concatMap = require_concat_map();
    var balanced = require_balanced_match();
    module.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    __name(numeric, "numeric");
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    __name(escapeBraces, "escapeBraces");
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    __name(unescapeBraces, "unescapeBraces");
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m3 = balanced("{", "}", str);
      if (!m3)
        return str.split(",");
      var pre = m3.pre;
      var body2 = m3.body;
      var post2 = m3.post;
      var p3 = pre.split(",");
      p3[p3.length - 1] += "{" + body2 + "}";
      var postParts = parseCommaParts(post2);
      if (post2.length) {
        p3[p3.length - 1] += postParts.shift();
        p3.push.apply(p3, postParts);
      }
      parts.push.apply(parts, p3);
      return parts;
    }
    __name(parseCommaParts, "parseCommaParts");
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand2(escapeBraces(str), true).map(unescapeBraces);
    }
    __name(expandTop, "expandTop");
    function embrace(str) {
      return "{" + str + "}";
    }
    __name(embrace, "embrace");
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    __name(isPadded, "isPadded");
    function lte(i3, y3) {
      return i3 <= y3;
    }
    __name(lte, "lte");
    function gte(i3, y3) {
      return i3 >= y3;
    }
    __name(gte, "gte");
    function expand2(str, isTop) {
      var expansions = [];
      var m3 = balanced("{", "}", str);
      if (!m3 || /\$$/.test(m3.pre)) return [str];
      var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m3.body);
      var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m3.body);
      var isSequence = isNumericSequence || isAlphaSequence;
      var isOptions = m3.body.indexOf(",") >= 0;
      if (!isSequence && !isOptions) {
        if (m3.post.match(/,.*\}/)) {
          str = m3.pre + "{" + m3.body + escClose + m3.post;
          return expand2(str);
        }
        return [str];
      }
      var n3;
      if (isSequence) {
        n3 = m3.body.split(/\.\./);
      } else {
        n3 = parseCommaParts(m3.body);
        if (n3.length === 1) {
          n3 = expand2(n3[0], false).map(embrace);
          if (n3.length === 1) {
            var post2 = m3.post.length ? expand2(m3.post, false) : [""];
            return post2.map(function(p3) {
              return m3.pre + n3[0] + p3;
            });
          }
        }
      }
      var pre = m3.pre;
      var post2 = m3.post.length ? expand2(m3.post, false) : [""];
      var N3;
      if (isSequence) {
        var x3 = numeric(n3[0]);
        var y3 = numeric(n3[1]);
        var width = Math.max(n3[0].length, n3[1].length);
        var incr = n3.length == 3 ? Math.abs(numeric(n3[2])) : 1;
        var test = lte;
        var reverse = y3 < x3;
        if (reverse) {
          incr *= -1;
          test = gte;
        }
        var pad = n3.some(isPadded);
        N3 = [];
        for (var i3 = x3; test(i3, y3); i3 += incr) {
          var c3;
          if (isAlphaSequence) {
            c3 = String.fromCharCode(i3);
            if (c3 === "\\")
              c3 = "";
          } else {
            c3 = String(i3);
            if (pad) {
              var need = width - c3.length;
              if (need > 0) {
                var z3 = new Array(need + 1).join("0");
                if (i3 < 0)
                  c3 = "-" + z3 + c3.slice(1);
                else
                  c3 = z3 + c3;
              }
            }
          }
          N3.push(c3);
        }
      } else {
        N3 = concatMap(n3, function(el) {
          return expand2(el, false);
        });
      }
      for (var j3 = 0; j3 < N3.length; j3++) {
        for (var k3 = 0; k3 < post2.length; k3++) {
          var expansion = pre + N3[j3] + post2[k3];
          if (!isTop || isSequence || expansion)
            expansions.push(expansion);
        }
      }
      return expansions;
    }
    __name(expand2, "expand");
  }
});

// node_modules/minimatch/minimatch.js
var require_minimatch = __commonJS({
  "node_modules/minimatch/minimatch.js"(exports2, module) {
    "use strict";
    module.exports = minimatch2;
    minimatch2.Minimatch = Minimatch2;
    var path14 = function() {
      try {
        return __require("path");
      } catch (e3) {
      }
    }() || {
      sep: "/"
    };
    minimatch2.sep = path14.sep;
    var GLOBSTAR2 = minimatch2.GLOBSTAR = Minimatch2.GLOBSTAR = {};
    var expand2 = require_brace_expansion2();
    var plTypes = {
      "!": { open: "(?:(?!(?:", close: "))[^/]*?)" },
      "?": { open: "(?:", close: ")?" },
      "+": { open: "(?:", close: ")+" },
      "*": { open: "(?:", close: ")*" },
      "@": { open: "(?:", close: ")" }
    };
    var qmark3 = "[^/]";
    var star3 = qmark3 + "*?";
    var twoStarDot2 = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
    var twoStarNoDot2 = "(?:(?!(?:\\/|^)\\.).)*?";
    var reSpecials2 = charSet("().*{}+?[]^$\\!");
    function charSet(s3) {
      return s3.split("").reduce(function(set2, c3) {
        set2[c3] = true;
        return set2;
      }, {});
    }
    __name(charSet, "charSet");
    var slashSplit = /\/+/;
    minimatch2.filter = filter2;
    function filter2(pattern, options) {
      options = options || {};
      return function(p3, i3, list3) {
        return minimatch2(p3, pattern, options);
      };
    }
    __name(filter2, "filter");
    function ext2(a3, b3) {
      b3 = b3 || {};
      var t3 = {};
      Object.keys(a3).forEach(function(k3) {
        t3[k3] = a3[k3];
      });
      Object.keys(b3).forEach(function(k3) {
        t3[k3] = b3[k3];
      });
      return t3;
    }
    __name(ext2, "ext");
    minimatch2.defaults = function(def) {
      if (!def || typeof def !== "object" || !Object.keys(def).length) {
        return minimatch2;
      }
      var orig = minimatch2;
      var m3 = /* @__PURE__ */ __name(function minimatch3(p3, pattern, options) {
        return orig(p3, pattern, ext2(def, options));
      }, "minimatch");
      m3.Minimatch = /* @__PURE__ */ __name(function Minimatch3(pattern, options) {
        return new orig.Minimatch(pattern, ext2(def, options));
      }, "Minimatch");
      m3.Minimatch.defaults = /* @__PURE__ */ __name(function defaults2(options) {
        return orig.defaults(ext2(def, options)).Minimatch;
      }, "defaults");
      m3.filter = /* @__PURE__ */ __name(function filter3(pattern, options) {
        return orig.filter(pattern, ext2(def, options));
      }, "filter");
      m3.defaults = /* @__PURE__ */ __name(function defaults2(options) {
        return orig.defaults(ext2(def, options));
      }, "defaults");
      m3.makeRe = /* @__PURE__ */ __name(function makeRe3(pattern, options) {
        return orig.makeRe(pattern, ext2(def, options));
      }, "makeRe");
      m3.braceExpand = /* @__PURE__ */ __name(function braceExpand3(pattern, options) {
        return orig.braceExpand(pattern, ext2(def, options));
      }, "braceExpand");
      m3.match = function(list3, pattern, options) {
        return orig.match(list3, pattern, ext2(def, options));
      };
      return m3;
    };
    Minimatch2.defaults = function(def) {
      return minimatch2.defaults(def).Minimatch;
    };
    function minimatch2(p3, pattern, options) {
      assertValidPattern2(pattern);
      if (!options) options = {};
      if (!options.nocomment && pattern.charAt(0) === "#") {
        return false;
      }
      return new Minimatch2(pattern, options).match(p3);
    }
    __name(minimatch2, "minimatch");
    function Minimatch2(pattern, options) {
      if (!(this instanceof Minimatch2)) {
        return new Minimatch2(pattern, options);
      }
      assertValidPattern2(pattern);
      if (!options) options = {};
      pattern = pattern.trim();
      if (!options.allowWindowsEscape && path14.sep !== "/") {
        pattern = pattern.split(path14.sep).join("/");
      }
      this.options = options;
      this.set = [];
      this.pattern = pattern;
      this.regexp = null;
      this.negate = false;
      this.comment = false;
      this.empty = false;
      this.partial = !!options.partial;
      this.make();
    }
    __name(Minimatch2, "Minimatch");
    Minimatch2.prototype.debug = function() {
    };
    Minimatch2.prototype.make = make;
    function make() {
      var pattern = this.pattern;
      var options = this.options;
      if (!options.nocomment && pattern.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!pattern) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var set2 = this.globSet = this.braceExpand();
      if (options.debug) this.debug = /* @__PURE__ */ __name(function debug3() {
        console.error.apply(console, arguments);
      }, "debug");
      this.debug(this.pattern, set2);
      set2 = this.globParts = set2.map(function(s3) {
        return s3.split(slashSplit);
      });
      this.debug(this.pattern, set2);
      set2 = set2.map(function(s3, si2, set3) {
        return s3.map(this.parse, this);
      }, this);
      this.debug(this.pattern, set2);
      set2 = set2.filter(function(s3) {
        return s3.indexOf(false) === -1;
      });
      this.debug(this.pattern, set2);
      this.set = set2;
    }
    __name(make, "make");
    Minimatch2.prototype.parseNegate = parseNegate;
    function parseNegate() {
      var pattern = this.pattern;
      var negate = false;
      var options = this.options;
      var negateOffset = 0;
      if (options.nonegate) return;
      for (var i3 = 0, l3 = pattern.length; i3 < l3 && pattern.charAt(i3) === "!"; i3++) {
        negate = !negate;
        negateOffset++;
      }
      if (negateOffset) this.pattern = pattern.substr(negateOffset);
      this.negate = negate;
    }
    __name(parseNegate, "parseNegate");
    minimatch2.braceExpand = function(pattern, options) {
      return braceExpand2(pattern, options);
    };
    Minimatch2.prototype.braceExpand = braceExpand2;
    function braceExpand2(pattern, options) {
      if (!options) {
        if (this instanceof Minimatch2) {
          options = this.options;
        } else {
          options = {};
        }
      }
      pattern = typeof pattern === "undefined" ? this.pattern : pattern;
      assertValidPattern2(pattern);
      if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        return [pattern];
      }
      return expand2(pattern);
    }
    __name(braceExpand2, "braceExpand");
    var MAX_PATTERN_LENGTH2 = 1024 * 64;
    var assertValidPattern2 = /* @__PURE__ */ __name(function(pattern) {
      if (typeof pattern !== "string") {
        throw new TypeError("invalid pattern");
      }
      if (pattern.length > MAX_PATTERN_LENGTH2) {
        throw new TypeError("pattern is too long");
      }
    }, "assertValidPattern");
    Minimatch2.prototype.parse = parse3;
    var SUBPARSE = {};
    function parse3(pattern, isSub) {
      assertValidPattern2(pattern);
      var options = this.options;
      if (pattern === "**") {
        if (!options.noglobstar)
          return GLOBSTAR2;
        else
          pattern = "*";
      }
      if (pattern === "") return "";
      var re2 = "";
      var hasMagic = !!options.nocase;
      var escaping = false;
      var patternListStack = [];
      var negativeLists = [];
      var stateChar;
      var inClass = false;
      var reClassStart = -1;
      var classStart = -1;
      var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
      var self2 = this;
      function clearStateChar() {
        if (stateChar) {
          switch (stateChar) {
            case "*":
              re2 += star3;
              hasMagic = true;
              break;
            case "?":
              re2 += qmark3;
              hasMagic = true;
              break;
            default:
              re2 += "\\" + stateChar;
              break;
          }
          self2.debug("clearStateChar %j %j", stateChar, re2);
          stateChar = false;
        }
      }
      __name(clearStateChar, "clearStateChar");
      for (var i3 = 0, len = pattern.length, c3; i3 < len && (c3 = pattern.charAt(i3)); i3++) {
        this.debug("%s	%s %s %j", pattern, i3, re2, c3);
        if (escaping && reSpecials2[c3]) {
          re2 += "\\" + c3;
          escaping = false;
          continue;
        }
        switch (c3) {
          /* istanbul ignore next */
          case "/": {
            return false;
          }
          case "\\":
            clearStateChar();
            escaping = true;
            continue;
          // the various stateChar values
          // for the "extglob" stuff.
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            this.debug("%s	%s %s %j <-- stateChar", pattern, i3, re2, c3);
            if (inClass) {
              this.debug("  in class");
              if (c3 === "!" && i3 === classStart + 1) c3 = "^";
              re2 += c3;
              continue;
            }
            self2.debug("call clearStateChar %j", stateChar);
            clearStateChar();
            stateChar = c3;
            if (options.noext) clearStateChar();
            continue;
          case "(":
            if (inClass) {
              re2 += "(";
              continue;
            }
            if (!stateChar) {
              re2 += "\\(";
              continue;
            }
            patternListStack.push({
              type: stateChar,
              start: i3 - 1,
              reStart: re2.length,
              open: plTypes[stateChar].open,
              close: plTypes[stateChar].close
            });
            re2 += stateChar === "!" ? "(?:(?!(?:" : "(?:";
            this.debug("plType %j %j", stateChar, re2);
            stateChar = false;
            continue;
          case ")":
            if (inClass || !patternListStack.length) {
              re2 += "\\)";
              continue;
            }
            clearStateChar();
            hasMagic = true;
            var pl = patternListStack.pop();
            re2 += pl.close;
            if (pl.type === "!") {
              negativeLists.push(pl);
            }
            pl.reEnd = re2.length;
            continue;
          case "|":
            if (inClass || !patternListStack.length || escaping) {
              re2 += "\\|";
              escaping = false;
              continue;
            }
            clearStateChar();
            re2 += "|";
            continue;
          // these are mostly the same in regexp and glob
          case "[":
            clearStateChar();
            if (inClass) {
              re2 += "\\" + c3;
              continue;
            }
            inClass = true;
            classStart = i3;
            reClassStart = re2.length;
            re2 += c3;
            continue;
          case "]":
            if (i3 === classStart + 1 || !inClass) {
              re2 += "\\" + c3;
              escaping = false;
              continue;
            }
            var cs2 = pattern.substring(classStart + 1, i3);
            try {
              RegExp("[" + cs2 + "]");
            } catch (er2) {
              var sp = this.parse(cs2, SUBPARSE);
              re2 = re2.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue;
            }
            hasMagic = true;
            inClass = false;
            re2 += c3;
            continue;
          default:
            clearStateChar();
            if (escaping) {
              escaping = false;
            } else if (reSpecials2[c3] && !(c3 === "^" && inClass)) {
              re2 += "\\";
            }
            re2 += c3;
        }
      }
      if (inClass) {
        cs2 = pattern.substr(classStart + 1);
        sp = this.parse(cs2, SUBPARSE);
        re2 = re2.substr(0, reClassStart) + "\\[" + sp[0];
        hasMagic = hasMagic || sp[1];
      }
      for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
        var tail = re2.slice(pl.reStart + pl.open.length);
        this.debug("setting tail", re2, pl);
        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_3, $1, $22) {
          if (!$22) {
            $22 = "\\";
          }
          return $1 + $1 + $22 + "|";
        });
        this.debug("tail=%j\n   %s", tail, tail, pl, re2);
        var t3 = pl.type === "*" ? star3 : pl.type === "?" ? qmark3 : "\\" + pl.type;
        hasMagic = true;
        re2 = re2.slice(0, pl.reStart) + t3 + "\\(" + tail;
      }
      clearStateChar();
      if (escaping) {
        re2 += "\\\\";
      }
      var addPatternStart2 = false;
      switch (re2.charAt(0)) {
        case "[":
        case ".":
        case "(":
          addPatternStart2 = true;
      }
      for (var n3 = negativeLists.length - 1; n3 > -1; n3--) {
        var nl = negativeLists[n3];
        var nlBefore = re2.slice(0, nl.reStart);
        var nlFirst = re2.slice(nl.reStart, nl.reEnd - 8);
        var nlLast = re2.slice(nl.reEnd - 8, nl.reEnd);
        var nlAfter = re2.slice(nl.reEnd);
        nlLast += nlAfter;
        var openParensBefore = nlBefore.split("(").length - 1;
        var cleanAfter = nlAfter;
        for (i3 = 0; i3 < openParensBefore; i3++) {
          cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
        }
        nlAfter = cleanAfter;
        var dollar = "";
        if (nlAfter === "" && isSub !== SUBPARSE) {
          dollar = "$";
        }
        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
        re2 = newRe;
      }
      if (re2 !== "" && hasMagic) {
        re2 = "(?=.)" + re2;
      }
      if (addPatternStart2) {
        re2 = patternStart + re2;
      }
      if (isSub === SUBPARSE) {
        return [re2, hasMagic];
      }
      if (!hasMagic) {
        return globUnescape(pattern);
      }
      var flags = options.nocase ? "i" : "";
      try {
        var regExp = new RegExp("^" + re2 + "$", flags);
      } catch (er2) {
        return new RegExp("$.");
      }
      regExp._glob = pattern;
      regExp._src = re2;
      return regExp;
    }
    __name(parse3, "parse");
    minimatch2.makeRe = function(pattern, options) {
      return new Minimatch2(pattern, options || {}).makeRe();
    };
    Minimatch2.prototype.makeRe = makeRe2;
    function makeRe2() {
      if (this.regexp || this.regexp === false) return this.regexp;
      var set2 = this.set;
      if (!set2.length) {
        this.regexp = false;
        return this.regexp;
      }
      var options = this.options;
      var twoStar = options.noglobstar ? star3 : options.dot ? twoStarDot2 : twoStarNoDot2;
      var flags = options.nocase ? "i" : "";
      var re2 = set2.map(function(pattern) {
        return pattern.map(function(p3) {
          return p3 === GLOBSTAR2 ? twoStar : typeof p3 === "string" ? regExpEscape3(p3) : p3._src;
        }).join("\\/");
      }).join("|");
      re2 = "^(?:" + re2 + ")$";
      if (this.negate) re2 = "^(?!" + re2 + ").*$";
      try {
        this.regexp = new RegExp(re2, flags);
      } catch (ex) {
        this.regexp = false;
      }
      return this.regexp;
    }
    __name(makeRe2, "makeRe");
    minimatch2.match = function(list3, pattern, options) {
      options = options || {};
      var mm = new Minimatch2(pattern, options);
      list3 = list3.filter(function(f3) {
        return mm.match(f3);
      });
      if (mm.options.nonull && !list3.length) {
        list3.push(pattern);
      }
      return list3;
    };
    Minimatch2.prototype.match = /* @__PURE__ */ __name(function match3(f3, partial) {
      if (typeof partial === "undefined") partial = this.partial;
      this.debug("match", f3, this.pattern);
      if (this.comment) return false;
      if (this.empty) return f3 === "";
      if (f3 === "/" && partial) return true;
      var options = this.options;
      if (path14.sep !== "/") {
        f3 = f3.split(path14.sep).join("/");
      }
      f3 = f3.split(slashSplit);
      this.debug(this.pattern, "split", f3);
      var set2 = this.set;
      this.debug(this.pattern, "set", set2);
      var filename;
      var i3;
      for (i3 = f3.length - 1; i3 >= 0; i3--) {
        filename = f3[i3];
        if (filename) break;
      }
      for (i3 = 0; i3 < set2.length; i3++) {
        var pattern = set2[i3];
        var file = f3;
        if (options.matchBase && pattern.length === 1) {
          file = [filename];
        }
        var hit = this.matchOne(file, pattern, partial);
        if (hit) {
          if (options.flipNegate) return true;
          return !this.negate;
        }
      }
      if (options.flipNegate) return false;
      return this.negate;
    }, "match");
    Minimatch2.prototype.matchOne = function(file, pattern, partial) {
      var options = this.options;
      this.debug(
        "matchOne",
        { "this": this, file, pattern }
      );
      this.debug("matchOne", file.length, pattern.length);
      for (var fi2 = 0, pi2 = 0, fl = file.length, pl = pattern.length; fi2 < fl && pi2 < pl; fi2++, pi2++) {
        this.debug("matchOne loop");
        var p3 = pattern[pi2];
        var f3 = file[fi2];
        this.debug(pattern, p3, f3);
        if (p3 === false) return false;
        if (p3 === GLOBSTAR2) {
          this.debug("GLOBSTAR", [pattern, p3, f3]);
          var fr2 = fi2;
          var pr2 = pi2 + 1;
          if (pr2 === pl) {
            this.debug("** at the end");
            for (; fi2 < fl; fi2++) {
              if (file[fi2] === "." || file[fi2] === ".." || !options.dot && file[fi2].charAt(0) === ".") return false;
            }
            return true;
          }
          while (fr2 < fl) {
            var swallowee = file[fr2];
            this.debug("\nglobstar while", file, fr2, pattern, pr2, swallowee);
            if (this.matchOne(file.slice(fr2), pattern.slice(pr2), partial)) {
              this.debug("globstar found match!", fr2, fl, swallowee);
              return true;
            } else {
              if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                this.debug("dot detected!", file, fr2, pattern, pr2);
                break;
              }
              this.debug("globstar swallow a segment, and continue");
              fr2++;
            }
          }
          if (partial) {
            this.debug("\n>>> no match, partial?", file, fr2, pattern, pr2);
            if (fr2 === fl) return true;
          }
          return false;
        }
        var hit;
        if (typeof p3 === "string") {
          hit = f3 === p3;
          this.debug("string match", p3, f3, hit);
        } else {
          hit = f3.match(p3);
          this.debug("pattern match", p3, f3, hit);
        }
        if (!hit) return false;
      }
      if (fi2 === fl && pi2 === pl) {
        return true;
      } else if (fi2 === fl) {
        return partial;
      } else if (pi2 === pl) {
        return fi2 === fl - 1 && file[fi2] === "";
      }
      throw new Error("wtf?");
    };
    function globUnescape(s3) {
      return s3.replace(/\\(.)/g, "$1");
    }
    __name(globUnescape, "globUnescape");
    function regExpEscape3(s3) {
      return s3.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
    __name(regExpEscape3, "regExpEscape");
  }
});

// node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-path.js
var require_internal_path = __commonJS({
  "node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-path.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Path = void 0;
    var path14 = __importStar(__require("path"));
    var pathHelper = __importStar(require_internal_path_helper());
    var assert_1 = __importDefault(__require("assert"));
    var IS_WINDOWS = process.platform === "win32";
    var Path = class {
      static {
        __name(this, "Path");
      }
      /**
       * Constructs a Path
       * @param itemPath Path or array of segments
       */
      constructor(itemPath) {
        this.segments = [];
        if (typeof itemPath === "string") {
          assert_1.default(itemPath, `Parameter 'itemPath' must not be empty`);
          itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
          if (!pathHelper.hasRoot(itemPath)) {
            this.segments = itemPath.split(path14.sep);
          } else {
            let remaining = itemPath;
            let dir = pathHelper.dirname(remaining);
            while (dir !== remaining) {
              const basename2 = path14.basename(remaining);
              this.segments.unshift(basename2);
              remaining = dir;
              dir = pathHelper.dirname(remaining);
            }
            this.segments.unshift(remaining);
          }
        } else {
          assert_1.default(itemPath.length > 0, `Parameter 'itemPath' must not be an empty array`);
          for (let i3 = 0; i3 < itemPath.length; i3++) {
            let segment = itemPath[i3];
            assert_1.default(segment, `Parameter 'itemPath' must not contain any empty segments`);
            segment = pathHelper.normalizeSeparators(itemPath[i3]);
            if (i3 === 0 && pathHelper.hasRoot(segment)) {
              segment = pathHelper.safeTrimTrailingSeparator(segment);
              assert_1.default(segment === pathHelper.dirname(segment), `Parameter 'itemPath' root segment contains information for multiple segments`);
              this.segments.push(segment);
            } else {
              assert_1.default(!segment.includes(path14.sep), `Parameter 'itemPath' contains unexpected path separators`);
              this.segments.push(segment);
            }
          }
        }
      }
      /**
       * Converts the path to it's string representation
       */
      toString() {
        let result = this.segments[0];
        let skipSlash = result.endsWith(path14.sep) || IS_WINDOWS && /^[A-Z]:$/i.test(result);
        for (let i3 = 1; i3 < this.segments.length; i3++) {
          if (skipSlash) {
            skipSlash = false;
          } else {
            result += path14.sep;
          }
          result += this.segments[i3];
        }
        return result;
      }
    };
    exports2.Path = Path;
  }
});

// node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-pattern.js
var require_internal_pattern = __commonJS({
  "node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-pattern.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Pattern = void 0;
    var os5 = __importStar(__require("os"));
    var path14 = __importStar(__require("path"));
    var pathHelper = __importStar(require_internal_path_helper());
    var assert_1 = __importDefault(__require("assert"));
    var minimatch_1 = require_minimatch();
    var internal_match_kind_1 = require_internal_match_kind();
    var internal_path_1 = require_internal_path();
    var IS_WINDOWS = process.platform === "win32";
    var Pattern = class _Pattern {
      static {
        __name(this, "Pattern");
      }
      constructor(patternOrNegate, isImplicitPattern = false, segments, homedir) {
        this.negate = false;
        let pattern;
        if (typeof patternOrNegate === "string") {
          pattern = patternOrNegate.trim();
        } else {
          segments = segments || [];
          assert_1.default(segments.length, `Parameter 'segments' must not empty`);
          const root = _Pattern.getLiteral(segments[0]);
          assert_1.default(root && pathHelper.hasAbsoluteRoot(root), `Parameter 'segments' first element must be a root path`);
          pattern = new internal_path_1.Path(segments).toString().trim();
          if (patternOrNegate) {
            pattern = `!${pattern}`;
          }
        }
        while (pattern.startsWith("!")) {
          this.negate = !this.negate;
          pattern = pattern.substr(1).trim();
        }
        pattern = _Pattern.fixupPattern(pattern, homedir);
        this.segments = new internal_path_1.Path(pattern).segments;
        this.trailingSeparator = pathHelper.normalizeSeparators(pattern).endsWith(path14.sep);
        pattern = pathHelper.safeTrimTrailingSeparator(pattern);
        let foundGlob = false;
        const searchSegments = this.segments.map((x3) => _Pattern.getLiteral(x3)).filter((x3) => !foundGlob && !(foundGlob = x3 === ""));
        this.searchPath = new internal_path_1.Path(searchSegments).toString();
        this.rootRegExp = new RegExp(_Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? "i" : "");
        this.isImplicitPattern = isImplicitPattern;
        const minimatchOptions2 = {
          dot: true,
          nobrace: true,
          nocase: IS_WINDOWS,
          nocomment: true,
          noext: true,
          nonegate: true
        };
        pattern = IS_WINDOWS ? pattern.replace(/\\/g, "/") : pattern;
        this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions2);
      }
      /**
       * Matches the pattern against the specified path
       */
      match(itemPath) {
        if (this.segments[this.segments.length - 1] === "**") {
          itemPath = pathHelper.normalizeSeparators(itemPath);
          if (!itemPath.endsWith(path14.sep) && this.isImplicitPattern === false) {
            itemPath = `${itemPath}${path14.sep}`;
          }
        } else {
          itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        }
        if (this.minimatch.match(itemPath)) {
          return this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All;
        }
        return internal_match_kind_1.MatchKind.None;
      }
      /**
       * Indicates whether the pattern may match descendants of the specified path
       */
      partialMatch(itemPath) {
        itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        if (pathHelper.dirname(itemPath) === itemPath) {
          return this.rootRegExp.test(itemPath);
        }
        return this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\+/ : /\/+/), this.minimatch.set[0], true);
      }
      /**
       * Escapes glob patterns within a path
       */
      static globEscape(s3) {
        return (IS_WINDOWS ? s3 : s3.replace(/\\/g, "\\\\")).replace(/(\[)(?=[^/]+\])/g, "[[]").replace(/\?/g, "[?]").replace(/\*/g, "[*]");
      }
      /**
       * Normalizes slashes and ensures absolute root
       */
      static fixupPattern(pattern, homedir) {
        assert_1.default(pattern, "pattern cannot be empty");
        const literalSegments = new internal_path_1.Path(pattern).segments.map((x3) => _Pattern.getLiteral(x3));
        assert_1.default(literalSegments.every((x3, i3) => (x3 !== "." || i3 === 0) && x3 !== ".."), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`);
        assert_1.default(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`);
        pattern = pathHelper.normalizeSeparators(pattern);
        if (pattern === "." || pattern.startsWith(`.${path14.sep}`)) {
          pattern = _Pattern.globEscape(process.cwd()) + pattern.substr(1);
        } else if (pattern === "~" || pattern.startsWith(`~${path14.sep}`)) {
          homedir = homedir || os5.homedir();
          assert_1.default(homedir, "Unable to determine HOME directory");
          assert_1.default(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`);
          pattern = _Pattern.globEscape(homedir) + pattern.substr(1);
        } else if (IS_WINDOWS && (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\]/i))) {
          let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", pattern.substr(0, 2));
          if (pattern.length > 2 && !root.endsWith("\\")) {
            root += "\\";
          }
          pattern = _Pattern.globEscape(root) + pattern.substr(2);
        } else if (IS_WINDOWS && (pattern === "\\" || pattern.match(/^\\[^\\]/))) {
          let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", "\\");
          if (!root.endsWith("\\")) {
            root += "\\";
          }
          pattern = _Pattern.globEscape(root) + pattern.substr(1);
        } else {
          pattern = pathHelper.ensureAbsoluteRoot(_Pattern.globEscape(process.cwd()), pattern);
        }
        return pathHelper.normalizeSeparators(pattern);
      }
      /**
       * Attempts to unescape a pattern segment to create a literal path segment.
       * Otherwise returns empty string.
       */
      static getLiteral(segment) {
        let literal = "";
        for (let i3 = 0; i3 < segment.length; i3++) {
          const c3 = segment[i3];
          if (c3 === "\\" && !IS_WINDOWS && i3 + 1 < segment.length) {
            literal += segment[++i3];
            continue;
          } else if (c3 === "*" || c3 === "?") {
            return "";
          } else if (c3 === "[" && i3 + 1 < segment.length) {
            let set2 = "";
            let closed = -1;
            for (let i22 = i3 + 1; i22 < segment.length; i22++) {
              const c22 = segment[i22];
              if (c22 === "\\" && !IS_WINDOWS && i22 + 1 < segment.length) {
                set2 += segment[++i22];
                continue;
              } else if (c22 === "]") {
                closed = i22;
                break;
              } else {
                set2 += c22;
              }
            }
            if (closed >= 0) {
              if (set2.length > 1) {
                return "";
              }
              if (set2) {
                literal += set2;
                i3 = closed;
                continue;
              }
            }
          }
          literal += c3;
        }
        return literal;
      }
      /**
       * Escapes regexp special characters
       * https://javascript.info/regexp-escaping
       */
      static regExpEscape(s3) {
        return s3.replace(/[[\\^$.|?*+()]/g, "\\$&");
      }
    };
    exports2.Pattern = Pattern;
  }
});

// node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-search-state.js
var require_internal_search_state = __commonJS({
  "node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-search-state.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchState = void 0;
    var SearchState = class {
      static {
        __name(this, "SearchState");
      }
      constructor(path14, level) {
        this.path = path14;
        this.level = level;
      }
    };
    exports2.SearchState = SearchState;
  }
});

// node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-globber.js
var require_internal_globber = __commonJS({
  "node_modules/@actions/cache/node_modules/@actions/glob/lib/internal-globber.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m3[k3];
      }, "get") });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues2 = exports2 && exports2.__asyncValues || function(o3) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m3 = o3[Symbol.asyncIterator], i3;
      return m3 ? m3.call(o3) : (o3 = typeof __values === "function" ? __values(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
        return this;
      }, i3);
      function verb(n3) {
        i3[n3] = o3[n3] && function(v3) {
          return new Promise(function(resolve2, reject) {
            v3 = o3[n3](v3), settle(resolve2, reject, v3.done, v3.value);
          });
        };
      }
      __name(verb, "verb");
      function settle(resolve2, reject, d3, v3) {
        Promise.resolve(v3).then(function(v4) {
          resolve2({ value: v4, done: d3 });
        }, reject);
      }
      __name(settle, "settle");
    };
    var __await2 = exports2 && exports2.__await || function(v3) {
      return this instanceof __await2 ? (this.v = v3, this) : new __await2(v3);
    };
    var __asyncGenerator2 = exports2 && exports2.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g3 = generator.apply(thisArg, _arguments || []), i3, q2 = [];
      return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
        return this;
      }, i3;
      function verb(n3) {
        if (g3[n3]) i3[n3] = function(v3) {
          return new Promise(function(a3, b3) {
            q2.push([n3, v3, a3, b3]) > 1 || resume(n3, v3);
          });
        };
      }
      __name(verb, "verb");
      function resume(n3, v3) {
        try {
          step(g3[n3](v3));
        } catch (e3) {
          settle(q2[0][3], e3);
        }
      }
      __name(resume, "resume");
      function step(r3) {
        r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
      }
      __name(step, "step");
      function fulfill(value) {
        resume("next", value);
      }
      __name(fulfill, "fulfill");
      function reject(value) {
        resume("throw", value);
      }
      __name(reject, "reject");
      function settle(f3, v3) {
        if (f3(v3), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
      }
      __name(settle, "settle");
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultGlobber = void 0;
    var core2 = __importStar(require_core());
    var fs4 = __importStar(__require("fs"));
    var globOptionsHelper = __importStar(require_internal_glob_options_helper());
    var path14 = __importStar(__require("path"));
    var patternHelper = __importStar(require_internal_pattern_helper());
    var internal_match_kind_1 = require_internal_match_kind();
    var internal_pattern_1 = require_internal_pattern();
    var internal_search_state_1 = require_internal_search_state();
    var IS_WINDOWS = process.platform === "win32";
    var DefaultGlobber = class _DefaultGlobber {
      static {
        __name(this, "DefaultGlobber");
      }
      constructor(options) {
        this.patterns = [];
        this.searchPaths = [];
        this.options = globOptionsHelper.getOptions(options);
      }
      getSearchPaths() {
        return this.searchPaths.slice();
      }
      glob() {
        var e_1, _a4;
        return __awaiter6(this, void 0, void 0, function* () {
          const result = [];
          try {
            for (var _b2 = __asyncValues2(this.globGenerator()), _c2; _c2 = yield _b2.next(), !_c2.done; ) {
              const itemPath = _c2.value;
              result.push(itemPath);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c2 && !_c2.done && (_a4 = _b2.return)) yield _a4.call(_b2);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          return result;
        });
      }
      globGenerator() {
        return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* globGenerator_1() {
          const options = globOptionsHelper.getOptions(this.options);
          const patterns = [];
          for (const pattern of this.patterns) {
            patterns.push(pattern);
            if (options.implicitDescendants && (pattern.trailingSeparator || pattern.segments[pattern.segments.length - 1] !== "**")) {
              patterns.push(new internal_pattern_1.Pattern(pattern.negate, true, pattern.segments.concat("**")));
            }
          }
          const stack = [];
          for (const searchPath of patternHelper.getSearchPaths(patterns)) {
            core2.debug(`Search path '${searchPath}'`);
            try {
              yield __await2(fs4.promises.lstat(searchPath));
            } catch (err) {
              if (err.code === "ENOENT") {
                continue;
              }
              throw err;
            }
            stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));
          }
          const traversalChain = [];
          while (stack.length) {
            const item = stack.pop();
            const match3 = patternHelper.match(patterns, item.path);
            const partialMatch = !!match3 || patternHelper.partialMatch(patterns, item.path);
            if (!match3 && !partialMatch) {
              continue;
            }
            const stats = yield __await2(
              _DefaultGlobber.stat(item, options, traversalChain)
              // Broken symlink, or symlink cycle detected, or no longer exists
            );
            if (!stats) {
              continue;
            }
            if (stats.isDirectory()) {
              if (match3 & internal_match_kind_1.MatchKind.Directory) {
                yield yield __await2(item.path);
              } else if (!partialMatch) {
                continue;
              }
              const childLevel = item.level + 1;
              const childItems = (yield __await2(fs4.promises.readdir(item.path))).map((x3) => new internal_search_state_1.SearchState(path14.join(item.path, x3), childLevel));
              stack.push(...childItems.reverse());
            } else if (match3 & internal_match_kind_1.MatchKind.File) {
              yield yield __await2(item.path);
            }
          }
        }, "globGenerator_1"));
      }
      /**
       * Constructs a DefaultGlobber
       */
      static create(patterns, options) {
        return __awaiter6(this, void 0, void 0, function* () {
          const result = new _DefaultGlobber(options);
          if (IS_WINDOWS) {
            patterns = patterns.replace(/\r\n/g, "\n");
            patterns = patterns.replace(/\r/g, "\n");
          }
          const lines = patterns.split("\n").map((x3) => x3.trim());
          for (const line of lines) {
            if (!line || line.startsWith("#")) {
              continue;
            } else {
              result.patterns.push(new internal_pattern_1.Pattern(line));
            }
          }
          result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns));
          return result;
        });
      }
      static stat(item, options, traversalChain) {
        return __awaiter6(this, void 0, void 0, function* () {
          let stats;
          if (options.followSymbolicLinks) {
            try {
              stats = yield fs4.promises.stat(item.path);
            } catch (err) {
              if (err.code === "ENOENT") {
                if (options.omitBrokenSymbolicLinks) {
                  core2.debug(`Broken symlink '${item.path}'`);
                  return void 0;
                }
                throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);
              }
              throw err;
            }
          } else {
            stats = yield fs4.promises.lstat(item.path);
          }
          if (stats.isDirectory() && options.followSymbolicLinks) {
            const realPath = yield fs4.promises.realpath(item.path);
            while (traversalChain.length >= item.level) {
              traversalChain.pop();
            }
            if (traversalChain.some((x3) => x3 === realPath)) {
              core2.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);
              return void 0;
            }
            traversalChain.push(realPath);
          }
          return stats;
        });
      }
    };
    exports2.DefaultGlobber = DefaultGlobber;
  }
});

// node_modules/@actions/cache/node_modules/@actions/glob/lib/glob.js
var require_glob = __commonJS({
  "node_modules/@actions/cache/node_modules/@actions/glob/lib/glob.js"(exports2) {
    "use strict";
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.create = void 0;
    var internal_globber_1 = require_internal_globber();
    function create(patterns, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        return yield internal_globber_1.DefaultGlobber.create(patterns, options);
      });
    }
    __name(create, "create");
    exports2.create = create;
  }
});

// node_modules/@actions/cache/lib/internal/constants.js
var require_constants7 = __commonJS({
  "node_modules/@actions/cache/lib/internal/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CacheFileSizeLimit = exports2.ManifestFilename = exports2.TarFilename = exports2.SystemTarPathOnWindows = exports2.GnuTarPathOnWindows = exports2.SocketTimeout = exports2.DefaultRetryDelay = exports2.DefaultRetryAttempts = exports2.ArchiveToolType = exports2.CompressionMethod = exports2.CacheFilename = void 0;
    var CacheFilename;
    (function(CacheFilename2) {
      CacheFilename2["Gzip"] = "cache.tgz";
      CacheFilename2["Zstd"] = "cache.tzst";
    })(CacheFilename || (exports2.CacheFilename = CacheFilename = {}));
    var CompressionMethod;
    (function(CompressionMethod2) {
      CompressionMethod2["Gzip"] = "gzip";
      CompressionMethod2["ZstdWithoutLong"] = "zstd-without-long";
      CompressionMethod2["Zstd"] = "zstd";
    })(CompressionMethod || (exports2.CompressionMethod = CompressionMethod = {}));
    var ArchiveToolType;
    (function(ArchiveToolType2) {
      ArchiveToolType2["GNU"] = "gnu";
      ArchiveToolType2["BSD"] = "bsd";
    })(ArchiveToolType || (exports2.ArchiveToolType = ArchiveToolType = {}));
    exports2.DefaultRetryAttempts = 2;
    exports2.DefaultRetryDelay = 5e3;
    exports2.SocketTimeout = 5e3;
    exports2.GnuTarPathOnWindows = `${process.env["PROGRAMFILES"]}\\Git\\usr\\bin\\tar.exe`;
    exports2.SystemTarPathOnWindows = `${process.env["SYSTEMDRIVE"]}\\Windows\\System32\\tar.exe`;
    exports2.TarFilename = "cache.tar";
    exports2.ManifestFilename = "manifest.txt";
    exports2.CacheFileSizeLimit = 10 * Math.pow(1024, 3);
  }
});

// node_modules/@actions/cache/lib/internal/cacheUtils.js
var require_cacheUtils = __commonJS({
  "node_modules/@actions/cache/lib/internal/cacheUtils.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues2 = exports2 && exports2.__asyncValues || function(o3) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m3 = o3[Symbol.asyncIterator], i3;
      return m3 ? m3.call(o3) : (o3 = typeof __values === "function" ? __values(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
        return this;
      }, i3);
      function verb(n3) {
        i3[n3] = o3[n3] && function(v3) {
          return new Promise(function(resolve2, reject) {
            v3 = o3[n3](v3), settle(resolve2, reject, v3.done, v3.value);
          });
        };
      }
      __name(verb, "verb");
      function settle(resolve2, reject, d3, v3) {
        Promise.resolve(v3).then(function(v4) {
          resolve2({ value: v4, done: d3 });
        }, reject);
      }
      __name(settle, "settle");
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeToken = exports2.getCacheVersion = exports2.assertDefined = exports2.getGnuTarPathOnWindows = exports2.getCacheFileName = exports2.getCompressionMethod = exports2.unlinkFile = exports2.resolvePaths = exports2.getArchiveFileSizeInBytes = exports2.createTempDirectory = void 0;
    var core2 = __importStar(require_core());
    var exec2 = __importStar(require_exec());
    var glob = __importStar(require_glob());
    var io2 = __importStar(require_io());
    var crypto = __importStar(__require("crypto"));
    var fs4 = __importStar(__require("fs"));
    var path14 = __importStar(__require("path"));
    var semver = __importStar(require_semver2());
    var util3 = __importStar(__require("util"));
    var constants_1 = require_constants7();
    var versionSalt = "1.0";
    function createTempDirectory() {
      return __awaiter6(this, void 0, void 0, function* () {
        const IS_WINDOWS = process.platform === "win32";
        let tempDirectory = process.env["RUNNER_TEMP"] || "";
        if (!tempDirectory) {
          let baseLocation;
          if (IS_WINDOWS) {
            baseLocation = process.env["USERPROFILE"] || "C:\\";
          } else {
            if (process.platform === "darwin") {
              baseLocation = "/Users";
            } else {
              baseLocation = "/home";
            }
          }
          tempDirectory = path14.join(baseLocation, "actions", "temp");
        }
        const dest = path14.join(tempDirectory, crypto.randomUUID());
        yield io2.mkdirP(dest);
        return dest;
      });
    }
    __name(createTempDirectory, "createTempDirectory");
    exports2.createTempDirectory = createTempDirectory;
    function getArchiveFileSizeInBytes(filePath) {
      return fs4.statSync(filePath).size;
    }
    __name(getArchiveFileSizeInBytes, "getArchiveFileSizeInBytes");
    exports2.getArchiveFileSizeInBytes = getArchiveFileSizeInBytes;
    function resolvePaths(patterns) {
      var _a4, e_1, _b2, _c2;
      var _d2;
      return __awaiter6(this, void 0, void 0, function* () {
        const paths = [];
        const workspace = (_d2 = process.env["GITHUB_WORKSPACE"]) !== null && _d2 !== void 0 ? _d2 : process.cwd();
        const globber = yield glob.create(patterns.join("\n"), {
          implicitDescendants: false
        });
        try {
          for (var _e2 = true, _f = __asyncValues2(globber.globGenerator()), _g; _g = yield _f.next(), _a4 = _g.done, !_a4; _e2 = true) {
            _c2 = _g.value;
            _e2 = false;
            const file = _c2;
            const relativeFile = path14.relative(workspace, file).replace(new RegExp(`\\${path14.sep}`, "g"), "/");
            core2.debug(`Matched: ${relativeFile}`);
            if (relativeFile === "") {
              paths.push(".");
            } else {
              paths.push(`${relativeFile}`);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (!_e2 && !_a4 && (_b2 = _f.return)) yield _b2.call(_f);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return paths;
      });
    }
    __name(resolvePaths, "resolvePaths");
    exports2.resolvePaths = resolvePaths;
    function unlinkFile(filePath) {
      return __awaiter6(this, void 0, void 0, function* () {
        return util3.promisify(fs4.unlink)(filePath);
      });
    }
    __name(unlinkFile, "unlinkFile");
    exports2.unlinkFile = unlinkFile;
    function getVersion2(app, additionalArgs = []) {
      return __awaiter6(this, void 0, void 0, function* () {
        let versionOutput = "";
        additionalArgs.push("--version");
        core2.debug(`Checking ${app} ${additionalArgs.join(" ")}`);
        try {
          yield exec2.exec(`${app}`, additionalArgs, {
            ignoreReturnCode: true,
            silent: true,
            listeners: {
              stdout: /* @__PURE__ */ __name((data) => versionOutput += data.toString(), "stdout"),
              stderr: /* @__PURE__ */ __name((data) => versionOutput += data.toString(), "stderr")
            }
          });
        } catch (err) {
          core2.debug(err.message);
        }
        versionOutput = versionOutput.trim();
        core2.debug(versionOutput);
        return versionOutput;
      });
    }
    __name(getVersion2, "getVersion");
    function getCompressionMethod() {
      return __awaiter6(this, void 0, void 0, function* () {
        const versionOutput = yield getVersion2("zstd", ["--quiet"]);
        const version3 = semver.clean(versionOutput);
        core2.debug(`zstd version: ${version3}`);
        if (versionOutput === "") {
          return constants_1.CompressionMethod.Gzip;
        } else {
          return constants_1.CompressionMethod.ZstdWithoutLong;
        }
      });
    }
    __name(getCompressionMethod, "getCompressionMethod");
    exports2.getCompressionMethod = getCompressionMethod;
    function getCacheFileName(compressionMethod) {
      return compressionMethod === constants_1.CompressionMethod.Gzip ? constants_1.CacheFilename.Gzip : constants_1.CacheFilename.Zstd;
    }
    __name(getCacheFileName, "getCacheFileName");
    exports2.getCacheFileName = getCacheFileName;
    function getGnuTarPathOnWindows() {
      return __awaiter6(this, void 0, void 0, function* () {
        if (fs4.existsSync(constants_1.GnuTarPathOnWindows)) {
          return constants_1.GnuTarPathOnWindows;
        }
        const versionOutput = yield getVersion2("tar");
        return versionOutput.toLowerCase().includes("gnu tar") ? io2.which("tar") : "";
      });
    }
    __name(getGnuTarPathOnWindows, "getGnuTarPathOnWindows");
    exports2.getGnuTarPathOnWindows = getGnuTarPathOnWindows;
    function assertDefined(name2, value) {
      if (value === void 0) {
        throw Error(`Expected ${name2} but value was undefiend`);
      }
      return value;
    }
    __name(assertDefined, "assertDefined");
    exports2.assertDefined = assertDefined;
    function getCacheVersion(paths, compressionMethod, enableCrossOsArchive = false) {
      const components = paths.slice();
      if (compressionMethod) {
        components.push(compressionMethod);
      }
      if (process.platform === "win32" && !enableCrossOsArchive) {
        components.push("windows-only");
      }
      components.push(versionSalt);
      return crypto.createHash("sha256").update(components.join("|")).digest("hex");
    }
    __name(getCacheVersion, "getCacheVersion");
    exports2.getCacheVersion = getCacheVersion;
    function getRuntimeToken() {
      const token = process.env["ACTIONS_RUNTIME_TOKEN"];
      if (!token) {
        throw new Error("Unable to get the ACTIONS_RUNTIME_TOKEN env variable");
      }
      return token;
    }
    __name(getRuntimeToken, "getRuntimeToken");
    exports2.getRuntimeToken = getRuntimeToken;
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js
function createEmptyPipeline() {
  return HttpPipeline.create();
}
var ValidPhaseNames, HttpPipeline;
var init_pipeline = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js"() {
    "use strict";
    ValidPhaseNames = /* @__PURE__ */ new Set(["Deserialize", "Serialize", "Retry", "Sign"]);
    HttpPipeline = class _HttpPipeline {
      static {
        __name(this, "HttpPipeline");
      }
      constructor(policies) {
        var _a4;
        this._policies = [];
        this._policies = (_a4 = policies === null || policies === void 0 ? void 0 : policies.slice(0)) !== null && _a4 !== void 0 ? _a4 : [];
        this._orderedPolicies = void 0;
      }
      addPolicy(policy, options = {}) {
        if (options.phase && options.afterPhase) {
          throw new Error("Policies inside a phase cannot specify afterPhase.");
        }
        if (options.phase && !ValidPhaseNames.has(options.phase)) {
          throw new Error(`Invalid phase name: ${options.phase}`);
        }
        if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {
          throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);
        }
        this._policies.push({
          policy,
          options
        });
        this._orderedPolicies = void 0;
      }
      removePolicy(options) {
        const removedPolicies = [];
        this._policies = this._policies.filter((policyDescriptor) => {
          if (options.name && policyDescriptor.policy.name === options.name || options.phase && policyDescriptor.options.phase === options.phase) {
            removedPolicies.push(policyDescriptor.policy);
            return false;
          } else {
            return true;
          }
        });
        this._orderedPolicies = void 0;
        return removedPolicies;
      }
      sendRequest(httpClient, request3) {
        const policies = this.getOrderedPolicies();
        const pipeline = policies.reduceRight((next2, policy) => {
          return (req) => {
            return policy.sendRequest(req, next2);
          };
        }, (req) => httpClient.sendRequest(req));
        return pipeline(request3);
      }
      getOrderedPolicies() {
        if (!this._orderedPolicies) {
          this._orderedPolicies = this.orderPolicies();
        }
        return this._orderedPolicies;
      }
      clone() {
        return new _HttpPipeline(this._policies);
      }
      static create() {
        return new _HttpPipeline();
      }
      orderPolicies() {
        const result = [];
        const policyMap = /* @__PURE__ */ new Map();
        function createPhase(name2) {
          return {
            name: name2,
            policies: /* @__PURE__ */ new Set(),
            hasRun: false,
            hasAfterPolicies: false
          };
        }
        __name(createPhase, "createPhase");
        const serializePhase = createPhase("Serialize");
        const noPhase = createPhase("None");
        const deserializePhase = createPhase("Deserialize");
        const retryPhase = createPhase("Retry");
        const signPhase = createPhase("Sign");
        const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];
        function getPhase(phase) {
          if (phase === "Retry") {
            return retryPhase;
          } else if (phase === "Serialize") {
            return serializePhase;
          } else if (phase === "Deserialize") {
            return deserializePhase;
          } else if (phase === "Sign") {
            return signPhase;
          } else {
            return noPhase;
          }
        }
        __name(getPhase, "getPhase");
        for (const descriptor of this._policies) {
          const policy = descriptor.policy;
          const options = descriptor.options;
          const policyName = policy.name;
          if (policyMap.has(policyName)) {
            throw new Error("Duplicate policy names not allowed in pipeline");
          }
          const node = {
            policy,
            dependsOn: /* @__PURE__ */ new Set(),
            dependants: /* @__PURE__ */ new Set()
          };
          if (options.afterPhase) {
            node.afterPhase = getPhase(options.afterPhase);
            node.afterPhase.hasAfterPolicies = true;
          }
          policyMap.set(policyName, node);
          const phase = getPhase(options.phase);
          phase.policies.add(node);
        }
        for (const descriptor of this._policies) {
          const { policy, options } = descriptor;
          const policyName = policy.name;
          const node = policyMap.get(policyName);
          if (!node) {
            throw new Error(`Missing node for policy ${policyName}`);
          }
          if (options.afterPolicies) {
            for (const afterPolicyName of options.afterPolicies) {
              const afterNode = policyMap.get(afterPolicyName);
              if (afterNode) {
                node.dependsOn.add(afterNode);
                afterNode.dependants.add(node);
              }
            }
          }
          if (options.beforePolicies) {
            for (const beforePolicyName of options.beforePolicies) {
              const beforeNode = policyMap.get(beforePolicyName);
              if (beforeNode) {
                beforeNode.dependsOn.add(node);
                node.dependants.add(beforeNode);
              }
            }
          }
        }
        function walkPhase(phase) {
          phase.hasRun = true;
          for (const node of phase.policies) {
            if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {
              continue;
            }
            if (node.dependsOn.size === 0) {
              result.push(node.policy);
              for (const dependant of node.dependants) {
                dependant.dependsOn.delete(node);
              }
              policyMap.delete(node.policy.name);
              phase.policies.delete(node);
            }
          }
        }
        __name(walkPhase, "walkPhase");
        function walkPhases() {
          for (const phase of orderedPhases) {
            walkPhase(phase);
            if (phase.policies.size > 0 && phase !== noPhase) {
              if (!noPhase.hasRun) {
                walkPhase(noPhase);
              }
              return;
            }
            if (phase.hasAfterPolicies) {
              walkPhase(noPhase);
            }
          }
        }
        __name(walkPhases, "walkPhases");
        let iteration = 0;
        while (policyMap.size > 0) {
          iteration++;
          const initialResultLength = result.length;
          walkPhases();
          if (result.length <= initialResultLength && iteration > 1) {
            throw new Error("Cannot satisfy policy dependencies due to requirements cycle.");
          }
        }
        return result;
      }
    };
    __name(createEmptyPipeline, "createEmptyPipeline");
  }
});

// node_modules/@azure/logger/dist/esm/log.js
import { EOL as EOL4 } from "node:os";
import util from "node:util";
import * as process2 from "node:process";
function log(message, ...args) {
  process2.stderr.write(`${util.format(message, ...args)}${EOL4}`);
}
var init_log = __esm({
  "node_modules/@azure/logger/dist/esm/log.js"() {
    "use strict";
    __name(log, "log");
  }
});

// node_modules/@azure/logger/dist/esm/debug.js
function enable(namespaces) {
  enabledString = namespaces;
  enabledNamespaces = [];
  skippedNamespaces = [];
  const wildcard = /\*/g;
  const namespaceList = namespaces.split(",").map((ns2) => ns2.trim().replace(wildcard, ".*?"));
  for (const ns2 of namespaceList) {
    if (ns2.startsWith("-")) {
      skippedNamespaces.push(new RegExp(`^${ns2.substr(1)}$`));
    } else {
      enabledNamespaces.push(new RegExp(`^${ns2}$`));
    }
  }
  for (const instance of debuggers) {
    instance.enabled = enabled(instance.namespace);
  }
}
function enabled(namespace) {
  if (namespace.endsWith("*")) {
    return true;
  }
  for (const skipped of skippedNamespaces) {
    if (skipped.test(namespace)) {
      return false;
    }
  }
  for (const enabledNamespace of enabledNamespaces) {
    if (enabledNamespace.test(namespace)) {
      return true;
    }
  }
  return false;
}
function disable() {
  const result = enabledString || "";
  enable("");
  return result;
}
function createDebugger(namespace) {
  const newDebugger = Object.assign(debug3, {
    enabled: enabled(namespace),
    destroy,
    log: debugObj.log,
    namespace,
    extend
  });
  function debug3(...args) {
    if (!newDebugger.enabled) {
      return;
    }
    if (args.length > 0) {
      args[0] = `${namespace} ${args[0]}`;
    }
    newDebugger.log(...args);
  }
  __name(debug3, "debug");
  debuggers.push(newDebugger);
  return newDebugger;
}
function destroy() {
  const index2 = debuggers.indexOf(this);
  if (index2 >= 0) {
    debuggers.splice(index2, 1);
    return true;
  }
  return false;
}
function extend(namespace) {
  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);
  newDebugger.log = this.log;
  return newDebugger;
}
var debugEnvVariable, enabledString, enabledNamespaces, skippedNamespaces, debuggers, debugObj, debug_default;
var init_debug = __esm({
  "node_modules/@azure/logger/dist/esm/debug.js"() {
    "use strict";
    init_log();
    debugEnvVariable = typeof process !== "undefined" && process.env && process.env.DEBUG || void 0;
    enabledNamespaces = [];
    skippedNamespaces = [];
    debuggers = [];
    if (debugEnvVariable) {
      enable(debugEnvVariable);
    }
    debugObj = Object.assign((namespace) => {
      return createDebugger(namespace);
    }, {
      enable,
      enabled,
      disable,
      log
    });
    __name(enable, "enable");
    __name(enabled, "enabled");
    __name(disable, "disable");
    __name(createDebugger, "createDebugger");
    __name(destroy, "destroy");
    __name(extend, "extend");
    debug_default = debugObj;
  }
});

// node_modules/@azure/logger/dist/esm/index.js
function setLogLevel(level) {
  if (level && !isAzureLogLevel(level)) {
    throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(",")}`);
  }
  azureLogLevel = level;
  const enabledNamespaces2 = [];
  for (const logger6 of registeredLoggers) {
    if (shouldEnable(logger6)) {
      enabledNamespaces2.push(logger6.namespace);
    }
  }
  debug_default.enable(enabledNamespaces2.join(","));
}
function createClientLogger(namespace) {
  const clientRootLogger = AzureLogger.extend(namespace);
  patchLogMethod(AzureLogger, clientRootLogger);
  return {
    error: createLogger(clientRootLogger, "error"),
    warning: createLogger(clientRootLogger, "warning"),
    info: createLogger(clientRootLogger, "info"),
    verbose: createLogger(clientRootLogger, "verbose")
  };
}
function patchLogMethod(parent, child) {
  child.log = (...args) => {
    parent.log(...args);
  };
}
function createLogger(parent, level) {
  const logger6 = Object.assign(parent.extend(level), {
    level
  });
  patchLogMethod(parent, logger6);
  if (shouldEnable(logger6)) {
    const enabledNamespaces2 = debug_default.disable();
    debug_default.enable(enabledNamespaces2 + "," + logger6.namespace);
  }
  registeredLoggers.add(logger6);
  return logger6;
}
function shouldEnable(logger6) {
  return Boolean(azureLogLevel && levelMap[logger6.level] <= levelMap[azureLogLevel]);
}
function isAzureLogLevel(logLevel) {
  return AZURE_LOG_LEVELS.includes(logLevel);
}
var registeredLoggers, logLevelFromEnv, azureLogLevel, AzureLogger, AZURE_LOG_LEVELS, levelMap;
var init_esm = __esm({
  "node_modules/@azure/logger/dist/esm/index.js"() {
    "use strict";
    init_debug();
    registeredLoggers = /* @__PURE__ */ new Set();
    logLevelFromEnv = typeof process !== "undefined" && process.env && process.env.AZURE_LOG_LEVEL || void 0;
    AzureLogger = debug_default("azure");
    AzureLogger.log = (...args) => {
      debug_default.log(...args);
    };
    AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];
    if (logLevelFromEnv) {
      if (isAzureLogLevel(logLevelFromEnv)) {
        setLogLevel(logLevelFromEnv);
      } else {
        console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(", ")}.`);
      }
    }
    __name(setLogLevel, "setLogLevel");
    levelMap = {
      verbose: 400,
      info: 300,
      warning: 200,
      error: 100
    };
    __name(createClientLogger, "createClientLogger");
    __name(patchLogMethod, "patchLogMethod");
    __name(createLogger, "createLogger");
    __name(shouldEnable, "shouldEnable");
    __name(isAzureLogLevel, "isAzureLogLevel");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/log.js
var logger2;
var init_log2 = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/log.js"() {
    "use strict";
    init_esm();
    logger2 = createClientLogger("core-rest-pipeline");
  }
});

// node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js
var AbortError;
var init_AbortError = __esm({
  "node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js"() {
    "use strict";
    AbortError = class extends Error {
      static {
        __name(this, "AbortError");
      }
      constructor(message) {
        super(message);
        this.name = "AbortError";
      }
    };
  }
});

// node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js
var init_esm2 = __esm({
  "node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js"() {
    "use strict";
    init_AbortError();
  }
});

// node_modules/@azure/core-util/dist/esm/createAbortablePromise.js
function createAbortablePromise(buildPromise, options) {
  const { cleanupBeforeAbort, abortSignal: abortSignal2, abortErrorMsg } = options !== null && options !== void 0 ? options : {};
  return new Promise((resolve2, reject) => {
    function rejectOnAbort() {
      reject(new AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : "The operation was aborted."));
    }
    __name(rejectOnAbort, "rejectOnAbort");
    function removeListeners() {
      abortSignal2 === null || abortSignal2 === void 0 ? void 0 : abortSignal2.removeEventListener("abort", onAbort);
    }
    __name(removeListeners, "removeListeners");
    function onAbort() {
      cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();
      removeListeners();
      rejectOnAbort();
    }
    __name(onAbort, "onAbort");
    if (abortSignal2 === null || abortSignal2 === void 0 ? void 0 : abortSignal2.aborted) {
      return rejectOnAbort();
    }
    try {
      buildPromise((x3) => {
        removeListeners();
        resolve2(x3);
      }, (x3) => {
        removeListeners();
        reject(x3);
      });
    } catch (err) {
      reject(err);
    }
    abortSignal2 === null || abortSignal2 === void 0 ? void 0 : abortSignal2.addEventListener("abort", onAbort);
  });
}
var init_createAbortablePromise = __esm({
  "node_modules/@azure/core-util/dist/esm/createAbortablePromise.js"() {
    "use strict";
    init_esm2();
    __name(createAbortablePromise, "createAbortablePromise");
  }
});

// node_modules/@azure/core-util/dist/esm/random.js
function getRandomIntegerInclusive(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  const offset = Math.floor(Math.random() * (max - min + 1));
  return offset + min;
}
var init_random = __esm({
  "node_modules/@azure/core-util/dist/esm/random.js"() {
    "use strict";
    __name(getRandomIntegerInclusive, "getRandomIntegerInclusive");
  }
});

// node_modules/@azure/core-util/dist/esm/delay.js
function delay(timeInMs, options) {
  let token;
  const { abortSignal: abortSignal2, abortErrorMsg } = options !== null && options !== void 0 ? options : {};
  return createAbortablePromise((resolve2) => {
    token = setTimeout(resolve2, timeInMs);
  }, {
    cleanupBeforeAbort: /* @__PURE__ */ __name(() => clearTimeout(token), "cleanupBeforeAbort"),
    abortSignal: abortSignal2,
    abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage
  });
}
function calculateRetryDelay(retryAttempt, config) {
  const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);
  const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);
  const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);
  return { retryAfterInMs };
}
var StandardAbortMessage;
var init_delay = __esm({
  "node_modules/@azure/core-util/dist/esm/delay.js"() {
    "use strict";
    init_createAbortablePromise();
    init_random();
    StandardAbortMessage = "The delay was aborted.";
    __name(delay, "delay");
    __name(calculateRetryDelay, "calculateRetryDelay");
  }
});

// node_modules/@azure/core-util/dist/esm/aborterUtils.js
var init_aborterUtils = __esm({
  "node_modules/@azure/core-util/dist/esm/aborterUtils.js"() {
    "use strict";
  }
});

// node_modules/@azure/core-util/dist/esm/object.js
function isObject(input) {
  return typeof input === "object" && input !== null && !Array.isArray(input) && !(input instanceof RegExp) && !(input instanceof Date);
}
var init_object = __esm({
  "node_modules/@azure/core-util/dist/esm/object.js"() {
    "use strict";
    __name(isObject, "isObject");
  }
});

// node_modules/@azure/core-util/dist/esm/error.js
function isError(e3) {
  if (isObject(e3)) {
    const hasName = typeof e3.name === "string";
    const hasMessage = typeof e3.message === "string";
    return hasName && hasMessage;
  }
  return false;
}
function getErrorMessage(e3) {
  if (isError(e3)) {
    return e3.message;
  } else {
    let stringified;
    try {
      if (typeof e3 === "object" && e3) {
        stringified = JSON.stringify(e3);
      } else {
        stringified = String(e3);
      }
    } catch (err) {
      stringified = "[unable to stringify input]";
    }
    return `Unknown error ${stringified}`;
  }
}
var init_error = __esm({
  "node_modules/@azure/core-util/dist/esm/error.js"() {
    "use strict";
    init_object();
    __name(isError, "isError");
    __name(getErrorMessage, "getErrorMessage");
  }
});

// node_modules/@azure/core-util/dist/esm/sha256.js
var init_sha256 = __esm({
  "node_modules/@azure/core-util/dist/esm/sha256.js"() {
    "use strict";
  }
});

// node_modules/@azure/core-util/dist/esm/typeGuards.js
var init_typeGuards = __esm({
  "node_modules/@azure/core-util/dist/esm/typeGuards.js"() {
    "use strict";
  }
});

// node_modules/@azure/core-util/dist/esm/uuidUtils.js
import { randomUUID as v4RandomUUID } from "crypto";
function randomUUID() {
  return uuidFunction();
}
var _a2, uuidFunction;
var init_uuidUtils = __esm({
  "node_modules/@azure/core-util/dist/esm/uuidUtils.js"() {
    "use strict";
    uuidFunction = typeof ((_a2 = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a2 === void 0 ? void 0 : _a2.randomUUID) === "function" ? globalThis.crypto.randomUUID.bind(globalThis.crypto) : v4RandomUUID;
    __name(randomUUID, "randomUUID");
  }
});

// node_modules/@azure/core-util/dist/esm/checkEnvironment.js
var _a3, _b, _c, _d, isBrowser, isWebWorker, isDeno, isBun, isNodeLike, isNode, isReactNative;
var init_checkEnvironment = __esm({
  "node_modules/@azure/core-util/dist/esm/checkEnvironment.js"() {
    "use strict";
    isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
    isWebWorker = typeof self === "object" && typeof (self === null || self === void 0 ? void 0 : self.importScripts) === "function" && (((_a3 = self.constructor) === null || _a3 === void 0 ? void 0 : _a3.name) === "DedicatedWorkerGlobalScope" || ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === "ServiceWorkerGlobalScope" || ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === "SharedWorkerGlobalScope");
    isDeno = typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
    isBun = typeof Bun !== "undefined" && typeof Bun.version !== "undefined";
    isNodeLike = typeof globalThis.process !== "undefined" && Boolean(globalThis.process.version) && Boolean((_d = globalThis.process.versions) === null || _d === void 0 ? void 0 : _d.node);
    isNode = isNodeLike;
    isReactNative = typeof navigator !== "undefined" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === "ReactNative";
  }
});

// node_modules/@azure/core-util/dist/esm/bytesEncoding.js
function stringToUint8Array(value, format3) {
  return Buffer.from(value, format3);
}
var init_bytesEncoding = __esm({
  "node_modules/@azure/core-util/dist/esm/bytesEncoding.js"() {
    "use strict";
    __name(stringToUint8Array, "stringToUint8Array");
  }
});

// node_modules/@azure/core-util/dist/esm/index.js
var init_esm3 = __esm({
  "node_modules/@azure/core-util/dist/esm/index.js"() {
    "use strict";
    init_delay();
    init_aborterUtils();
    init_createAbortablePromise();
    init_random();
    init_object();
    init_error();
    init_sha256();
    init_typeGuards();
    init_uuidUtils();
    init_checkEnvironment();
    init_bytesEncoding();
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js
var RedactedString, defaultAllowedHeaderNames, defaultAllowedQueryParameters, Sanitizer;
var init_sanitizer = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js"() {
    "use strict";
    init_esm3();
    RedactedString = "REDACTED";
    defaultAllowedHeaderNames = [
      "x-ms-client-request-id",
      "x-ms-return-client-request-id",
      "x-ms-useragent",
      "x-ms-correlation-request-id",
      "x-ms-request-id",
      "client-request-id",
      "ms-cv",
      "return-client-request-id",
      "traceparent",
      "Access-Control-Allow-Credentials",
      "Access-Control-Allow-Headers",
      "Access-Control-Allow-Methods",
      "Access-Control-Allow-Origin",
      "Access-Control-Expose-Headers",
      "Access-Control-Max-Age",
      "Access-Control-Request-Headers",
      "Access-Control-Request-Method",
      "Origin",
      "Accept",
      "Accept-Encoding",
      "Cache-Control",
      "Connection",
      "Content-Length",
      "Content-Type",
      "Date",
      "ETag",
      "Expires",
      "If-Match",
      "If-Modified-Since",
      "If-None-Match",
      "If-Unmodified-Since",
      "Last-Modified",
      "Pragma",
      "Request-Id",
      "Retry-After",
      "Server",
      "Transfer-Encoding",
      "User-Agent",
      "WWW-Authenticate"
    ];
    defaultAllowedQueryParameters = ["api-version"];
    Sanitizer = class {
      static {
        __name(this, "Sanitizer");
      }
      constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [] } = {}) {
        allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);
        allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);
        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n3) => n3.toLowerCase()));
        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p3) => p3.toLowerCase()));
      }
      sanitize(obj) {
        const seen = /* @__PURE__ */ new Set();
        return JSON.stringify(obj, (key, value) => {
          if (value instanceof Error) {
            return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });
          }
          if (key === "headers") {
            return this.sanitizeHeaders(value);
          } else if (key === "url") {
            return this.sanitizeUrl(value);
          } else if (key === "query") {
            return this.sanitizeQuery(value);
          } else if (key === "body") {
            return void 0;
          } else if (key === "response") {
            return void 0;
          } else if (key === "operationSpec") {
            return void 0;
          } else if (Array.isArray(value) || isObject(value)) {
            if (seen.has(value)) {
              return "[Circular]";
            }
            seen.add(value);
          }
          return value;
        }, 2);
      }
      sanitizeUrl(value) {
        if (typeof value !== "string" || value === null || value === "") {
          return value;
        }
        const url2 = new URL(value);
        if (!url2.search) {
          return value;
        }
        for (const [key] of url2.searchParams) {
          if (!this.allowedQueryParameters.has(key.toLowerCase())) {
            url2.searchParams.set(key, RedactedString);
          }
        }
        return url2.toString();
      }
      sanitizeHeaders(obj) {
        const sanitized = {};
        for (const key of Object.keys(obj)) {
          if (this.allowedHeaderNames.has(key.toLowerCase())) {
            sanitized[key] = obj[key];
          } else {
            sanitized[key] = RedactedString;
          }
        }
        return sanitized;
      }
      sanitizeQuery(value) {
        if (typeof value !== "object" || value === null) {
          return value;
        }
        const sanitized = {};
        for (const k3 of Object.keys(value)) {
          if (this.allowedQueryParameters.has(k3.toLowerCase())) {
            sanitized[k3] = value[k3];
          } else {
            sanitized[k3] = RedactedString;
          }
        }
        return sanitized;
      }
    };
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js
function logPolicy(options = {}) {
  var _a4;
  const logger6 = (_a4 = options.logger) !== null && _a4 !== void 0 ? _a4 : logger2.info;
  const sanitizer = new Sanitizer({
    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,
    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
  });
  return {
    name: logPolicyName,
    async sendRequest(request3, next2) {
      if (!logger6.enabled) {
        return next2(request3);
      }
      logger6(`Request: ${sanitizer.sanitize(request3)}`);
      const response = await next2(request3);
      logger6(`Response status code: ${response.status}`);
      logger6(`Headers: ${sanitizer.sanitize(response.headers)}`);
      return response;
    }
  };
}
var logPolicyName;
var init_logPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js"() {
    "use strict";
    init_log2();
    init_sanitizer();
    logPolicyName = "logPolicy";
    __name(logPolicy, "logPolicy");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js
function redirectPolicy(options = {}) {
  const { maxRetries = 20 } = options;
  return {
    name: redirectPolicyName,
    async sendRequest(request3, next2) {
      const response = await next2(request3);
      return handleRedirect(next2, response, maxRetries);
    }
  };
}
async function handleRedirect(next2, response, maxRetries, currentRetries = 0) {
  const { request: request3, status, headers } = response;
  const locationHeader = headers.get("location");
  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request3.method) || status === 302 && allowedRedirect.includes(request3.method) || status === 303 && request3.method === "POST" || status === 307) && currentRetries < maxRetries) {
    const url2 = new URL(locationHeader, request3.url);
    request3.url = url2.toString();
    if (status === 303) {
      request3.method = "GET";
      request3.headers.delete("Content-Length");
      delete request3.body;
    }
    request3.headers.delete("Authorization");
    const res = await next2(request3);
    return handleRedirect(next2, res, maxRetries, currentRetries + 1);
  }
  return response;
}
var redirectPolicyName, allowedRedirect;
var init_redirectPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js"() {
    "use strict";
    redirectPolicyName = "redirectPolicy";
    allowedRedirect = ["GET", "HEAD"];
    __name(redirectPolicy, "redirectPolicy");
    __name(handleRedirect, "handleRedirect");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js
import * as os4 from "node:os";
import * as process3 from "node:process";
function getHeaderName() {
  return "User-Agent";
}
async function setPlatformSpecificData(map) {
  if (process3 && process3.versions) {
    const versions2 = process3.versions;
    if (versions2.bun) {
      map.set("Bun", versions2.bun);
    } else if (versions2.deno) {
      map.set("Deno", versions2.deno);
    } else if (versions2.node) {
      map.set("Node", versions2.node);
    }
  }
  map.set("OS", `(${os4.arch()}-${os4.type()}-${os4.release()})`);
}
var init_userAgentPlatform = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js"() {
    "use strict";
    __name(getHeaderName, "getHeaderName");
    __name(setPlatformSpecificData, "setPlatformSpecificData");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/constants.js
var SDK_VERSION, DEFAULT_RETRY_POLICY_COUNT;
var init_constants = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/constants.js"() {
    "use strict";
    SDK_VERSION = "1.19.1";
    DEFAULT_RETRY_POLICY_COUNT = 3;
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js
function getUserAgentString(telemetryInfo) {
  const parts = [];
  for (const [key, value] of telemetryInfo) {
    const token = value ? `${key}/${value}` : key;
    parts.push(token);
  }
  return parts.join(" ");
}
function getUserAgentHeaderName() {
  return getHeaderName();
}
async function getUserAgentValue(prefix2) {
  const runtimeInfo = /* @__PURE__ */ new Map();
  runtimeInfo.set("core-rest-pipeline", SDK_VERSION);
  await setPlatformSpecificData(runtimeInfo);
  const defaultAgent = getUserAgentString(runtimeInfo);
  const userAgentValue = prefix2 ? `${prefix2} ${defaultAgent}` : defaultAgent;
  return userAgentValue;
}
var init_userAgent = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js"() {
    "use strict";
    init_userAgentPlatform();
    init_constants();
    __name(getUserAgentString, "getUserAgentString");
    __name(getUserAgentHeaderName, "getUserAgentHeaderName");
    __name(getUserAgentValue, "getUserAgentValue");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js
function userAgentPolicy(options = {}) {
  const userAgentValue = getUserAgentValue(options.userAgentPrefix);
  return {
    name: userAgentPolicyName,
    async sendRequest(request3, next2) {
      if (!request3.headers.has(UserAgentHeaderName)) {
        request3.headers.set(UserAgentHeaderName, await userAgentValue);
      }
      return next2(request3);
    }
  };
}
var UserAgentHeaderName, userAgentPolicyName;
var init_userAgentPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js"() {
    "use strict";
    init_userAgent();
    UserAgentHeaderName = getUserAgentHeaderName();
    userAgentPolicyName = "userAgentPolicy";
    __name(userAgentPolicy, "userAgentPolicy");
  }
});

// node_modules/tslib/tslib.es6.mjs
function __rest(s3, e3) {
  var t3 = {};
  for (var p3 in s3) if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
    t3[p3] = s3[p3];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
      if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
        t3[p3[i3]] = s3[p3[i3]];
    }
  return t3;
}
function __values2(o3) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
  if (m3) return m3.call(o3);
  if (o3 && typeof o3.length === "number") return {
    next: /* @__PURE__ */ __name(function() {
      if (o3 && i3 >= o3.length) o3 = void 0;
      return { value: o3 && o3[i3++], done: !o3 };
    }, "next")
  };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await(v3) {
  return this instanceof __await ? (this.v = v3, this) : new __await(v3);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g3 = generator.apply(thisArg, _arguments || []), i3, q2 = [];
  return i3 = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i3[Symbol.asyncIterator] = function() {
    return this;
  }, i3;
  function awaitReturn(f3) {
    return function(v3) {
      return Promise.resolve(v3).then(f3, reject);
    };
  }
  __name(awaitReturn, "awaitReturn");
  function verb(n3, f3) {
    if (g3[n3]) {
      i3[n3] = function(v3) {
        return new Promise(function(a3, b3) {
          q2.push([n3, v3, a3, b3]) > 1 || resume(n3, v3);
        });
      };
      if (f3) i3[n3] = f3(i3[n3]);
    }
  }
  __name(verb, "verb");
  function resume(n3, v3) {
    try {
      step(g3[n3](v3));
    } catch (e3) {
      settle(q2[0][3], e3);
    }
  }
  __name(resume, "resume");
  function step(r3) {
    r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
  }
  __name(step, "step");
  function fulfill(value) {
    resume("next", value);
  }
  __name(fulfill, "fulfill");
  function reject(value) {
    resume("throw", value);
  }
  __name(reject, "reject");
  function settle(f3, v3) {
    if (f3(v3), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
  }
  __name(settle, "settle");
}
function __asyncDelegator(o3) {
  var i3, p3;
  return i3 = {}, verb("next"), verb("throw", function(e3) {
    throw e3;
  }), verb("return"), i3[Symbol.iterator] = function() {
    return this;
  }, i3;
  function verb(n3, f3) {
    i3[n3] = o3[n3] ? function(v3) {
      return (p3 = !p3) ? { value: __await(o3[n3](v3)), done: false } : f3 ? f3(v3) : v3;
    } : f3;
  }
  __name(verb, "verb");
}
function __asyncValues(o3) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m3 = o3[Symbol.asyncIterator], i3;
  return m3 ? m3.call(o3) : (o3 = typeof __values2 === "function" ? __values2(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
    return this;
  }, i3);
  function verb(n3) {
    i3[n3] = o3[n3] && function(v3) {
      return new Promise(function(resolve2, reject) {
        v3 = o3[n3](v3), settle(resolve2, reject, v3.done, v3.value);
      });
    };
  }
  __name(verb, "verb");
  function settle(resolve2, reject, d3, v3) {
    Promise.resolve(v3).then(function(v4) {
      resolve2({ value: v4, done: d3 });
    }, reject);
  }
  __name(settle, "settle");
}
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    "use strict";
    __name(__rest, "__rest");
    __name(__values2, "__values");
    __name(__await, "__await");
    __name(__asyncGenerator, "__asyncGenerator");
    __name(__asyncDelegator, "__asyncDelegator");
    __name(__asyncValues, "__asyncValues");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js
function isBlob(x3) {
  return typeof x3.stream === "function";
}
var init_typeGuards2 = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js"() {
    "use strict";
    __name(isBlob, "isBlob");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js
function hasRawContent(x3) {
  return typeof x3[rawContent] === "function";
}
function getRawContent(blob) {
  if (hasRawContent(blob)) {
    return blob[rawContent]();
  } else {
    return blob.stream();
  }
}
var rawContent;
var init_file = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js"() {
    "use strict";
    init_esm3();
    init_typeGuards2();
    rawContent = Symbol("rawContent");
    __name(hasRawContent, "hasRawContent");
    __name(getRawContent, "getRawContent");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js
import { Readable } from "node:stream";
function streamAsyncIterator() {
  return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* streamAsyncIterator_1() {
    const reader = this.getReader();
    try {
      while (true) {
        const { done, value } = yield __await(reader.read());
        if (done) {
          return yield __await(void 0);
        }
        yield yield __await(value);
      }
    } finally {
      reader.releaseLock();
    }
  }, "streamAsyncIterator_1"));
}
function makeAsyncIterable(webStream) {
  if (!webStream[Symbol.asyncIterator]) {
    webStream[Symbol.asyncIterator] = streamAsyncIterator.bind(webStream);
  }
  if (!webStream.values) {
    webStream.values = streamAsyncIterator.bind(webStream);
  }
}
function ensureNodeStream(stream) {
  if (stream instanceof ReadableStream) {
    makeAsyncIterable(stream);
    return Readable.fromWeb(stream);
  } else {
    return stream;
  }
}
function toStream(source) {
  if (source instanceof Uint8Array) {
    return Readable.from(Buffer.from(source));
  } else if (isBlob(source)) {
    return toStream(getRawContent(source));
  } else {
    return ensureNodeStream(source);
  }
}
async function concat(sources) {
  return function() {
    const streams = sources.map((x3) => typeof x3 === "function" ? x3() : x3).map(toStream);
    return Readable.from(function() {
      return __asyncGenerator(this, arguments, function* () {
        var _a4, e_1, _b2, _c2;
        for (const stream of streams) {
          try {
            for (var _d2 = true, stream_1 = (e_1 = void 0, __asyncValues(stream)), stream_1_1; stream_1_1 = yield __await(stream_1.next()), _a4 = stream_1_1.done, !_a4; _d2 = true) {
              _c2 = stream_1_1.value;
              _d2 = false;
              const chunk = _c2;
              yield yield __await(chunk);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (!_d2 && !_a4 && (_b2 = stream_1.return)) yield __await(_b2.call(stream_1));
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }
      });
    }());
  };
}
var init_concat = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js"() {
    "use strict";
    init_tslib_es6();
    init_typeGuards2();
    init_file();
    __name(streamAsyncIterator, "streamAsyncIterator");
    __name(makeAsyncIterable, "makeAsyncIterable");
    __name(ensureNodeStream, "ensureNodeStream");
    __name(toStream, "toStream");
    __name(concat, "concat");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js
function generateBoundary() {
  return `----AzSDKFormBoundary${randomUUID()}`;
}
function encodeHeaders(headers) {
  let result = "";
  for (const [key, value] of headers) {
    result += `${key}: ${value}\r
`;
  }
  return result;
}
function getLength(source) {
  if (source instanceof Uint8Array) {
    return source.byteLength;
  } else if (isBlob(source)) {
    return source.size === -1 ? void 0 : source.size;
  } else {
    return void 0;
  }
}
function getTotalLength(sources) {
  let total = 0;
  for (const source of sources) {
    const partLength = getLength(source);
    if (partLength === void 0) {
      return void 0;
    } else {
      total += partLength;
    }
  }
  return total;
}
async function buildRequestBody(request3, parts, boundary) {
  const sources = [
    stringToUint8Array(`--${boundary}`, "utf-8"),
    ...parts.flatMap((part) => [
      stringToUint8Array("\r\n", "utf-8"),
      stringToUint8Array(encodeHeaders(part.headers), "utf-8"),
      stringToUint8Array("\r\n", "utf-8"),
      part.body,
      stringToUint8Array(`\r
--${boundary}`, "utf-8")
    ]),
    stringToUint8Array("--\r\n\r\n", "utf-8")
  ];
  const contentLength2 = getTotalLength(sources);
  if (contentLength2) {
    request3.headers.set("Content-Length", contentLength2);
  }
  request3.body = await concat(sources);
}
function assertValidBoundary(boundary) {
  if (boundary.length > maxBoundaryLength) {
    throw new Error(`Multipart boundary "${boundary}" exceeds maximum length of 70 characters`);
  }
  if (Array.from(boundary).some((x3) => !validBoundaryCharacters.has(x3))) {
    throw new Error(`Multipart boundary "${boundary}" contains invalid characters`);
  }
}
function multipartPolicy() {
  return {
    name: multipartPolicyName,
    async sendRequest(request3, next2) {
      var _a4;
      if (!request3.multipartBody) {
        return next2(request3);
      }
      if (request3.body) {
        throw new Error("multipartBody and regular body cannot be set at the same time");
      }
      let boundary = request3.multipartBody.boundary;
      const contentTypeHeader = (_a4 = request3.headers.get("Content-Type")) !== null && _a4 !== void 0 ? _a4 : "multipart/mixed";
      const parsedHeader = contentTypeHeader.match(/^(multipart\/[^ ;]+)(?:; *boundary=(.+))?$/);
      if (!parsedHeader) {
        throw new Error(`Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`);
      }
      const [, contentType2, parsedBoundary] = parsedHeader;
      if (parsedBoundary && boundary && parsedBoundary !== boundary) {
        throw new Error(`Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`);
      }
      boundary !== null && boundary !== void 0 ? boundary : boundary = parsedBoundary;
      if (boundary) {
        assertValidBoundary(boundary);
      } else {
        boundary = generateBoundary();
      }
      request3.headers.set("Content-Type", `${contentType2}; boundary=${boundary}`);
      await buildRequestBody(request3, request3.multipartBody.parts, boundary);
      request3.multipartBody = void 0;
      return next2(request3);
    }
  };
}
var multipartPolicyName, maxBoundaryLength, validBoundaryCharacters;
var init_multipartPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js"() {
    "use strict";
    init_esm3();
    init_concat();
    init_typeGuards2();
    __name(generateBoundary, "generateBoundary");
    __name(encodeHeaders, "encodeHeaders");
    __name(getLength, "getLength");
    __name(getTotalLength, "getTotalLength");
    __name(buildRequestBody, "buildRequestBody");
    multipartPolicyName = "multipartPolicy";
    maxBoundaryLength = 70;
    validBoundaryCharacters = new Set(`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`);
    __name(assertValidBoundary, "assertValidBoundary");
    __name(multipartPolicy, "multipartPolicy");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js
function decompressResponsePolicy() {
  return {
    name: decompressResponsePolicyName,
    async sendRequest(request3, next2) {
      if (request3.method !== "HEAD") {
        request3.headers.set("Accept-Encoding", "gzip,deflate");
      }
      return next2(request3);
    }
  };
}
var decompressResponsePolicyName;
var init_decompressResponsePolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js"() {
    "use strict";
    decompressResponsePolicyName = "decompressResponsePolicy";
    __name(decompressResponsePolicy, "decompressResponsePolicy");
  }
});

// node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/AbortError.js
var AbortError2;
var init_AbortError2 = __esm({
  "node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/AbortError.js"() {
    "use strict";
    AbortError2 = class extends Error {
      static {
        __name(this, "AbortError");
      }
      constructor(message) {
        super(message);
        this.name = "AbortError";
      }
    };
  }
});

// node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/index.js
var init_esm4 = __esm({
  "node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/index.js"() {
    "use strict";
    init_AbortError2();
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js
function delay2(delayInMs, value, options) {
  return new Promise((resolve2, reject) => {
    let timer = void 0;
    let onAborted = void 0;
    const rejectOnAbort = /* @__PURE__ */ __name(() => {
      return reject(new AbortError2((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage2));
    }, "rejectOnAbort");
    const removeListeners = /* @__PURE__ */ __name(() => {
      if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {
        options.abortSignal.removeEventListener("abort", onAborted);
      }
    }, "removeListeners");
    onAborted = /* @__PURE__ */ __name(() => {
      if (timer) {
        clearTimeout(timer);
      }
      removeListeners();
      return rejectOnAbort();
    }, "onAborted");
    if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {
      return rejectOnAbort();
    }
    timer = setTimeout(() => {
      removeListeners();
      resolve2(value);
    }, delayInMs);
    if (options === null || options === void 0 ? void 0 : options.abortSignal) {
      options.abortSignal.addEventListener("abort", onAborted);
    }
  });
}
function parseHeaderValueAsNumber(response, headerName) {
  const value = response.headers.get(headerName);
  if (!value)
    return;
  const valueAsNum = Number(value);
  if (Number.isNaN(valueAsNum))
    return;
  return valueAsNum;
}
var StandardAbortMessage2;
var init_helpers = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js"() {
    "use strict";
    init_esm4();
    StandardAbortMessage2 = "The operation was aborted.";
    __name(delay2, "delay");
    __name(parseHeaderValueAsNumber, "parseHeaderValueAsNumber");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js
function getRetryAfterInMs(response) {
  if (!(response && [429, 503].includes(response.status)))
    return void 0;
  try {
    for (const header of AllRetryAfterHeaders) {
      const retryAfterValue = parseHeaderValueAsNumber(response, header);
      if (retryAfterValue === 0 || retryAfterValue) {
        const multiplyingFactor = header === RetryAfterHeader ? 1e3 : 1;
        return retryAfterValue * multiplyingFactor;
      }
    }
    const retryAfterHeader = response.headers.get(RetryAfterHeader);
    if (!retryAfterHeader)
      return;
    const date = Date.parse(retryAfterHeader);
    const diff = date - Date.now();
    return Number.isFinite(diff) ? Math.max(0, diff) : void 0;
  } catch (_a4) {
    return void 0;
  }
}
function isThrottlingRetryResponse(response) {
  return Number.isFinite(getRetryAfterInMs(response));
}
function throttlingRetryStrategy() {
  return {
    name: "throttlingRetryStrategy",
    retry({ response }) {
      const retryAfterInMs = getRetryAfterInMs(response);
      if (!Number.isFinite(retryAfterInMs)) {
        return { skipStrategy: true };
      }
      return {
        retryAfterInMs
      };
    }
  };
}
var RetryAfterHeader, AllRetryAfterHeaders;
var init_throttlingRetryStrategy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js"() {
    "use strict";
    init_helpers();
    RetryAfterHeader = "Retry-After";
    AllRetryAfterHeaders = ["retry-after-ms", "x-ms-retry-after-ms", RetryAfterHeader];
    __name(getRetryAfterInMs, "getRetryAfterInMs");
    __name(isThrottlingRetryResponse, "isThrottlingRetryResponse");
    __name(throttlingRetryStrategy, "throttlingRetryStrategy");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js
function exponentialRetryStrategy(options = {}) {
  var _a4, _b2;
  const retryInterval = (_a4 = options.retryDelayInMs) !== null && _a4 !== void 0 ? _a4 : DEFAULT_CLIENT_RETRY_INTERVAL;
  const maxRetryInterval = (_b2 = options.maxRetryDelayInMs) !== null && _b2 !== void 0 ? _b2 : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
  return {
    name: "exponentialRetryStrategy",
    retry({ retryCount, response, responseError }) {
      const matchedSystemError = isSystemError(responseError);
      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;
      const isExponential = isExponentialRetryResponse(response);
      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;
      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);
      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {
        return { skipStrategy: true };
      }
      if (responseError && !matchedSystemError && !isExponential) {
        return { errorToThrow: responseError };
      }
      return calculateRetryDelay(retryCount, {
        retryDelayInMs: retryInterval,
        maxRetryDelayInMs: maxRetryInterval
      });
    }
  };
}
function isExponentialRetryResponse(response) {
  return Boolean(response && response.status !== void 0 && (response.status >= 500 || response.status === 408) && response.status !== 501 && response.status !== 505);
}
function isSystemError(err) {
  if (!err) {
    return false;
  }
  return err.code === "ETIMEDOUT" || err.code === "ESOCKETTIMEDOUT" || err.code === "ECONNREFUSED" || err.code === "ECONNRESET" || err.code === "ENOENT" || err.code === "ENOTFOUND";
}
var DEFAULT_CLIENT_RETRY_INTERVAL, DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
var init_exponentialRetryStrategy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js"() {
    "use strict";
    init_esm3();
    init_throttlingRetryStrategy();
    DEFAULT_CLIENT_RETRY_INTERVAL = 1e3;
    DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1e3 * 64;
    __name(exponentialRetryStrategy, "exponentialRetryStrategy");
    __name(isExponentialRetryResponse, "isExponentialRetryResponse");
    __name(isSystemError, "isSystemError");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js
function retryPolicy(strategies, options = { maxRetries: DEFAULT_RETRY_POLICY_COUNT }) {
  const logger6 = options.logger || retryPolicyLogger;
  return {
    name: retryPolicyName,
    async sendRequest(request3, next2) {
      var _a4, _b2;
      let response;
      let responseError;
      let retryCount = -1;
      retryRequest: while (true) {
        retryCount += 1;
        response = void 0;
        responseError = void 0;
        try {
          logger6.info(`Retry ${retryCount}: Attempting to send request`, request3.requestId);
          response = await next2(request3);
          logger6.info(`Retry ${retryCount}: Received a response from request`, request3.requestId);
        } catch (e3) {
          logger6.error(`Retry ${retryCount}: Received an error from request`, request3.requestId);
          responseError = e3;
          if (!e3 || responseError.name !== "RestError") {
            throw e3;
          }
          response = responseError.response;
        }
        if ((_a4 = request3.abortSignal) === null || _a4 === void 0 ? void 0 : _a4.aborted) {
          logger6.error(`Retry ${retryCount}: Request aborted.`);
          const abortError = new AbortError2();
          throw abortError;
        }
        if (retryCount >= ((_b2 = options.maxRetries) !== null && _b2 !== void 0 ? _b2 : DEFAULT_RETRY_POLICY_COUNT)) {
          logger6.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);
          if (responseError) {
            throw responseError;
          } else if (response) {
            return response;
          } else {
            throw new Error("Maximum retries reached with no response or error to throw");
          }
        }
        logger6.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);
        strategiesLoop: for (const strategy of strategies) {
          const strategyLogger = strategy.logger || retryPolicyLogger;
          strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);
          const modifiers = strategy.retry({
            retryCount,
            response,
            responseError
          });
          if (modifiers.skipStrategy) {
            strategyLogger.info(`Retry ${retryCount}: Skipped.`);
            continue strategiesLoop;
          }
          const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;
          if (errorToThrow) {
            strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);
            throw errorToThrow;
          }
          if (retryAfterInMs || retryAfterInMs === 0) {
            strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);
            await delay2(retryAfterInMs, void 0, { abortSignal: request3.abortSignal });
            continue retryRequest;
          }
          if (redirectTo) {
            strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);
            request3.url = redirectTo;
            continue retryRequest;
          }
        }
        if (responseError) {
          logger6.info(`None of the retry strategies could work with the received error. Throwing it.`);
          throw responseError;
        }
        if (response) {
          logger6.info(`None of the retry strategies could work with the received response. Returning it.`);
          return response;
        }
      }
    }
  };
}
var retryPolicyLogger, retryPolicyName;
var init_retryPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js"() {
    "use strict";
    init_helpers();
    init_esm();
    init_esm4();
    init_constants();
    retryPolicyLogger = createClientLogger("core-rest-pipeline retryPolicy");
    retryPolicyName = "retryPolicy";
    __name(retryPolicy, "retryPolicy");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js
function defaultRetryPolicy(options = {}) {
  var _a4;
  return {
    name: defaultRetryPolicyName,
    sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {
      maxRetries: (_a4 = options.maxRetries) !== null && _a4 !== void 0 ? _a4 : DEFAULT_RETRY_POLICY_COUNT
    }).sendRequest
  };
}
var defaultRetryPolicyName;
var init_defaultRetryPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js"() {
    "use strict";
    init_exponentialRetryStrategy();
    init_throttlingRetryStrategy();
    init_retryPolicy();
    init_constants();
    defaultRetryPolicyName = "defaultRetryPolicy";
    __name(defaultRetryPolicy, "defaultRetryPolicy");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js
function normalizeName(name2) {
  return name2.toLowerCase();
}
function* headerIterator(map) {
  for (const entry of map.values()) {
    yield [entry.name, entry.value];
  }
}
function createHttpHeaders(rawHeaders) {
  return new HttpHeadersImpl(rawHeaders);
}
var HttpHeadersImpl;
var init_httpHeaders = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js"() {
    "use strict";
    __name(normalizeName, "normalizeName");
    __name(headerIterator, "headerIterator");
    HttpHeadersImpl = class {
      static {
        __name(this, "HttpHeadersImpl");
      }
      constructor(rawHeaders) {
        this._headersMap = /* @__PURE__ */ new Map();
        if (rawHeaders) {
          for (const headerName of Object.keys(rawHeaders)) {
            this.set(headerName, rawHeaders[headerName]);
          }
        }
      }
      /**
       * Set a header in this collection with the provided name and value. The name is
       * case-insensitive.
       * @param name - The name of the header to set. This value is case-insensitive.
       * @param value - The value of the header to set.
       */
      set(name2, value) {
        this._headersMap.set(normalizeName(name2), { name: name2, value: String(value).trim() });
      }
      /**
       * Get the header value for the provided header name, or undefined if no header exists in this
       * collection with the provided name.
       * @param name - The name of the header. This value is case-insensitive.
       */
      get(name2) {
        var _a4;
        return (_a4 = this._headersMap.get(normalizeName(name2))) === null || _a4 === void 0 ? void 0 : _a4.value;
      }
      /**
       * Get whether or not this header collection contains a header entry for the provided header name.
       * @param name - The name of the header to set. This value is case-insensitive.
       */
      has(name2) {
        return this._headersMap.has(normalizeName(name2));
      }
      /**
       * Remove the header with the provided headerName.
       * @param name - The name of the header to remove.
       */
      delete(name2) {
        this._headersMap.delete(normalizeName(name2));
      }
      /**
       * Get the JSON object representation of this HTTP header collection.
       */
      toJSON(options = {}) {
        const result = {};
        if (options.preserveCase) {
          for (const entry of this._headersMap.values()) {
            result[entry.name] = entry.value;
          }
        } else {
          for (const [normalizedName, entry] of this._headersMap) {
            result[normalizedName] = entry.value;
          }
        }
        return result;
      }
      /**
       * Get the string representation of this HTTP header collection.
       */
      toString() {
        return JSON.stringify(this.toJSON({ preserveCase: true }));
      }
      /**
       * Iterate over tuples of header [name, value] pairs.
       */
      [Symbol.iterator]() {
        return headerIterator(this._headersMap);
      }
    };
    __name(createHttpHeaders, "createHttpHeaders");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js
function formDataToFormDataMap(formData) {
  var _a4;
  const formDataMap = {};
  for (const [key, value] of formData.entries()) {
    (_a4 = formDataMap[key]) !== null && _a4 !== void 0 ? _a4 : formDataMap[key] = [];
    formDataMap[key].push(value);
  }
  return formDataMap;
}
function formDataPolicy() {
  return {
    name: formDataPolicyName,
    async sendRequest(request3, next2) {
      if (isNodeLike && typeof FormData !== "undefined" && request3.body instanceof FormData) {
        request3.formData = formDataToFormDataMap(request3.body);
        request3.body = void 0;
      }
      if (request3.formData) {
        const contentType2 = request3.headers.get("Content-Type");
        if (contentType2 && contentType2.indexOf("application/x-www-form-urlencoded") !== -1) {
          request3.body = wwwFormUrlEncode(request3.formData);
        } else {
          await prepareFormData(request3.formData, request3);
        }
        request3.formData = void 0;
      }
      return next2(request3);
    }
  };
}
function wwwFormUrlEncode(formData) {
  const urlSearchParams = new URLSearchParams();
  for (const [key, value] of Object.entries(formData)) {
    if (Array.isArray(value)) {
      for (const subValue of value) {
        urlSearchParams.append(key, subValue.toString());
      }
    } else {
      urlSearchParams.append(key, value.toString());
    }
  }
  return urlSearchParams.toString();
}
async function prepareFormData(formData, request3) {
  const contentType2 = request3.headers.get("Content-Type");
  if (contentType2 && !contentType2.startsWith("multipart/form-data")) {
    return;
  }
  request3.headers.set("Content-Type", contentType2 !== null && contentType2 !== void 0 ? contentType2 : "multipart/form-data");
  const parts = [];
  for (const [fieldName, values] of Object.entries(formData)) {
    for (const value of Array.isArray(values) ? values : [values]) {
      if (typeof value === "string") {
        parts.push({
          headers: createHttpHeaders({
            "Content-Disposition": `form-data; name="${fieldName}"`
          }),
          body: stringToUint8Array(value, "utf-8")
        });
      } else if (value === void 0 || value === null || typeof value !== "object") {
        throw new Error(`Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`);
      } else {
        const fileName = value.name || "blob";
        const headers = createHttpHeaders();
        headers.set("Content-Disposition", `form-data; name="${fieldName}"; filename="${fileName}"`);
        headers.set("Content-Type", value.type || "application/octet-stream");
        parts.push({
          headers,
          body: value
        });
      }
    }
  }
  request3.multipartBody = { parts };
}
var formDataPolicyName;
var init_formDataPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js"() {
    "use strict";
    init_esm3();
    init_httpHeaders();
    formDataPolicyName = "formDataPolicy";
    __name(formDataToFormDataMap, "formDataToFormDataMap");
    __name(formDataPolicy, "formDataPolicy");
    __name(wwwFormUrlEncode, "wwwFormUrlEncode");
    __name(prepareFormData, "prepareFormData");
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports2, module) {
    "use strict";
    var s3 = 1e3;
    var m3 = s3 * 60;
    var h3 = m3 * 60;
    var d3 = h3 * 24;
    var w3 = d3 * 7;
    var y3 = d3 * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type2 = typeof val;
      if (type2 === "string" && val.length > 0) {
        return parse3(val);
      } else if (type2 === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse3(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match3 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match3) {
        return;
      }
      var n3 = parseFloat(match3[1]);
      var type2 = (match3[2] || "ms").toLowerCase();
      switch (type2) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n3 * y3;
        case "weeks":
        case "week":
        case "w":
          return n3 * w3;
        case "days":
        case "day":
        case "d":
          return n3 * d3;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n3 * h3;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n3 * m3;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n3 * s3;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n3;
        default:
          return void 0;
      }
    }
    __name(parse3, "parse");
    function fmtShort(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs >= d3) {
        return Math.round(ms2 / d3) + "d";
      }
      if (msAbs >= h3) {
        return Math.round(ms2 / h3) + "h";
      }
      if (msAbs >= m3) {
        return Math.round(ms2 / m3) + "m";
      }
      if (msAbs >= s3) {
        return Math.round(ms2 / s3) + "s";
      }
      return ms2 + "ms";
    }
    __name(fmtShort, "fmtShort");
    function fmtLong(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs >= d3) {
        return plural(ms2, msAbs, d3, "day");
      }
      if (msAbs >= h3) {
        return plural(ms2, msAbs, h3, "hour");
      }
      if (msAbs >= m3) {
        return plural(ms2, msAbs, m3, "minute");
      }
      if (msAbs >= s3) {
        return plural(ms2, msAbs, s3, "second");
      }
      return ms2 + " ms";
    }
    __name(fmtLong, "fmtLong");
    function plural(ms2, msAbs, n3, name2) {
      var isPlural = msAbs >= n3 * 1.5;
      return Math.round(ms2 / n3) + " " + name2 + (isPlural ? "s" : "");
    }
    __name(plural, "plural");
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports2, module) {
    "use strict";
    function setup(env7) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce2;
      createDebug.disable = disable2;
      createDebug.enable = enable2;
      createDebug.enabled = enabled2;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy2;
      Object.keys(env7).forEach((key) => {
        createDebug[key] = env7[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i3 = 0; i3 < namespace.length; i3++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i3);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      __name(selectColor, "selectColor");
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug3(...args) {
          if (!debug3.enabled) {
            return;
          }
          const self2 = debug3;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms2 = curr - (prevTime || curr);
          self2.diff = ms2;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index2 = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match3, format3) => {
            if (match3 === "%%") {
              return "%";
            }
            index2++;
            const formatter = createDebug.formatters[format3];
            if (typeof formatter === "function") {
              const val = args[index2];
              match3 = formatter.call(self2, val);
              args.splice(index2, 1);
              index2--;
            }
            return match3;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        __name(debug3, "debug");
        debug3.namespace = namespace;
        debug3.useColors = createDebug.useColors();
        debug3.color = createDebug.selectColor(namespace);
        debug3.extend = extend2;
        debug3.destroy = createDebug.destroy;
        Object.defineProperty(debug3, "enabled", {
          enumerable: true,
          configurable: false,
          get: /* @__PURE__ */ __name(() => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          }, "get"),
          set: /* @__PURE__ */ __name((v3) => {
            enableOverride = v3;
          }, "set")
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug3);
        }
        return debug3;
      }
      __name(createDebug, "createDebug");
      function extend2(namespace, delimiter2) {
        const newDebug = createDebug(this.namespace + (typeof delimiter2 === "undefined" ? ":" : delimiter2) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      __name(extend2, "extend");
      function enable2(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
        for (const ns2 of split) {
          if (ns2[0] === "-") {
            createDebug.skips.push(ns2.slice(1));
          } else {
            createDebug.names.push(ns2);
          }
        }
      }
      __name(enable2, "enable");
      function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while (searchIndex < search.length) {
          if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
            if (template[templateIndex] === "*") {
              starIndex = templateIndex;
              matchIndex = searchIndex;
              templateIndex++;
            } else {
              searchIndex++;
              templateIndex++;
            }
          } else if (starIndex !== -1) {
            templateIndex = starIndex + 1;
            matchIndex++;
            searchIndex = matchIndex;
          } else {
            return false;
          }
        }
        while (templateIndex < template.length && template[templateIndex] === "*") {
          templateIndex++;
        }
        return templateIndex === template.length;
      }
      __name(matchesTemplate, "matchesTemplate");
      function disable2() {
        const namespaces = [
          ...createDebug.names,
          ...createDebug.skips.map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      __name(disable2, "disable");
      function enabled2(name2) {
        for (const skip of createDebug.skips) {
          if (matchesTemplate(name2, skip)) {
            return false;
          }
        }
        for (const ns2 of createDebug.names) {
          if (matchesTemplate(name2, ns2)) {
            return true;
          }
        }
        return false;
      }
      __name(enabled2, "enabled");
      function coerce2(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      __name(coerce2, "coerce");
      function destroy2() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      __name(destroy2, "destroy");
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    __name(setup, "setup");
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports2, module) {
    "use strict";
    exports2.formatArgs = formatArgs;
    exports2.save = save2;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m3;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m3 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m3[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    __name(useColors, "useColors");
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c3 = "color: " + this.color;
      args.splice(1, 0, c3, "color: inherit");
      let index2 = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match3) => {
        if (match3 === "%%") {
          return;
        }
        index2++;
        if (match3 === "%c") {
          lastC = index2;
        }
      });
      args.splice(lastC, 0, c3);
    }
    __name(formatArgs, "formatArgs");
    exports2.log = console.debug || console.log || (() => {
    });
    function save2(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    __name(save2, "save");
    function load() {
      let r3;
      try {
        r3 = exports2.storage.getItem("debug");
      } catch (error) {
      }
      if (!r3 && typeof process !== "undefined" && "env" in process) {
        r3 = process.env.DEBUG;
      }
      return r3;
    }
    __name(load, "load");
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    __name(localstorage, "localstorage");
    module.exports = require_common()(exports2);
    var { formatters } = module.exports;
    formatters.j = function(v3) {
      try {
        return JSON.stringify(v3);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports2, module) {
    "use strict";
    module.exports = (flag, argv = process.argv) => {
      const prefix2 = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position2 = argv.indexOf(prefix2 + flag);
      const terminatorPosition = argv.indexOf("--");
      return position2 !== -1 && (terminatorPosition === -1 || position2 < terminatorPosition);
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports2, module) {
    "use strict";
    var os5 = __require("os");
    var tty = __require("tty");
    var hasFlag = require_has_flag();
    var { env: env7 } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env7) {
      if (env7.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env7.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env7.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env7.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    __name(translateLevel, "translateLevel");
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env7.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os5.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env7) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env7) || env7.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env7) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env7.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env7.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env7) {
        const version3 = parseInt((env7.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env7.TERM_PROGRAM) {
          case "iTerm.app":
            return version3 >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env7.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env7.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env7) {
        return 1;
      }
      return min;
    }
    __name(supportsColor, "supportsColor");
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    __name(getSupportLevel, "getSupportLevel");
    module.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/debug/src/node.js"(exports2, module) {
    "use strict";
    var tty = __require("tty");
    var util3 = __require("util");
    exports2.init = init2;
    exports2.log = log2;
    exports2.formatArgs = formatArgs;
    exports2.save = save2;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.destroy = util3.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports2.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports2.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports2.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_3, k3) => {
        return k3.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    __name(useColors, "useColors");
    function formatArgs(args) {
      const { namespace: name2, useColors: useColors2 } = this;
      if (useColors2) {
        const c3 = this.color;
        const colorCode = "\x1B[3" + (c3 < 8 ? c3 : "8;5;" + c3);
        const prefix2 = `  ${colorCode};1m${name2} \x1B[0m`;
        args[0] = prefix2 + args[0].split("\n").join("\n" + prefix2);
        args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name2 + " " + args[0];
      }
    }
    __name(formatArgs, "formatArgs");
    function getDate() {
      if (exports2.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    __name(getDate, "getDate");
    function log2(...args) {
      return process.stderr.write(util3.formatWithOptions(exports2.inspectOpts, ...args) + "\n");
    }
    __name(log2, "log");
    function save2(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    __name(save2, "save");
    function load() {
      return process.env.DEBUG;
    }
    __name(load, "load");
    function init2(debug3) {
      debug3.inspectOpts = {};
      const keys = Object.keys(exports2.inspectOpts);
      for (let i3 = 0; i3 < keys.length; i3++) {
        debug3.inspectOpts[keys[i3]] = exports2.inspectOpts[keys[i3]];
      }
    }
    __name(init2, "init");
    module.exports = require_common()(exports2);
    var { formatters } = module.exports;
    formatters.o = function(v3) {
      this.inspectOpts.colors = this.useColors;
      return util3.inspect(v3, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v3) {
      this.inspectOpts.colors = this.useColors;
      return util3.inspect(v3, this.inspectOpts);
    };
  }
});

// node_modules/debug/src/index.js
var require_src = __commonJS({
  "node_modules/debug/src/index.js"(exports2, module) {
    "use strict";
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module.exports = require_browser();
    } else {
      module.exports = require_node();
    }
  }
});

// node_modules/agent-base/dist/helpers.js
var require_helpers = __commonJS({
  "node_modules/agent-base/dist/helpers.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.req = exports2.json = exports2.toBuffer = void 0;
    var http2 = __importStar(__require("http"));
    var https2 = __importStar(__require("https"));
    async function toBuffer(stream) {
      let length = 0;
      const chunks = [];
      for await (const chunk of stream) {
        length += chunk.length;
        chunks.push(chunk);
      }
      return Buffer.concat(chunks, length);
    }
    __name(toBuffer, "toBuffer");
    exports2.toBuffer = toBuffer;
    async function json(stream) {
      const buf = await toBuffer(stream);
      const str = buf.toString("utf8");
      try {
        return JSON.parse(str);
      } catch (_err) {
        const err = _err;
        err.message += ` (input: ${str})`;
        throw err;
      }
    }
    __name(json, "json");
    exports2.json = json;
    function req(url2, opts = {}) {
      const href = typeof url2 === "string" ? url2 : url2.href;
      const req2 = (href.startsWith("https:") ? https2 : http2).request(url2, opts);
      const promise = new Promise((resolve2, reject) => {
        req2.once("response", resolve2).once("error", reject).end();
      });
      req2.then = promise.then.bind(promise);
      return req2;
    }
    __name(req, "req");
    exports2.req = req;
  }
});

// node_modules/agent-base/dist/index.js
var require_dist = __commonJS({
  "node_modules/agent-base/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports2 && exports2.__exportStar || function(m3, exports3) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p3)) __createBinding(exports3, m3, p3);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Agent = void 0;
    var net = __importStar(__require("net"));
    var http2 = __importStar(__require("http"));
    var https_1 = __require("https");
    __exportStar(require_helpers(), exports2);
    var INTERNAL = Symbol("AgentBaseInternalState");
    var Agent3 = class extends http2.Agent {
      static {
        __name(this, "Agent");
      }
      constructor(opts) {
        super(opts);
        this[INTERNAL] = {};
      }
      /**
       * Determine whether this is an `http` or `https` request.
       */
      isSecureEndpoint(options) {
        if (options) {
          if (typeof options.secureEndpoint === "boolean") {
            return options.secureEndpoint;
          }
          if (typeof options.protocol === "string") {
            return options.protocol === "https:";
          }
        }
        const { stack } = new Error();
        if (typeof stack !== "string")
          return false;
        return stack.split("\n").some((l3) => l3.indexOf("(https.js:") !== -1 || l3.indexOf("node:https:") !== -1);
      }
      // In order to support async signatures in `connect()` and Node's native
      // connection pooling in `http.Agent`, the array of sockets for each origin
      // has to be updated synchronously. This is so the length of the array is
      // accurate when `addRequest()` is next called. We achieve this by creating a
      // fake socket and adding it to `sockets[origin]` and incrementing
      // `totalSocketCount`.
      incrementSockets(name2) {
        if (this.maxSockets === Infinity && this.maxTotalSockets === Infinity) {
          return null;
        }
        if (!this.sockets[name2]) {
          this.sockets[name2] = [];
        }
        const fakeSocket = new net.Socket({ writable: false });
        this.sockets[name2].push(fakeSocket);
        this.totalSocketCount++;
        return fakeSocket;
      }
      decrementSockets(name2, socket) {
        if (!this.sockets[name2] || socket === null) {
          return;
        }
        const sockets = this.sockets[name2];
        const index2 = sockets.indexOf(socket);
        if (index2 !== -1) {
          sockets.splice(index2, 1);
          this.totalSocketCount--;
          if (sockets.length === 0) {
            delete this.sockets[name2];
          }
        }
      }
      // In order to properly update the socket pool, we need to call `getName()` on
      // the core `https.Agent` if it is a secureEndpoint.
      getName(options) {
        const secureEndpoint = typeof options.secureEndpoint === "boolean" ? options.secureEndpoint : this.isSecureEndpoint(options);
        if (secureEndpoint) {
          return https_1.Agent.prototype.getName.call(this, options);
        }
        return super.getName(options);
      }
      createSocket(req, options, cb) {
        const connectOpts = {
          ...options,
          secureEndpoint: this.isSecureEndpoint(options)
        };
        const name2 = this.getName(connectOpts);
        const fakeSocket = this.incrementSockets(name2);
        Promise.resolve().then(() => this.connect(req, connectOpts)).then((socket) => {
          this.decrementSockets(name2, fakeSocket);
          if (socket instanceof http2.Agent) {
            try {
              return socket.addRequest(req, connectOpts);
            } catch (err) {
              return cb(err);
            }
          }
          this[INTERNAL].currentSocket = socket;
          super.createSocket(req, options, cb);
        }, (err) => {
          this.decrementSockets(name2, fakeSocket);
          cb(err);
        });
      }
      createConnection() {
        const socket = this[INTERNAL].currentSocket;
        this[INTERNAL].currentSocket = void 0;
        if (!socket) {
          throw new Error("No socket was returned in the `connect()` function");
        }
        return socket;
      }
      get defaultPort() {
        return this[INTERNAL].defaultPort ?? (this.protocol === "https:" ? 443 : 80);
      }
      set defaultPort(v3) {
        if (this[INTERNAL]) {
          this[INTERNAL].defaultPort = v3;
        }
      }
      get protocol() {
        return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? "https:" : "http:");
      }
      set protocol(v3) {
        if (this[INTERNAL]) {
          this[INTERNAL].protocol = v3;
        }
      }
    };
    exports2.Agent = Agent3;
  }
});

// node_modules/https-proxy-agent/dist/parse-proxy-response.js
var require_parse_proxy_response = __commonJS({
  "node_modules/https-proxy-agent/dist/parse-proxy-response.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseProxyResponse = void 0;
    var debug_1 = __importDefault(require_src());
    var debug3 = (0, debug_1.default)("https-proxy-agent:parse-proxy-response");
    function parseProxyResponse(socket) {
      return new Promise((resolve2, reject) => {
        let buffersLength = 0;
        const buffers = [];
        function read() {
          const b3 = socket.read();
          if (b3)
            ondata(b3);
          else
            socket.once("readable", read);
        }
        __name(read, "read");
        function cleanup() {
          socket.removeListener("end", onend);
          socket.removeListener("error", onerror);
          socket.removeListener("readable", read);
        }
        __name(cleanup, "cleanup");
        function onend() {
          cleanup();
          debug3("onend");
          reject(new Error("Proxy connection ended before receiving CONNECT response"));
        }
        __name(onend, "onend");
        function onerror(err) {
          cleanup();
          debug3("onerror %o", err);
          reject(err);
        }
        __name(onerror, "onerror");
        function ondata(b3) {
          buffers.push(b3);
          buffersLength += b3.length;
          const buffered = Buffer.concat(buffers, buffersLength);
          const endOfHeaders = buffered.indexOf("\r\n\r\n");
          if (endOfHeaders === -1) {
            debug3("have not received end of HTTP headers yet...");
            read();
            return;
          }
          const headerParts = buffered.slice(0, endOfHeaders).toString("ascii").split("\r\n");
          const firstLine = headerParts.shift();
          if (!firstLine) {
            socket.destroy();
            return reject(new Error("No header received from proxy CONNECT response"));
          }
          const firstLineParts = firstLine.split(" ");
          const statusCode = +firstLineParts[1];
          const statusText = firstLineParts.slice(2).join(" ");
          const headers = {};
          for (const header of headerParts) {
            if (!header)
              continue;
            const firstColon = header.indexOf(":");
            if (firstColon === -1) {
              socket.destroy();
              return reject(new Error(`Invalid header from proxy CONNECT response: "${header}"`));
            }
            const key = header.slice(0, firstColon).toLowerCase();
            const value = header.slice(firstColon + 1).trimStart();
            const current2 = headers[key];
            if (typeof current2 === "string") {
              headers[key] = [current2, value];
            } else if (Array.isArray(current2)) {
              current2.push(value);
            } else {
              headers[key] = value;
            }
          }
          debug3("got proxy server response: %o %o", firstLine, headers);
          cleanup();
          resolve2({
            connect: {
              statusCode,
              statusText,
              headers
            },
            buffered
          });
        }
        __name(ondata, "ondata");
        socket.on("error", onerror);
        socket.on("end", onend);
        read();
      });
    }
    __name(parseProxyResponse, "parseProxyResponse");
    exports2.parseProxyResponse = parseProxyResponse;
  }
});

// node_modules/https-proxy-agent/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/https-proxy-agent/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpsProxyAgent = void 0;
    var net = __importStar(__require("net"));
    var tls = __importStar(__require("tls"));
    var assert_1 = __importDefault(__require("assert"));
    var debug_1 = __importDefault(require_src());
    var agent_base_1 = require_dist();
    var url_1 = __require("url");
    var parse_proxy_response_1 = require_parse_proxy_response();
    var debug3 = (0, debug_1.default)("https-proxy-agent");
    var setServernameFromNonIpHost = /* @__PURE__ */ __name((options) => {
      if (options.servername === void 0 && options.host && !net.isIP(options.host)) {
        return {
          ...options,
          servername: options.host
        };
      }
      return options;
    }, "setServernameFromNonIpHost");
    var HttpsProxyAgent2 = class extends agent_base_1.Agent {
      static {
        __name(this, "HttpsProxyAgent");
      }
      constructor(proxy, opts) {
        super(opts);
        this.options = { path: void 0 };
        this.proxy = typeof proxy === "string" ? new url_1.URL(proxy) : proxy;
        this.proxyHeaders = opts?.headers ?? {};
        debug3("Creating new HttpsProxyAgent instance: %o", this.proxy.href);
        const host = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, "");
        const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === "https:" ? 443 : 80;
        this.connectOpts = {
          // Attempt to negotiate http/1.1 for proxy servers that support http/2
          ALPNProtocols: ["http/1.1"],
          ...opts ? omit(opts, "headers") : null,
          host,
          port
        };
      }
      /**
       * Called when the node-core HTTP client library is creating a
       * new HTTP request.
       */
      async connect(req, opts) {
        const { proxy } = this;
        if (!opts.host) {
          throw new TypeError('No "host" provided');
        }
        let socket;
        if (proxy.protocol === "https:") {
          debug3("Creating `tls.Socket`: %o", this.connectOpts);
          socket = tls.connect(setServernameFromNonIpHost(this.connectOpts));
        } else {
          debug3("Creating `net.Socket`: %o", this.connectOpts);
          socket = net.connect(this.connectOpts);
        }
        const headers = typeof this.proxyHeaders === "function" ? this.proxyHeaders() : { ...this.proxyHeaders };
        const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;
        let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\r
`;
        if (proxy.username || proxy.password) {
          const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;
          headers["Proxy-Authorization"] = `Basic ${Buffer.from(auth).toString("base64")}`;
        }
        headers.Host = `${host}:${opts.port}`;
        if (!headers["Proxy-Connection"]) {
          headers["Proxy-Connection"] = this.keepAlive ? "Keep-Alive" : "close";
        }
        for (const name2 of Object.keys(headers)) {
          payload += `${name2}: ${headers[name2]}\r
`;
        }
        const proxyResponsePromise = (0, parse_proxy_response_1.parseProxyResponse)(socket);
        socket.write(`${payload}\r
`);
        const { connect, buffered } = await proxyResponsePromise;
        req.emit("proxyConnect", connect);
        this.emit("proxyConnect", connect, req);
        if (connect.statusCode === 200) {
          req.once("socket", resume);
          if (opts.secureEndpoint) {
            debug3("Upgrading socket connection to TLS");
            return tls.connect({
              ...omit(setServernameFromNonIpHost(opts), "host", "path", "port"),
              socket
            });
          }
          return socket;
        }
        socket.destroy();
        const fakeSocket = new net.Socket({ writable: false });
        fakeSocket.readable = true;
        req.once("socket", (s3) => {
          debug3("Replaying proxy buffer for failed request");
          (0, assert_1.default)(s3.listenerCount("data") > 0);
          s3.push(buffered);
          s3.push(null);
        });
        return fakeSocket;
      }
    };
    HttpsProxyAgent2.protocols = ["http", "https"];
    exports2.HttpsProxyAgent = HttpsProxyAgent2;
    function resume(socket) {
      socket.resume();
    }
    __name(resume, "resume");
    function omit(obj, ...keys) {
      const ret = {};
      let key;
      for (key in obj) {
        if (!keys.includes(key)) {
          ret[key] = obj[key];
        }
      }
      return ret;
    }
    __name(omit, "omit");
  }
});

// node_modules/http-proxy-agent/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/http-proxy-agent/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpProxyAgent = void 0;
    var net = __importStar(__require("net"));
    var tls = __importStar(__require("tls"));
    var debug_1 = __importDefault(require_src());
    var events_1 = __require("events");
    var agent_base_1 = require_dist();
    var url_1 = __require("url");
    var debug3 = (0, debug_1.default)("http-proxy-agent");
    var HttpProxyAgent2 = class extends agent_base_1.Agent {
      static {
        __name(this, "HttpProxyAgent");
      }
      constructor(proxy, opts) {
        super(opts);
        this.proxy = typeof proxy === "string" ? new url_1.URL(proxy) : proxy;
        this.proxyHeaders = opts?.headers ?? {};
        debug3("Creating new HttpProxyAgent instance: %o", this.proxy.href);
        const host = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, "");
        const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === "https:" ? 443 : 80;
        this.connectOpts = {
          ...opts ? omit(opts, "headers") : null,
          host,
          port
        };
      }
      addRequest(req, opts) {
        req._header = null;
        this.setRequestProps(req, opts);
        super.addRequest(req, opts);
      }
      setRequestProps(req, opts) {
        const { proxy } = this;
        const protocol = opts.secureEndpoint ? "https:" : "http:";
        const hostname = req.getHeader("host") || "localhost";
        const base = `${protocol}//${hostname}`;
        const url2 = new url_1.URL(req.path, base);
        if (opts.port !== 80) {
          url2.port = String(opts.port);
        }
        req.path = String(url2);
        const headers = typeof this.proxyHeaders === "function" ? this.proxyHeaders() : { ...this.proxyHeaders };
        if (proxy.username || proxy.password) {
          const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;
          headers["Proxy-Authorization"] = `Basic ${Buffer.from(auth).toString("base64")}`;
        }
        if (!headers["Proxy-Connection"]) {
          headers["Proxy-Connection"] = this.keepAlive ? "Keep-Alive" : "close";
        }
        for (const name2 of Object.keys(headers)) {
          const value = headers[name2];
          if (value) {
            req.setHeader(name2, value);
          }
        }
      }
      async connect(req, opts) {
        req._header = null;
        if (!req.path.includes("://")) {
          this.setRequestProps(req, opts);
        }
        let first;
        let endOfHeaders;
        debug3("Regenerating stored HTTP header string for request");
        req._implicitHeader();
        if (req.outputData && req.outputData.length > 0) {
          debug3("Patching connection write() output buffer with updated header");
          first = req.outputData[0].data;
          endOfHeaders = first.indexOf("\r\n\r\n") + 4;
          req.outputData[0].data = req._header + first.substring(endOfHeaders);
          debug3("Output buffer: %o", req.outputData[0].data);
        }
        let socket;
        if (this.proxy.protocol === "https:") {
          debug3("Creating `tls.Socket`: %o", this.connectOpts);
          socket = tls.connect(this.connectOpts);
        } else {
          debug3("Creating `net.Socket`: %o", this.connectOpts);
          socket = net.connect(this.connectOpts);
        }
        await (0, events_1.once)(socket, "connect");
        return socket;
      }
    };
    HttpProxyAgent2.protocols = ["http", "https"];
    exports2.HttpProxyAgent = HttpProxyAgent2;
    function omit(obj, ...keys) {
      const ret = {};
      let key;
      for (key in obj) {
        if (!keys.includes(key)) {
          ret[key] = obj[key];
        }
      }
      return ret;
    }
    __name(omit, "omit");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js
function getEnvironmentValue(name2) {
  if (process.env[name2]) {
    return process.env[name2];
  } else if (process.env[name2.toLowerCase()]) {
    return process.env[name2.toLowerCase()];
  }
  return void 0;
}
function loadEnvironmentProxyValue() {
  if (!process) {
    return void 0;
  }
  const httpsProxy = getEnvironmentValue(HTTPS_PROXY);
  const allProxy = getEnvironmentValue(ALL_PROXY);
  const httpProxy = getEnvironmentValue(HTTP_PROXY);
  return httpsProxy || allProxy || httpProxy;
}
function isBypassed(uri, noProxyList, bypassedMap) {
  if (noProxyList.length === 0) {
    return false;
  }
  const host = new URL(uri).hostname;
  if (bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.has(host)) {
    return bypassedMap.get(host);
  }
  let isBypassedFlag = false;
  for (const pattern of noProxyList) {
    if (pattern[0] === ".") {
      if (host.endsWith(pattern)) {
        isBypassedFlag = true;
      } else {
        if (host.length === pattern.length - 1 && host === pattern.slice(1)) {
          isBypassedFlag = true;
        }
      }
    } else {
      if (host === pattern) {
        isBypassedFlag = true;
      }
    }
  }
  bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.set(host, isBypassedFlag);
  return isBypassedFlag;
}
function loadNoProxy() {
  const noProxy = getEnvironmentValue(NO_PROXY);
  noProxyListLoaded = true;
  if (noProxy) {
    return noProxy.split(",").map((item) => item.trim()).filter((item) => item.length);
  }
  return [];
}
function getDefaultProxySettings(proxyUrl) {
  if (!proxyUrl) {
    proxyUrl = loadEnvironmentProxyValue();
    if (!proxyUrl) {
      return void 0;
    }
  }
  const parsedUrl = new URL(proxyUrl);
  const schema = parsedUrl.protocol ? parsedUrl.protocol + "//" : "";
  return {
    host: schema + parsedUrl.hostname,
    port: Number.parseInt(parsedUrl.port || "80"),
    username: parsedUrl.username,
    password: parsedUrl.password
  };
}
function getDefaultProxySettingsInternal() {
  const envProxy = loadEnvironmentProxyValue();
  return envProxy ? new URL(envProxy) : void 0;
}
function getUrlFromProxySettings(settings2) {
  let parsedProxyUrl;
  try {
    parsedProxyUrl = new URL(settings2.host);
  } catch (_a4) {
    throw new Error(`Expecting a valid host string in proxy settings, but found "${settings2.host}".`);
  }
  parsedProxyUrl.port = String(settings2.port);
  if (settings2.username) {
    parsedProxyUrl.username = settings2.username;
  }
  if (settings2.password) {
    parsedProxyUrl.password = settings2.password;
  }
  return parsedProxyUrl;
}
function setProxyAgentOnRequest(request3, cachedAgents, proxyUrl) {
  if (request3.agent) {
    return;
  }
  const url2 = new URL(request3.url);
  const isInsecure = url2.protocol !== "https:";
  if (request3.tlsSettings) {
    logger2.warning("TLS settings are not supported in combination with custom Proxy, certificates provided to the client will be ignored.");
  }
  const headers = request3.headers.toJSON();
  if (isInsecure) {
    if (!cachedAgents.httpProxyAgent) {
      cachedAgents.httpProxyAgent = new import_http_proxy_agent.HttpProxyAgent(proxyUrl, { headers });
    }
    request3.agent = cachedAgents.httpProxyAgent;
  } else {
    if (!cachedAgents.httpsProxyAgent) {
      cachedAgents.httpsProxyAgent = new import_https_proxy_agent.HttpsProxyAgent(proxyUrl, { headers });
    }
    request3.agent = cachedAgents.httpsProxyAgent;
  }
}
function proxyPolicy(proxySettings, options) {
  if (!noProxyListLoaded) {
    globalNoProxyList.push(...loadNoProxy());
  }
  const defaultProxy = proxySettings ? getUrlFromProxySettings(proxySettings) : getDefaultProxySettingsInternal();
  const cachedAgents = {};
  return {
    name: proxyPolicyName,
    async sendRequest(request3, next2) {
      var _a4;
      if (!request3.proxySettings && defaultProxy && !isBypassed(request3.url, (_a4 = options === null || options === void 0 ? void 0 : options.customNoProxyList) !== null && _a4 !== void 0 ? _a4 : globalNoProxyList, (options === null || options === void 0 ? void 0 : options.customNoProxyList) ? void 0 : globalBypassedMap)) {
        setProxyAgentOnRequest(request3, cachedAgents, defaultProxy);
      } else if (request3.proxySettings) {
        setProxyAgentOnRequest(request3, cachedAgents, getUrlFromProxySettings(request3.proxySettings));
      }
      return next2(request3);
    }
  };
}
var import_https_proxy_agent, import_http_proxy_agent, HTTPS_PROXY, HTTP_PROXY, ALL_PROXY, NO_PROXY, proxyPolicyName, globalNoProxyList, noProxyListLoaded, globalBypassedMap;
var init_proxyPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js"() {
    "use strict";
    import_https_proxy_agent = __toESM(require_dist2(), 1);
    import_http_proxy_agent = __toESM(require_dist3(), 1);
    init_log2();
    HTTPS_PROXY = "HTTPS_PROXY";
    HTTP_PROXY = "HTTP_PROXY";
    ALL_PROXY = "ALL_PROXY";
    NO_PROXY = "NO_PROXY";
    proxyPolicyName = "proxyPolicy";
    globalNoProxyList = [];
    noProxyListLoaded = false;
    globalBypassedMap = /* @__PURE__ */ new Map();
    __name(getEnvironmentValue, "getEnvironmentValue");
    __name(loadEnvironmentProxyValue, "loadEnvironmentProxyValue");
    __name(isBypassed, "isBypassed");
    __name(loadNoProxy, "loadNoProxy");
    __name(getDefaultProxySettings, "getDefaultProxySettings");
    __name(getDefaultProxySettingsInternal, "getDefaultProxySettingsInternal");
    __name(getUrlFromProxySettings, "getUrlFromProxySettings");
    __name(setProxyAgentOnRequest, "setProxyAgentOnRequest");
    __name(proxyPolicy, "proxyPolicy");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js
function setClientRequestIdPolicy(requestIdHeaderName = "x-ms-client-request-id") {
  return {
    name: setClientRequestIdPolicyName,
    async sendRequest(request3, next2) {
      if (!request3.headers.has(requestIdHeaderName)) {
        request3.headers.set(requestIdHeaderName, request3.requestId);
      }
      return next2(request3);
    }
  };
}
var setClientRequestIdPolicyName;
var init_setClientRequestIdPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js"() {
    "use strict";
    setClientRequestIdPolicyName = "setClientRequestIdPolicy";
    __name(setClientRequestIdPolicy, "setClientRequestIdPolicy");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js
function agentPolicy(agent) {
  return {
    name: agentPolicyName,
    sendRequest: /* @__PURE__ */ __name(async (req, next2) => {
      if (!req.agent) {
        req.agent = agent;
      }
      return next2(req);
    }, "sendRequest")
  };
}
var agentPolicyName;
var init_agentPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js"() {
    "use strict";
    agentPolicyName = "agentPolicy";
    __name(agentPolicy, "agentPolicy");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js
function tlsPolicy(tlsSettings) {
  return {
    name: tlsPolicyName,
    sendRequest: /* @__PURE__ */ __name(async (req, next2) => {
      if (!req.tlsSettings) {
        req.tlsSettings = tlsSettings;
      }
      return next2(req);
    }, "sendRequest")
  };
}
var tlsPolicyName;
var init_tlsPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js"() {
    "use strict";
    tlsPolicyName = "tlsPolicy";
    __name(tlsPolicy, "tlsPolicy");
  }
});

// node_modules/@azure/core-tracing/dist/esm/tracingContext.js
function createTracingContext(options = {}) {
  let context = new TracingContextImpl(options.parentContext);
  if (options.span) {
    context = context.setValue(knownContextKeys.span, options.span);
  }
  if (options.namespace) {
    context = context.setValue(knownContextKeys.namespace, options.namespace);
  }
  return context;
}
var knownContextKeys, TracingContextImpl;
var init_tracingContext = __esm({
  "node_modules/@azure/core-tracing/dist/esm/tracingContext.js"() {
    "use strict";
    knownContextKeys = {
      span: Symbol.for("@azure/core-tracing span"),
      namespace: Symbol.for("@azure/core-tracing namespace")
    };
    __name(createTracingContext, "createTracingContext");
    TracingContextImpl = class _TracingContextImpl {
      static {
        __name(this, "TracingContextImpl");
      }
      constructor(initialContext) {
        this._contextMap = initialContext instanceof _TracingContextImpl ? new Map(initialContext._contextMap) : /* @__PURE__ */ new Map();
      }
      setValue(key, value) {
        const newContext = new _TracingContextImpl(this);
        newContext._contextMap.set(key, value);
        return newContext;
      }
      getValue(key) {
        return this._contextMap.get(key);
      }
      deleteValue(key) {
        const newContext = new _TracingContextImpl(this);
        newContext._contextMap.delete(key);
        return newContext;
      }
    };
  }
});

// node_modules/@azure/core-tracing/dist/commonjs/state.js
var require_state = __commonJS({
  "node_modules/@azure/core-tracing/dist/commonjs/state.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.state = void 0;
    exports2.state = {
      instrumenterImplementation: void 0
    };
  }
});

// node_modules/@azure/core-tracing/dist/esm/state.js
var import_state, state;
var init_state = __esm({
  "node_modules/@azure/core-tracing/dist/esm/state.js"() {
    "use strict";
    import_state = __toESM(require_state(), 1);
    state = import_state.state;
  }
});

// node_modules/@azure/core-tracing/dist/esm/instrumenter.js
function createDefaultTracingSpan() {
  return {
    end: /* @__PURE__ */ __name(() => {
    }, "end"),
    isRecording: /* @__PURE__ */ __name(() => false, "isRecording"),
    recordException: /* @__PURE__ */ __name(() => {
    }, "recordException"),
    setAttribute: /* @__PURE__ */ __name(() => {
    }, "setAttribute"),
    setStatus: /* @__PURE__ */ __name(() => {
    }, "setStatus"),
    addEvent: /* @__PURE__ */ __name(() => {
    }, "addEvent")
  };
}
function createDefaultInstrumenter() {
  return {
    createRequestHeaders: /* @__PURE__ */ __name(() => {
      return {};
    }, "createRequestHeaders"),
    parseTraceparentHeader: /* @__PURE__ */ __name(() => {
      return void 0;
    }, "parseTraceparentHeader"),
    startSpan: /* @__PURE__ */ __name((_name, spanOptions) => {
      return {
        span: createDefaultTracingSpan(),
        tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext })
      };
    }, "startSpan"),
    withContext(_context, callback, ...callbackArgs) {
      return callback(...callbackArgs);
    }
  };
}
function getInstrumenter() {
  if (!state.instrumenterImplementation) {
    state.instrumenterImplementation = createDefaultInstrumenter();
  }
  return state.instrumenterImplementation;
}
var init_instrumenter = __esm({
  "node_modules/@azure/core-tracing/dist/esm/instrumenter.js"() {
    "use strict";
    init_tracingContext();
    init_state();
    __name(createDefaultTracingSpan, "createDefaultTracingSpan");
    __name(createDefaultInstrumenter, "createDefaultInstrumenter");
    __name(getInstrumenter, "getInstrumenter");
  }
});

// node_modules/@azure/core-tracing/dist/esm/tracingClient.js
function createTracingClient(options) {
  const { namespace, packageName, packageVersion } = options;
  function startSpan(name2, operationOptions, spanOptions) {
    var _a4;
    const startSpanResult = getInstrumenter().startSpan(name2, Object.assign(Object.assign({}, spanOptions), { packageName, packageVersion, tracingContext: (_a4 = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a4 === void 0 ? void 0 : _a4.tracingContext }));
    let tracingContext = startSpanResult.tracingContext;
    const span = startSpanResult.span;
    if (!tracingContext.getValue(knownContextKeys.namespace)) {
      tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);
    }
    span.setAttribute("az.namespace", tracingContext.getValue(knownContextKeys.namespace));
    const updatedOptions = Object.assign({}, operationOptions, {
      tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext })
    });
    return {
      span,
      updatedOptions
    };
  }
  __name(startSpan, "startSpan");
  async function withSpan(name2, operationOptions, callback, spanOptions) {
    const { span, updatedOptions } = startSpan(name2, operationOptions, spanOptions);
    try {
      const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));
      span.setStatus({ status: "success" });
      return result;
    } catch (err) {
      span.setStatus({ status: "error", error: err });
      throw err;
    } finally {
      span.end();
    }
  }
  __name(withSpan, "withSpan");
  function withContext(context, callback, ...callbackArgs) {
    return getInstrumenter().withContext(context, callback, ...callbackArgs);
  }
  __name(withContext, "withContext");
  function parseTraceparentHeader(traceparentHeader) {
    return getInstrumenter().parseTraceparentHeader(traceparentHeader);
  }
  __name(parseTraceparentHeader, "parseTraceparentHeader");
  function createRequestHeaders(tracingContext) {
    return getInstrumenter().createRequestHeaders(tracingContext);
  }
  __name(createRequestHeaders, "createRequestHeaders");
  return {
    startSpan,
    withSpan,
    withContext,
    parseTraceparentHeader,
    createRequestHeaders
  };
}
var init_tracingClient = __esm({
  "node_modules/@azure/core-tracing/dist/esm/tracingClient.js"() {
    "use strict";
    init_instrumenter();
    init_tracingContext();
    __name(createTracingClient, "createTracingClient");
  }
});

// node_modules/@azure/core-tracing/dist/esm/index.js
var init_esm5 = __esm({
  "node_modules/@azure/core-tracing/dist/esm/index.js"() {
    "use strict";
    init_instrumenter();
    init_tracingClient();
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js
import { inspect } from "node:util";
var custom;
var init_inspect = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js"() {
    "use strict";
    custom = inspect.custom;
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/restError.js
function isRestError(e3) {
  if (e3 instanceof RestError) {
    return true;
  }
  return isError(e3) && e3.name === "RestError";
}
var errorSanitizer, RestError;
var init_restError = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/restError.js"() {
    "use strict";
    init_esm3();
    init_inspect();
    init_sanitizer();
    errorSanitizer = new Sanitizer();
    RestError = class _RestError extends Error {
      static {
        __name(this, "RestError");
      }
      constructor(message, options = {}) {
        super(message);
        this.name = "RestError";
        this.code = options.code;
        this.statusCode = options.statusCode;
        Object.defineProperty(this, "request", { value: options.request, enumerable: false });
        Object.defineProperty(this, "response", { value: options.response, enumerable: false });
        Object.setPrototypeOf(this, _RestError.prototype);
      }
      /**
       * Logging method for util.inspect in Node
       */
      [custom]() {
        return `RestError: ${this.message} 
 ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), { request: this.request, response: this.response }))}`;
      }
    };
    RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
    RestError.PARSE_ERROR = "PARSE_ERROR";
    __name(isRestError, "isRestError");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js
function tracingPolicy(options = {}) {
  const userAgentPromise = getUserAgentValue(options.userAgentPrefix);
  const sanitizer = new Sanitizer({
    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
  });
  const tracingClient2 = tryCreateTracingClient();
  return {
    name: tracingPolicyName,
    async sendRequest(request3, next2) {
      var _a4;
      if (!tracingClient2) {
        return next2(request3);
      }
      const userAgent = await userAgentPromise;
      const spanAttributes = {
        "http.url": sanitizer.sanitizeUrl(request3.url),
        "http.method": request3.method,
        "http.user_agent": userAgent,
        requestId: request3.requestId
      };
      if (userAgent) {
        spanAttributes["http.user_agent"] = userAgent;
      }
      const { span, tracingContext } = (_a4 = tryCreateSpan(tracingClient2, request3, spanAttributes)) !== null && _a4 !== void 0 ? _a4 : {};
      if (!span || !tracingContext) {
        return next2(request3);
      }
      try {
        const response = await tracingClient2.withContext(tracingContext, next2, request3);
        tryProcessResponse(span, response);
        return response;
      } catch (err) {
        tryProcessError(span, err);
        throw err;
      }
    }
  };
}
function tryCreateTracingClient() {
  try {
    return createTracingClient({
      namespace: "",
      packageName: "@azure/core-rest-pipeline",
      packageVersion: SDK_VERSION
    });
  } catch (e3) {
    logger2.warning(`Error when creating the TracingClient: ${getErrorMessage(e3)}`);
    return void 0;
  }
}
function tryCreateSpan(tracingClient2, request3, spanAttributes) {
  try {
    const { span, updatedOptions } = tracingClient2.startSpan(`HTTP ${request3.method}`, { tracingOptions: request3.tracingOptions }, {
      spanKind: "client",
      spanAttributes
    });
    if (!span.isRecording()) {
      span.end();
      return void 0;
    }
    const headers = tracingClient2.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);
    for (const [key, value] of Object.entries(headers)) {
      request3.headers.set(key, value);
    }
    return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };
  } catch (e3) {
    logger2.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e3)}`);
    return void 0;
  }
}
function tryProcessError(span, error) {
  try {
    span.setStatus({
      status: "error",
      error: isError(error) ? error : void 0
    });
    if (isRestError(error) && error.statusCode) {
      span.setAttribute("http.status_code", error.statusCode);
    }
    span.end();
  } catch (e3) {
    logger2.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e3)}`);
  }
}
function tryProcessResponse(span, response) {
  try {
    span.setAttribute("http.status_code", response.status);
    const serviceRequestId = response.headers.get("x-ms-request-id");
    if (serviceRequestId) {
      span.setAttribute("serviceRequestId", serviceRequestId);
    }
    if (response.status >= 400) {
      span.setStatus({
        status: "error"
      });
    }
    span.end();
  } catch (e3) {
    logger2.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e3)}`);
  }
}
var tracingPolicyName;
var init_tracingPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js"() {
    "use strict";
    init_esm5();
    init_constants();
    init_userAgent();
    init_log2();
    init_esm3();
    init_restError();
    init_sanitizer();
    tracingPolicyName = "tracingPolicy";
    __name(tracingPolicy, "tracingPolicy");
    __name(tryCreateTracingClient, "tryCreateTracingClient");
    __name(tryCreateSpan, "tryCreateSpan");
    __name(tryProcessError, "tryProcessError");
    __name(tryProcessResponse, "tryProcessResponse");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js
function createPipelineFromOptions(options) {
  var _a4;
  const pipeline = createEmptyPipeline();
  if (isNodeLike) {
    if (options.agent) {
      pipeline.addPolicy(agentPolicy(options.agent));
    }
    if (options.tlsOptions) {
      pipeline.addPolicy(tlsPolicy(options.tlsOptions));
    }
    pipeline.addPolicy(proxyPolicy(options.proxyOptions));
    pipeline.addPolicy(decompressResponsePolicy());
  }
  pipeline.addPolicy(formDataPolicy(), { beforePolicies: [multipartPolicyName] });
  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));
  pipeline.addPolicy(setClientRequestIdPolicy((_a4 = options.telemetryOptions) === null || _a4 === void 0 ? void 0 : _a4.clientRequestIdHeaderName));
  pipeline.addPolicy(multipartPolicy(), { afterPhase: "Deserialize" });
  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: "Retry" });
  pipeline.addPolicy(tracingPolicy(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {
    afterPhase: "Retry"
  });
  if (isNodeLike) {
    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: "Retry" });
  }
  pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: "Sign" });
  return pipeline;
}
var init_createPipelineFromOptions = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js"() {
    "use strict";
    init_logPolicy();
    init_pipeline();
    init_redirectPolicy();
    init_userAgentPolicy();
    init_multipartPolicy();
    init_decompressResponsePolicy();
    init_defaultRetryPolicy();
    init_formDataPolicy();
    init_esm3();
    init_proxyPolicy();
    init_setClientRequestIdPolicy();
    init_agentPolicy();
    init_tlsPolicy();
    init_tracingPolicy();
    __name(createPipelineFromOptions, "createPipelineFromOptions");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js
import * as http from "node:http";
import * as https from "node:https";
import * as zlib from "node:zlib";
import { Transform as Transform2 } from "node:stream";
function isReadableStream(body2) {
  return body2 && typeof body2.pipe === "function";
}
function isStreamComplete(stream) {
  if (stream.readable === false) {
    return Promise.resolve();
  }
  return new Promise((resolve2) => {
    const handler = /* @__PURE__ */ __name(() => {
      resolve2();
      stream.removeListener("close", handler);
      stream.removeListener("end", handler);
      stream.removeListener("error", handler);
    }, "handler");
    stream.on("close", handler);
    stream.on("end", handler);
    stream.on("error", handler);
  });
}
function isArrayBuffer(body2) {
  return body2 && typeof body2.byteLength === "number";
}
function getResponseHeaders(res) {
  const headers = createHttpHeaders();
  for (const header of Object.keys(res.headers)) {
    const value = res.headers[header];
    if (Array.isArray(value)) {
      if (value.length > 0) {
        headers.set(header, value[0]);
      }
    } else if (value) {
      headers.set(header, value);
    }
  }
  return headers;
}
function getDecodedResponseStream(stream, headers) {
  const contentEncoding = headers.get("Content-Encoding");
  if (contentEncoding === "gzip") {
    const unzip = zlib.createGunzip();
    stream.pipe(unzip);
    return unzip;
  } else if (contentEncoding === "deflate") {
    const inflate = zlib.createInflate();
    stream.pipe(inflate);
    return inflate;
  }
  return stream;
}
function streamToText(stream) {
  return new Promise((resolve2, reject) => {
    const buffer2 = [];
    stream.on("data", (chunk) => {
      if (Buffer.isBuffer(chunk)) {
        buffer2.push(chunk);
      } else {
        buffer2.push(Buffer.from(chunk));
      }
    });
    stream.on("end", () => {
      resolve2(Buffer.concat(buffer2).toString("utf8"));
    });
    stream.on("error", (e3) => {
      if (e3 && (e3 === null || e3 === void 0 ? void 0 : e3.name) === "AbortError") {
        reject(e3);
      } else {
        reject(new RestError(`Error reading response as text: ${e3.message}`, {
          code: RestError.PARSE_ERROR
        }));
      }
    });
  });
}
function getBodyLength(body2) {
  if (!body2) {
    return 0;
  } else if (Buffer.isBuffer(body2)) {
    return body2.length;
  } else if (isReadableStream(body2)) {
    return null;
  } else if (isArrayBuffer(body2)) {
    return body2.byteLength;
  } else if (typeof body2 === "string") {
    return Buffer.from(body2).length;
  } else {
    return null;
  }
}
function createNodeHttpClient() {
  return new NodeHttpClient();
}
var DEFAULT_TLS_SETTINGS, ReportTransform, NodeHttpClient;
var init_nodeHttpClient = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js"() {
    "use strict";
    init_esm4();
    init_httpHeaders();
    init_restError();
    init_log2();
    init_sanitizer();
    DEFAULT_TLS_SETTINGS = {};
    __name(isReadableStream, "isReadableStream");
    __name(isStreamComplete, "isStreamComplete");
    __name(isArrayBuffer, "isArrayBuffer");
    ReportTransform = class extends Transform2 {
      static {
        __name(this, "ReportTransform");
      }
      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
      _transform(chunk, _encoding, callback) {
        this.push(chunk);
        this.loadedBytes += chunk.length;
        try {
          this.progressCallback({ loadedBytes: this.loadedBytes });
          callback();
        } catch (e3) {
          callback(e3);
        }
      }
      constructor(progressCallback) {
        super();
        this.loadedBytes = 0;
        this.progressCallback = progressCallback;
      }
    };
    NodeHttpClient = class {
      static {
        __name(this, "NodeHttpClient");
      }
      constructor() {
        this.cachedHttpsAgents = /* @__PURE__ */ new WeakMap();
      }
      /**
       * Makes a request over an underlying transport layer and returns the response.
       * @param request - The request to be made.
       */
      async sendRequest(request3) {
        var _a4, _b2, _c2;
        const abortController = new AbortController();
        let abortListener;
        if (request3.abortSignal) {
          if (request3.abortSignal.aborted) {
            throw new AbortError2("The operation was aborted. Request has already been canceled.");
          }
          abortListener = /* @__PURE__ */ __name((event) => {
            if (event.type === "abort") {
              abortController.abort();
            }
          }, "abortListener");
          request3.abortSignal.addEventListener("abort", abortListener);
        }
        let timeoutId;
        if (request3.timeout > 0) {
          timeoutId = setTimeout(() => {
            const sanitizer = new Sanitizer();
            logger2.info(`request to '${sanitizer.sanitizeUrl(request3.url)}' timed out. canceling...`);
            abortController.abort();
          }, request3.timeout);
        }
        const acceptEncoding = request3.headers.get("Accept-Encoding");
        const shouldDecompress = (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes("gzip")) || (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes("deflate"));
        let body2 = typeof request3.body === "function" ? request3.body() : request3.body;
        if (body2 && !request3.headers.has("Content-Length")) {
          const bodyLength = getBodyLength(body2);
          if (bodyLength !== null) {
            request3.headers.set("Content-Length", bodyLength);
          }
        }
        let responseStream;
        try {
          if (body2 && request3.onUploadProgress) {
            const onUploadProgress = request3.onUploadProgress;
            const uploadReportStream = new ReportTransform(onUploadProgress);
            uploadReportStream.on("error", (e3) => {
              logger2.error("Error in upload progress", e3);
            });
            if (isReadableStream(body2)) {
              body2.pipe(uploadReportStream);
            } else {
              uploadReportStream.end(body2);
            }
            body2 = uploadReportStream;
          }
          const res = await this.makeRequest(request3, abortController, body2);
          if (timeoutId !== void 0) {
            clearTimeout(timeoutId);
          }
          const headers = getResponseHeaders(res);
          const status = (_a4 = res.statusCode) !== null && _a4 !== void 0 ? _a4 : 0;
          const response = {
            status,
            headers,
            request: request3
          };
          if (request3.method === "HEAD") {
            res.resume();
            return response;
          }
          responseStream = shouldDecompress ? getDecodedResponseStream(res, headers) : res;
          const onDownloadProgress = request3.onDownloadProgress;
          if (onDownloadProgress) {
            const downloadReportStream = new ReportTransform(onDownloadProgress);
            downloadReportStream.on("error", (e3) => {
              logger2.error("Error in download progress", e3);
            });
            responseStream.pipe(downloadReportStream);
            responseStream = downloadReportStream;
          }
          if (
            // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code
            ((_b2 = request3.streamResponseStatusCodes) === null || _b2 === void 0 ? void 0 : _b2.has(Number.POSITIVE_INFINITY)) || ((_c2 = request3.streamResponseStatusCodes) === null || _c2 === void 0 ? void 0 : _c2.has(response.status))
          ) {
            response.readableStreamBody = responseStream;
          } else {
            response.bodyAsText = await streamToText(responseStream);
          }
          return response;
        } finally {
          if (request3.abortSignal && abortListener) {
            let uploadStreamDone = Promise.resolve();
            if (isReadableStream(body2)) {
              uploadStreamDone = isStreamComplete(body2);
            }
            let downloadStreamDone = Promise.resolve();
            if (isReadableStream(responseStream)) {
              downloadStreamDone = isStreamComplete(responseStream);
            }
            Promise.all([uploadStreamDone, downloadStreamDone]).then(() => {
              var _a5;
              if (abortListener) {
                (_a5 = request3.abortSignal) === null || _a5 === void 0 ? void 0 : _a5.removeEventListener("abort", abortListener);
              }
            }).catch((e3) => {
              logger2.warning("Error when cleaning up abortListener on httpRequest", e3);
            });
          }
        }
      }
      makeRequest(request3, abortController, body2) {
        var _a4;
        const url2 = new URL(request3.url);
        const isInsecure = url2.protocol !== "https:";
        if (isInsecure && !request3.allowInsecureConnection) {
          throw new Error(`Cannot connect to ${request3.url} while allowInsecureConnection is false.`);
        }
        const agent = (_a4 = request3.agent) !== null && _a4 !== void 0 ? _a4 : this.getOrCreateAgent(request3, isInsecure);
        const options = {
          agent,
          hostname: url2.hostname,
          path: `${url2.pathname}${url2.search}`,
          port: url2.port,
          method: request3.method,
          headers: request3.headers.toJSON({ preserveCase: true })
        };
        return new Promise((resolve2, reject) => {
          const req = isInsecure ? http.request(options, resolve2) : https.request(options, resolve2);
          req.once("error", (err) => {
            var _a5;
            reject(new RestError(err.message, { code: (_a5 = err.code) !== null && _a5 !== void 0 ? _a5 : RestError.REQUEST_SEND_ERROR, request: request3 }));
          });
          abortController.signal.addEventListener("abort", () => {
            const abortError = new AbortError2("The operation was aborted. Rejecting from abort signal callback while making request.");
            req.destroy(abortError);
            reject(abortError);
          });
          if (body2 && isReadableStream(body2)) {
            body2.pipe(req);
          } else if (body2) {
            if (typeof body2 === "string" || Buffer.isBuffer(body2)) {
              req.end(body2);
            } else if (isArrayBuffer(body2)) {
              req.end(ArrayBuffer.isView(body2) ? Buffer.from(body2.buffer) : Buffer.from(body2));
            } else {
              logger2.error("Unrecognized body type", body2);
              reject(new RestError("Unrecognized body type"));
            }
          } else {
            req.end();
          }
        });
      }
      getOrCreateAgent(request3, isInsecure) {
        var _a4;
        const disableKeepAlive = request3.disableKeepAlive;
        if (isInsecure) {
          if (disableKeepAlive) {
            return http.globalAgent;
          }
          if (!this.cachedHttpAgent) {
            this.cachedHttpAgent = new http.Agent({ keepAlive: true });
          }
          return this.cachedHttpAgent;
        } else {
          if (disableKeepAlive && !request3.tlsSettings) {
            return https.globalAgent;
          }
          const tlsSettings = (_a4 = request3.tlsSettings) !== null && _a4 !== void 0 ? _a4 : DEFAULT_TLS_SETTINGS;
          let agent = this.cachedHttpsAgents.get(tlsSettings);
          if (agent && agent.options.keepAlive === !disableKeepAlive) {
            return agent;
          }
          logger2.info("No cached TLS Agent exist, creating a new Agent");
          agent = new https.Agent(Object.assign({
            // keepAlive is true if disableKeepAlive is false.
            keepAlive: !disableKeepAlive
          }, tlsSettings));
          this.cachedHttpsAgents.set(tlsSettings, agent);
          return agent;
        }
      }
    };
    __name(getResponseHeaders, "getResponseHeaders");
    __name(getDecodedResponseStream, "getDecodedResponseStream");
    __name(streamToText, "streamToText");
    __name(getBodyLength, "getBodyLength");
    __name(createNodeHttpClient, "createNodeHttpClient");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js
function createDefaultHttpClient() {
  return createNodeHttpClient();
}
var init_defaultHttpClient = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js"() {
    "use strict";
    init_nodeHttpClient();
    __name(createDefaultHttpClient, "createDefaultHttpClient");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js
function createPipelineRequest(options) {
  return new PipelineRequestImpl(options);
}
var PipelineRequestImpl;
var init_pipelineRequest = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js"() {
    "use strict";
    init_httpHeaders();
    init_esm3();
    PipelineRequestImpl = class {
      static {
        __name(this, "PipelineRequestImpl");
      }
      constructor(options) {
        var _a4, _b2, _c2, _d2, _e2, _f, _g;
        this.url = options.url;
        this.body = options.body;
        this.headers = (_a4 = options.headers) !== null && _a4 !== void 0 ? _a4 : createHttpHeaders();
        this.method = (_b2 = options.method) !== null && _b2 !== void 0 ? _b2 : "GET";
        this.timeout = (_c2 = options.timeout) !== null && _c2 !== void 0 ? _c2 : 0;
        this.multipartBody = options.multipartBody;
        this.formData = options.formData;
        this.disableKeepAlive = (_d2 = options.disableKeepAlive) !== null && _d2 !== void 0 ? _d2 : false;
        this.proxySettings = options.proxySettings;
        this.streamResponseStatusCodes = options.streamResponseStatusCodes;
        this.withCredentials = (_e2 = options.withCredentials) !== null && _e2 !== void 0 ? _e2 : false;
        this.abortSignal = options.abortSignal;
        this.tracingOptions = options.tracingOptions;
        this.onUploadProgress = options.onUploadProgress;
        this.onDownloadProgress = options.onDownloadProgress;
        this.requestId = options.requestId || randomUUID();
        this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;
        this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;
        this.agent = options.agent;
        this.tlsSettings = options.tlsSettings;
      }
    };
    __name(createPipelineRequest, "createPipelineRequest");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js
var init_exponentialRetryPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js"() {
    "use strict";
    init_exponentialRetryStrategy();
    init_retryPolicy();
    init_constants();
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js
var init_systemErrorRetryPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js"() {
    "use strict";
    init_exponentialRetryStrategy();
    init_retryPolicy();
    init_constants();
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js
var init_throttlingRetryPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js"() {
    "use strict";
    init_throttlingRetryStrategy();
    init_retryPolicy();
    init_constants();
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js
async function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {
  async function tryGetAccessToken() {
    if (Date.now() < refreshTimeout) {
      try {
        return await getAccessToken();
      } catch (_a4) {
        return null;
      }
    } else {
      const finalToken = await getAccessToken();
      if (finalToken === null) {
        throw new Error("Failed to refresh access token.");
      }
      return finalToken;
    }
  }
  __name(tryGetAccessToken, "tryGetAccessToken");
  let token = await tryGetAccessToken();
  while (token === null) {
    await delay2(retryIntervalInMs);
    token = await tryGetAccessToken();
  }
  return token;
}
function createTokenCycler(credential, tokenCyclerOptions) {
  let refreshWorker = null;
  let token = null;
  let tenantId;
  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
  const cycler = {
    /**
     * Produces true if a refresh job is currently in progress.
     */
    get isRefreshing() {
      return refreshWorker !== null;
    },
    /**
     * Produces true if the cycler SHOULD refresh (we are within the refresh
     * window and not already refreshing)
     */
    get shouldRefresh() {
      var _a4;
      if (cycler.isRefreshing) {
        return false;
      }
      if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {
        return true;
      }
      return ((_a4 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a4 !== void 0 ? _a4 : 0) - options.refreshWindowInMs < Date.now();
    },
    /**
     * Produces true if the cycler MUST refresh (null or nearly-expired
     * token).
     */
    get mustRefresh() {
      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
    }
  };
  function refresh(scopes, getTokenOptions) {
    var _a4;
    if (!cycler.isRefreshing) {
      const tryGetAccessToken = /* @__PURE__ */ __name(() => credential.getToken(scopes, getTokenOptions), "tryGetAccessToken");
      refreshWorker = beginRefresh(
        tryGetAccessToken,
        options.retryIntervalInMs,
        // If we don't have a token, then we should timeout immediately
        (_a4 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a4 !== void 0 ? _a4 : Date.now()
      ).then((_token) => {
        refreshWorker = null;
        token = _token;
        tenantId = getTokenOptions.tenantId;
        return token;
      }).catch((reason) => {
        refreshWorker = null;
        token = null;
        tenantId = void 0;
        throw reason;
      });
    }
    return refreshWorker;
  }
  __name(refresh, "refresh");
  return async (scopes, tokenOptions) => {
    const hasClaimChallenge = Boolean(tokenOptions.claims);
    const tenantIdChanged = tenantId !== tokenOptions.tenantId;
    if (hasClaimChallenge) {
      token = null;
    }
    const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;
    if (mustRefresh) {
      return refresh(scopes, tokenOptions);
    }
    if (cycler.shouldRefresh) {
      refresh(scopes, tokenOptions);
    }
    return token;
  };
}
var DEFAULT_CYCLER_OPTIONS;
var init_tokenCycler = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js"() {
    "use strict";
    init_helpers();
    DEFAULT_CYCLER_OPTIONS = {
      forcedRefreshWindowInMs: 1e3,
      // Force waiting for a refresh 1s before the token expires
      retryIntervalInMs: 3e3,
      // Allow refresh attempts every 3s
      refreshWindowInMs: 1e3 * 60 * 2
      // Start refreshing 2m before expiry
    };
    __name(beginRefresh, "beginRefresh");
    __name(createTokenCycler, "createTokenCycler");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js
async function trySendRequest(request3, next2) {
  try {
    return [await next2(request3), void 0];
  } catch (e3) {
    if (isRestError(e3) && e3.response) {
      return [e3.response, e3];
    } else {
      throw e3;
    }
  }
}
async function defaultAuthorizeRequest(options) {
  const { scopes, getAccessToken, request: request3 } = options;
  const getTokenOptions = {
    abortSignal: request3.abortSignal,
    tracingOptions: request3.tracingOptions,
    enableCae: true
  };
  const accessToken = await getAccessToken(scopes, getTokenOptions);
  if (accessToken) {
    options.request.headers.set("Authorization", `Bearer ${accessToken.token}`);
  }
}
function isChallengeResponse(response) {
  return response.status === 401 && response.headers.has("WWW-Authenticate");
}
async function authorizeRequestOnCaeChallenge(onChallengeOptions, caeClaims) {
  var _a4;
  const { scopes } = onChallengeOptions;
  const accessToken = await onChallengeOptions.getAccessToken(scopes, {
    enableCae: true,
    claims: caeClaims
  });
  if (!accessToken) {
    return false;
  }
  onChallengeOptions.request.headers.set("Authorization", `${(_a4 = accessToken.tokenType) !== null && _a4 !== void 0 ? _a4 : "Bearer"} ${accessToken.token}`);
  return true;
}
function bearerTokenAuthenticationPolicy(options) {
  var _a4, _b2, _c2;
  const { credential, scopes, challengeCallbacks } = options;
  const logger6 = options.logger || logger2;
  const callbacks = {
    authorizeRequest: (_b2 = (_a4 = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) === null || _a4 === void 0 ? void 0 : _a4.bind(challengeCallbacks)) !== null && _b2 !== void 0 ? _b2 : defaultAuthorizeRequest,
    authorizeRequestOnChallenge: (_c2 = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge) === null || _c2 === void 0 ? void 0 : _c2.bind(challengeCallbacks)
  };
  const getAccessToken = credential ? createTokenCycler(
    credential
    /* , options */
  ) : () => Promise.resolve(null);
  return {
    name: bearerTokenAuthenticationPolicyName,
    /**
     * If there's no challenge parameter:
     * - It will try to retrieve the token using the cache, or the credential's getToken.
     * - Then it will try the next policy with or without the retrieved token.
     *
     * It uses the challenge parameters to:
     * - Skip a first attempt to get the token from the credential if there's no cached token,
     *   since it expects the token to be retrievable only after the challenge.
     * - Prepare the outgoing request if the `prepareRequest` method has been provided.
     * - Send an initial request to receive the challenge if it fails.
     * - Process a challenge if the response contains it.
     * - Retrieve a token with the challenge information, then re-send the request.
     */
    async sendRequest(request3, next2) {
      if (!request3.url.toLowerCase().startsWith("https://")) {
        throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
      }
      await callbacks.authorizeRequest({
        scopes: Array.isArray(scopes) ? scopes : [scopes],
        request: request3,
        getAccessToken,
        logger: logger6
      });
      let response;
      let error;
      let shouldSendRequest;
      [response, error] = await trySendRequest(request3, next2);
      if (isChallengeResponse(response)) {
        let claims = getCaeChallengeClaims(response.headers.get("WWW-Authenticate"));
        if (claims) {
          let parsedClaim;
          try {
            parsedClaim = atob(claims);
          } catch (e3) {
            logger6.warning(`The WWW-Authenticate header contains "claims" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);
            return response;
          }
          shouldSendRequest = await authorizeRequestOnCaeChallenge({
            scopes: Array.isArray(scopes) ? scopes : [scopes],
            response,
            request: request3,
            getAccessToken,
            logger: logger6
          }, parsedClaim);
          if (shouldSendRequest) {
            [response, error] = await trySendRequest(request3, next2);
          }
        } else if (callbacks.authorizeRequestOnChallenge) {
          shouldSendRequest = await callbacks.authorizeRequestOnChallenge({
            scopes: Array.isArray(scopes) ? scopes : [scopes],
            request: request3,
            response,
            getAccessToken,
            logger: logger6
          });
          if (shouldSendRequest) {
            [response, error] = await trySendRequest(request3, next2);
          }
          if (isChallengeResponse(response)) {
            claims = getCaeChallengeClaims(response.headers.get("WWW-Authenticate"));
            if (claims) {
              let parsedClaim;
              try {
                parsedClaim = atob(claims);
              } catch (e3) {
                logger6.warning(`The WWW-Authenticate header contains "claims" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);
                return response;
              }
              shouldSendRequest = await authorizeRequestOnCaeChallenge({
                scopes: Array.isArray(scopes) ? scopes : [scopes],
                response,
                request: request3,
                getAccessToken,
                logger: logger6
              }, parsedClaim);
              if (shouldSendRequest) {
                [response, error] = await trySendRequest(request3, next2);
              }
            }
          }
        }
      }
      if (error) {
        throw error;
      } else {
        return response;
      }
    }
  };
}
function parseChallenges(challenges) {
  const challengeRegex = /(\w+)\s+((?:\w+=(?:"[^"]*"|[^,]*),?\s*)+)/g;
  const paramRegex = /(\w+)="([^"]*)"/g;
  const parsedChallenges = [];
  let match3;
  while ((match3 = challengeRegex.exec(challenges)) !== null) {
    const scheme = match3[1];
    const paramsString = match3[2];
    const params = {};
    let paramMatch;
    while ((paramMatch = paramRegex.exec(paramsString)) !== null) {
      params[paramMatch[1]] = paramMatch[2];
    }
    parsedChallenges.push({ scheme, params });
  }
  return parsedChallenges;
}
function getCaeChallengeClaims(challenges) {
  var _a4;
  if (!challenges) {
    return;
  }
  const parsedChallenges = parseChallenges(challenges);
  return (_a4 = parsedChallenges.find((x3) => x3.scheme === "Bearer" && x3.params.claims && x3.params.error === "insufficient_claims")) === null || _a4 === void 0 ? void 0 : _a4.params.claims;
}
var bearerTokenAuthenticationPolicyName;
var init_bearerTokenAuthenticationPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js"() {
    "use strict";
    init_tokenCycler();
    init_log2();
    init_restError();
    bearerTokenAuthenticationPolicyName = "bearerTokenAuthenticationPolicy";
    __name(trySendRequest, "trySendRequest");
    __name(defaultAuthorizeRequest, "defaultAuthorizeRequest");
    __name(isChallengeResponse, "isChallengeResponse");
    __name(authorizeRequestOnCaeChallenge, "authorizeRequestOnCaeChallenge");
    __name(bearerTokenAuthenticationPolicy, "bearerTokenAuthenticationPolicy");
    __name(parseChallenges, "parseChallenges");
    __name(getCaeChallengeClaims, "getCaeChallengeClaims");
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js
var init_ndJsonPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js"() {
    "use strict";
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js
var init_auxiliaryAuthenticationHeaderPolicy = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js"() {
    "use strict";
    init_tokenCycler();
    init_log2();
  }
});

// node_modules/@azure/core-rest-pipeline/dist/esm/index.js
var init_esm6 = __esm({
  "node_modules/@azure/core-rest-pipeline/dist/esm/index.js"() {
    "use strict";
    init_pipeline();
    init_createPipelineFromOptions();
    init_defaultHttpClient();
    init_httpHeaders();
    init_pipelineRequest();
    init_restError();
    init_decompressResponsePolicy();
    init_exponentialRetryPolicy();
    init_setClientRequestIdPolicy();
    init_logPolicy();
    init_multipartPolicy();
    init_proxyPolicy();
    init_redirectPolicy();
    init_systemErrorRetryPolicy();
    init_throttlingRetryPolicy();
    init_retryPolicy();
    init_tracingPolicy();
    init_defaultRetryPolicy();
    init_userAgentPolicy();
    init_tlsPolicy();
    init_formDataPolicy();
    init_bearerTokenAuthenticationPolicy();
    init_ndJsonPolicy();
    init_auxiliaryAuthenticationHeaderPolicy();
    init_agentPolicy();
    init_file();
  }
});

// node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js
var init_azureKeyCredential = __esm({
  "node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js"() {
    "use strict";
  }
});

// node_modules/@azure/core-auth/dist/esm/keyCredential.js
var init_keyCredential = __esm({
  "node_modules/@azure/core-auth/dist/esm/keyCredential.js"() {
    "use strict";
    init_esm3();
  }
});

// node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js
var init_azureNamedKeyCredential = __esm({
  "node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js"() {
    "use strict";
    init_esm3();
  }
});

// node_modules/@azure/core-auth/dist/esm/azureSASCredential.js
var init_azureSASCredential = __esm({
  "node_modules/@azure/core-auth/dist/esm/azureSASCredential.js"() {
    "use strict";
    init_esm3();
  }
});

// node_modules/@azure/core-auth/dist/esm/tokenCredential.js
function isTokenCredential(credential) {
  const castCredential = credential;
  return castCredential && typeof castCredential.getToken === "function" && (castCredential.signRequest === void 0 || castCredential.getToken.length > 0);
}
var init_tokenCredential = __esm({
  "node_modules/@azure/core-auth/dist/esm/tokenCredential.js"() {
    "use strict";
    __name(isTokenCredential, "isTokenCredential");
  }
});

// node_modules/@azure/core-auth/dist/esm/index.js
var init_esm7 = __esm({
  "node_modules/@azure/core-auth/dist/esm/index.js"() {
    "use strict";
    init_azureKeyCredential();
    init_keyCredential();
    init_azureNamedKeyCredential();
    init_azureSASCredential();
    init_tokenCredential();
  }
});

// node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js
function createDisableKeepAlivePolicy() {
  return {
    name: disableKeepAlivePolicyName,
    async sendRequest(request3, next2) {
      request3.disableKeepAlive = true;
      return next2(request3);
    }
  };
}
function pipelineContainsDisableKeepAlivePolicy(pipeline) {
  return pipeline.getOrderedPolicies().some((policy) => policy.name === disableKeepAlivePolicyName);
}
var disableKeepAlivePolicyName;
var init_disableKeepAlivePolicy = __esm({
  "node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js"() {
    "use strict";
    disableKeepAlivePolicyName = "DisableKeepAlivePolicy";
    __name(createDisableKeepAlivePolicy, "createDisableKeepAlivePolicy");
    __name(pipelineContainsDisableKeepAlivePolicy, "pipelineContainsDisableKeepAlivePolicy");
  }
});

// node_modules/@azure/core-client/dist/esm/base64.js
function encodeByteArray(value) {
  const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);
  return bufferValue.toString("base64");
}
function decodeString(value) {
  return Buffer.from(value, "base64");
}
var init_base64 = __esm({
  "node_modules/@azure/core-client/dist/esm/base64.js"() {
    "use strict";
    __name(encodeByteArray, "encodeByteArray");
    __name(decodeString, "decodeString");
  }
});

// node_modules/@azure/core-client/dist/esm/interfaces.js
var XML_ATTRKEY, XML_CHARKEY;
var init_interfaces = __esm({
  "node_modules/@azure/core-client/dist/esm/interfaces.js"() {
    "use strict";
    XML_ATTRKEY = "$";
    XML_CHARKEY = "_";
  }
});

// node_modules/@azure/core-client/dist/esm/utils.js
function isPrimitiveBody(value, mapperTypeName) {
  return mapperTypeName !== "Composite" && mapperTypeName !== "Dictionary" && (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !== null || value === void 0 || value === null);
}
function isDuration(value) {
  return validateISODuration.test(value);
}
function isValidUuid(uuid) {
  return validUuidRegex.test(uuid);
}
function handleNullableResponseAndWrappableBody(responseObject) {
  const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);
  if (responseObject.hasNullableType && Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {
    return responseObject.shouldWrapBody ? { body: null } : null;
  } else {
    return responseObject.shouldWrapBody ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;
  }
}
function flattenResponse(fullResponse, responseSpec) {
  var _a4, _b2;
  const parsedHeaders = fullResponse.parsedHeaders;
  if (fullResponse.request.method === "HEAD") {
    return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });
  }
  const bodyMapper = responseSpec && responseSpec.bodyMapper;
  const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);
  const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;
  if (expectedBodyTypeName === "Stream") {
    return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });
  }
  const modelProperties = expectedBodyTypeName === "Composite" && bodyMapper.type.modelProperties || {};
  const isPageableResponse = Object.keys(modelProperties).some((k3) => modelProperties[k3].serializedName === "");
  if (expectedBodyTypeName === "Sequence" || isPageableResponse) {
    const arrayResponse = (_a4 = fullResponse.parsedBody) !== null && _a4 !== void 0 ? _a4 : [];
    for (const key of Object.keys(modelProperties)) {
      if (modelProperties[key].serializedName) {
        arrayResponse[key] = (_b2 = fullResponse.parsedBody) === null || _b2 === void 0 ? void 0 : _b2[key];
      }
    }
    if (parsedHeaders) {
      for (const key of Object.keys(parsedHeaders)) {
        arrayResponse[key] = parsedHeaders[key];
      }
    }
    return isNullable && !fullResponse.parsedBody && !parsedHeaders && Object.getOwnPropertyNames(modelProperties).length === 0 ? null : arrayResponse;
  }
  return handleNullableResponseAndWrappableBody({
    body: fullResponse.parsedBody,
    headers: parsedHeaders,
    hasNullableType: isNullable,
    shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName)
  });
}
var validateISODuration, validUuidRegex;
var init_utils = __esm({
  "node_modules/@azure/core-client/dist/esm/utils.js"() {
    "use strict";
    __name(isPrimitiveBody, "isPrimitiveBody");
    validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    __name(isDuration, "isDuration");
    validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
    __name(isValidUuid, "isValidUuid");
    __name(handleNullableResponseAndWrappableBody, "handleNullableResponseAndWrappableBody");
    __name(flattenResponse, "flattenResponse");
  }
});

// node_modules/@azure/core-client/dist/esm/serializer.js
function createSerializer(modelMappers = {}, isXML = false) {
  return new SerializerImpl(modelMappers, isXML);
}
function trimEnd(str, ch) {
  let len = str.length;
  while (len - 1 >= 0 && str[len - 1] === ch) {
    --len;
  }
  return str.substr(0, len);
}
function bufferToBase64Url(buffer2) {
  if (!buffer2) {
    return void 0;
  }
  if (!(buffer2 instanceof Uint8Array)) {
    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);
  }
  const str = encodeByteArray(buffer2);
  return trimEnd(str, "=").replace(/\+/g, "-").replace(/\//g, "_");
}
function base64UrlToByteArray(str) {
  if (!str) {
    return void 0;
  }
  if (str && typeof str.valueOf() !== "string") {
    throw new Error("Please provide an input of type string for converting to Uint8Array");
  }
  str = str.replace(/-/g, "+").replace(/_/g, "/");
  return decodeString(str);
}
function splitSerializeName(prop) {
  const classes = [];
  let partialclass = "";
  if (prop) {
    const subwords = prop.split(".");
    for (const item of subwords) {
      if (item.charAt(item.length - 1) === "\\") {
        partialclass += item.substr(0, item.length - 1) + ".";
      } else {
        partialclass += item;
        classes.push(partialclass);
        partialclass = "";
      }
    }
  }
  return classes;
}
function dateToUnixTime(d3) {
  if (!d3) {
    return void 0;
  }
  if (typeof d3.valueOf() === "string") {
    d3 = new Date(d3);
  }
  return Math.floor(d3.getTime() / 1e3);
}
function unixTimeToDate(n3) {
  if (!n3) {
    return void 0;
  }
  return new Date(n3 * 1e3);
}
function serializeBasicTypes(typeName, objectName, value) {
  if (value !== null && value !== void 0) {
    if (typeName.match(/^Number$/i) !== null) {
      if (typeof value !== "number") {
        throw new Error(`${objectName} with value ${value} must be of type number.`);
      }
    } else if (typeName.match(/^String$/i) !== null) {
      if (typeof value.valueOf() !== "string") {
        throw new Error(`${objectName} with value "${value}" must be of type string.`);
      }
    } else if (typeName.match(/^Uuid$/i) !== null) {
      if (!(typeof value.valueOf() === "string" && isValidUuid(value))) {
        throw new Error(`${objectName} with value "${value}" must be of type string and a valid uuid.`);
      }
    } else if (typeName.match(/^Boolean$/i) !== null) {
      if (typeof value !== "boolean") {
        throw new Error(`${objectName} with value ${value} must be of type boolean.`);
      }
    } else if (typeName.match(/^Stream$/i) !== null) {
      const objectType = typeof value;
      if (objectType !== "string" && typeof value.pipe !== "function" && // NodeJS.ReadableStream
      typeof value.tee !== "function" && // browser ReadableStream
      !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && // File objects count as a type of Blob, so we want to use instanceof explicitly
      !((typeof Blob === "function" || typeof Blob === "object") && value instanceof Blob) && objectType !== "function") {
        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);
      }
    }
  }
  return value;
}
function serializeEnumType(objectName, allowedValues, value) {
  if (!allowedValues) {
    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);
  }
  const isPresent = allowedValues.some((item) => {
    if (typeof item.valueOf() === "string") {
      return item.toLowerCase() === value.toLowerCase();
    }
    return item === value;
  });
  if (!isPresent) {
    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);
  }
  return value;
}
function serializeByteArrayType(objectName, value) {
  if (value !== void 0 && value !== null) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(`${objectName} must be of type Uint8Array.`);
    }
    value = encodeByteArray(value);
  }
  return value;
}
function serializeBase64UrlType(objectName, value) {
  if (value !== void 0 && value !== null) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(`${objectName} must be of type Uint8Array.`);
    }
    value = bufferToBase64Url(value);
  }
  return value;
}
function serializeDateTypes(typeName, value, objectName) {
  if (value !== void 0 && value !== null) {
    if (typeName.match(/^Date$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
      }
      value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
    } else if (typeName.match(/^DateTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
      }
      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);
      }
      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
    } else if (typeName.match(/^UnixTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format for it to be serialized in UnixTime/Epoch format.`);
      }
      value = dateToUnixTime(value);
    } else if (typeName.match(/^TimeSpan$/i) !== null) {
      if (!isDuration(value)) {
        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was "${value}".`);
      }
    }
  }
  return value;
}
function serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {
  var _a4;
  if (!Array.isArray(object)) {
    throw new Error(`${objectName} must be of type Array.`);
  }
  let elementType = mapper.type.element;
  if (!elementType || typeof elementType !== "object") {
    throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}.`);
  }
  if (elementType.type.name === "Composite" && elementType.type.className) {
    elementType = (_a4 = serializer.modelMappers[elementType.type.className]) !== null && _a4 !== void 0 ? _a4 : elementType;
  }
  const tempArray = [];
  for (let i3 = 0; i3 < object.length; i3++) {
    const serializedValue = serializer.serialize(elementType, object[i3], objectName, options);
    if (isXml && elementType.xmlNamespace) {
      const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : "xmlns";
      if (elementType.type.name === "Composite") {
        tempArray[i3] = Object.assign({}, serializedValue);
        tempArray[i3][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };
      } else {
        tempArray[i3] = {};
        tempArray[i3][options.xml.xmlCharKey] = serializedValue;
        tempArray[i3][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };
      }
    } else {
      tempArray[i3] = serializedValue;
    }
  }
  return tempArray;
}
function serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {
  if (typeof object !== "object") {
    throw new Error(`${objectName} must be of type object.`);
  }
  const valueType = mapper.type.value;
  if (!valueType || typeof valueType !== "object") {
    throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}.`);
  }
  const tempDictionary = {};
  for (const key of Object.keys(object)) {
    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);
    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
  }
  if (isXml && mapper.xmlNamespace) {
    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
    const result = tempDictionary;
    result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };
    return result;
  }
  return tempDictionary;
}
function resolveAdditionalProperties(serializer, mapper, objectName) {
  const additionalProperties = mapper.type.additionalProperties;
  if (!additionalProperties && mapper.type.className) {
    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
    return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
  }
  return additionalProperties;
}
function resolveReferencedMapper(serializer, mapper, objectName) {
  const className = mapper.type.className;
  if (!className) {
    throw new Error(`Class name for model "${objectName}" is not provided in the mapper "${JSON.stringify(mapper, void 0, 2)}".`);
  }
  return serializer.modelMappers[className];
}
function resolveModelProperties(serializer, mapper, objectName) {
  let modelProps = mapper.type.modelProperties;
  if (!modelProps) {
    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
    if (!modelMapper) {
      throw new Error(`mapper() cannot be null or undefined for model "${mapper.type.className}".`);
    }
    modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;
    if (!modelProps) {
      throw new Error(`modelProperties cannot be null or undefined in the mapper "${JSON.stringify(modelMapper)}" of type "${mapper.type.className}" for object "${objectName}".`);
    }
  }
  return modelProps;
}
function serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {
  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
    mapper = getPolymorphicMapper(serializer, mapper, object, "clientName");
  }
  if (object !== void 0 && object !== null) {
    const payload = {};
    const modelProps = resolveModelProperties(serializer, mapper, objectName);
    for (const key of Object.keys(modelProps)) {
      const propertyMapper = modelProps[key];
      if (propertyMapper.readOnly) {
        continue;
      }
      let propName3;
      let parentObject = payload;
      if (serializer.isXML) {
        if (propertyMapper.xmlIsWrapped) {
          propName3 = propertyMapper.xmlName;
        } else {
          propName3 = propertyMapper.xmlElementName || propertyMapper.xmlName;
        }
      } else {
        const paths = splitSerializeName(propertyMapper.serializedName);
        propName3 = paths.pop();
        for (const pathName of paths) {
          const childObject = parentObject[pathName];
          if ((childObject === void 0 || childObject === null) && (object[key] !== void 0 && object[key] !== null || propertyMapper.defaultValue !== void 0)) {
            parentObject[pathName] = {};
          }
          parentObject = parentObject[pathName];
        }
      }
      if (parentObject !== void 0 && parentObject !== null) {
        if (isXml && mapper.xmlNamespace) {
          const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
          parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });
        }
        const propertyObjectName = propertyMapper.serializedName !== "" ? objectName + "." + propertyMapper.serializedName : objectName;
        let toSerialize = object[key];
        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && (toSerialize === void 0 || toSerialize === null)) {
          toSerialize = mapper.serializedName;
        }
        const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);
        if (serializedValue !== void 0 && propName3 !== void 0 && propName3 !== null) {
          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);
          if (isXml && propertyMapper.xmlIsAttribute) {
            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};
            parentObject[XML_ATTRKEY][propName3] = serializedValue;
          } else if (isXml && propertyMapper.xmlIsWrapped) {
            parentObject[propName3] = { [propertyMapper.xmlElementName]: value };
          } else {
            parentObject[propName3] = value;
          }
        }
      }
    }
    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);
    if (additionalPropertiesMapper) {
      const propNames = Object.keys(modelProps);
      for (const clientPropName in object) {
        const isAdditionalProperty = propNames.every((pn2) => pn2 !== clientPropName);
        if (isAdditionalProperty) {
          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
        }
      }
    }
    return payload;
  }
  return object;
}
function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
  if (!isXml || !propertyMapper.xmlNamespace) {
    return serializedValue;
  }
  const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : "xmlns";
  const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };
  if (["Composite"].includes(propertyMapper.type.name)) {
    if (serializedValue[XML_ATTRKEY]) {
      return serializedValue;
    } else {
      const result2 = Object.assign({}, serializedValue);
      result2[XML_ATTRKEY] = xmlNamespace;
      return result2;
    }
  }
  const result = {};
  result[options.xml.xmlCharKey] = serializedValue;
  result[XML_ATTRKEY] = xmlNamespace;
  return result;
}
function isSpecialXmlProperty(propertyName, options) {
  return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);
}
function deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {
  var _a4, _b2;
  const xmlCharKey = (_a4 = options.xml.xmlCharKey) !== null && _a4 !== void 0 ? _a4 : XML_CHARKEY;
  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
    mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName");
  }
  const modelProps = resolveModelProperties(serializer, mapper, objectName);
  let instance = {};
  const handledPropertyNames = [];
  for (const key of Object.keys(modelProps)) {
    const propertyMapper = modelProps[key];
    const paths = splitSerializeName(modelProps[key].serializedName);
    handledPropertyNames.push(paths[0]);
    const { serializedName, xmlName, xmlElementName } = propertyMapper;
    let propertyObjectName = objectName;
    if (serializedName !== "" && serializedName !== void 0) {
      propertyObjectName = objectName + "." + serializedName;
    }
    const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
    if (headerCollectionPrefix) {
      const dictionary = {};
      for (const headerKey of Object.keys(responseBody)) {
        if (headerKey.startsWith(headerCollectionPrefix)) {
          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
        }
        handledPropertyNames.push(headerKey);
      }
      instance[key] = dictionary;
    } else if (serializer.isXML) {
      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {
        instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);
      } else if (propertyMapper.xmlIsMsText) {
        if (responseBody[xmlCharKey] !== void 0) {
          instance[key] = responseBody[xmlCharKey];
        } else if (typeof responseBody === "string") {
          instance[key] = responseBody;
        }
      } else {
        const propertyName = xmlElementName || xmlName || serializedName;
        if (propertyMapper.xmlIsWrapped) {
          const wrapped = responseBody[xmlName];
          const elementList = (_b2 = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b2 !== void 0 ? _b2 : [];
          instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);
          handledPropertyNames.push(xmlName);
        } else {
          const property = responseBody[propertyName];
          instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);
          handledPropertyNames.push(propertyName);
        }
      }
    } else {
      let propertyInstance;
      let res = responseBody;
      let steps = 0;
      for (const item of paths) {
        if (!res)
          break;
        steps++;
        res = res[item];
      }
      if (res === null && steps < paths.length) {
        res = void 0;
      }
      propertyInstance = res;
      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && (propertyInstance === void 0 || propertyInstance === null)) {
        propertyInstance = mapper.serializedName;
      }
      let serializedValue;
      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
        propertyInstance = responseBody[key];
        const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
        for (const [k3, v3] of Object.entries(instance)) {
          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k3)) {
            arrayInstance[k3] = v3;
          }
        }
        instance = arrayInstance;
      } else if (propertyInstance !== void 0 || propertyMapper.defaultValue !== void 0) {
        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
        instance[key] = serializedValue;
      }
    }
  }
  const additionalPropertiesMapper = mapper.type.additionalProperties;
  if (additionalPropertiesMapper) {
    const isAdditionalProperty = /* @__PURE__ */ __name((responsePropName) => {
      for (const clientPropName in modelProps) {
        const paths = splitSerializeName(modelProps[clientPropName].serializedName);
        if (paths[0] === responsePropName) {
          return false;
        }
      }
      return true;
    }, "isAdditionalProperty");
    for (const responsePropName in responseBody) {
      if (isAdditionalProperty(responsePropName)) {
        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options);
      }
    }
  } else if (responseBody && !options.ignoreUnknownProperties) {
    for (const key of Object.keys(responseBody)) {
      if (instance[key] === void 0 && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {
        instance[key] = responseBody[key];
      }
    }
  }
  return instance;
}
function deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {
  const value = mapper.type.value;
  if (!value || typeof value !== "object") {
    throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}`);
  }
  if (responseBody) {
    const tempDictionary = {};
    for (const key of Object.keys(responseBody)) {
      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);
    }
    return tempDictionary;
  }
  return responseBody;
}
function deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {
  var _a4;
  let element = mapper.type.element;
  if (!element || typeof element !== "object") {
    throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}`);
  }
  if (responseBody) {
    if (!Array.isArray(responseBody)) {
      responseBody = [responseBody];
    }
    if (element.type.name === "Composite" && element.type.className) {
      element = (_a4 = serializer.modelMappers[element.type.className]) !== null && _a4 !== void 0 ? _a4 : element;
    }
    const tempArray = [];
    for (let i3 = 0; i3 < responseBody.length; i3++) {
      tempArray[i3] = serializer.deserialize(element, responseBody[i3], `${objectName}[${i3}]`, options);
    }
    return tempArray;
  }
  return responseBody;
}
function getIndexDiscriminator(discriminators, discriminatorValue, typeName) {
  const typeNamesToCheck = [typeName];
  while (typeNamesToCheck.length) {
    const currentName = typeNamesToCheck.shift();
    const indexDiscriminator = discriminatorValue === currentName ? discriminatorValue : currentName + "." + discriminatorValue;
    if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {
      return discriminators[indexDiscriminator];
    } else {
      for (const [name2, mapper] of Object.entries(discriminators)) {
        if (name2.startsWith(currentName + ".") && mapper.type.uberParent === currentName && mapper.type.className) {
          typeNamesToCheck.push(mapper.type.className);
        }
      }
    }
  }
  return void 0;
}
function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
  var _a4;
  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
  if (polymorphicDiscriminator) {
    let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
    if (discriminatorName) {
      if (polymorphicPropertyName === "serializedName") {
        discriminatorName = discriminatorName.replace(/\\/gi, "");
      }
      const discriminatorValue = object[discriminatorName];
      const typeName = (_a4 = mapper.type.uberParent) !== null && _a4 !== void 0 ? _a4 : mapper.type.className;
      if (typeof discriminatorValue === "string" && typeName) {
        const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);
        if (polymorphicMapper) {
          mapper = polymorphicMapper;
        }
      }
    }
  }
  return mapper;
}
function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
  return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);
}
function getPolymorphicDiscriminatorSafely(serializer, typeName) {
  return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;
}
var SerializerImpl, MapperTypeNames;
var init_serializer = __esm({
  "node_modules/@azure/core-client/dist/esm/serializer.js"() {
    "use strict";
    init_base64();
    init_interfaces();
    init_utils();
    SerializerImpl = class {
      static {
        __name(this, "SerializerImpl");
      }
      constructor(modelMappers = {}, isXML = false) {
        this.modelMappers = modelMappers;
        this.isXML = isXML;
      }
      /**
       * @deprecated Removing the constraints validation on client side.
       */
      validateConstraints(mapper, value, objectName) {
        const failValidation = /* @__PURE__ */ __name((constraintName, constraintValue) => {
          throw new Error(`"${objectName}" with value "${value}" should satisfy the constraint "${constraintName}": ${constraintValue}.`);
        }, "failValidation");
        if (mapper.constraints && value !== void 0 && value !== null) {
          const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems } = mapper.constraints;
          if (ExclusiveMaximum !== void 0 && value >= ExclusiveMaximum) {
            failValidation("ExclusiveMaximum", ExclusiveMaximum);
          }
          if (ExclusiveMinimum !== void 0 && value <= ExclusiveMinimum) {
            failValidation("ExclusiveMinimum", ExclusiveMinimum);
          }
          if (InclusiveMaximum !== void 0 && value > InclusiveMaximum) {
            failValidation("InclusiveMaximum", InclusiveMaximum);
          }
          if (InclusiveMinimum !== void 0 && value < InclusiveMinimum) {
            failValidation("InclusiveMinimum", InclusiveMinimum);
          }
          if (MaxItems !== void 0 && value.length > MaxItems) {
            failValidation("MaxItems", MaxItems);
          }
          if (MaxLength !== void 0 && value.length > MaxLength) {
            failValidation("MaxLength", MaxLength);
          }
          if (MinItems !== void 0 && value.length < MinItems) {
            failValidation("MinItems", MinItems);
          }
          if (MinLength !== void 0 && value.length < MinLength) {
            failValidation("MinLength", MinLength);
          }
          if (MultipleOf !== void 0 && value % MultipleOf !== 0) {
            failValidation("MultipleOf", MultipleOf);
          }
          if (Pattern) {
            const pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
            if (typeof value !== "string" || value.match(pattern) === null) {
              failValidation("Pattern", Pattern);
            }
          }
          if (UniqueItems && value.some((item, i3, ar2) => ar2.indexOf(item) !== i3)) {
            failValidation("UniqueItems", UniqueItems);
          }
        }
      }
      /**
       * Serialize the given object based on its metadata defined in the mapper
       *
       * @param mapper - The mapper which defines the metadata of the serializable object
       *
       * @param object - A valid Javascript object to be serialized
       *
       * @param objectName - Name of the serialized object
       *
       * @param options - additional options to serialization
       *
       * @returns A valid serialized Javascript object
       */
      serialize(mapper, object, objectName, options = { xml: {} }) {
        var _a4, _b2, _c2;
        const updatedOptions = {
          xml: {
            rootName: (_a4 = options.xml.rootName) !== null && _a4 !== void 0 ? _a4 : "",
            includeRoot: (_b2 = options.xml.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
            xmlCharKey: (_c2 = options.xml.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY
          }
        };
        let payload = {};
        const mapperType = mapper.type.name;
        if (!objectName) {
          objectName = mapper.serializedName;
        }
        if (mapperType.match(/^Sequence$/i) !== null) {
          payload = [];
        }
        if (mapper.isConstant) {
          object = mapper.defaultValue;
        }
        const { required, nullable } = mapper;
        if (required && nullable && object === void 0) {
          throw new Error(`${objectName} cannot be undefined.`);
        }
        if (required && !nullable && (object === void 0 || object === null)) {
          throw new Error(`${objectName} cannot be null or undefined.`);
        }
        if (!required && nullable === false && object === null) {
          throw new Error(`${objectName} cannot be null.`);
        }
        if (object === void 0 || object === null) {
          payload = object;
        } else {
          if (mapperType.match(/^any$/i) !== null) {
            payload = object;
          } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
            payload = serializeBasicTypes(mapperType, objectName, object);
          } else if (mapperType.match(/^Enum$/i) !== null) {
            const enumMapper = mapper;
            payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
          } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
            payload = serializeDateTypes(mapperType, object, objectName);
          } else if (mapperType.match(/^ByteArray$/i) !== null) {
            payload = serializeByteArrayType(objectName, object);
          } else if (mapperType.match(/^Base64Url$/i) !== null) {
            payload = serializeBase64UrlType(objectName, object);
          } else if (mapperType.match(/^Sequence$/i) !== null) {
            payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
          } else if (mapperType.match(/^Dictionary$/i) !== null) {
            payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
          } else if (mapperType.match(/^Composite$/i) !== null) {
            payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
          }
        }
        return payload;
      }
      /**
       * Deserialize the given object based on its metadata defined in the mapper
       *
       * @param mapper - The mapper which defines the metadata of the serializable object
       *
       * @param responseBody - A valid Javascript entity to be deserialized
       *
       * @param objectName - Name of the deserialized object
       *
       * @param options - Controls behavior of XML parser and builder.
       *
       * @returns A valid deserialized Javascript object
       */
      deserialize(mapper, responseBody, objectName, options = { xml: {} }) {
        var _a4, _b2, _c2, _d2;
        const updatedOptions = {
          xml: {
            rootName: (_a4 = options.xml.rootName) !== null && _a4 !== void 0 ? _a4 : "",
            includeRoot: (_b2 = options.xml.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
            xmlCharKey: (_c2 = options.xml.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY
          },
          ignoreUnknownProperties: (_d2 = options.ignoreUnknownProperties) !== null && _d2 !== void 0 ? _d2 : false
        };
        if (responseBody === void 0 || responseBody === null) {
          if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
            responseBody = [];
          }
          if (mapper.defaultValue !== void 0) {
            responseBody = mapper.defaultValue;
          }
          return responseBody;
        }
        let payload;
        const mapperType = mapper.type.name;
        if (!objectName) {
          objectName = mapper.serializedName;
        }
        if (mapperType.match(/^Composite$/i) !== null) {
          payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
        } else {
          if (this.isXML) {
            const xmlCharKey = updatedOptions.xml.xmlCharKey;
            if (responseBody[XML_ATTRKEY] !== void 0 && responseBody[xmlCharKey] !== void 0) {
              responseBody = responseBody[xmlCharKey];
            }
          }
          if (mapperType.match(/^Number$/i) !== null) {
            payload = parseFloat(responseBody);
            if (isNaN(payload)) {
              payload = responseBody;
            }
          } else if (mapperType.match(/^Boolean$/i) !== null) {
            if (responseBody === "true") {
              payload = true;
            } else if (responseBody === "false") {
              payload = false;
            } else {
              payload = responseBody;
            }
          } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
            payload = responseBody;
          } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
            payload = new Date(responseBody);
          } else if (mapperType.match(/^UnixTime$/i) !== null) {
            payload = unixTimeToDate(responseBody);
          } else if (mapperType.match(/^ByteArray$/i) !== null) {
            payload = decodeString(responseBody);
          } else if (mapperType.match(/^Base64Url$/i) !== null) {
            payload = base64UrlToByteArray(responseBody);
          } else if (mapperType.match(/^Sequence$/i) !== null) {
            payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
          } else if (mapperType.match(/^Dictionary$/i) !== null) {
            payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
          }
        }
        if (mapper.isConstant) {
          payload = mapper.defaultValue;
        }
        return payload;
      }
    };
    __name(createSerializer, "createSerializer");
    __name(trimEnd, "trimEnd");
    __name(bufferToBase64Url, "bufferToBase64Url");
    __name(base64UrlToByteArray, "base64UrlToByteArray");
    __name(splitSerializeName, "splitSerializeName");
    __name(dateToUnixTime, "dateToUnixTime");
    __name(unixTimeToDate, "unixTimeToDate");
    __name(serializeBasicTypes, "serializeBasicTypes");
    __name(serializeEnumType, "serializeEnumType");
    __name(serializeByteArrayType, "serializeByteArrayType");
    __name(serializeBase64UrlType, "serializeBase64UrlType");
    __name(serializeDateTypes, "serializeDateTypes");
    __name(serializeSequenceType, "serializeSequenceType");
    __name(serializeDictionaryType, "serializeDictionaryType");
    __name(resolveAdditionalProperties, "resolveAdditionalProperties");
    __name(resolveReferencedMapper, "resolveReferencedMapper");
    __name(resolveModelProperties, "resolveModelProperties");
    __name(serializeCompositeType, "serializeCompositeType");
    __name(getXmlObjectValue, "getXmlObjectValue");
    __name(isSpecialXmlProperty, "isSpecialXmlProperty");
    __name(deserializeCompositeType, "deserializeCompositeType");
    __name(deserializeDictionaryType, "deserializeDictionaryType");
    __name(deserializeSequenceType, "deserializeSequenceType");
    __name(getIndexDiscriminator, "getIndexDiscriminator");
    __name(getPolymorphicMapper, "getPolymorphicMapper");
    __name(getPolymorphicDiscriminatorRecursively, "getPolymorphicDiscriminatorRecursively");
    __name(getPolymorphicDiscriminatorSafely, "getPolymorphicDiscriminatorSafely");
    MapperTypeNames = {
      Base64Url: "Base64Url",
      Boolean: "Boolean",
      ByteArray: "ByteArray",
      Composite: "Composite",
      Date: "Date",
      DateTime: "DateTime",
      DateTimeRfc1123: "DateTimeRfc1123",
      Dictionary: "Dictionary",
      Enum: "Enum",
      Number: "Number",
      Object: "Object",
      Sequence: "Sequence",
      String: "String",
      Stream: "Stream",
      TimeSpan: "TimeSpan",
      UnixTime: "UnixTime"
    };
  }
});

// node_modules/@azure/core-client/dist/commonjs/state.js
var require_state2 = __commonJS({
  "node_modules/@azure/core-client/dist/commonjs/state.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.state = void 0;
    exports2.state = {
      operationRequestMap: /* @__PURE__ */ new WeakMap()
    };
  }
});

// node_modules/@azure/core-client/dist/esm/state.js
var import_state3, state2;
var init_state2 = __esm({
  "node_modules/@azure/core-client/dist/esm/state.js"() {
    "use strict";
    import_state3 = __toESM(require_state2(), 1);
    state2 = import_state3.state;
  }
});

// node_modules/@azure/core-client/dist/esm/operationHelpers.js
function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {
  let parameterPath = parameter.parameterPath;
  const parameterMapper = parameter.mapper;
  let value;
  if (typeof parameterPath === "string") {
    parameterPath = [parameterPath];
  }
  if (Array.isArray(parameterPath)) {
    if (parameterPath.length > 0) {
      if (parameterMapper.isConstant) {
        value = parameterMapper.defaultValue;
      } else {
        let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
        if (!propertySearchResult.propertyFound && fallbackObject) {
          propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);
        }
        let useDefaultValue = false;
        if (!propertySearchResult.propertyFound) {
          useDefaultValue = parameterMapper.required || parameterPath[0] === "options" && parameterPath.length === 2;
        }
        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
      }
    }
  } else {
    if (parameterMapper.required) {
      value = {};
    }
    for (const propertyName in parameterPath) {
      const propertyMapper = parameterMapper.type.modelProperties[propertyName];
      const propertyPath = parameterPath[propertyName];
      const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {
        parameterPath: propertyPath,
        mapper: propertyMapper
      }, fallbackObject);
      if (propertyValue !== void 0) {
        if (!value) {
          value = {};
        }
        value[propertyName] = propertyValue;
      }
    }
  }
  return value;
}
function getPropertyFromParameterPath(parent, parameterPath) {
  const result = { propertyFound: false };
  let i3 = 0;
  for (; i3 < parameterPath.length; ++i3) {
    const parameterPathPart = parameterPath[i3];
    if (parent && parameterPathPart in parent) {
      parent = parent[parameterPathPart];
    } else {
      break;
    }
  }
  if (i3 === parameterPath.length) {
    result.propertyValue = parent;
    result.propertyFound = true;
  }
  return result;
}
function hasOriginalRequest(request3) {
  return originalRequestSymbol in request3;
}
function getOperationRequestInfo(request3) {
  if (hasOriginalRequest(request3)) {
    return getOperationRequestInfo(request3[originalRequestSymbol]);
  }
  let info3 = state2.operationRequestMap.get(request3);
  if (!info3) {
    info3 = {};
    state2.operationRequestMap.set(request3, info3);
  }
  return info3;
}
var originalRequestSymbol;
var init_operationHelpers = __esm({
  "node_modules/@azure/core-client/dist/esm/operationHelpers.js"() {
    "use strict";
    init_state2();
    __name(getOperationArgumentValueFromParameter, "getOperationArgumentValueFromParameter");
    __name(getPropertyFromParameterPath, "getPropertyFromParameterPath");
    originalRequestSymbol = Symbol.for("@azure/core-client original request");
    __name(hasOriginalRequest, "hasOriginalRequest");
    __name(getOperationRequestInfo, "getOperationRequestInfo");
  }
});

// node_modules/@azure/core-client/dist/esm/deserializationPolicy.js
function deserializationPolicy(options = {}) {
  var _a4, _b2, _c2, _d2, _e2, _f, _g;
  const jsonContentTypes = (_b2 = (_a4 = options.expectedContentTypes) === null || _a4 === void 0 ? void 0 : _a4.json) !== null && _b2 !== void 0 ? _b2 : defaultJsonContentTypes;
  const xmlContentTypes = (_d2 = (_c2 = options.expectedContentTypes) === null || _c2 === void 0 ? void 0 : _c2.xml) !== null && _d2 !== void 0 ? _d2 : defaultXmlContentTypes;
  const parseXML2 = options.parseXML;
  const serializerOptions = options.serializerOptions;
  const updatedOptions = {
    xml: {
      rootName: (_e2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e2 !== void 0 ? _e2 : "",
      includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,
      xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : XML_CHARKEY
    }
  };
  return {
    name: deserializationPolicyName,
    async sendRequest(request3, next2) {
      const response = await next2(request3);
      return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML2);
    }
  };
}
function getOperationResponseMap(parsedResponse) {
  let result;
  const request3 = parsedResponse.request;
  const operationInfo = getOperationRequestInfo(request3);
  const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
  if (operationSpec) {
    if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {
      result = operationSpec.responses[parsedResponse.status];
    } else {
      result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);
    }
  }
  return result;
}
function shouldDeserializeResponse(parsedResponse) {
  const request3 = parsedResponse.request;
  const operationInfo = getOperationRequestInfo(request3);
  const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;
  let result;
  if (shouldDeserialize === void 0) {
    result = true;
  } else if (typeof shouldDeserialize === "boolean") {
    result = shouldDeserialize;
  } else {
    result = shouldDeserialize(parsedResponse);
  }
  return result;
}
async function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML2) {
  const parsedResponse = await parse2(jsonContentTypes, xmlContentTypes, response, options, parseXML2);
  if (!shouldDeserializeResponse(parsedResponse)) {
    return parsedResponse;
  }
  const operationInfo = getOperationRequestInfo(parsedResponse.request);
  const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
  if (!operationSpec || !operationSpec.responses) {
    return parsedResponse;
  }
  const responseSpec = getOperationResponseMap(parsedResponse);
  const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);
  if (error) {
    throw error;
  } else if (shouldReturnResponse) {
    return parsedResponse;
  }
  if (responseSpec) {
    if (responseSpec.bodyMapper) {
      let valueToDeserialize = parsedResponse.parsedBody;
      if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {
        valueToDeserialize = typeof valueToDeserialize === "object" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];
      }
      try {
        parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
      } catch (deserializeError) {
        const restError = new RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {
          statusCode: parsedResponse.status,
          request: parsedResponse.request,
          response: parsedResponse
        });
        throw restError;
      }
    } else if (operationSpec.httpMethod === "HEAD") {
      parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
    }
    if (responseSpec.headersMapper) {
      parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders", { xml: {}, ignoreUnknownProperties: true });
    }
  }
  return parsedResponse;
}
function isOperationSpecEmpty(operationSpec) {
  const expectedStatusCodes = Object.keys(operationSpec.responses);
  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default";
}
function handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {
  var _a4, _b2, _c2, _d2, _e2;
  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
  const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;
  if (isExpectedStatusCode) {
    if (responseSpec) {
      if (!responseSpec.isError) {
        return { error: null, shouldReturnResponse: false };
      }
    } else {
      return { error: null, shouldReturnResponse: false };
    }
  }
  const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
  const initialErrorMessage = ((_a4 = parsedResponse.request.streamResponseStatusCodes) === null || _a4 === void 0 ? void 0 : _a4.has(parsedResponse.status)) ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;
  const error = new RestError(initialErrorMessage, {
    statusCode: parsedResponse.status,
    request: parsedResponse.request,
    response: parsedResponse
  });
  if (!errorResponseSpec && !(((_c2 = (_b2 = parsedResponse.parsedBody) === null || _b2 === void 0 ? void 0 : _b2.error) === null || _c2 === void 0 ? void 0 : _c2.code) && ((_e2 = (_d2 = parsedResponse.parsedBody) === null || _d2 === void 0 ? void 0 : _d2.error) === null || _e2 === void 0 ? void 0 : _e2.message))) {
    throw error;
  }
  const defaultBodyMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.bodyMapper;
  const defaultHeadersMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.headersMapper;
  try {
    if (parsedResponse.parsedBody) {
      const parsedBody = parsedResponse.parsedBody;
      let deserializedError;
      if (defaultBodyMapper) {
        let valueToDeserialize = parsedBody;
        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {
          valueToDeserialize = [];
          const elementName = defaultBodyMapper.xmlElementName;
          if (typeof parsedBody === "object" && elementName) {
            valueToDeserialize = parsedBody[elementName];
          }
        }
        deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody", options);
      }
      const internalError = parsedBody.error || deserializedError || parsedBody;
      error.code = internalError.code;
      if (internalError.message) {
        error.message = internalError.message;
      }
      if (defaultBodyMapper) {
        error.response.parsedBody = deserializedError;
      }
    }
    if (parsedResponse.headers && defaultHeadersMapper) {
      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders");
    }
  } catch (defaultError) {
    error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody - "${parsedResponse.bodyAsText}" for the default response.`;
  }
  return { error, shouldReturnResponse: false };
}
async function parse2(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML2) {
  var _a4;
  if (!((_a4 = operationResponse.request.streamResponseStatusCodes) === null || _a4 === void 0 ? void 0 : _a4.has(operationResponse.status)) && operationResponse.bodyAsText) {
    const text = operationResponse.bodyAsText;
    const contentType2 = operationResponse.headers.get("Content-Type") || "";
    const contentComponents = !contentType2 ? [] : contentType2.split(";").map((component) => component.toLowerCase());
    try {
      if (contentComponents.length === 0 || contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {
        operationResponse.parsedBody = JSON.parse(text);
        return operationResponse;
      } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {
        if (!parseXML2) {
          throw new Error("Parsing XML not supported.");
        }
        const body2 = await parseXML2(text, opts.xml);
        operationResponse.parsedBody = body2;
        return operationResponse;
      }
    } catch (err) {
      const msg = `Error "${err}" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;
      const errCode = err.code || RestError.PARSE_ERROR;
      const e3 = new RestError(msg, {
        code: errCode,
        statusCode: operationResponse.status,
        request: operationResponse.request,
        response: operationResponse
      });
      throw e3;
    }
  }
  return operationResponse;
}
var defaultJsonContentTypes, defaultXmlContentTypes, deserializationPolicyName;
var init_deserializationPolicy = __esm({
  "node_modules/@azure/core-client/dist/esm/deserializationPolicy.js"() {
    "use strict";
    init_interfaces();
    init_esm6();
    init_serializer();
    init_operationHelpers();
    defaultJsonContentTypes = ["application/json", "text/json"];
    defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
    deserializationPolicyName = "deserializationPolicy";
    __name(deserializationPolicy, "deserializationPolicy");
    __name(getOperationResponseMap, "getOperationResponseMap");
    __name(shouldDeserializeResponse, "shouldDeserializeResponse");
    __name(deserializeResponseBody, "deserializeResponseBody");
    __name(isOperationSpecEmpty, "isOperationSpecEmpty");
    __name(handleErrorResponse, "handleErrorResponse");
    __name(parse2, "parse");
  }
});

// node_modules/@azure/core-client/dist/esm/interfaceHelpers.js
function getStreamingResponseStatusCodes(operationSpec) {
  const result = /* @__PURE__ */ new Set();
  for (const statusCode in operationSpec.responses) {
    const operationResponse = operationSpec.responses[statusCode];
    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {
      result.add(Number(statusCode));
    }
  }
  return result;
}
function getPathStringFromParameter(parameter) {
  const { parameterPath, mapper } = parameter;
  let result;
  if (typeof parameterPath === "string") {
    result = parameterPath;
  } else if (Array.isArray(parameterPath)) {
    result = parameterPath.join(".");
  } else {
    result = mapper.serializedName;
  }
  return result;
}
var init_interfaceHelpers = __esm({
  "node_modules/@azure/core-client/dist/esm/interfaceHelpers.js"() {
    "use strict";
    init_serializer();
    __name(getStreamingResponseStatusCodes, "getStreamingResponseStatusCodes");
    __name(getPathStringFromParameter, "getPathStringFromParameter");
  }
});

// node_modules/@azure/core-client/dist/esm/serializationPolicy.js
function serializationPolicy(options = {}) {
  const stringifyXML2 = options.stringifyXML;
  return {
    name: serializationPolicyName,
    async sendRequest(request3, next2) {
      const operationInfo = getOperationRequestInfo(request3);
      const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
      const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;
      if (operationSpec && operationArguments) {
        serializeHeaders(request3, operationArguments, operationSpec);
        serializeRequestBody(request3, operationArguments, operationSpec, stringifyXML2);
      }
      return next2(request3);
    }
  };
}
function serializeHeaders(request3, operationArguments, operationSpec) {
  var _a4, _b2;
  if (operationSpec.headerParameters) {
    for (const headerParameter of operationSpec.headerParameters) {
      let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);
      if (headerValue !== null && headerValue !== void 0 || headerParameter.mapper.required) {
        headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));
        const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;
        if (headerCollectionPrefix) {
          for (const key of Object.keys(headerValue)) {
            request3.headers.set(headerCollectionPrefix + key, headerValue[key]);
          }
        } else {
          request3.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);
        }
      }
    }
  }
  const customHeaders = (_b2 = (_a4 = operationArguments.options) === null || _a4 === void 0 ? void 0 : _a4.requestOptions) === null || _b2 === void 0 ? void 0 : _b2.customHeaders;
  if (customHeaders) {
    for (const customHeaderName of Object.keys(customHeaders)) {
      request3.headers.set(customHeaderName, customHeaders[customHeaderName]);
    }
  }
}
function serializeRequestBody(request3, operationArguments, operationSpec, stringifyXML2 = function() {
  throw new Error("XML serialization unsupported!");
}) {
  var _a4, _b2, _c2, _d2, _e2;
  const serializerOptions = (_a4 = operationArguments.options) === null || _a4 === void 0 ? void 0 : _a4.serializerOptions;
  const updatedOptions = {
    xml: {
      rootName: (_b2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b2 !== void 0 ? _b2 : "",
      includeRoot: (_c2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c2 !== void 0 ? _c2 : false,
      xmlCharKey: (_d2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d2 !== void 0 ? _d2 : XML_CHARKEY
    }
  };
  const xmlCharKey = updatedOptions.xml.xmlCharKey;
  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
    request3.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);
    const bodyMapper = operationSpec.requestBody.mapper;
    const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable } = bodyMapper;
    const typeName = bodyMapper.type.name;
    try {
      if (request3.body !== void 0 && request3.body !== null || nullable && request3.body === null || required) {
        const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);
        request3.body = operationSpec.serializer.serialize(bodyMapper, request3.body, requestBodyParameterPathString, updatedOptions);
        const isStream = typeName === MapperTypeNames.Stream;
        if (operationSpec.isXML) {
          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : "xmlns";
          const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request3.body, updatedOptions);
          if (typeName === MapperTypeNames.Sequence) {
            request3.body = stringifyXML2(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });
          } else if (!isStream) {
            request3.body = stringifyXML2(value, {
              rootName: xmlName || serializedName,
              xmlCharKey
            });
          }
        } else if (typeName === MapperTypeNames.String && (((_e2 = operationSpec.contentType) === null || _e2 === void 0 ? void 0 : _e2.match("text/plain")) || operationSpec.mediaType === "text")) {
          return;
        } else if (!isStream) {
          request3.body = JSON.stringify(request3.body);
        }
      }
    } catch (error) {
      throw new Error(`Error "${error.message}" occurred in serializing the payload - ${JSON.stringify(serializedName, void 0, "  ")}.`);
    }
  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
    request3.formData = {};
    for (const formDataParameter of operationSpec.formDataParameters) {
      const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);
      if (formDataParameterValue !== void 0 && formDataParameterValue !== null) {
        const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);
        request3.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);
      }
    }
  }
}
function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
  if (xmlNamespace && !["Composite", "Sequence", "Dictionary"].includes(typeName)) {
    const result = {};
    result[options.xml.xmlCharKey] = serializedValue;
    result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };
    return result;
  }
  return serializedValue;
}
function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
  if (!Array.isArray(obj)) {
    obj = [obj];
  }
  if (!xmlNamespaceKey || !xmlNamespace) {
    return { [elementName]: obj };
  }
  const result = { [elementName]: obj };
  result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };
  return result;
}
var serializationPolicyName;
var init_serializationPolicy = __esm({
  "node_modules/@azure/core-client/dist/esm/serializationPolicy.js"() {
    "use strict";
    init_interfaces();
    init_operationHelpers();
    init_serializer();
    init_interfaceHelpers();
    serializationPolicyName = "serializationPolicy";
    __name(serializationPolicy, "serializationPolicy");
    __name(serializeHeaders, "serializeHeaders");
    __name(serializeRequestBody, "serializeRequestBody");
    __name(getXmlValueWithNamespace, "getXmlValueWithNamespace");
    __name(prepareXMLRootList, "prepareXMLRootList");
  }
});

// node_modules/@azure/core-client/dist/esm/pipeline.js
function createClientPipeline(options = {}) {
  const pipeline = createPipelineFromOptions(options !== null && options !== void 0 ? options : {});
  if (options.credentialOptions) {
    pipeline.addPolicy(bearerTokenAuthenticationPolicy({
      credential: options.credentialOptions.credential,
      scopes: options.credentialOptions.credentialScopes
    }));
  }
  pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: "Serialize" });
  pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {
    phase: "Deserialize"
  });
  return pipeline;
}
var init_pipeline2 = __esm({
  "node_modules/@azure/core-client/dist/esm/pipeline.js"() {
    "use strict";
    init_deserializationPolicy();
    init_esm6();
    init_serializationPolicy();
    __name(createClientPipeline, "createClientPipeline");
  }
});

// node_modules/@azure/core-client/dist/esm/httpClientCache.js
function getCachedDefaultHttpClient() {
  if (!cachedHttpClient) {
    cachedHttpClient = createDefaultHttpClient();
  }
  return cachedHttpClient;
}
var cachedHttpClient;
var init_httpClientCache = __esm({
  "node_modules/@azure/core-client/dist/esm/httpClientCache.js"() {
    "use strict";
    init_esm6();
    __name(getCachedDefaultHttpClient, "getCachedDefaultHttpClient");
  }
});

// node_modules/@azure/core-client/dist/esm/urlHelpers.js
function getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {
  const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);
  let isAbsolutePath = false;
  let requestUrl = replaceAll(baseUri, urlReplacements);
  if (operationSpec.path) {
    let path14 = replaceAll(operationSpec.path, urlReplacements);
    if (operationSpec.path === "/{nextLink}" && path14.startsWith("/")) {
      path14 = path14.substring(1);
    }
    if (isAbsoluteUrl(path14)) {
      requestUrl = path14;
      isAbsolutePath = true;
    } else {
      requestUrl = appendPath(requestUrl, path14);
    }
  }
  const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);
  requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);
  return requestUrl;
}
function replaceAll(input, replacements) {
  let result = input;
  for (const [searchValue, replaceValue] of replacements) {
    result = result.split(searchValue).join(replaceValue);
  }
  return result;
}
function calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {
  var _a4;
  const result = /* @__PURE__ */ new Map();
  if ((_a4 = operationSpec.urlParameters) === null || _a4 === void 0 ? void 0 : _a4.length) {
    for (const urlParameter of operationSpec.urlParameters) {
      let urlParameterValue = getOperationArgumentValueFromParameter(operationArguments, urlParameter, fallbackObject);
      const parameterPathString = getPathStringFromParameter(urlParameter);
      urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);
      if (!urlParameter.skipEncoding) {
        urlParameterValue = encodeURIComponent(urlParameterValue);
      }
      result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);
    }
  }
  return result;
}
function isAbsoluteUrl(url2) {
  return url2.includes("://");
}
function appendPath(url2, pathToAppend) {
  if (!pathToAppend) {
    return url2;
  }
  const parsedUrl = new URL(url2);
  let newPath = parsedUrl.pathname;
  if (!newPath.endsWith("/")) {
    newPath = `${newPath}/`;
  }
  if (pathToAppend.startsWith("/")) {
    pathToAppend = pathToAppend.substring(1);
  }
  const searchStart = pathToAppend.indexOf("?");
  if (searchStart !== -1) {
    const path14 = pathToAppend.substring(0, searchStart);
    const search = pathToAppend.substring(searchStart + 1);
    newPath = newPath + path14;
    if (search) {
      parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;
    }
  } else {
    newPath = newPath + pathToAppend;
  }
  parsedUrl.pathname = newPath;
  return parsedUrl.toString();
}
function calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {
  var _a4;
  const result = /* @__PURE__ */ new Map();
  const sequenceParams = /* @__PURE__ */ new Set();
  if ((_a4 = operationSpec.queryParameters) === null || _a4 === void 0 ? void 0 : _a4.length) {
    for (const queryParameter of operationSpec.queryParameters) {
      if (queryParameter.mapper.type.name === "Sequence" && queryParameter.mapper.serializedName) {
        sequenceParams.add(queryParameter.mapper.serializedName);
      }
      let queryParameterValue = getOperationArgumentValueFromParameter(operationArguments, queryParameter, fallbackObject);
      if (queryParameterValue !== void 0 && queryParameterValue !== null || queryParameter.mapper.required) {
        queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));
        const delimiter2 = queryParameter.collectionFormat ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat] : "";
        if (Array.isArray(queryParameterValue)) {
          queryParameterValue = queryParameterValue.map((item) => {
            if (item === null || item === void 0) {
              return "";
            }
            return item;
          });
        }
        if (queryParameter.collectionFormat === "Multi" && queryParameterValue.length === 0) {
          continue;
        } else if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "SSV" || queryParameter.collectionFormat === "TSV")) {
          queryParameterValue = queryParameterValue.join(delimiter2);
        }
        if (!queryParameter.skipEncoding) {
          if (Array.isArray(queryParameterValue)) {
            queryParameterValue = queryParameterValue.map((item) => {
              return encodeURIComponent(item);
            });
          } else {
            queryParameterValue = encodeURIComponent(queryParameterValue);
          }
        }
        if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "CSV" || queryParameter.collectionFormat === "Pipes")) {
          queryParameterValue = queryParameterValue.join(delimiter2);
        }
        result.set(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);
      }
    }
  }
  return {
    queryParams: result,
    sequenceParams
  };
}
function simpleParseQueryParams(queryString) {
  const result = /* @__PURE__ */ new Map();
  if (!queryString || queryString[0] !== "?") {
    return result;
  }
  queryString = queryString.slice(1);
  const pairs2 = queryString.split("&");
  for (const pair of pairs2) {
    const [name2, value] = pair.split("=", 2);
    const existingValue = result.get(name2);
    if (existingValue) {
      if (Array.isArray(existingValue)) {
        existingValue.push(value);
      } else {
        result.set(name2, [existingValue, value]);
      }
    } else {
      result.set(name2, value);
    }
  }
  return result;
}
function appendQueryParams(url2, queryParams, sequenceParams, noOverwrite = false) {
  if (queryParams.size === 0) {
    return url2;
  }
  const parsedUrl = new URL(url2);
  const combinedParams = simpleParseQueryParams(parsedUrl.search);
  for (const [name2, value] of queryParams) {
    const existingValue = combinedParams.get(name2);
    if (Array.isArray(existingValue)) {
      if (Array.isArray(value)) {
        existingValue.push(...value);
        const valueSet = new Set(existingValue);
        combinedParams.set(name2, Array.from(valueSet));
      } else {
        existingValue.push(value);
      }
    } else if (existingValue) {
      if (Array.isArray(value)) {
        value.unshift(existingValue);
      } else if (sequenceParams.has(name2)) {
        combinedParams.set(name2, [existingValue, value]);
      }
      if (!noOverwrite) {
        combinedParams.set(name2, value);
      }
    } else {
      combinedParams.set(name2, value);
    }
  }
  const searchPieces = [];
  for (const [name2, value] of combinedParams) {
    if (typeof value === "string") {
      searchPieces.push(`${name2}=${value}`);
    } else if (Array.isArray(value)) {
      for (const subValue of value) {
        searchPieces.push(`${name2}=${subValue}`);
      }
    } else {
      searchPieces.push(`${name2}=${value}`);
    }
  }
  parsedUrl.search = searchPieces.length ? `?${searchPieces.join("&")}` : "";
  return parsedUrl.toString();
}
var CollectionFormatToDelimiterMap;
var init_urlHelpers = __esm({
  "node_modules/@azure/core-client/dist/esm/urlHelpers.js"() {
    "use strict";
    init_operationHelpers();
    init_interfaceHelpers();
    CollectionFormatToDelimiterMap = {
      CSV: ",",
      SSV: " ",
      Multi: "Multi",
      TSV: "	",
      Pipes: "|"
    };
    __name(getRequestUrl, "getRequestUrl");
    __name(replaceAll, "replaceAll");
    __name(calculateUrlReplacements, "calculateUrlReplacements");
    __name(isAbsoluteUrl, "isAbsoluteUrl");
    __name(appendPath, "appendPath");
    __name(calculateQueryParameters, "calculateQueryParameters");
    __name(simpleParseQueryParams, "simpleParseQueryParams");
    __name(appendQueryParams, "appendQueryParams");
  }
});

// node_modules/@azure/core-client/dist/esm/log.js
var logger3;
var init_log3 = __esm({
  "node_modules/@azure/core-client/dist/esm/log.js"() {
    "use strict";
    init_esm();
    logger3 = createClientLogger("core-client");
  }
});

// node_modules/@azure/core-client/dist/esm/serviceClient.js
function createDefaultPipeline(options) {
  const credentialScopes = getCredentialScopes(options);
  const credentialOptions = options.credential && credentialScopes ? { credentialScopes, credential: options.credential } : void 0;
  return createClientPipeline(Object.assign(Object.assign({}, options), { credentialOptions }));
}
function getCredentialScopes(options) {
  if (options.credentialScopes) {
    return options.credentialScopes;
  }
  if (options.endpoint) {
    return `${options.endpoint}/.default`;
  }
  if (options.baseUri) {
    return `${options.baseUri}/.default`;
  }
  if (options.credential && !options.credentialScopes) {
    throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);
  }
  return void 0;
}
var ServiceClient;
var init_serviceClient = __esm({
  "node_modules/@azure/core-client/dist/esm/serviceClient.js"() {
    "use strict";
    init_esm6();
    init_pipeline2();
    init_utils();
    init_httpClientCache();
    init_operationHelpers();
    init_urlHelpers();
    init_interfaceHelpers();
    init_log3();
    ServiceClient = class {
      static {
        __name(this, "ServiceClient");
      }
      /**
       * The ServiceClient constructor
       * @param options - The service client options that govern the behavior of the client.
       */
      constructor(options = {}) {
        var _a4, _b2;
        this._requestContentType = options.requestContentType;
        this._endpoint = (_a4 = options.endpoint) !== null && _a4 !== void 0 ? _a4 : options.baseUri;
        if (options.baseUri) {
          logger3.warning("The baseUri option for SDK Clients has been deprecated, please use endpoint instead.");
        }
        this._allowInsecureConnection = options.allowInsecureConnection;
        this._httpClient = options.httpClient || getCachedDefaultHttpClient();
        this.pipeline = options.pipeline || createDefaultPipeline(options);
        if ((_b2 = options.additionalPolicies) === null || _b2 === void 0 ? void 0 : _b2.length) {
          for (const { policy, position: position2 } of options.additionalPolicies) {
            const afterPhase = position2 === "perRetry" ? "Sign" : void 0;
            this.pipeline.addPolicy(policy, {
              afterPhase
            });
          }
        }
      }
      /**
       * Send the provided httpRequest.
       */
      async sendRequest(request3) {
        return this.pipeline.sendRequest(this._httpClient, request3);
      }
      /**
       * Send an HTTP request that is populated using the provided OperationSpec.
       * @typeParam T - The typed result of the request, based on the OperationSpec.
       * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
       * @param operationSpec - The OperationSpec to use to populate the httpRequest.
       */
      async sendOperationRequest(operationArguments, operationSpec) {
        const endpoint = operationSpec.baseUrl || this._endpoint;
        if (!endpoint) {
          throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.");
        }
        const url2 = getRequestUrl(endpoint, operationSpec, operationArguments, this);
        const request3 = createPipelineRequest({
          url: url2
        });
        request3.method = operationSpec.httpMethod;
        const operationInfo = getOperationRequestInfo(request3);
        operationInfo.operationSpec = operationSpec;
        operationInfo.operationArguments = operationArguments;
        const contentType2 = operationSpec.contentType || this._requestContentType;
        if (contentType2 && operationSpec.requestBody) {
          request3.headers.set("Content-Type", contentType2);
        }
        const options = operationArguments.options;
        if (options) {
          const requestOptions = options.requestOptions;
          if (requestOptions) {
            if (requestOptions.timeout) {
              request3.timeout = requestOptions.timeout;
            }
            if (requestOptions.onUploadProgress) {
              request3.onUploadProgress = requestOptions.onUploadProgress;
            }
            if (requestOptions.onDownloadProgress) {
              request3.onDownloadProgress = requestOptions.onDownloadProgress;
            }
            if (requestOptions.shouldDeserialize !== void 0) {
              operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;
            }
            if (requestOptions.allowInsecureConnection) {
              request3.allowInsecureConnection = true;
            }
          }
          if (options.abortSignal) {
            request3.abortSignal = options.abortSignal;
          }
          if (options.tracingOptions) {
            request3.tracingOptions = options.tracingOptions;
          }
        }
        if (this._allowInsecureConnection) {
          request3.allowInsecureConnection = true;
        }
        if (request3.streamResponseStatusCodes === void 0) {
          request3.streamResponseStatusCodes = getStreamingResponseStatusCodes(operationSpec);
        }
        try {
          const rawResponse = await this.sendRequest(request3);
          const flatResponse = flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]);
          if (options === null || options === void 0 ? void 0 : options.onResponse) {
            options.onResponse(rawResponse, flatResponse);
          }
          return flatResponse;
        } catch (error) {
          if (typeof error === "object" && (error === null || error === void 0 ? void 0 : error.response)) {
            const rawResponse = error.response;
            const flatResponse = flattenResponse(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses["default"]);
            error.details = flatResponse;
            if (options === null || options === void 0 ? void 0 : options.onResponse) {
              options.onResponse(rawResponse, flatResponse, error);
            }
          }
          throw error;
        }
      }
    };
    __name(createDefaultPipeline, "createDefaultPipeline");
    __name(getCredentialScopes, "getCredentialScopes");
  }
});

// node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js
var init_authorizeRequestOnClaimChallenge = __esm({
  "node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js"() {
    "use strict";
    init_log3();
    init_base64();
  }
});

// node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js
function isUuid(text) {
  return /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/.test(text);
}
function extractTenantId(challengeInfo) {
  const parsedAuthUri = new URL(challengeInfo.authorization_uri);
  const pathSegments = parsedAuthUri.pathname.split("/");
  const tenantId = pathSegments[1];
  if (tenantId && isUuid(tenantId)) {
    return tenantId;
  }
  return void 0;
}
function buildScopes(challengeOptions, challengeInfo) {
  if (!challengeInfo.resource_id) {
    return challengeOptions.scopes;
  }
  const challengeScopes = new URL(challengeInfo.resource_id);
  challengeScopes.pathname = Constants.DefaultScope;
  let scope = challengeScopes.toString();
  if (scope === "https://disk.azure.com/.default") {
    scope = "https://disk.azure.com//.default";
  }
  return [scope];
}
function getChallenge(response) {
  const challenge = response.headers.get("WWW-Authenticate");
  if (response.status === 401 && challenge) {
    return challenge;
  }
  return;
}
function parseChallenge(challenge) {
  const bearerChallenge = challenge.slice("Bearer ".length);
  const challengeParts = `${bearerChallenge.trim()} `.split(" ").filter((x3) => x3);
  const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split("=")));
  return keyValuePairs.reduce((a3, b3) => Object.assign(Object.assign({}, a3), b3), {});
}
function requestToOptions(request3) {
  return {
    abortSignal: request3.abortSignal,
    requestOptions: {
      timeout: request3.timeout
    },
    tracingOptions: request3.tracingOptions
  };
}
var Constants, authorizeRequestOnTenantChallenge;
var init_authorizeRequestOnTenantChallenge = __esm({
  "node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js"() {
    "use strict";
    Constants = {
      DefaultScope: "/.default",
      /**
       * Defines constants for use with HTTP headers.
       */
      HeaderConstants: {
        /**
         * The Authorization header.
         */
        AUTHORIZATION: "authorization"
      }
    };
    __name(isUuid, "isUuid");
    authorizeRequestOnTenantChallenge = /* @__PURE__ */ __name(async (challengeOptions) => {
      var _a4;
      const requestOptions = requestToOptions(challengeOptions.request);
      const challenge = getChallenge(challengeOptions.response);
      if (challenge) {
        const challengeInfo = parseChallenge(challenge);
        const challengeScopes = buildScopes(challengeOptions, challengeInfo);
        const tenantId = extractTenantId(challengeInfo);
        if (!tenantId) {
          return false;
        }
        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));
        if (!accessToken) {
          return false;
        }
        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `${(_a4 = accessToken.tokenType) !== null && _a4 !== void 0 ? _a4 : "Bearer"} ${accessToken.token}`);
        return true;
      }
      return false;
    }, "authorizeRequestOnTenantChallenge");
    __name(extractTenantId, "extractTenantId");
    __name(buildScopes, "buildScopes");
    __name(getChallenge, "getChallenge");
    __name(parseChallenge, "parseChallenge");
    __name(requestToOptions, "requestToOptions");
  }
});

// node_modules/@azure/core-client/dist/esm/index.js
var init_esm8 = __esm({
  "node_modules/@azure/core-client/dist/esm/index.js"() {
    "use strict";
    init_serializer();
    init_serviceClient();
    init_pipeline2();
    init_interfaces();
    init_deserializationPolicy();
    init_serializationPolicy();
    init_authorizeRequestOnClaimChallenge();
    init_authorizeRequestOnTenantChallenge();
  }
});

// node_modules/@azure/core-http-compat/dist/esm/util.js
function toPipelineRequest(webResource, options = {}) {
  const compatWebResource = webResource;
  const request3 = compatWebResource[originalRequestSymbol2];
  const headers = createHttpHeaders(webResource.headers.toJson({ preserveCase: true }));
  if (request3) {
    request3.headers = headers;
    return request3;
  } else {
    const newRequest = createPipelineRequest({
      url: webResource.url,
      method: webResource.method,
      headers,
      withCredentials: webResource.withCredentials,
      timeout: webResource.timeout,
      requestId: webResource.requestId,
      abortSignal: webResource.abortSignal,
      body: webResource.body,
      formData: webResource.formData,
      disableKeepAlive: !!webResource.keepAlive,
      onDownloadProgress: webResource.onDownloadProgress,
      onUploadProgress: webResource.onUploadProgress,
      proxySettings: webResource.proxySettings,
      streamResponseStatusCodes: webResource.streamResponseStatusCodes,
      agent: webResource.agent
    });
    if (options.originalRequest) {
      newRequest[originalClientRequestSymbol] = options.originalRequest;
    }
    return newRequest;
  }
}
function toWebResourceLike(request3, options) {
  var _a4;
  const originalRequest = (_a4 = options === null || options === void 0 ? void 0 : options.originalRequest) !== null && _a4 !== void 0 ? _a4 : request3;
  const webResource = {
    url: request3.url,
    method: request3.method,
    headers: toHttpHeadersLike(request3.headers),
    withCredentials: request3.withCredentials,
    timeout: request3.timeout,
    requestId: request3.headers.get("x-ms-client-request-id") || request3.requestId,
    abortSignal: request3.abortSignal,
    body: request3.body,
    formData: request3.formData,
    keepAlive: !!request3.disableKeepAlive,
    onDownloadProgress: request3.onDownloadProgress,
    onUploadProgress: request3.onUploadProgress,
    proxySettings: request3.proxySettings,
    streamResponseStatusCodes: request3.streamResponseStatusCodes,
    agent: request3.agent,
    clone() {
      throw new Error("Cannot clone a non-proxied WebResourceLike");
    },
    prepare() {
      throw new Error("WebResourceLike.prepare() is not supported by @azure/core-http-compat");
    },
    validateRequestProperties() {
    }
  };
  if (options === null || options === void 0 ? void 0 : options.createProxy) {
    return new Proxy(webResource, {
      get(target, prop, receiver) {
        if (prop === originalRequestSymbol2) {
          return request3;
        } else if (prop === "clone") {
          return () => {
            return toWebResourceLike(toPipelineRequest(webResource, { originalRequest }), {
              createProxy: true,
              originalRequest
            });
          };
        }
        return Reflect.get(target, prop, receiver);
      },
      set(target, prop, value, receiver) {
        if (prop === "keepAlive") {
          request3.disableKeepAlive = !value;
        }
        const passThroughProps = [
          "url",
          "method",
          "withCredentials",
          "timeout",
          "requestId",
          "abortSignal",
          "body",
          "formData",
          "onDownloadProgress",
          "onUploadProgress",
          "proxySettings",
          "streamResponseStatusCodes",
          "agent"
        ];
        if (typeof prop === "string" && passThroughProps.includes(prop)) {
          request3[prop] = value;
        }
        return Reflect.set(target, prop, value, receiver);
      }
    });
  } else {
    return webResource;
  }
}
function toHttpHeadersLike(headers) {
  return new HttpHeaders(headers.toJSON({ preserveCase: true }));
}
function getHeaderKey(headerName) {
  return headerName.toLowerCase();
}
var originalRequestSymbol2, originalClientRequestSymbol, HttpHeaders;
var init_util = __esm({
  "node_modules/@azure/core-http-compat/dist/esm/util.js"() {
    "use strict";
    init_esm6();
    originalRequestSymbol2 = Symbol("Original PipelineRequest");
    originalClientRequestSymbol = Symbol.for("@azure/core-client original request");
    __name(toPipelineRequest, "toPipelineRequest");
    __name(toWebResourceLike, "toWebResourceLike");
    __name(toHttpHeadersLike, "toHttpHeadersLike");
    __name(getHeaderKey, "getHeaderKey");
    HttpHeaders = class _HttpHeaders {
      static {
        __name(this, "HttpHeaders");
      }
      constructor(rawHeaders) {
        this._headersMap = {};
        if (rawHeaders) {
          for (const headerName in rawHeaders) {
            this.set(headerName, rawHeaders[headerName]);
          }
        }
      }
      /**
       * Set a header in this collection with the provided name and value. The name is
       * case-insensitive.
       * @param headerName - The name of the header to set. This value is case-insensitive.
       * @param headerValue - The value of the header to set.
       */
      set(headerName, headerValue) {
        this._headersMap[getHeaderKey(headerName)] = {
          name: headerName,
          value: headerValue.toString()
        };
      }
      /**
       * Get the header value for the provided header name, or undefined if no header exists in this
       * collection with the provided name.
       * @param headerName - The name of the header.
       */
      get(headerName) {
        const header = this._headersMap[getHeaderKey(headerName)];
        return !header ? void 0 : header.value;
      }
      /**
       * Get whether or not this header collection contains a header entry for the provided header name.
       */
      contains(headerName) {
        return !!this._headersMap[getHeaderKey(headerName)];
      }
      /**
       * Remove the header with the provided headerName. Return whether or not the header existed and
       * was removed.
       * @param headerName - The name of the header to remove.
       */
      remove(headerName) {
        const result = this.contains(headerName);
        delete this._headersMap[getHeaderKey(headerName)];
        return result;
      }
      /**
       * Get the headers that are contained this collection as an object.
       */
      rawHeaders() {
        return this.toJson({ preserveCase: true });
      }
      /**
       * Get the headers that are contained in this collection as an array.
       */
      headersArray() {
        const headers = [];
        for (const headerKey in this._headersMap) {
          headers.push(this._headersMap[headerKey]);
        }
        return headers;
      }
      /**
       * Get the header names that are contained in this collection.
       */
      headerNames() {
        const headerNames = [];
        const headers = this.headersArray();
        for (let i3 = 0; i3 < headers.length; ++i3) {
          headerNames.push(headers[i3].name);
        }
        return headerNames;
      }
      /**
       * Get the header values that are contained in this collection.
       */
      headerValues() {
        const headerValues = [];
        const headers = this.headersArray();
        for (let i3 = 0; i3 < headers.length; ++i3) {
          headerValues.push(headers[i3].value);
        }
        return headerValues;
      }
      /**
       * Get the JSON object representation of this HTTP header collection.
       */
      toJson(options = {}) {
        const result = {};
        if (options.preserveCase) {
          for (const headerKey in this._headersMap) {
            const header = this._headersMap[headerKey];
            result[header.name] = header.value;
          }
        } else {
          for (const headerKey in this._headersMap) {
            const header = this._headersMap[headerKey];
            result[getHeaderKey(header.name)] = header.value;
          }
        }
        return result;
      }
      /**
       * Get the string representation of this HTTP header collection.
       */
      toString() {
        return JSON.stringify(this.toJson({ preserveCase: true }));
      }
      /**
       * Create a deep clone/copy of this HttpHeaders collection.
       */
      clone() {
        const resultPreservingCasing = {};
        for (const headerKey in this._headersMap) {
          const header = this._headersMap[headerKey];
          resultPreservingCasing[header.name] = header.value;
        }
        return new _HttpHeaders(resultPreservingCasing);
      }
    };
  }
});

// node_modules/@azure/core-http-compat/dist/esm/response.js
function toCompatResponse(response, options) {
  let request3 = toWebResourceLike(response.request);
  let headers = toHttpHeadersLike(response.headers);
  if (options === null || options === void 0 ? void 0 : options.createProxy) {
    return new Proxy(response, {
      get(target, prop, receiver) {
        if (prop === "headers") {
          return headers;
        } else if (prop === "request") {
          return request3;
        } else if (prop === originalResponse) {
          return response;
        }
        return Reflect.get(target, prop, receiver);
      },
      set(target, prop, value, receiver) {
        if (prop === "headers") {
          headers = value;
        } else if (prop === "request") {
          request3 = value;
        }
        return Reflect.set(target, prop, value, receiver);
      }
    });
  } else {
    return Object.assign(Object.assign({}, response), {
      request: request3,
      headers
    });
  }
}
function toPipelineResponse(compatResponse) {
  const extendedCompatResponse = compatResponse;
  const response = extendedCompatResponse[originalResponse];
  const headers = createHttpHeaders(compatResponse.headers.toJson({ preserveCase: true }));
  if (response) {
    response.headers = headers;
    return response;
  } else {
    return Object.assign(Object.assign({}, compatResponse), { headers, request: toPipelineRequest(compatResponse.request) });
  }
}
var originalResponse;
var init_response = __esm({
  "node_modules/@azure/core-http-compat/dist/esm/response.js"() {
    "use strict";
    init_esm6();
    init_util();
    originalResponse = Symbol("Original FullOperationResponse");
    __name(toCompatResponse, "toCompatResponse");
    __name(toPipelineResponse, "toPipelineResponse");
  }
});

// node_modules/@azure/core-http-compat/dist/esm/extendedClient.js
var ExtendedServiceClient;
var init_extendedClient = __esm({
  "node_modules/@azure/core-http-compat/dist/esm/extendedClient.js"() {
    "use strict";
    init_disableKeepAlivePolicy();
    init_esm6();
    init_esm8();
    init_response();
    ExtendedServiceClient = class extends ServiceClient {
      static {
        __name(this, "ExtendedServiceClient");
      }
      constructor(options) {
        var _a4, _b2;
        super(options);
        if (((_a4 = options.keepAliveOptions) === null || _a4 === void 0 ? void 0 : _a4.enable) === false && !pipelineContainsDisableKeepAlivePolicy(this.pipeline)) {
          this.pipeline.addPolicy(createDisableKeepAlivePolicy());
        }
        if (((_b2 = options.redirectOptions) === null || _b2 === void 0 ? void 0 : _b2.handleRedirects) === false) {
          this.pipeline.removePolicy({
            name: redirectPolicyName
          });
        }
      }
      /**
       * Compatible send operation request function.
       *
       * @param operationArguments - Operation arguments
       * @param operationSpec - Operation Spec
       * @returns
       */
      async sendOperationRequest(operationArguments, operationSpec) {
        var _a4;
        const userProvidedCallBack = (_a4 = operationArguments === null || operationArguments === void 0 ? void 0 : operationArguments.options) === null || _a4 === void 0 ? void 0 : _a4.onResponse;
        let lastResponse;
        function onResponse(rawResponse, flatResponse, error) {
          lastResponse = rawResponse;
          if (userProvidedCallBack) {
            userProvidedCallBack(rawResponse, flatResponse, error);
          }
        }
        __name(onResponse, "onResponse");
        operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), { onResponse });
        const result = await super.sendOperationRequest(operationArguments, operationSpec);
        if (lastResponse) {
          Object.defineProperty(result, "_response", {
            value: toCompatResponse(lastResponse)
          });
        }
        return result;
      }
    };
  }
});

// node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js
function createRequestPolicyFactoryPolicy(factories) {
  const orderedFactories = factories.slice().reverse();
  return {
    name: requestPolicyFactoryPolicyName,
    async sendRequest(request3, next2) {
      let httpPipeline = {
        async sendRequest(httpRequest) {
          const response2 = await next2(toPipelineRequest(httpRequest));
          return toCompatResponse(response2, { createProxy: true });
        }
      };
      for (const factory of orderedFactories) {
        httpPipeline = factory.create(httpPipeline, mockRequestPolicyOptions);
      }
      const webResourceLike = toWebResourceLike(request3, { createProxy: true });
      const response = await httpPipeline.sendRequest(webResourceLike);
      return toPipelineResponse(response);
    }
  };
}
var HttpPipelineLogLevel, mockRequestPolicyOptions, requestPolicyFactoryPolicyName;
var init_requestPolicyFactoryPolicy = __esm({
  "node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js"() {
    "use strict";
    init_util();
    init_response();
    (function(HttpPipelineLogLevel2) {
      HttpPipelineLogLevel2[HttpPipelineLogLevel2["ERROR"] = 1] = "ERROR";
      HttpPipelineLogLevel2[HttpPipelineLogLevel2["INFO"] = 3] = "INFO";
      HttpPipelineLogLevel2[HttpPipelineLogLevel2["OFF"] = 0] = "OFF";
      HttpPipelineLogLevel2[HttpPipelineLogLevel2["WARNING"] = 2] = "WARNING";
    })(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));
    mockRequestPolicyOptions = {
      log(_logLevel, _message) {
      },
      shouldLog(_logLevel) {
        return false;
      }
    };
    requestPolicyFactoryPolicyName = "RequestPolicyFactoryPolicy";
    __name(createRequestPolicyFactoryPolicy, "createRequestPolicyFactoryPolicy");
  }
});

// node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js
function convertHttpClient(requestPolicyClient) {
  return {
    sendRequest: /* @__PURE__ */ __name(async (request3) => {
      const response = await requestPolicyClient.sendRequest(toWebResourceLike(request3, { createProxy: true }));
      return toPipelineResponse(response);
    }, "sendRequest")
  };
}
var init_httpClientAdapter = __esm({
  "node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js"() {
    "use strict";
    init_response();
    init_util();
    __name(convertHttpClient, "convertHttpClient");
  }
});

// node_modules/@azure/core-http-compat/dist/esm/index.js
var init_esm9 = __esm({
  "node_modules/@azure/core-http-compat/dist/esm/index.js"() {
    "use strict";
    init_extendedClient();
    init_requestPolicyFactoryPolicy();
    init_disableKeepAlivePolicy();
    init_httpClientAdapter();
    init_util();
  }
});

// node_modules/fast-xml-parser/src/util.js
function getAllMatches(string, regex) {
  const matches = [];
  let match3 = regex.exec(string);
  while (match3) {
    const allmatches = [];
    allmatches.startIndex = regex.lastIndex - match3[0].length;
    const len = match3.length;
    for (let index2 = 0; index2 < len; index2++) {
      allmatches.push(match3[index2]);
    }
    matches.push(allmatches);
    match3 = regex.exec(string);
  }
  return matches;
}
function isExist(v3) {
  return typeof v3 !== "undefined";
}
var nameStartChar, nameChar, nameRegexp, regexName, isName;
var init_util2 = __esm({
  "node_modules/fast-xml-parser/src/util.js"() {
    "use strict";
    nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    regexName = new RegExp("^" + nameRegexp + "$");
    __name(getAllMatches, "getAllMatches");
    isName = /* @__PURE__ */ __name(function(string) {
      const match3 = regexName.exec(string);
      return !(match3 === null || typeof match3 === "undefined");
    }, "isName");
    __name(isExist, "isExist");
  }
});

// node_modules/fast-xml-parser/src/validator.js
function validate(xmlData, options) {
  options = Object.assign({}, defaultOptions2, options);
  const tags2 = [];
  let tagFound = false;
  let reachedRoot = false;
  if (xmlData[0] === "\uFEFF") {
    xmlData = xmlData.substr(1);
  }
  for (let i3 = 0; i3 < xmlData.length; i3++) {
    if (xmlData[i3] === "<" && xmlData[i3 + 1] === "?") {
      i3 += 2;
      i3 = readPI(xmlData, i3);
      if (i3.err) return i3;
    } else if (xmlData[i3] === "<") {
      let tagStartPos = i3;
      i3++;
      if (xmlData[i3] === "!") {
        i3 = readCommentAndCDATA(xmlData, i3);
        continue;
      } else {
        let closingTag = false;
        if (xmlData[i3] === "/") {
          closingTag = true;
          i3++;
        }
        let tagName = "";
        for (; i3 < xmlData.length && xmlData[i3] !== ">" && xmlData[i3] !== " " && xmlData[i3] !== "	" && xmlData[i3] !== "\n" && xmlData[i3] !== "\r"; i3++) {
          tagName += xmlData[i3];
        }
        tagName = tagName.trim();
        if (tagName[tagName.length - 1] === "/") {
          tagName = tagName.substring(0, tagName.length - 1);
          i3--;
        }
        if (!validateTagName(tagName)) {
          let msg;
          if (tagName.trim().length === 0) {
            msg = "Invalid space after '<'.";
          } else {
            msg = "Tag '" + tagName + "' is an invalid name.";
          }
          return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i3));
        }
        const result = readAttributeStr(xmlData, i3);
        if (result === false) {
          return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i3));
        }
        let attrStr = result.value;
        i3 = result.index;
        if (attrStr[attrStr.length - 1] === "/") {
          const attrStrStart = i3 - attrStr.length;
          attrStr = attrStr.substring(0, attrStr.length - 1);
          const isValid = validateAttributeString(attrStr, options);
          if (isValid === true) {
            tagFound = true;
          } else {
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
          }
        } else if (closingTag) {
          if (!result.tagClosed) {
            return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i3));
          } else if (attrStr.trim().length > 0) {
            return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
          } else if (tags2.length === 0) {
            return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' has not been opened.", getLineNumberForPosition(xmlData, tagStartPos));
          } else {
            const otg = tags2.pop();
            if (tagName !== otg.tagName) {
              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
              return getErrorObject(
                "InvalidTag",
                "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                getLineNumberForPosition(xmlData, tagStartPos)
              );
            }
            if (tags2.length == 0) {
              reachedRoot = true;
            }
          }
        } else {
          const isValid = validateAttributeString(attrStr, options);
          if (isValid !== true) {
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i3 - attrStr.length + isValid.err.line));
          }
          if (reachedRoot === true) {
            return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i3));
          } else if (options.unpairedTags.indexOf(tagName) !== -1) {
          } else {
            tags2.push({ tagName, tagStartPos });
          }
          tagFound = true;
        }
        for (i3++; i3 < xmlData.length; i3++) {
          if (xmlData[i3] === "<") {
            if (xmlData[i3 + 1] === "!") {
              i3++;
              i3 = readCommentAndCDATA(xmlData, i3);
              continue;
            } else if (xmlData[i3 + 1] === "?") {
              i3 = readPI(xmlData, ++i3);
              if (i3.err) return i3;
            } else {
              break;
            }
          } else if (xmlData[i3] === "&") {
            const afterAmp = validateAmpersand(xmlData, i3);
            if (afterAmp == -1)
              return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i3));
            i3 = afterAmp;
          } else {
            if (reachedRoot === true && !isWhiteSpace(xmlData[i3])) {
              return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i3));
            }
          }
        }
        if (xmlData[i3] === "<") {
          i3--;
        }
      }
    } else {
      if (isWhiteSpace(xmlData[i3])) {
        continue;
      }
      return getErrorObject("InvalidChar", "char '" + xmlData[i3] + "' is not expected.", getLineNumberForPosition(xmlData, i3));
    }
  }
  if (!tagFound) {
    return getErrorObject("InvalidXml", "Start tag expected.", 1);
  } else if (tags2.length == 1) {
    return getErrorObject("InvalidTag", "Unclosed tag '" + tags2[0].tagName + "'.", getLineNumberForPosition(xmlData, tags2[0].tagStartPos));
  } else if (tags2.length > 0) {
    return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags2.map((t3) => t3.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
  }
  return true;
}
function isWhiteSpace(char) {
  return char === " " || char === "	" || char === "\n" || char === "\r";
}
function readPI(xmlData, i3) {
  const start = i3;
  for (; i3 < xmlData.length; i3++) {
    if (xmlData[i3] == "?" || xmlData[i3] == " ") {
      const tagname = xmlData.substr(start, i3 - start);
      if (i3 > 5 && tagname === "xml") {
        return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i3));
      } else if (xmlData[i3] == "?" && xmlData[i3 + 1] == ">") {
        i3++;
        break;
      } else {
        continue;
      }
    }
  }
  return i3;
}
function readCommentAndCDATA(xmlData, i3) {
  if (xmlData.length > i3 + 5 && xmlData[i3 + 1] === "-" && xmlData[i3 + 2] === "-") {
    for (i3 += 3; i3 < xmlData.length; i3++) {
      if (xmlData[i3] === "-" && xmlData[i3 + 1] === "-" && xmlData[i3 + 2] === ">") {
        i3 += 2;
        break;
      }
    }
  } else if (xmlData.length > i3 + 8 && xmlData[i3 + 1] === "D" && xmlData[i3 + 2] === "O" && xmlData[i3 + 3] === "C" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "Y" && xmlData[i3 + 6] === "P" && xmlData[i3 + 7] === "E") {
    let angleBracketsCount = 1;
    for (i3 += 8; i3 < xmlData.length; i3++) {
      if (xmlData[i3] === "<") {
        angleBracketsCount++;
      } else if (xmlData[i3] === ">") {
        angleBracketsCount--;
        if (angleBracketsCount === 0) {
          break;
        }
      }
    }
  } else if (xmlData.length > i3 + 9 && xmlData[i3 + 1] === "[" && xmlData[i3 + 2] === "C" && xmlData[i3 + 3] === "D" && xmlData[i3 + 4] === "A" && xmlData[i3 + 5] === "T" && xmlData[i3 + 6] === "A" && xmlData[i3 + 7] === "[") {
    for (i3 += 8; i3 < xmlData.length; i3++) {
      if (xmlData[i3] === "]" && xmlData[i3 + 1] === "]" && xmlData[i3 + 2] === ">") {
        i3 += 2;
        break;
      }
    }
  }
  return i3;
}
function readAttributeStr(xmlData, i3) {
  let attrStr = "";
  let startChar = "";
  let tagClosed = false;
  for (; i3 < xmlData.length; i3++) {
    if (xmlData[i3] === doubleQuote || xmlData[i3] === singleQuote) {
      if (startChar === "") {
        startChar = xmlData[i3];
      } else if (startChar !== xmlData[i3]) {
      } else {
        startChar = "";
      }
    } else if (xmlData[i3] === ">") {
      if (startChar === "") {
        tagClosed = true;
        break;
      }
    }
    attrStr += xmlData[i3];
  }
  if (startChar !== "") {
    return false;
  }
  return {
    value: attrStr,
    index: i3,
    tagClosed
  };
}
function validateAttributeString(attrStr, options) {
  const matches = getAllMatches(attrStr, validAttrStrRegxp);
  const attrNames = {};
  for (let i3 = 0; i3 < matches.length; i3++) {
    if (matches[i3][1].length === 0) {
      return getErrorObject("InvalidAttr", "Attribute '" + matches[i3][2] + "' has no space in starting.", getPositionFromMatch(matches[i3]));
    } else if (matches[i3][3] !== void 0 && matches[i3][4] === void 0) {
      return getErrorObject("InvalidAttr", "Attribute '" + matches[i3][2] + "' is without value.", getPositionFromMatch(matches[i3]));
    } else if (matches[i3][3] === void 0 && !options.allowBooleanAttributes) {
      return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i3][2] + "' is not allowed.", getPositionFromMatch(matches[i3]));
    }
    const attrName = matches[i3][2];
    if (!validateAttrName(attrName)) {
      return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i3]));
    }
    if (!attrNames.hasOwnProperty(attrName)) {
      attrNames[attrName] = 1;
    } else {
      return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i3]));
    }
  }
  return true;
}
function validateNumberAmpersand(xmlData, i3) {
  let re2 = /\d/;
  if (xmlData[i3] === "x") {
    i3++;
    re2 = /[\da-fA-F]/;
  }
  for (; i3 < xmlData.length; i3++) {
    if (xmlData[i3] === ";")
      return i3;
    if (!xmlData[i3].match(re2))
      break;
  }
  return -1;
}
function validateAmpersand(xmlData, i3) {
  i3++;
  if (xmlData[i3] === ";")
    return -1;
  if (xmlData[i3] === "#") {
    i3++;
    return validateNumberAmpersand(xmlData, i3);
  }
  let count = 0;
  for (; i3 < xmlData.length; i3++, count++) {
    if (xmlData[i3].match(/\w/) && count < 20)
      continue;
    if (xmlData[i3] === ";")
      break;
    return -1;
  }
  return i3;
}
function getErrorObject(code, message, lineNumber) {
  return {
    err: {
      code,
      msg: message,
      line: lineNumber.line || lineNumber,
      col: lineNumber.col
    }
  };
}
function validateAttrName(attrName) {
  return isName(attrName);
}
function validateTagName(tagname) {
  return isName(tagname);
}
function getLineNumberForPosition(xmlData, index2) {
  const lines = xmlData.substring(0, index2).split(/\r?\n/);
  return {
    line: lines.length,
    // column number is last line's length + 1, because column numbering starts at 1:
    col: lines[lines.length - 1].length + 1
  };
}
function getPositionFromMatch(match3) {
  return match3.startIndex + match3[1].length;
}
var defaultOptions2, doubleQuote, singleQuote, validAttrStrRegxp;
var init_validator = __esm({
  "node_modules/fast-xml-parser/src/validator.js"() {
    "use strict";
    init_util2();
    defaultOptions2 = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    __name(validate, "validate");
    __name(isWhiteSpace, "isWhiteSpace");
    __name(readPI, "readPI");
    __name(readCommentAndCDATA, "readCommentAndCDATA");
    doubleQuote = '"';
    singleQuote = "'";
    __name(readAttributeStr, "readAttributeStr");
    validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    __name(validateAttributeString, "validateAttributeString");
    __name(validateNumberAmpersand, "validateNumberAmpersand");
    __name(validateAmpersand, "validateAmpersand");
    __name(getErrorObject, "getErrorObject");
    __name(validateAttrName, "validateAttrName");
    __name(validateTagName, "validateTagName");
    __name(getLineNumberForPosition, "getLineNumberForPosition");
    __name(getPositionFromMatch, "getPositionFromMatch");
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var defaultOptions3, buildOptions;
var init_OptionsBuilder = __esm({
  "node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"() {
    "use strict";
    defaultOptions3 = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: /* @__PURE__ */ __name(function(tagName, val) {
        return val;
      }, "tagValueProcessor"),
      attributeValueProcessor: /* @__PURE__ */ __name(function(attrName, val) {
        return val;
      }, "attributeValueProcessor"),
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: /* @__PURE__ */ __name(() => false, "isArray"),
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: /* @__PURE__ */ __name(function(tagName, jPath, attrs) {
        return tagName;
      }, "updateTag")
      // skipEmptyListItem: false
    };
    buildOptions = /* @__PURE__ */ __name(function(options) {
      return Object.assign({}, defaultOptions3, options);
    }, "buildOptions");
  }
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var XmlNode;
var init_xmlNode = __esm({
  "node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"() {
    "use strict";
    XmlNode = class {
      static {
        __name(this, "XmlNode");
      }
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val) {
        if (key === "__proto__") key = "#__proto__";
        this.child.push({ [key]: val });
      }
      addChild(node) {
        if (node.tagname === "__proto__") node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
  }
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
function readDocType(xmlData, i3) {
  const entities = {};
  if (xmlData[i3 + 3] === "O" && xmlData[i3 + 4] === "C" && xmlData[i3 + 5] === "T" && xmlData[i3 + 6] === "Y" && xmlData[i3 + 7] === "P" && xmlData[i3 + 8] === "E") {
    i3 = i3 + 9;
    let angleBracketsCount = 1;
    let hasBody = false, comment = false;
    let exp = "";
    for (; i3 < xmlData.length; i3++) {
      if (xmlData[i3] === "<" && !comment) {
        if (hasBody && isEntity(xmlData, i3)) {
          i3 += 7;
          let entityName, val;
          [entityName, val, i3] = readEntityExp(xmlData, i3 + 1);
          if (val.indexOf("&") === -1)
            entities[validateEntityName(entityName)] = {
              regx: RegExp(`&${entityName};`, "g"),
              val
            };
        } else if (hasBody && isElement(xmlData, i3)) i3 += 8;
        else if (hasBody && isAttlist(xmlData, i3)) i3 += 8;
        else if (hasBody && isNotation(xmlData, i3)) i3 += 9;
        else if (isComment) comment = true;
        else throw new Error("Invalid DOCTYPE");
        angleBracketsCount++;
        exp = "";
      } else if (xmlData[i3] === ">") {
        if (comment) {
          if (xmlData[i3 - 1] === "-" && xmlData[i3 - 2] === "-") {
            comment = false;
            angleBracketsCount--;
          }
        } else {
          angleBracketsCount--;
        }
        if (angleBracketsCount === 0) {
          break;
        }
      } else if (xmlData[i3] === "[") {
        hasBody = true;
      } else {
        exp += xmlData[i3];
      }
    }
    if (angleBracketsCount !== 0) {
      throw new Error(`Unclosed DOCTYPE`);
    }
  } else {
    throw new Error(`Invalid Tag instead of DOCTYPE`);
  }
  return { entities, i: i3 };
}
function readEntityExp(xmlData, i3) {
  let entityName = "";
  for (; i3 < xmlData.length && (xmlData[i3] !== "'" && xmlData[i3] !== '"'); i3++) {
    entityName += xmlData[i3];
  }
  entityName = entityName.trim();
  if (entityName.indexOf(" ") !== -1) throw new Error("External entites are not supported");
  const startChar = xmlData[i3++];
  let val = "";
  for (; i3 < xmlData.length && xmlData[i3] !== startChar; i3++) {
    val += xmlData[i3];
  }
  return [entityName, val, i3];
}
function isComment(xmlData, i3) {
  if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "-" && xmlData[i3 + 3] === "-") return true;
  return false;
}
function isEntity(xmlData, i3) {
  if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "E" && xmlData[i3 + 3] === "N" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "I" && xmlData[i3 + 6] === "T" && xmlData[i3 + 7] === "Y") return true;
  return false;
}
function isElement(xmlData, i3) {
  if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "E" && xmlData[i3 + 3] === "L" && xmlData[i3 + 4] === "E" && xmlData[i3 + 5] === "M" && xmlData[i3 + 6] === "E" && xmlData[i3 + 7] === "N" && xmlData[i3 + 8] === "T") return true;
  return false;
}
function isAttlist(xmlData, i3) {
  if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "A" && xmlData[i3 + 3] === "T" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "L" && xmlData[i3 + 6] === "I" && xmlData[i3 + 7] === "S" && xmlData[i3 + 8] === "T") return true;
  return false;
}
function isNotation(xmlData, i3) {
  if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "N" && xmlData[i3 + 3] === "O" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "A" && xmlData[i3 + 6] === "T" && xmlData[i3 + 7] === "I" && xmlData[i3 + 8] === "O" && xmlData[i3 + 9] === "N") return true;
  return false;
}
function validateEntityName(name2) {
  if (isName(name2))
    return name2;
  else
    throw new Error(`Invalid entity name ${name2}`);
}
var init_DocTypeReader = __esm({
  "node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"() {
    "use strict";
    init_util2();
    __name(readDocType, "readDocType");
    __name(readEntityExp, "readEntityExp");
    __name(isComment, "isComment");
    __name(isEntity, "isEntity");
    __name(isElement, "isElement");
    __name(isAttlist, "isAttlist");
    __name(isNotation, "isNotation");
    __name(validateEntityName, "validateEntityName");
  }
});

// node_modules/strnum/strnum.js
function toNumber2(str, options = {}) {
  options = Object.assign({}, consider, options);
  if (!str || typeof str !== "string") return str;
  let trimmedStr = str.trim();
  if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr)) return str;
  else if (str === "0") return 0;
  else if (options.hex && hexRegex.test(trimmedStr)) {
    return parse_int(trimmedStr, 16);
  } else if (trimmedStr.search(/[eE]/) !== -1) {
    const notation = trimmedStr.match(/^([-\+])?(0*)([0-9]*(\.[0-9]*)?[eE][-\+]?[0-9]+)$/);
    if (notation) {
      if (options.leadingZeros) {
        trimmedStr = (notation[1] || "") + notation[3];
      } else {
        if (notation[2] === "0" && notation[3][0] === ".") {
        } else {
          return str;
        }
      }
      return options.eNotation ? Number(trimmedStr) : str;
    } else {
      return str;
    }
  } else {
    const match3 = numRegex.exec(trimmedStr);
    if (match3) {
      const sign = match3[1];
      const leadingZeros = match3[2];
      let numTrimmedByZeros = trimZeros(match3[3]);
      if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str;
      else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str;
      else if (options.leadingZeros && leadingZeros === str) return 0;
      else {
        const num = Number(trimmedStr);
        const numStr = "" + num;
        if (numStr.search(/[eE]/) !== -1) {
          if (options.eNotation) return num;
          else return str;
        } else if (trimmedStr.indexOf(".") !== -1) {
          if (numStr === "0" && numTrimmedByZeros === "") return num;
          else if (numStr === numTrimmedByZeros) return num;
          else if (sign && numStr === "-" + numTrimmedByZeros) return num;
          else return str;
        }
        if (leadingZeros) {
          return numTrimmedByZeros === numStr || sign + numTrimmedByZeros === numStr ? num : str;
        } else {
          return trimmedStr === numStr || trimmedStr === sign + numStr ? num : str;
        }
      }
    } else {
      return str;
    }
  }
}
function trimZeros(numStr) {
  if (numStr && numStr.indexOf(".") !== -1) {
    numStr = numStr.replace(/0+$/, "");
    if (numStr === ".") numStr = "0";
    else if (numStr[0] === ".") numStr = "0" + numStr;
    else if (numStr[numStr.length - 1] === ".") numStr = numStr.substr(0, numStr.length - 1);
    return numStr;
  }
  return numStr;
}
function parse_int(numStr, base) {
  if (parseInt) return parseInt(numStr, base);
  else if (Number.parseInt) return Number.parseInt(numStr, base);
  else if (window && window.parseInt) return window.parseInt(numStr, base);
  else throw new Error("parseInt, Number.parseInt, window.parseInt are not supported");
}
var hexRegex, numRegex, consider;
var init_strnum = __esm({
  "node_modules/strnum/strnum.js"() {
    "use strict";
    hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    numRegex = /^([\-\+])?(0*)([0-9]*(\.[0-9]*)?)$/;
    consider = {
      hex: true,
      // oct: false,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    __name(toNumber2, "toNumber");
    __name(trimZeros, "trimZeros");
    __name(parse_int, "parse_int");
  }
});

// node_modules/fast-xml-parser/src/ignoreAttributes.js
function getIgnoreAttributesFn(ignoreAttributes) {
  if (typeof ignoreAttributes === "function") {
    return ignoreAttributes;
  }
  if (Array.isArray(ignoreAttributes)) {
    return (attrName) => {
      for (const pattern of ignoreAttributes) {
        if (typeof pattern === "string" && attrName === pattern) {
          return true;
        }
        if (pattern instanceof RegExp && pattern.test(attrName)) {
          return true;
        }
      }
    };
  }
  return () => false;
}
var init_ignoreAttributes = __esm({
  "node_modules/fast-xml-parser/src/ignoreAttributes.js"() {
    "use strict";
    __name(getIgnoreAttributesFn, "getIgnoreAttributesFn");
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
function addExternalEntities(externalEntities) {
  const entKeys = Object.keys(externalEntities);
  for (let i3 = 0; i3 < entKeys.length; i3++) {
    const ent = entKeys[i3];
    this.lastEntities[ent] = {
      regex: new RegExp("&" + ent + ";", "g"),
      val: externalEntities[ent]
    };
  }
}
function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
  if (val !== void 0) {
    if (this.options.trimValues && !dontTrim) {
      val = val.trim();
    }
    if (val.length > 0) {
      if (!escapeEntities) val = this.replaceEntitiesValue(val);
      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
      if (newval === null || newval === void 0) {
        return val;
      } else if (typeof newval !== typeof val || newval !== val) {
        return newval;
      } else if (this.options.trimValues) {
        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
      } else {
        const trimmedVal = val.trim();
        if (trimmedVal === val) {
          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
        } else {
          return val;
        }
      }
    }
  }
}
function resolveNameSpace(tagname) {
  if (this.options.removeNSPrefix) {
    const tags2 = tagname.split(":");
    const prefix2 = tagname.charAt(0) === "/" ? "/" : "";
    if (tags2[0] === "xmlns") {
      return "";
    }
    if (tags2.length === 2) {
      tagname = prefix2 + tags2[1];
    }
  }
  return tagname;
}
function buildAttributesMap(attrStr, jPath, tagName) {
  if (this.options.ignoreAttributes !== true && typeof attrStr === "string") {
    const matches = getAllMatches(attrStr, attrsRegx);
    const len = matches.length;
    const attrs = {};
    for (let i3 = 0; i3 < len; i3++) {
      const attrName = this.resolveNameSpace(matches[i3][1]);
      if (this.ignoreAttributesFn(attrName, jPath)) {
        continue;
      }
      let oldVal = matches[i3][4];
      let aName = this.options.attributeNamePrefix + attrName;
      if (attrName.length) {
        if (this.options.transformAttributeName) {
          aName = this.options.transformAttributeName(aName);
        }
        if (aName === "__proto__") aName = "#__proto__";
        if (oldVal !== void 0) {
          if (this.options.trimValues) {
            oldVal = oldVal.trim();
          }
          oldVal = this.replaceEntitiesValue(oldVal);
          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
          if (newVal === null || newVal === void 0) {
            attrs[aName] = oldVal;
          } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
            attrs[aName] = newVal;
          } else {
            attrs[aName] = parseValue(
              oldVal,
              this.options.parseAttributeValue,
              this.options.numberParseOptions
            );
          }
        } else if (this.options.allowBooleanAttributes) {
          attrs[aName] = true;
        }
      }
    }
    if (!Object.keys(attrs).length) {
      return;
    }
    if (this.options.attributesGroupName) {
      const attrCollection = {};
      attrCollection[this.options.attributesGroupName] = attrs;
      return attrCollection;
    }
    return attrs;
  }
}
function addChild(currentNode, childNode, jPath) {
  const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
  if (result === false) {
  } else if (typeof result === "string") {
    childNode.tagname = result;
    currentNode.addChild(childNode);
  } else {
    currentNode.addChild(childNode);
  }
}
function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
  if (textData) {
    if (isLeafNode === void 0) isLeafNode = currentNode.child.length === 0;
    textData = this.parseTextData(
      textData,
      currentNode.tagname,
      jPath,
      false,
      currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
      isLeafNode
    );
    if (textData !== void 0 && textData !== "")
      currentNode.add(this.options.textNodeName, textData);
    textData = "";
  }
  return textData;
}
function isItStopNode(stopNodes, jPath, currentTagName) {
  const allNodesExp = "*." + currentTagName;
  for (const stopNodePath in stopNodes) {
    const stopNodeExp = stopNodes[stopNodePath];
    if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
  }
  return false;
}
function tagExpWithClosingIndex(xmlData, i3, closingChar = ">") {
  let attrBoundary;
  let tagExp = "";
  for (let index2 = i3; index2 < xmlData.length; index2++) {
    let ch = xmlData[index2];
    if (attrBoundary) {
      if (ch === attrBoundary) attrBoundary = "";
    } else if (ch === '"' || ch === "'") {
      attrBoundary = ch;
    } else if (ch === closingChar[0]) {
      if (closingChar[1]) {
        if (xmlData[index2 + 1] === closingChar[1]) {
          return {
            data: tagExp,
            index: index2
          };
        }
      } else {
        return {
          data: tagExp,
          index: index2
        };
      }
    } else if (ch === "	") {
      ch = " ";
    }
    tagExp += ch;
  }
}
function findClosingIndex(xmlData, str, i3, errMsg) {
  const closingIndex = xmlData.indexOf(str, i3);
  if (closingIndex === -1) {
    throw new Error(errMsg);
  } else {
    return closingIndex + str.length - 1;
  }
}
function readTagExp(xmlData, i3, removeNSPrefix, closingChar = ">") {
  const result = tagExpWithClosingIndex(xmlData, i3 + 1, closingChar);
  if (!result) return;
  let tagExp = result.data;
  const closeIndex = result.index;
  const separatorIndex = tagExp.search(/\s/);
  let tagName = tagExp;
  let attrExpPresent = true;
  if (separatorIndex !== -1) {
    tagName = tagExp.substring(0, separatorIndex);
    tagExp = tagExp.substring(separatorIndex + 1).trimStart();
  }
  const rawTagName = tagName;
  if (removeNSPrefix) {
    const colonIndex = tagName.indexOf(":");
    if (colonIndex !== -1) {
      tagName = tagName.substr(colonIndex + 1);
      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
    }
  }
  return {
    tagName,
    tagExp,
    closeIndex,
    attrExpPresent,
    rawTagName
  };
}
function readStopNodeData(xmlData, tagName, i3) {
  const startIndex = i3;
  let openTagCount = 1;
  for (; i3 < xmlData.length; i3++) {
    if (xmlData[i3] === "<") {
      if (xmlData[i3 + 1] === "/") {
        const closeIndex = findClosingIndex(xmlData, ">", i3, `${tagName} is not closed`);
        let closeTagName = xmlData.substring(i3 + 2, closeIndex).trim();
        if (closeTagName === tagName) {
          openTagCount--;
          if (openTagCount === 0) {
            return {
              tagContent: xmlData.substring(startIndex, i3),
              i: closeIndex
            };
          }
        }
        i3 = closeIndex;
      } else if (xmlData[i3 + 1] === "?") {
        const closeIndex = findClosingIndex(xmlData, "?>", i3 + 1, "StopNode is not closed.");
        i3 = closeIndex;
      } else if (xmlData.substr(i3 + 1, 3) === "!--") {
        const closeIndex = findClosingIndex(xmlData, "-->", i3 + 3, "StopNode is not closed.");
        i3 = closeIndex;
      } else if (xmlData.substr(i3 + 1, 2) === "![") {
        const closeIndex = findClosingIndex(xmlData, "]]>", i3, "StopNode is not closed.") - 2;
        i3 = closeIndex;
      } else {
        const tagData = readTagExp(xmlData, i3, ">");
        if (tagData) {
          const openTagName = tagData && tagData.tagName;
          if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
            openTagCount++;
          }
          i3 = tagData.closeIndex;
        }
      }
    }
  }
}
function parseValue(val, shouldParse, options) {
  if (shouldParse && typeof val === "string") {
    const newval = val.trim();
    if (newval === "true") return true;
    else if (newval === "false") return false;
    else return toNumber2(val, options);
  } else {
    if (isExist(val)) {
      return val;
    } else {
      return "";
    }
  }
}
var OrderedObjParser, attrsRegx, parseXml, replaceEntitiesValue;
var init_OrderedObjParser = __esm({
  "node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"() {
    "use strict";
    init_util2();
    init_xmlNode();
    init_DocTypeReader();
    init_strnum();
    init_ignoreAttributes();
    OrderedObjParser = class {
      static {
        __name(this, "OrderedObjParser");
      }
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" },
          "num_dec": { regex: /&#([0-9]{1,7});/g, val: /* @__PURE__ */ __name((_3, str) => String.fromCodePoint(Number.parseInt(str, 10)), "val") },
          "num_hex": { regex: /&#x([0-9a-fA-F]{1,6});/g, val: /* @__PURE__ */ __name((_3, str) => String.fromCodePoint(Number.parseInt(str, 16)), "val") }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
        this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes);
      }
    };
    __name(addExternalEntities, "addExternalEntities");
    __name(parseTextData, "parseTextData");
    __name(resolveNameSpace, "resolveNameSpace");
    attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    __name(buildAttributesMap, "buildAttributesMap");
    parseXml = /* @__PURE__ */ __name(function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new XmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i3 = 0; i3 < xmlData.length; i3++) {
        const ch = xmlData[i3];
        if (ch === "<") {
          if (xmlData[i3 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i3, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i3 + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i3 = closeIndex;
          } else if (xmlData[i3 + 1] === "?") {
            let tagData = readTagExp(xmlData, i3, false, "?>");
            if (!tagData) throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new XmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i3 = tagData.closeIndex + 1;
          } else if (xmlData.substr(i3 + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i3 + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i3 + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i3 = endIndex;
          } else if (xmlData.substr(i3 + 1, 2) === "!D") {
            const result = readDocType(xmlData, i3);
            this.docTypeEntities = result.entities;
            i3 = result.i;
          } else if (xmlData.substr(i3 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i3, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i3 + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);
            if (val == void 0) val = "";
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              currentNode.add(this.options.textNodeName, val);
            }
            i3 = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i3, this.options.removeNSPrefix);
            let tagName = result.tagName;
            const rawTagName = result.rawTagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                i3 = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i3 = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
                if (!result2) throw new Error(`Unexpected end of ${rawTagName}`);
                i3 = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new XmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new XmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new XmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i3 = closeIndex;
            }
          }
        } else {
          textData += xmlData[i3];
        }
      }
      return xmlObj.child;
    }, "parseXml");
    __name(addChild, "addChild");
    replaceEntitiesValue = /* @__PURE__ */ __name(function(val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    }, "replaceEntitiesValue");
    __name(saveTextToParentTag, "saveTextToParentTag");
    __name(isItStopNode, "isItStopNode");
    __name(tagExpWithClosingIndex, "tagExpWithClosingIndex");
    __name(findClosingIndex, "findClosingIndex");
    __name(readTagExp, "readTagExp");
    __name(readStopNodeData, "readStopNodeData");
    __name(parseValue, "parseValue");
  }
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
function prettify(node, options) {
  return compress(node, options);
}
function compress(arr, options, jPath) {
  let text;
  const compressedObj = {};
  for (let i3 = 0; i3 < arr.length; i3++) {
    const tagObj = arr[i3];
    const property = propName(tagObj);
    let newJpath = "";
    if (jPath === void 0) newJpath = property;
    else newJpath = jPath + "." + property;
    if (property === options.textNodeName) {
      if (text === void 0) text = tagObj[property];
      else text += "" + tagObj[property];
    } else if (property === void 0) {
      continue;
    } else if (tagObj[property]) {
      let val = compress(tagObj[property], options, newJpath);
      const isLeaf = isLeafTag(val, options);
      if (tagObj[":@"]) {
        assignAttributes(val, tagObj[":@"], newJpath, options);
      } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
        val = val[options.textNodeName];
      } else if (Object.keys(val).length === 0) {
        if (options.alwaysCreateTextNode) val[options.textNodeName] = "";
        else val = "";
      }
      if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
        if (!Array.isArray(compressedObj[property])) {
          compressedObj[property] = [compressedObj[property]];
        }
        compressedObj[property].push(val);
      } else {
        if (options.isArray(property, newJpath, isLeaf)) {
          compressedObj[property] = [val];
        } else {
          compressedObj[property] = val;
        }
      }
    }
  }
  if (typeof text === "string") {
    if (text.length > 0) compressedObj[options.textNodeName] = text;
  } else if (text !== void 0) compressedObj[options.textNodeName] = text;
  return compressedObj;
}
function propName(obj) {
  const keys = Object.keys(obj);
  for (let i3 = 0; i3 < keys.length; i3++) {
    const key = keys[i3];
    if (key !== ":@") return key;
  }
}
function assignAttributes(obj, attrMap, jpath, options) {
  if (attrMap) {
    const keys = Object.keys(attrMap);
    const len = keys.length;
    for (let i3 = 0; i3 < len; i3++) {
      const atrrName = keys[i3];
      if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
        obj[atrrName] = [attrMap[atrrName]];
      } else {
        obj[atrrName] = attrMap[atrrName];
      }
    }
  }
}
function isLeafTag(obj, options) {
  const { textNodeName } = options;
  const propCount = Object.keys(obj).length;
  if (propCount === 0) {
    return true;
  }
  if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
    return true;
  }
  return false;
}
var init_node2json = __esm({
  "node_modules/fast-xml-parser/src/xmlparser/node2json.js"() {
    "use strict";
    __name(prettify, "prettify");
    __name(compress, "compress");
    __name(propName, "propName");
    __name(assignAttributes, "assignAttributes");
    __name(isLeafTag, "isLeafTag");
  }
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var XMLParser;
var init_XMLParser = __esm({
  "node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"() {
    "use strict";
    init_OptionsBuilder();
    init_OrderedObjParser();
    init_node2json();
    init_validator();
    XMLParser = class {
      static {
        __name(this, "XMLParser");
      }
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true) validationOption = {};
          const result = validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0) return orderedResult;
        else return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
function toXml(jArray, options) {
  let indentation = "";
  if (options.format && options.indentBy.length > 0) {
    indentation = EOL5;
  }
  return arrToStr(jArray, options, "", indentation);
}
function arrToStr(arr, options, jPath, indentation) {
  let xmlStr = "";
  let isPreviousElementTag = false;
  for (let i3 = 0; i3 < arr.length; i3++) {
    const tagObj = arr[i3];
    const tagName = propName2(tagObj);
    if (tagName === void 0) continue;
    let newJPath = "";
    if (jPath.length === 0) newJPath = tagName;
    else newJPath = `${jPath}.${tagName}`;
    if (tagName === options.textNodeName) {
      let tagText = tagObj[tagName];
      if (!isStopNode(newJPath, options)) {
        tagText = options.tagValueProcessor(tagName, tagText);
        tagText = replaceEntitiesValue2(tagText, options);
      }
      if (isPreviousElementTag) {
        xmlStr += indentation;
      }
      xmlStr += tagText;
      isPreviousElementTag = false;
      continue;
    } else if (tagName === options.cdataPropName) {
      if (isPreviousElementTag) {
        xmlStr += indentation;
      }
      xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
      isPreviousElementTag = false;
      continue;
    } else if (tagName === options.commentPropName) {
      xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
      isPreviousElementTag = true;
      continue;
    } else if (tagName[0] === "?") {
      const attStr2 = attr_to_str(tagObj[":@"], options);
      const tempInd = tagName === "?xml" ? "" : indentation;
      let piTextNodeName = tagObj[tagName][0][options.textNodeName];
      piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
      xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
      isPreviousElementTag = true;
      continue;
    }
    let newIdentation = indentation;
    if (newIdentation !== "") {
      newIdentation += options.indentBy;
    }
    const attStr = attr_to_str(tagObj[":@"], options);
    const tagStart = indentation + `<${tagName}${attStr}`;
    const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
    if (options.unpairedTags.indexOf(tagName) !== -1) {
      if (options.suppressUnpairedNode) xmlStr += tagStart + ">";
      else xmlStr += tagStart + "/>";
    } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
      xmlStr += tagStart + "/>";
    } else if (tagValue && tagValue.endsWith(">")) {
      xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
    } else {
      xmlStr += tagStart + ">";
      if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
        xmlStr += indentation + options.indentBy + tagValue + indentation;
      } else {
        xmlStr += tagValue;
      }
      xmlStr += `</${tagName}>`;
    }
    isPreviousElementTag = true;
  }
  return xmlStr;
}
function propName2(obj) {
  const keys = Object.keys(obj);
  for (let i3 = 0; i3 < keys.length; i3++) {
    const key = keys[i3];
    if (!obj.hasOwnProperty(key)) continue;
    if (key !== ":@") return key;
  }
}
function attr_to_str(attrMap, options) {
  let attrStr = "";
  if (attrMap && !options.ignoreAttributes) {
    for (let attr in attrMap) {
      if (!attrMap.hasOwnProperty(attr)) continue;
      let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
      attrVal = replaceEntitiesValue2(attrVal, options);
      if (attrVal === true && options.suppressBooleanAttributes) {
        attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
      } else {
        attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
      }
    }
  }
  return attrStr;
}
function isStopNode(jPath, options) {
  jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
  let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
  for (let index2 in options.stopNodes) {
    if (options.stopNodes[index2] === jPath || options.stopNodes[index2] === "*." + tagName) return true;
  }
  return false;
}
function replaceEntitiesValue2(textValue, options) {
  if (textValue && textValue.length > 0 && options.processEntities) {
    for (let i3 = 0; i3 < options.entities.length; i3++) {
      const entity = options.entities[i3];
      textValue = textValue.replace(entity.regex, entity.val);
    }
  }
  return textValue;
}
var EOL5;
var init_orderedJs2Xml = __esm({
  "node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"() {
    "use strict";
    EOL5 = "\n";
    __name(toXml, "toXml");
    __name(arrToStr, "arrToStr");
    __name(propName2, "propName");
    __name(attr_to_str, "attr_to_str");
    __name(isStopNode, "isStopNode");
    __name(replaceEntitiesValue2, "replaceEntitiesValue");
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
function Builder(options) {
  this.options = Object.assign({}, defaultOptions4, options);
  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {
    this.isAttribute = function() {
      return false;
    };
  } else {
    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes);
    this.attrPrefixLen = this.options.attributeNamePrefix.length;
    this.isAttribute = isAttribute;
  }
  this.processTextOrObjNode = processTextOrObjNode;
  if (this.options.format) {
    this.indentate = indentate;
    this.tagEndChar = ">\n";
    this.newLine = "\n";
  } else {
    this.indentate = function() {
      return "";
    };
    this.tagEndChar = ">";
    this.newLine = "";
  }
}
function processTextOrObjNode(object, key, level, ajPath) {
  const result = this.j2x(object, level + 1, ajPath.concat(key));
  if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
  } else {
    return this.buildObjectNode(result.val, key, result.attrStr, level);
  }
}
function indentate(level) {
  return this.options.indentBy.repeat(level);
}
function isAttribute(name2) {
  if (name2.startsWith(this.options.attributeNamePrefix) && name2 !== this.options.textNodeName) {
    return name2.substr(this.attrPrefixLen);
  } else {
    return false;
  }
}
var defaultOptions4;
var init_json2xml = __esm({
  "node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"() {
    "use strict";
    init_orderedJs2Xml();
    init_ignoreAttributes();
    defaultOptions4 = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: /* @__PURE__ */ __name(function(key, a3) {
        return a3;
      }, "tagValueProcessor"),
      attributeValueProcessor: /* @__PURE__ */ __name(function(attrName, a3) {
        return a3;
      }, "attributeValueProcessor"),
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    __name(Builder, "Builder");
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return toXml(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0, []).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level, ajPath) {
      let attrStr = "";
      let val = "";
      const jPath = ajPath.join(".");
      for (let key in jObj) {
        if (!Object.prototype.hasOwnProperty.call(jObj, key)) continue;
        if (typeof jObj[key] === "undefined") {
          if (this.isAttribute(key)) {
            val += "";
          }
        } else if (jObj[key] === null) {
          if (this.isAttribute(key)) {
            val += "";
          } else if (key === this.options.cdataPropName) {
            val += "";
          } else if (key[0] === "?") {
            val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          } else {
            val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
          }
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr && !this.ignoreAttributesFn(attr, jPath)) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else if (!attr) {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val += this.replaceEntitiesValue(newval);
            } else {
              val += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          let listTagAttr = "";
          for (let j3 = 0; j3 < arrLen; j3++) {
            const item = jObj[key][j3];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?") val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                const result = this.j2x(item, level + 1, ajPath.concat(key));
                listTagVal += result.val;
                if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {
                  listTagAttr += result.attrStr;
                }
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level, ajPath);
              }
            } else {
              if (this.options.oneListGroup) {
                let textValue = this.options.tagValueProcessor(key, item);
                textValue = this.replaceEntitiesValue(textValue);
                listTagVal += textValue;
              } else {
                listTagVal += this.buildTextValNode(item, key, "", level);
              }
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);
          }
          val += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L2 = Ks.length;
            for (let j3 = 0; j3 < L2; j3++) {
              attrStr += this.buildAttrPairStr(Ks[j3], "" + jObj[key][Ks[j3]]);
            }
          } else {
            val += this.processTextOrObjNode(jObj[key], key, level, ajPath);
          }
        }
      }
      return { attrStr, val };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val) {
      val = this.options.attributeValueProcessor(attrName, "" + val);
      val = this.replaceEntitiesValue(val);
      if (this.options.suppressBooleanAttributes && val === "true") {
        return " " + attrName;
      } else return " " + attrName + '="' + val + '"';
    };
    __name(processTextOrObjNode, "processTextOrObjNode");
    Builder.prototype.buildObjectNode = function(val, key, attrStr, level) {
      if (val === "") {
        if (key[0] === "?") return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if ((attrStr || attrStr === "") && val.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode) closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i3 = 0; i3 < this.options.entities.length; i3++) {
          const entity = this.options.entities[i3];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    __name(indentate, "indentate");
    __name(isAttribute, "isAttribute");
  }
});

// node_modules/fast-xml-parser/src/fxp.js
var XMLValidator;
var init_fxp = __esm({
  "node_modules/fast-xml-parser/src/fxp.js"() {
    "use strict";
    init_validator();
    init_XMLParser();
    init_json2xml();
    XMLValidator = {
      validate
    };
  }
});

// node_modules/@azure/core-xml/dist/esm/xml.common.js
var XML_ATTRKEY2, XML_CHARKEY2;
var init_xml_common = __esm({
  "node_modules/@azure/core-xml/dist/esm/xml.common.js"() {
    "use strict";
    XML_ATTRKEY2 = "$";
    XML_CHARKEY2 = "_";
  }
});

// node_modules/@azure/core-xml/dist/esm/xml.js
function getCommonOptions(options) {
  var _a4;
  return {
    attributesGroupName: XML_ATTRKEY2,
    textNodeName: (_a4 = options.xmlCharKey) !== null && _a4 !== void 0 ? _a4 : XML_CHARKEY2,
    ignoreAttributes: false,
    suppressBooleanAttributes: false
  };
}
function getSerializerOptions(options = {}) {
  var _a4, _b2;
  return Object.assign(Object.assign({}, getCommonOptions(options)), { attributeNamePrefix: "@_", format: true, suppressEmptyNode: true, indentBy: "", rootNodeName: (_a4 = options.rootName) !== null && _a4 !== void 0 ? _a4 : "root", cdataPropName: (_b2 = options.cdataPropName) !== null && _b2 !== void 0 ? _b2 : "__cdata" });
}
function getParserOptions(options = {}) {
  return Object.assign(Object.assign({}, getCommonOptions(options)), { parseAttributeValue: false, parseTagValue: false, attributeNamePrefix: "", stopNodes: options.stopNodes, processEntities: true, trimValues: false });
}
function stringifyXML(obj, opts = {}) {
  const parserOptions = getSerializerOptions(opts);
  const j2x = new Builder(parserOptions);
  const node = { [parserOptions.rootNodeName]: obj };
  const xmlData = j2x.build(node);
  return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>${xmlData}`.replace(/\n/g, "");
}
async function parseXML(str, opts = {}) {
  if (!str) {
    throw new Error("Document is empty");
  }
  const validation = XMLValidator.validate(str);
  if (validation !== true) {
    throw validation;
  }
  const parser = new XMLParser(getParserOptions(opts));
  const parsedXml = parser.parse(str);
  if (parsedXml["?xml"]) {
    delete parsedXml["?xml"];
  }
  if (!opts.includeRoot) {
    for (const key of Object.keys(parsedXml)) {
      const value = parsedXml[key];
      return typeof value === "object" ? Object.assign({}, value) : value;
    }
  }
  return parsedXml;
}
var init_xml = __esm({
  "node_modules/@azure/core-xml/dist/esm/xml.js"() {
    "use strict";
    init_fxp();
    init_xml_common();
    __name(getCommonOptions, "getCommonOptions");
    __name(getSerializerOptions, "getSerializerOptions");
    __name(getParserOptions, "getParserOptions");
    __name(stringifyXML, "stringifyXML");
    __name(parseXML, "parseXML");
  }
});

// node_modules/@azure/core-xml/dist/esm/index.js
var init_esm10 = __esm({
  "node_modules/@azure/core-xml/dist/esm/index.js"() {
    "use strict";
    init_xml();
    init_xml_common();
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js
var logger4;
var init_log4 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"() {
    "use strict";
    init_esm();
    logger4 = createClientLogger("storage-blob");
  }
});

// node_modules/@azure/storage-blob/node_modules/@azure/abort-controller/dist/esm/AbortError.js
var AbortError3;
var init_AbortError3 = __esm({
  "node_modules/@azure/storage-blob/node_modules/@azure/abort-controller/dist/esm/AbortError.js"() {
    "use strict";
    AbortError3 = class extends Error {
      static {
        __name(this, "AbortError");
      }
      constructor(message) {
        super(message);
        this.name = "AbortError";
      }
    };
  }
});

// node_modules/@azure/storage-blob/node_modules/@azure/abort-controller/dist/esm/index.js
var init_esm11 = __esm({
  "node_modules/@azure/storage-blob/node_modules/@azure/abort-controller/dist/esm/index.js"() {
    "use strict";
    init_AbortError3();
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js
var BaseRequestPolicy;
var init_RequestPolicy = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js"() {
    "use strict";
    BaseRequestPolicy = class {
      static {
        __name(this, "BaseRequestPolicy");
      }
      /**
       * The main method to implement that manipulates a request/response.
       */
      constructor(_nextPolicy, _options) {
        this._nextPolicy = _nextPolicy;
        this._options = _options;
      }
      /**
       * Get whether or not a log with the provided log level should be logged.
       * @param logLevel - The log level of the log that will be logged.
       * @returns Whether or not a log with the provided log level should be logged.
       */
      shouldLog(logLevel) {
        return this._options.shouldLog(logLevel);
      }
      /**
       * Attempt to log the provided message to the provided logger. If no logger was provided or if
       * the log level does not meat the logger's threshold, then nothing will be logged.
       * @param logLevel - The log level of this log.
       * @param message - The message of this log.
       */
      log(logLevel, message) {
        this._options.log(logLevel, message);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js
var SDK_VERSION2, SERVICE_VERSION, BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES, BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES, BLOCK_BLOB_MAX_BLOCKS, DEFAULT_BLOCK_BUFFER_SIZE_BYTES, DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES, DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS, REQUEST_TIMEOUT, StorageOAuthScopes, URLConstants, HTTPURLConnection, HeaderConstants, ETagNone, ETagAny, SIZE_1_MB, BATCH_MAX_REQUEST, BATCH_MAX_PAYLOAD_IN_BYTES, HTTP_LINE_ENDING, HTTP_VERSION_1_1, EncryptionAlgorithmAES25, DevelopmentConnectionString, StorageBlobLoggingAllowedHeaderNames, StorageBlobLoggingAllowedQueryParameters, BlobUsesCustomerSpecifiedEncryptionMsg, BlobDoesNotUseCustomerSpecifiedEncryption, PathStylePorts;
var init_constants2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js"() {
    "use strict";
    SDK_VERSION2 = "12.26.0";
    SERVICE_VERSION = "2025-01-05";
    BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024;
    BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4e3 * 1024 * 1024;
    BLOCK_BLOB_MAX_BLOCKS = 5e4;
    DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024;
    DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024;
    DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;
    REQUEST_TIMEOUT = 100 * 1e3;
    StorageOAuthScopes = "https://storage.azure.com/.default";
    URLConstants = {
      Parameters: {
        FORCE_BROWSER_NO_CACHE: "_",
        SIGNATURE: "sig",
        SNAPSHOT: "snapshot",
        VERSIONID: "versionid",
        TIMEOUT: "timeout"
      }
    };
    HTTPURLConnection = {
      HTTP_ACCEPTED: 202,
      HTTP_CONFLICT: 409,
      HTTP_NOT_FOUND: 404,
      HTTP_PRECON_FAILED: 412,
      HTTP_RANGE_NOT_SATISFIABLE: 416
    };
    HeaderConstants = {
      AUTHORIZATION: "Authorization",
      AUTHORIZATION_SCHEME: "Bearer",
      CONTENT_ENCODING: "Content-Encoding",
      CONTENT_ID: "Content-ID",
      CONTENT_LANGUAGE: "Content-Language",
      CONTENT_LENGTH: "Content-Length",
      CONTENT_MD5: "Content-Md5",
      CONTENT_TRANSFER_ENCODING: "Content-Transfer-Encoding",
      CONTENT_TYPE: "Content-Type",
      COOKIE: "Cookie",
      DATE: "date",
      IF_MATCH: "if-match",
      IF_MODIFIED_SINCE: "if-modified-since",
      IF_NONE_MATCH: "if-none-match",
      IF_UNMODIFIED_SINCE: "if-unmodified-since",
      PREFIX_FOR_STORAGE: "x-ms-",
      RANGE: "Range",
      USER_AGENT: "User-Agent",
      X_MS_CLIENT_REQUEST_ID: "x-ms-client-request-id",
      X_MS_COPY_SOURCE: "x-ms-copy-source",
      X_MS_DATE: "x-ms-date",
      X_MS_ERROR_CODE: "x-ms-error-code",
      X_MS_VERSION: "x-ms-version",
      X_MS_CopySourceErrorCode: "x-ms-copy-source-error-code"
    };
    ETagNone = "";
    ETagAny = "*";
    SIZE_1_MB = 1 * 1024 * 1024;
    BATCH_MAX_REQUEST = 256;
    BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;
    HTTP_LINE_ENDING = "\r\n";
    HTTP_VERSION_1_1 = "HTTP/1.1";
    EncryptionAlgorithmAES25 = "AES256";
    DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;
    StorageBlobLoggingAllowedHeaderNames = [
      "Access-Control-Allow-Origin",
      "Cache-Control",
      "Content-Length",
      "Content-Type",
      "Date",
      "Request-Id",
      "traceparent",
      "Transfer-Encoding",
      "User-Agent",
      "x-ms-client-request-id",
      "x-ms-date",
      "x-ms-error-code",
      "x-ms-request-id",
      "x-ms-return-client-request-id",
      "x-ms-version",
      "Accept-Ranges",
      "Content-Disposition",
      "Content-Encoding",
      "Content-Language",
      "Content-MD5",
      "Content-Range",
      "ETag",
      "Last-Modified",
      "Server",
      "Vary",
      "x-ms-content-crc64",
      "x-ms-copy-action",
      "x-ms-copy-completion-time",
      "x-ms-copy-id",
      "x-ms-copy-progress",
      "x-ms-copy-status",
      "x-ms-has-immutability-policy",
      "x-ms-has-legal-hold",
      "x-ms-lease-state",
      "x-ms-lease-status",
      "x-ms-range",
      "x-ms-request-server-encrypted",
      "x-ms-server-encrypted",
      "x-ms-snapshot",
      "x-ms-source-range",
      "If-Match",
      "If-Modified-Since",
      "If-None-Match",
      "If-Unmodified-Since",
      "x-ms-access-tier",
      "x-ms-access-tier-change-time",
      "x-ms-access-tier-inferred",
      "x-ms-account-kind",
      "x-ms-archive-status",
      "x-ms-blob-append-offset",
      "x-ms-blob-cache-control",
      "x-ms-blob-committed-block-count",
      "x-ms-blob-condition-appendpos",
      "x-ms-blob-condition-maxsize",
      "x-ms-blob-content-disposition",
      "x-ms-blob-content-encoding",
      "x-ms-blob-content-language",
      "x-ms-blob-content-length",
      "x-ms-blob-content-md5",
      "x-ms-blob-content-type",
      "x-ms-blob-public-access",
      "x-ms-blob-sequence-number",
      "x-ms-blob-type",
      "x-ms-copy-destination-snapshot",
      "x-ms-creation-time",
      "x-ms-default-encryption-scope",
      "x-ms-delete-snapshots",
      "x-ms-delete-type-permanent",
      "x-ms-deny-encryption-scope-override",
      "x-ms-encryption-algorithm",
      "x-ms-if-sequence-number-eq",
      "x-ms-if-sequence-number-le",
      "x-ms-if-sequence-number-lt",
      "x-ms-incremental-copy",
      "x-ms-lease-action",
      "x-ms-lease-break-period",
      "x-ms-lease-duration",
      "x-ms-lease-id",
      "x-ms-lease-time",
      "x-ms-page-write",
      "x-ms-proposed-lease-id",
      "x-ms-range-get-content-md5",
      "x-ms-rehydrate-priority",
      "x-ms-sequence-number-action",
      "x-ms-sku-name",
      "x-ms-source-content-md5",
      "x-ms-source-if-match",
      "x-ms-source-if-modified-since",
      "x-ms-source-if-none-match",
      "x-ms-source-if-unmodified-since",
      "x-ms-tag-count",
      "x-ms-encryption-key-sha256",
      "x-ms-copy-source-error-code",
      "x-ms-copy-source-status-code",
      "x-ms-if-tags",
      "x-ms-source-if-tags"
    ];
    StorageBlobLoggingAllowedQueryParameters = [
      "comp",
      "maxresults",
      "rscc",
      "rscd",
      "rsce",
      "rscl",
      "rsct",
      "se",
      "si",
      "sip",
      "sp",
      "spr",
      "sr",
      "srt",
      "ss",
      "st",
      "sv",
      "include",
      "marker",
      "prefix",
      "copyid",
      "restype",
      "blockid",
      "blocklisttype",
      "delimiter",
      "prevsnapshot",
      "ske",
      "skoid",
      "sks",
      "skt",
      "sktid",
      "skv",
      "snapshot"
    ];
    BlobUsesCustomerSpecifiedEncryptionMsg = "BlobUsesCustomerSpecifiedEncryption";
    BlobDoesNotUseCustomerSpecifiedEncryption = "BlobDoesNotUseCustomerSpecifiedEncryption";
    PathStylePorts = [
      "10000",
      "10001",
      "10002",
      "10003",
      "10004",
      "10100",
      "10101",
      "10102",
      "10103",
      "10104",
      "11000",
      "11001",
      "11002",
      "11003",
      "11004",
      "11100",
      "11101",
      "11102",
      "11103",
      "11104"
    ];
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js
function escapeURLPath(url2) {
  const urlParsed = new URL(url2);
  let path14 = urlParsed.pathname;
  path14 = path14 || "/";
  path14 = escape2(path14);
  urlParsed.pathname = path14;
  return urlParsed.toString();
}
function getProxyUriFromDevConnString(connectionString) {
  let proxyUri = "";
  if (connectionString.search("DevelopmentStorageProxyUri=") !== -1) {
    const matchCredentials = connectionString.split(";");
    for (const element of matchCredentials) {
      if (element.trim().startsWith("DevelopmentStorageProxyUri=")) {
        proxyUri = element.trim().match("DevelopmentStorageProxyUri=(.*)")[1];
      }
    }
  }
  return proxyUri;
}
function getValueInConnString(connectionString, argument) {
  const elements = connectionString.split(";");
  for (const element of elements) {
    if (element.trim().startsWith(argument)) {
      return element.trim().match(argument + "=(.*)")[1];
    }
  }
  return "";
}
function extractConnectionStringParts(connectionString) {
  let proxyUri = "";
  if (connectionString.startsWith("UseDevelopmentStorage=true")) {
    proxyUri = getProxyUriFromDevConnString(connectionString);
    connectionString = DevelopmentConnectionString;
  }
  let blobEndpoint = getValueInConnString(connectionString, "BlobEndpoint");
  blobEndpoint = blobEndpoint.endsWith("/") ? blobEndpoint.slice(0, -1) : blobEndpoint;
  if (connectionString.search("DefaultEndpointsProtocol=") !== -1 && connectionString.search("AccountKey=") !== -1) {
    let defaultEndpointsProtocol = "";
    let accountName = "";
    let accountKey = Buffer.from("accountKey", "base64");
    let endpointSuffix = "";
    accountName = getValueInConnString(connectionString, "AccountName");
    accountKey = Buffer.from(getValueInConnString(connectionString, "AccountKey"), "base64");
    if (!blobEndpoint) {
      defaultEndpointsProtocol = getValueInConnString(connectionString, "DefaultEndpointsProtocol");
      const protocol = defaultEndpointsProtocol.toLowerCase();
      if (protocol !== "https" && protocol !== "http") {
        throw new Error("Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'");
      }
      endpointSuffix = getValueInConnString(connectionString, "EndpointSuffix");
      if (!endpointSuffix) {
        throw new Error("Invalid EndpointSuffix in the provided Connection String");
      }
      blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
    }
    if (!accountName) {
      throw new Error("Invalid AccountName in the provided Connection String");
    } else if (accountKey.length === 0) {
      throw new Error("Invalid AccountKey in the provided Connection String");
    }
    return {
      kind: "AccountConnString",
      url: blobEndpoint,
      accountName,
      accountKey,
      proxyUri
    };
  } else {
    let accountSas = getValueInConnString(connectionString, "SharedAccessSignature");
    let accountName = getValueInConnString(connectionString, "AccountName");
    if (!accountName) {
      accountName = getAccountNameFromUrl(blobEndpoint);
    }
    if (!blobEndpoint) {
      throw new Error("Invalid BlobEndpoint in the provided SAS Connection String");
    } else if (!accountSas) {
      throw new Error("Invalid SharedAccessSignature in the provided SAS Connection String");
    }
    if (accountSas.startsWith("?")) {
      accountSas = accountSas.substring(1);
    }
    return { kind: "SASConnString", url: blobEndpoint, accountName, accountSas };
  }
}
function escape2(text) {
  return encodeURIComponent(text).replace(/%2F/g, "/").replace(/'/g, "%27").replace(/\+/g, "%20").replace(/%25/g, "%");
}
function appendToURLPath(url2, name2) {
  const urlParsed = new URL(url2);
  let path14 = urlParsed.pathname;
  path14 = path14 ? path14.endsWith("/") ? `${path14}${name2}` : `${path14}/${name2}` : name2;
  urlParsed.pathname = path14;
  return urlParsed.toString();
}
function setURLParameter(url2, name2, value) {
  const urlParsed = new URL(url2);
  const encodedName = encodeURIComponent(name2);
  const encodedValue = value ? encodeURIComponent(value) : void 0;
  const searchString = urlParsed.search === "" ? "?" : urlParsed.search;
  const searchPieces = [];
  for (const pair of searchString.slice(1).split("&")) {
    if (pair) {
      const [key] = pair.split("=", 2);
      if (key !== encodedName) {
        searchPieces.push(pair);
      }
    }
  }
  if (encodedValue) {
    searchPieces.push(`${encodedName}=${encodedValue}`);
  }
  urlParsed.search = searchPieces.length ? `?${searchPieces.join("&")}` : "";
  return urlParsed.toString();
}
function getURLParameter(url2, name2) {
  var _a4;
  const urlParsed = new URL(url2);
  return (_a4 = urlParsed.searchParams.get(name2)) !== null && _a4 !== void 0 ? _a4 : void 0;
}
function setURLHost(url2, host) {
  const urlParsed = new URL(url2);
  urlParsed.hostname = host;
  return urlParsed.toString();
}
function getURLPath(url2) {
  try {
    const urlParsed = new URL(url2);
    return urlParsed.pathname;
  } catch (e3) {
    return void 0;
  }
}
function getURLScheme(url2) {
  try {
    const urlParsed = new URL(url2);
    return urlParsed.protocol.endsWith(":") ? urlParsed.protocol.slice(0, -1) : urlParsed.protocol;
  } catch (e3) {
    return void 0;
  }
}
function getURLPathAndQuery(url2) {
  const urlParsed = new URL(url2);
  const pathString = urlParsed.pathname;
  if (!pathString) {
    throw new RangeError("Invalid url without valid path.");
  }
  let queryString = urlParsed.search || "";
  queryString = queryString.trim();
  if (queryString !== "") {
    queryString = queryString.startsWith("?") ? queryString : `?${queryString}`;
  }
  return `${pathString}${queryString}`;
}
function getURLQueries(url2) {
  let queryString = new URL(url2).search;
  if (!queryString) {
    return {};
  }
  queryString = queryString.trim();
  queryString = queryString.startsWith("?") ? queryString.substring(1) : queryString;
  let querySubStrings = queryString.split("&");
  querySubStrings = querySubStrings.filter((value) => {
    const indexOfEqual = value.indexOf("=");
    const lastIndexOfEqual = value.lastIndexOf("=");
    return indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1;
  });
  const queries = {};
  for (const querySubString of querySubStrings) {
    const splitResults = querySubString.split("=");
    const key = splitResults[0];
    const value = splitResults[1];
    queries[key] = value;
  }
  return queries;
}
function appendToURLQuery(url2, queryParts) {
  const urlParsed = new URL(url2);
  let query = urlParsed.search;
  if (query) {
    query += "&" + queryParts;
  } else {
    query = queryParts;
  }
  urlParsed.search = query;
  return urlParsed.toString();
}
function truncatedISO8061Date(date, withMilliseconds = true) {
  const dateString = date.toISOString();
  return withMilliseconds ? dateString.substring(0, dateString.length - 1) + "0000Z" : dateString.substring(0, dateString.length - 5) + "Z";
}
function base64encode(content) {
  return !isNode ? btoa(content) : Buffer.from(content).toString("base64");
}
function generateBlockID(blockIDPrefix, blockIndex) {
  const maxSourceStringLength = 48;
  const maxBlockIndexLength = 6;
  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;
  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {
    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);
  }
  const res = blockIDPrefix + padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, "0");
  return base64encode(res);
}
async function delay3(timeInMs, aborter, abortError) {
  return new Promise((resolve2, reject) => {
    let timeout;
    const abortHandler = /* @__PURE__ */ __name(() => {
      if (timeout !== void 0) {
        clearTimeout(timeout);
      }
      reject(abortError);
    }, "abortHandler");
    const resolveHandler = /* @__PURE__ */ __name(() => {
      if (aborter !== void 0) {
        aborter.removeEventListener("abort", abortHandler);
      }
      resolve2();
    }, "resolveHandler");
    timeout = setTimeout(resolveHandler, timeInMs);
    if (aborter !== void 0) {
      aborter.addEventListener("abort", abortHandler);
    }
  });
}
function padStart(currentString, targetLength, padString = " ") {
  if (String.prototype.padStart) {
    return currentString.padStart(targetLength, padString);
  }
  padString = padString || " ";
  if (currentString.length > targetLength) {
    return currentString;
  } else {
    targetLength = targetLength - currentString.length;
    if (targetLength > padString.length) {
      padString += padString.repeat(targetLength / padString.length);
    }
    return padString.slice(0, targetLength) + currentString;
  }
}
function iEqual(str1, str2) {
  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();
}
function getAccountNameFromUrl(url2) {
  const parsedUrl = new URL(url2);
  let accountName;
  try {
    if (parsedUrl.hostname.split(".")[1] === "blob") {
      accountName = parsedUrl.hostname.split(".")[0];
    } else if (isIpEndpointStyle(parsedUrl)) {
      accountName = parsedUrl.pathname.split("/")[1];
    } else {
      accountName = "";
    }
    return accountName;
  } catch (error) {
    throw new Error("Unable to extract accountName with provided information.");
  }
}
function isIpEndpointStyle(parsedUrl) {
  const host = parsedUrl.host;
  return /^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){3}(:[0-9]+)?$/.test(host) || Boolean(parsedUrl.port) && PathStylePorts.includes(parsedUrl.port);
}
function toBlobTagsString(tags2) {
  if (tags2 === void 0) {
    return void 0;
  }
  const tagPairs = [];
  for (const key in tags2) {
    if (Object.prototype.hasOwnProperty.call(tags2, key)) {
      const value = tags2[key];
      tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
    }
  }
  return tagPairs.join("&");
}
function toBlobTags(tags2) {
  if (tags2 === void 0) {
    return void 0;
  }
  const res = {
    blobTagSet: []
  };
  for (const key in tags2) {
    if (Object.prototype.hasOwnProperty.call(tags2, key)) {
      const value = tags2[key];
      res.blobTagSet.push({
        key,
        value
      });
    }
  }
  return res;
}
function toTags(tags2) {
  if (tags2 === void 0) {
    return void 0;
  }
  const res = {};
  for (const blobTag of tags2.blobTagSet) {
    res[blobTag.key] = blobTag.value;
  }
  return res;
}
function toQuerySerialization(textConfiguration) {
  if (textConfiguration === void 0) {
    return void 0;
  }
  switch (textConfiguration.kind) {
    case "csv":
      return {
        format: {
          type: "delimited",
          delimitedTextConfiguration: {
            columnSeparator: textConfiguration.columnSeparator || ",",
            fieldQuote: textConfiguration.fieldQuote || "",
            recordSeparator: textConfiguration.recordSeparator,
            escapeChar: textConfiguration.escapeCharacter || "",
            headersPresent: textConfiguration.hasHeaders || false
          }
        }
      };
    case "json":
      return {
        format: {
          type: "json",
          jsonTextConfiguration: {
            recordSeparator: textConfiguration.recordSeparator
          }
        }
      };
    case "arrow":
      return {
        format: {
          type: "arrow",
          arrowConfiguration: {
            schema: textConfiguration.schema
          }
        }
      };
    case "parquet":
      return {
        format: {
          type: "parquet"
        }
      };
    default:
      throw Error("Invalid BlobQueryTextConfiguration.");
  }
}
function parseObjectReplicationRecord(objectReplicationRecord) {
  if (!objectReplicationRecord) {
    return void 0;
  }
  if ("policy-id" in objectReplicationRecord) {
    return void 0;
  }
  const orProperties = [];
  for (const key in objectReplicationRecord) {
    const ids = key.split("_");
    const policyPrefix = "or-";
    if (ids[0].startsWith(policyPrefix)) {
      ids[0] = ids[0].substring(policyPrefix.length);
    }
    const rule = {
      ruleId: ids[1],
      replicationStatus: objectReplicationRecord[key]
    };
    const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);
    if (policyIndex > -1) {
      orProperties[policyIndex].rules.push(rule);
    } else {
      orProperties.push({
        policyId: ids[0],
        rules: [rule]
      });
    }
  }
  return orProperties;
}
function httpAuthorizationToString(httpAuthorization) {
  return httpAuthorization ? httpAuthorization.scheme + " " + httpAuthorization.value : void 0;
}
function BlobNameToString(name2) {
  if (name2.encoded) {
    return decodeURIComponent(name2.content);
  } else {
    return name2.content;
  }
}
function ConvertInternalResponseOfListBlobFlat(internalResponse) {
  return Object.assign(Object.assign({}, internalResponse), { segment: {
    blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {
      const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });
      return blobItem;
    })
  } });
}
function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {
  var _a4;
  return Object.assign(Object.assign({}, internalResponse), { segment: {
    blobPrefixes: (_a4 = internalResponse.segment.blobPrefixes) === null || _a4 === void 0 ? void 0 : _a4.map((blobPrefixInternal) => {
      const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });
      return blobPrefix;
    }),
    blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {
      const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });
      return blobItem;
    })
  } });
}
function* ExtractPageRangeInfoItems(getPageRangesSegment) {
  let pageRange = [];
  let clearRange = [];
  if (getPageRangesSegment.pageRange)
    pageRange = getPageRangesSegment.pageRange;
  if (getPageRangesSegment.clearRange)
    clearRange = getPageRangesSegment.clearRange;
  let pageRangeIndex = 0;
  let clearRangeIndex = 0;
  while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {
    if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {
      yield {
        start: pageRange[pageRangeIndex].start,
        end: pageRange[pageRangeIndex].end,
        isClear: false
      };
      ++pageRangeIndex;
    } else {
      yield {
        start: clearRange[clearRangeIndex].start,
        end: clearRange[clearRangeIndex].end,
        isClear: true
      };
      ++clearRangeIndex;
    }
  }
  for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {
    yield {
      start: pageRange[pageRangeIndex].start,
      end: pageRange[pageRangeIndex].end,
      isClear: false
    };
  }
  for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {
    yield {
      start: clearRange[clearRangeIndex].start,
      end: clearRange[clearRangeIndex].end,
      isClear: true
    };
  }
}
function EscapePath(blobName) {
  const split = blobName.split("/");
  for (let i3 = 0; i3 < split.length; i3++) {
    split[i3] = encodeURIComponent(split[i3]);
  }
  return split.join("/");
}
function assertResponse(response) {
  if (`_response` in response) {
    return response;
  }
  throw new TypeError(`Unexpected response object ${response}`);
}
var init_utils_common = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"() {
    "use strict";
    init_esm6();
    init_esm3();
    init_constants2();
    __name(escapeURLPath, "escapeURLPath");
    __name(getProxyUriFromDevConnString, "getProxyUriFromDevConnString");
    __name(getValueInConnString, "getValueInConnString");
    __name(extractConnectionStringParts, "extractConnectionStringParts");
    __name(escape2, "escape");
    __name(appendToURLPath, "appendToURLPath");
    __name(setURLParameter, "setURLParameter");
    __name(getURLParameter, "getURLParameter");
    __name(setURLHost, "setURLHost");
    __name(getURLPath, "getURLPath");
    __name(getURLScheme, "getURLScheme");
    __name(getURLPathAndQuery, "getURLPathAndQuery");
    __name(getURLQueries, "getURLQueries");
    __name(appendToURLQuery, "appendToURLQuery");
    __name(truncatedISO8061Date, "truncatedISO8061Date");
    __name(base64encode, "base64encode");
    __name(generateBlockID, "generateBlockID");
    __name(delay3, "delay");
    __name(padStart, "padStart");
    __name(iEqual, "iEqual");
    __name(getAccountNameFromUrl, "getAccountNameFromUrl");
    __name(isIpEndpointStyle, "isIpEndpointStyle");
    __name(toBlobTagsString, "toBlobTagsString");
    __name(toBlobTags, "toBlobTags");
    __name(toTags, "toTags");
    __name(toQuerySerialization, "toQuerySerialization");
    __name(parseObjectReplicationRecord, "parseObjectReplicationRecord");
    __name(httpAuthorizationToString, "httpAuthorizationToString");
    __name(BlobNameToString, "BlobNameToString");
    __name(ConvertInternalResponseOfListBlobFlat, "ConvertInternalResponseOfListBlobFlat");
    __name(ConvertInternalResponseOfListBlobHierarchy, "ConvertInternalResponseOfListBlobHierarchy");
    __name(ExtractPageRangeInfoItems, "ExtractPageRangeInfoItems");
    __name(EscapePath, "EscapePath");
    __name(assertResponse, "assertResponse");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js
var StorageRetryPolicyType, DEFAULT_RETRY_OPTIONS, RETRY_ABORT_ERROR, StorageRetryPolicy;
var init_StorageRetryPolicy = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js"() {
    "use strict";
    init_esm11();
    init_RequestPolicy();
    init_constants2();
    init_utils_common();
    init_log4();
    (function(StorageRetryPolicyType3) {
      StorageRetryPolicyType3[StorageRetryPolicyType3["EXPONENTIAL"] = 0] = "EXPONENTIAL";
      StorageRetryPolicyType3[StorageRetryPolicyType3["FIXED"] = 1] = "FIXED";
    })(StorageRetryPolicyType || (StorageRetryPolicyType = {}));
    DEFAULT_RETRY_OPTIONS = {
      maxRetryDelayInMs: 120 * 1e3,
      maxTries: 4,
      retryDelayInMs: 4 * 1e3,
      retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
      secondaryHost: "",
      tryTimeoutInMs: void 0
      // Use server side default timeout strategy
    };
    RETRY_ABORT_ERROR = new AbortError3("The operation was aborted.");
    StorageRetryPolicy = class extends BaseRequestPolicy {
      static {
        __name(this, "StorageRetryPolicy");
      }
      /**
       * Creates an instance of RetryPolicy.
       *
       * @param nextPolicy -
       * @param options -
       * @param retryOptions -
       */
      constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {
        super(nextPolicy, options);
        this.retryOptions = {
          retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,
          maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,
          tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,
          retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,
          maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,
          secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost
        };
      }
      /**
       * Sends request.
       *
       * @param request -
       */
      async sendRequest(request3) {
        return this.attemptSendRequest(request3, false, 1);
      }
      /**
       * Decide and perform next retry. Won't mutate request parameter.
       *
       * @param request -
       * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then
       *                                   the resource was not found. This may be due to replication delay. So, in this
       *                                   case, we'll never try the secondary again for this operation.
       * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes
       *                                   the attempt will be performed by this method call.
       */
      async attemptSendRequest(request3, secondaryHas404, attempt) {
        const newRequest = request3.clone();
        const isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request3.method === "GET" || request3.method === "HEAD" || request3.method === "OPTIONS") || attempt % 2 === 1;
        if (!isPrimaryRetry) {
          newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);
        }
        if (this.retryOptions.tryTimeoutInMs) {
          newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1e3).toString());
        }
        let response;
        try {
          logger4.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? "Primary" : "Secondary"}`);
          response = await this._nextPolicy.sendRequest(newRequest);
          if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {
            return response;
          }
          secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
        } catch (err) {
          logger4.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);
          if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {
            throw err;
          }
        }
        await this.delay(isPrimaryRetry, attempt, request3.abortSignal);
        return this.attemptSendRequest(request3, secondaryHas404, ++attempt);
      }
      /**
       * Decide whether to retry according to last HTTP response and retry counters.
       *
       * @param isPrimaryRetry -
       * @param attempt -
       * @param response -
       * @param err -
       */
      shouldRetry(isPrimaryRetry, attempt, response, err) {
        if (attempt >= this.retryOptions.maxTries) {
          logger4.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions.maxTries}, no further try.`);
          return false;
        }
        const retriableErrors2 = [
          "ETIMEDOUT",
          "ESOCKETTIMEDOUT",
          "ECONNREFUSED",
          "ECONNRESET",
          "ENOENT",
          "ENOTFOUND",
          "TIMEOUT",
          "EPIPE",
          "REQUEST_SEND_ERROR"
          // For default xhr based http client provided in ms-rest-js
        ];
        if (err) {
          for (const retriableError of retriableErrors2) {
            if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {
              logger4.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);
              return true;
            }
          }
        }
        if (response || err) {
          const statusCode = response ? response.status : err ? err.statusCode : 0;
          if (!isPrimaryRetry && statusCode === 404) {
            logger4.info(`RetryPolicy: Secondary access with 404, will retry.`);
            return true;
          }
          if (statusCode === 503 || statusCode === 500) {
            logger4.info(`RetryPolicy: Will retry for status code ${statusCode}.`);
            return true;
          }
        }
        if ((err === null || err === void 0 ? void 0 : err.code) === "PARSE_ERROR" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error "Error: Unclosed root tag`))) {
          logger4.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");
          return true;
        }
        return false;
      }
      /**
       * Delay a calculated time between retries.
       *
       * @param isPrimaryRetry -
       * @param attempt -
       * @param abortSignal -
       */
      async delay(isPrimaryRetry, attempt, abortSignal2) {
        let delayTimeInMs = 0;
        if (isPrimaryRetry) {
          switch (this.retryOptions.retryPolicyType) {
            case StorageRetryPolicyType.EXPONENTIAL:
              delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);
              break;
            case StorageRetryPolicyType.FIXED:
              delayTimeInMs = this.retryOptions.retryDelayInMs;
              break;
          }
        } else {
          delayTimeInMs = Math.random() * 1e3;
        }
        logger4.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);
        return delay3(delayTimeInMs, abortSignal2, RETRY_ABORT_ERROR);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js
var StorageRetryPolicyFactory;
var init_StorageRetryPolicyFactory = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js"() {
    "use strict";
    init_StorageRetryPolicy();
    StorageRetryPolicyFactory = class {
      static {
        __name(this, "StorageRetryPolicyFactory");
      }
      /**
       * Creates an instance of StorageRetryPolicyFactory.
       * @param retryOptions -
       */
      constructor(retryOptions) {
        this.retryOptions = retryOptions;
      }
      /**
       * Creates a StorageRetryPolicy object.
       *
       * @param nextPolicy -
       * @param options -
       */
      create(nextPolicy, options) {
        return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js
var CredentialPolicy;
var init_CredentialPolicy = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js"() {
    "use strict";
    init_RequestPolicy();
    CredentialPolicy = class extends BaseRequestPolicy {
      static {
        __name(this, "CredentialPolicy");
      }
      /**
       * Sends out request.
       *
       * @param request -
       */
      sendRequest(request3) {
        return this._nextPolicy.sendRequest(this.signRequest(request3));
      }
      /**
       * Child classes must implement this method with request signing. This method
       * will be executed in {@link sendRequest}.
       *
       * @param request -
       */
      signRequest(request3) {
        return request3;
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/SharedKeyComparator.js
function compareHeader(lhs, rhs) {
  if (isLessThan(lhs, rhs))
    return -1;
  return 1;
}
function isLessThan(lhs, rhs) {
  const tables = [table_lv0, table_lv2, table_lv4];
  let curr_level = 0;
  let i3 = 0;
  let j3 = 0;
  while (curr_level < tables.length) {
    if (curr_level === tables.length - 1 && i3 !== j3) {
      return i3 > j3;
    }
    const weight1 = i3 < lhs.length ? tables[curr_level][lhs[i3].charCodeAt(0)] : 1;
    const weight2 = j3 < rhs.length ? tables[curr_level][rhs[j3].charCodeAt(0)] : 1;
    if (weight1 === 1 && weight2 === 1) {
      i3 = 0;
      j3 = 0;
      ++curr_level;
    } else if (weight1 === weight2) {
      ++i3;
      ++j3;
    } else if (weight1 === 0) {
      ++i3;
    } else if (weight2 === 0) {
      ++j3;
    } else {
      return weight1 < weight2;
    }
  }
  return false;
}
var table_lv0, table_lv2, table_lv4;
var init_SharedKeyComparator = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/SharedKeyComparator.js"() {
    "use strict";
    table_lv0 = new Uint32Array([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1820,
      0,
      1823,
      1825,
      1827,
      1829,
      0,
      0,
      0,
      1837,
      2051,
      0,
      0,
      1843,
      0,
      3331,
      3354,
      3356,
      3358,
      3360,
      3362,
      3364,
      3366,
      3368,
      3370,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      3586,
      3593,
      3594,
      3610,
      3617,
      3619,
      3621,
      3628,
      3634,
      3637,
      3638,
      3656,
      3665,
      3696,
      3708,
      3710,
      3721,
      3722,
      3729,
      3737,
      3743,
      3746,
      3748,
      3750,
      3751,
      3753,
      0,
      0,
      0,
      1859,
      1860,
      1864,
      3586,
      3593,
      3594,
      3610,
      3617,
      3619,
      3621,
      3628,
      3634,
      3637,
      3638,
      3656,
      3665,
      3696,
      3708,
      3710,
      3721,
      3722,
      3729,
      3737,
      3743,
      3746,
      3748,
      3750,
      3751,
      3753,
      0,
      1868,
      0,
      1872,
      0
    ]);
    table_lv2 = new Uint32Array([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    table_lv4 = new Uint32Array([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      32786,
      0,
      0,
      0,
      0,
      0,
      33298,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    __name(compareHeader, "compareHeader");
    __name(isLessThan, "isLessThan");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js
var StorageSharedKeyCredentialPolicy;
var init_StorageSharedKeyCredentialPolicy = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js"() {
    "use strict";
    init_constants2();
    init_utils_common();
    init_CredentialPolicy();
    init_SharedKeyComparator();
    StorageSharedKeyCredentialPolicy = class extends CredentialPolicy {
      static {
        __name(this, "StorageSharedKeyCredentialPolicy");
      }
      /**
       * Creates an instance of StorageSharedKeyCredentialPolicy.
       * @param nextPolicy -
       * @param options -
       * @param factory -
       */
      constructor(nextPolicy, options, factory) {
        super(nextPolicy, options);
        this.factory = factory;
      }
      /**
       * Signs request.
       *
       * @param request -
       */
      signRequest(request3) {
        request3.headers.set(HeaderConstants.X_MS_DATE, (/* @__PURE__ */ new Date()).toUTCString());
        if (request3.body && (typeof request3.body === "string" || request3.body !== void 0) && request3.body.length > 0) {
          request3.headers.set(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request3.body));
        }
        const stringToSign = [
          request3.method.toUpperCase(),
          this.getHeaderValueToSign(request3, HeaderConstants.CONTENT_LANGUAGE),
          this.getHeaderValueToSign(request3, HeaderConstants.CONTENT_ENCODING),
          this.getHeaderValueToSign(request3, HeaderConstants.CONTENT_LENGTH),
          this.getHeaderValueToSign(request3, HeaderConstants.CONTENT_MD5),
          this.getHeaderValueToSign(request3, HeaderConstants.CONTENT_TYPE),
          this.getHeaderValueToSign(request3, HeaderConstants.DATE),
          this.getHeaderValueToSign(request3, HeaderConstants.IF_MODIFIED_SINCE),
          this.getHeaderValueToSign(request3, HeaderConstants.IF_MATCH),
          this.getHeaderValueToSign(request3, HeaderConstants.IF_NONE_MATCH),
          this.getHeaderValueToSign(request3, HeaderConstants.IF_UNMODIFIED_SINCE),
          this.getHeaderValueToSign(request3, HeaderConstants.RANGE)
        ].join("\n") + "\n" + this.getCanonicalizedHeadersString(request3) + this.getCanonicalizedResourceString(request3);
        const signature = this.factory.computeHMACSHA256(stringToSign);
        request3.headers.set(HeaderConstants.AUTHORIZATION, `SharedKey ${this.factory.accountName}:${signature}`);
        return request3;
      }
      /**
       * Retrieve header value according to shared key sign rules.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key
       *
       * @param request -
       * @param headerName -
       */
      getHeaderValueToSign(request3, headerName) {
        const value = request3.headers.get(headerName);
        if (!value) {
          return "";
        }
        if (headerName === HeaderConstants.CONTENT_LENGTH && value === "0") {
          return "";
        }
        return value;
      }
      /**
       * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:
       * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.
       * 2. Convert each HTTP header name to lowercase.
       * 3. Sort the headers lexicographically by header name, in ascending order.
       *    Each header may appear only once in the string.
       * 4. Replace any linear whitespace in the header value with a single space.
       * 5. Trim any whitespace around the colon in the header.
       * 6. Finally, append a new-line character to each canonicalized header in the resulting list.
       *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.
       *
       * @param request -
       */
      getCanonicalizedHeadersString(request3) {
        let headersArray = request3.headers.headersArray().filter((value) => {
          return value.name.toLowerCase().startsWith(HeaderConstants.PREFIX_FOR_STORAGE);
        });
        headersArray.sort((a3, b3) => {
          return compareHeader(a3.name.toLowerCase(), b3.name.toLowerCase());
        });
        headersArray = headersArray.filter((value, index2, array) => {
          if (index2 > 0 && value.name.toLowerCase() === array[index2 - 1].name.toLowerCase()) {
            return false;
          }
          return true;
        });
        let canonicalizedHeadersStringToSign = "";
        headersArray.forEach((header) => {
          canonicalizedHeadersStringToSign += `${header.name.toLowerCase().trimRight()}:${header.value.trimLeft()}
`;
        });
        return canonicalizedHeadersStringToSign;
      }
      /**
       * Retrieves the webResource canonicalized resource string.
       *
       * @param request -
       */
      getCanonicalizedResourceString(request3) {
        const path14 = getURLPath(request3.url) || "/";
        let canonicalizedResourceString = "";
        canonicalizedResourceString += `/${this.factory.accountName}${path14}`;
        const queries = getURLQueries(request3.url);
        const lowercaseQueries = {};
        if (queries) {
          const queryKeys = [];
          for (const key in queries) {
            if (Object.prototype.hasOwnProperty.call(queries, key)) {
              const lowercaseKey = key.toLowerCase();
              lowercaseQueries[lowercaseKey] = queries[key];
              queryKeys.push(lowercaseKey);
            }
          }
          queryKeys.sort();
          for (const key of queryKeys) {
            canonicalizedResourceString += `
${key}:${decodeURIComponent(lowercaseQueries[key])}`;
          }
        }
        return canonicalizedResourceString;
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js
var Credential;
var init_Credential = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js"() {
    "use strict";
    Credential = class {
      static {
        __name(this, "Credential");
      }
      /**
       * Creates a RequestPolicy object.
       *
       * @param _nextPolicy -
       * @param _options -
       */
      create(_nextPolicy, _options) {
        throw new Error("Method should be implemented in children classes.");
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js
import { createHmac } from "crypto";
var StorageSharedKeyCredential;
var init_StorageSharedKeyCredential = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js"() {
    "use strict";
    init_StorageSharedKeyCredentialPolicy();
    init_Credential();
    StorageSharedKeyCredential = class extends Credential {
      static {
        __name(this, "StorageSharedKeyCredential");
      }
      /**
       * Creates an instance of StorageSharedKeyCredential.
       * @param accountName -
       * @param accountKey -
       */
      constructor(accountName, accountKey) {
        super();
        this.accountName = accountName;
        this.accountKey = Buffer.from(accountKey, "base64");
      }
      /**
       * Creates a StorageSharedKeyCredentialPolicy object.
       *
       * @param nextPolicy -
       * @param options -
       */
      create(nextPolicy, options) {
        return new StorageSharedKeyCredentialPolicy(nextPolicy, options, this);
      }
      /**
       * Generates a hash signature for an HTTP request or for a SAS.
       *
       * @param stringToSign -
       */
      computeHMACSHA256(stringToSign) {
        return createHmac("sha256", this.accountKey).update(stringToSign, "utf8").digest("base64");
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js
var AnonymousCredentialPolicy;
var init_AnonymousCredentialPolicy = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js"() {
    "use strict";
    init_CredentialPolicy();
    AnonymousCredentialPolicy = class extends CredentialPolicy {
      static {
        __name(this, "AnonymousCredentialPolicy");
      }
      /**
       * Creates an instance of AnonymousCredentialPolicy.
       * @param nextPolicy -
       * @param options -
       */
      // The base class has a protected constructor. Adding a public one to enable constructing of this class.
      /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/
      constructor(nextPolicy, options) {
        super(nextPolicy, options);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js
var AnonymousCredential;
var init_AnonymousCredential = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js"() {
    "use strict";
    init_AnonymousCredentialPolicy();
    init_Credential();
    AnonymousCredential = class extends Credential {
      static {
        __name(this, "AnonymousCredential");
      }
      /**
       * Creates an {@link AnonymousCredentialPolicy} object.
       *
       * @param nextPolicy -
       * @param options -
       */
      create(nextPolicy, options) {
        return new AnonymousCredentialPolicy(nextPolicy, options);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js
function getCachedDefaultHttpClient2() {
  if (!_defaultHttpClient) {
    _defaultHttpClient = createDefaultHttpClient();
  }
  return _defaultHttpClient;
}
var _defaultHttpClient;
var init_cache = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js"() {
    "use strict";
    init_esm6();
    __name(getCachedDefaultHttpClient2, "getCachedDefaultHttpClient");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js
function storageBrowserPolicy() {
  return {
    name: storageBrowserPolicyName,
    async sendRequest(request3, next2) {
      if (isNode) {
        return next2(request3);
      }
      if (request3.method === "GET" || request3.method === "HEAD") {
        request3.url = setURLParameter(request3.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, (/* @__PURE__ */ new Date()).getTime().toString());
      }
      request3.headers.delete(HeaderConstants.COOKIE);
      request3.headers.delete(HeaderConstants.CONTENT_LENGTH);
      return next2(request3);
    }
  };
}
var storageBrowserPolicyName;
var init_StorageBrowserPolicyV2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js"() {
    "use strict";
    init_esm3();
    init_constants2();
    init_utils_common();
    storageBrowserPolicyName = "storageBrowserPolicy";
    __name(storageBrowserPolicy, "storageBrowserPolicy");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js
function storageRetryPolicy(options = {}) {
  var _a4, _b2, _c2, _d2, _e2, _f;
  const retryPolicyType = (_a4 = options.retryPolicyType) !== null && _a4 !== void 0 ? _a4 : DEFAULT_RETRY_OPTIONS2.retryPolicyType;
  const maxTries = (_b2 = options.maxTries) !== null && _b2 !== void 0 ? _b2 : DEFAULT_RETRY_OPTIONS2.maxTries;
  const retryDelayInMs = (_c2 = options.retryDelayInMs) !== null && _c2 !== void 0 ? _c2 : DEFAULT_RETRY_OPTIONS2.retryDelayInMs;
  const maxRetryDelayInMs = (_d2 = options.maxRetryDelayInMs) !== null && _d2 !== void 0 ? _d2 : DEFAULT_RETRY_OPTIONS2.maxRetryDelayInMs;
  const secondaryHost = (_e2 = options.secondaryHost) !== null && _e2 !== void 0 ? _e2 : DEFAULT_RETRY_OPTIONS2.secondaryHost;
  const tryTimeoutInMs = (_f = options.tryTimeoutInMs) !== null && _f !== void 0 ? _f : DEFAULT_RETRY_OPTIONS2.tryTimeoutInMs;
  function shouldRetry({ isPrimaryRetry, attempt, response, error }) {
    var _a5, _b3;
    if (attempt >= maxTries) {
      logger4.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${maxTries}, no further try.`);
      return false;
    }
    if (error) {
      for (const retriableError of retriableErrors) {
        if (error.name.toUpperCase().includes(retriableError) || error.message.toUpperCase().includes(retriableError) || error.code && error.code.toString().toUpperCase() === retriableError) {
          logger4.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);
          return true;
        }
      }
      if ((error === null || error === void 0 ? void 0 : error.code) === "PARSE_ERROR" && (error === null || error === void 0 ? void 0 : error.message.startsWith(`Error "Error: Unclosed root tag`))) {
        logger4.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");
        return true;
      }
    }
    if (response || error) {
      const statusCode = (_b3 = (_a5 = response === null || response === void 0 ? void 0 : response.status) !== null && _a5 !== void 0 ? _a5 : error === null || error === void 0 ? void 0 : error.statusCode) !== null && _b3 !== void 0 ? _b3 : 0;
      if (!isPrimaryRetry && statusCode === 404) {
        logger4.info(`RetryPolicy: Secondary access with 404, will retry.`);
        return true;
      }
      if (statusCode === 503 || statusCode === 500) {
        logger4.info(`RetryPolicy: Will retry for status code ${statusCode}.`);
        return true;
      }
    }
    return false;
  }
  __name(shouldRetry, "shouldRetry");
  function calculateDelay(isPrimaryRetry, attempt) {
    let delayTimeInMs = 0;
    if (isPrimaryRetry) {
      switch (retryPolicyType) {
        case StorageRetryPolicyType2.EXPONENTIAL:
          delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * retryDelayInMs, maxRetryDelayInMs);
          break;
        case StorageRetryPolicyType2.FIXED:
          delayTimeInMs = retryDelayInMs;
          break;
      }
    } else {
      delayTimeInMs = Math.random() * 1e3;
    }
    logger4.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);
    return delayTimeInMs;
  }
  __name(calculateDelay, "calculateDelay");
  return {
    name: storageRetryPolicyName,
    async sendRequest(request3, next2) {
      if (tryTimeoutInMs) {
        request3.url = setURLParameter(request3.url, URLConstants.Parameters.TIMEOUT, String(Math.floor(tryTimeoutInMs / 1e3)));
      }
      const primaryUrl = request3.url;
      const secondaryUrl = secondaryHost ? setURLHost(request3.url, secondaryHost) : void 0;
      let secondaryHas404 = false;
      let attempt = 1;
      let retryAgain = true;
      let response;
      let error;
      while (retryAgain) {
        const isPrimaryRetry = secondaryHas404 || !secondaryUrl || !["GET", "HEAD", "OPTIONS"].includes(request3.method) || attempt % 2 === 1;
        request3.url = isPrimaryRetry ? primaryUrl : secondaryUrl;
        response = void 0;
        error = void 0;
        try {
          logger4.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? "Primary" : "Secondary"}`);
          response = await next2(request3);
          secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
        } catch (e3) {
          if (isRestError(e3)) {
            logger4.error(`RetryPolicy: Caught error, message: ${e3.message}, code: ${e3.code}`);
            error = e3;
          } else {
            logger4.error(`RetryPolicy: Caught error, message: ${getErrorMessage(e3)}`);
            throw e3;
          }
        }
        retryAgain = shouldRetry({ isPrimaryRetry, attempt, response, error });
        if (retryAgain) {
          await delay3(calculateDelay(isPrimaryRetry, attempt), request3.abortSignal, RETRY_ABORT_ERROR2);
        }
        attempt++;
      }
      if (response) {
        return response;
      }
      throw error !== null && error !== void 0 ? error : new RestError("RetryPolicy failed without known error.");
    }
  };
}
var storageRetryPolicyName, StorageRetryPolicyType2, DEFAULT_RETRY_OPTIONS2, retriableErrors, RETRY_ABORT_ERROR2;
var init_StorageRetryPolicyV2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js"() {
    "use strict";
    init_esm11();
    init_esm6();
    init_esm3();
    init_constants2();
    init_utils_common();
    init_log4();
    storageRetryPolicyName = "storageRetryPolicy";
    (function(StorageRetryPolicyType3) {
      StorageRetryPolicyType3[StorageRetryPolicyType3["EXPONENTIAL"] = 0] = "EXPONENTIAL";
      StorageRetryPolicyType3[StorageRetryPolicyType3["FIXED"] = 1] = "FIXED";
    })(StorageRetryPolicyType2 || (StorageRetryPolicyType2 = {}));
    DEFAULT_RETRY_OPTIONS2 = {
      maxRetryDelayInMs: 120 * 1e3,
      maxTries: 4,
      retryDelayInMs: 4 * 1e3,
      retryPolicyType: StorageRetryPolicyType2.EXPONENTIAL,
      secondaryHost: "",
      tryTimeoutInMs: void 0
      // Use server side default timeout strategy
    };
    retriableErrors = [
      "ETIMEDOUT",
      "ESOCKETTIMEDOUT",
      "ECONNREFUSED",
      "ECONNRESET",
      "ENOENT",
      "ENOTFOUND",
      "TIMEOUT",
      "EPIPE",
      "REQUEST_SEND_ERROR"
    ];
    RETRY_ABORT_ERROR2 = new AbortError3("The operation was aborted.");
    __name(storageRetryPolicy, "storageRetryPolicy");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js
import { createHmac as createHmac2 } from "crypto";
function storageSharedKeyCredentialPolicy(options) {
  function signRequest(request3) {
    request3.headers.set(HeaderConstants.X_MS_DATE, (/* @__PURE__ */ new Date()).toUTCString());
    if (request3.body && (typeof request3.body === "string" || Buffer.isBuffer(request3.body)) && request3.body.length > 0) {
      request3.headers.set(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request3.body));
    }
    const stringToSign = [
      request3.method.toUpperCase(),
      getHeaderValueToSign(request3, HeaderConstants.CONTENT_LANGUAGE),
      getHeaderValueToSign(request3, HeaderConstants.CONTENT_ENCODING),
      getHeaderValueToSign(request3, HeaderConstants.CONTENT_LENGTH),
      getHeaderValueToSign(request3, HeaderConstants.CONTENT_MD5),
      getHeaderValueToSign(request3, HeaderConstants.CONTENT_TYPE),
      getHeaderValueToSign(request3, HeaderConstants.DATE),
      getHeaderValueToSign(request3, HeaderConstants.IF_MODIFIED_SINCE),
      getHeaderValueToSign(request3, HeaderConstants.IF_MATCH),
      getHeaderValueToSign(request3, HeaderConstants.IF_NONE_MATCH),
      getHeaderValueToSign(request3, HeaderConstants.IF_UNMODIFIED_SINCE),
      getHeaderValueToSign(request3, HeaderConstants.RANGE)
    ].join("\n") + "\n" + getCanonicalizedHeadersString(request3) + getCanonicalizedResourceString(request3);
    const signature = createHmac2("sha256", options.accountKey).update(stringToSign, "utf8").digest("base64");
    request3.headers.set(HeaderConstants.AUTHORIZATION, `SharedKey ${options.accountName}:${signature}`);
  }
  __name(signRequest, "signRequest");
  function getHeaderValueToSign(request3, headerName) {
    const value = request3.headers.get(headerName);
    if (!value) {
      return "";
    }
    if (headerName === HeaderConstants.CONTENT_LENGTH && value === "0") {
      return "";
    }
    return value;
  }
  __name(getHeaderValueToSign, "getHeaderValueToSign");
  function getCanonicalizedHeadersString(request3) {
    let headersArray = [];
    for (const [name2, value] of request3.headers) {
      if (name2.toLowerCase().startsWith(HeaderConstants.PREFIX_FOR_STORAGE)) {
        headersArray.push({ name: name2, value });
      }
    }
    headersArray.sort((a3, b3) => {
      return compareHeader(a3.name.toLowerCase(), b3.name.toLowerCase());
    });
    headersArray = headersArray.filter((value, index2, array) => {
      if (index2 > 0 && value.name.toLowerCase() === array[index2 - 1].name.toLowerCase()) {
        return false;
      }
      return true;
    });
    let canonicalizedHeadersStringToSign = "";
    headersArray.forEach((header) => {
      canonicalizedHeadersStringToSign += `${header.name.toLowerCase().trimRight()}:${header.value.trimLeft()}
`;
    });
    return canonicalizedHeadersStringToSign;
  }
  __name(getCanonicalizedHeadersString, "getCanonicalizedHeadersString");
  function getCanonicalizedResourceString(request3) {
    const path14 = getURLPath(request3.url) || "/";
    let canonicalizedResourceString = "";
    canonicalizedResourceString += `/${options.accountName}${path14}`;
    const queries = getURLQueries(request3.url);
    const lowercaseQueries = {};
    if (queries) {
      const queryKeys = [];
      for (const key in queries) {
        if (Object.prototype.hasOwnProperty.call(queries, key)) {
          const lowercaseKey = key.toLowerCase();
          lowercaseQueries[lowercaseKey] = queries[key];
          queryKeys.push(lowercaseKey);
        }
      }
      queryKeys.sort();
      for (const key of queryKeys) {
        canonicalizedResourceString += `
${key}:${decodeURIComponent(lowercaseQueries[key])}`;
      }
    }
    return canonicalizedResourceString;
  }
  __name(getCanonicalizedResourceString, "getCanonicalizedResourceString");
  return {
    name: storageSharedKeyCredentialPolicyName,
    async sendRequest(request3, next2) {
      signRequest(request3);
      return next2(request3);
    }
  };
}
var storageSharedKeyCredentialPolicyName;
var init_StorageSharedKeyCredentialPolicyV2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js"() {
    "use strict";
    init_constants2();
    init_utils_common();
    init_SharedKeyComparator();
    storageSharedKeyCredentialPolicyName = "storageSharedKeyCredentialPolicy";
    __name(storageSharedKeyCredentialPolicy, "storageSharedKeyCredentialPolicy");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js
var StorageBrowserPolicy;
var init_StorageBrowserPolicy = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js"() {
    "use strict";
    init_RequestPolicy();
    init_esm3();
    init_constants2();
    init_utils_common();
    StorageBrowserPolicy = class extends BaseRequestPolicy {
      static {
        __name(this, "StorageBrowserPolicy");
      }
      /**
       * Creates an instance of StorageBrowserPolicy.
       * @param nextPolicy -
       * @param options -
       */
      // The base class has a protected constructor. Adding a public one to enable constructing of this class.
      /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/
      constructor(nextPolicy, options) {
        super(nextPolicy, options);
      }
      /**
       * Sends out request.
       *
       * @param request -
       */
      async sendRequest(request3) {
        if (isNode) {
          return this._nextPolicy.sendRequest(request3);
        }
        if (request3.method.toUpperCase() === "GET" || request3.method.toUpperCase() === "HEAD") {
          request3.url = setURLParameter(request3.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, (/* @__PURE__ */ new Date()).getTime().toString());
        }
        request3.headers.remove(HeaderConstants.COOKIE);
        request3.headers.remove(HeaderConstants.CONTENT_LENGTH);
        return this._nextPolicy.sendRequest(request3);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js
var StorageBrowserPolicyFactory;
var init_StorageBrowserPolicyFactory = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js"() {
    "use strict";
    init_StorageBrowserPolicy();
    StorageBrowserPolicyFactory = class {
      static {
        __name(this, "StorageBrowserPolicyFactory");
      }
      /**
       * Creates a StorageBrowserPolicyFactory object.
       *
       * @param nextPolicy -
       * @param options -
       */
      create(nextPolicy, options) {
        return new StorageBrowserPolicy(nextPolicy, options);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.js
function storageCorrectContentLengthPolicy() {
  function correctContentLength(request3) {
    if (request3.body && (typeof request3.body === "string" || Buffer.isBuffer(request3.body)) && request3.body.length > 0) {
      request3.headers.set(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request3.body));
    }
  }
  __name(correctContentLength, "correctContentLength");
  return {
    name: storageCorrectContentLengthPolicyName,
    async sendRequest(request3, next2) {
      correctContentLength(request3);
      return next2(request3);
    }
  };
}
var storageCorrectContentLengthPolicyName;
var init_StorageCorrectContentLengthPolicy = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.js"() {
    "use strict";
    init_constants2();
    storageCorrectContentLengthPolicyName = "StorageCorrectContentLengthPolicy";
    __name(storageCorrectContentLengthPolicy, "storageCorrectContentLengthPolicy");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js
function isPipelineLike(pipeline) {
  if (!pipeline || typeof pipeline !== "object") {
    return false;
  }
  const castPipeline = pipeline;
  return Array.isArray(castPipeline.factories) && typeof castPipeline.options === "object" && typeof castPipeline.toServiceClientOptions === "function";
}
function newPipeline(credential, pipelineOptions = {}) {
  if (!credential) {
    credential = new AnonymousCredential();
  }
  const pipeline = new Pipeline([], pipelineOptions);
  pipeline._credential = credential;
  return pipeline;
}
function processDownlevelPipeline(pipeline) {
  const knownFactoryFunctions = [
    isAnonymousCredential,
    isStorageSharedKeyCredential,
    isCoreHttpBearerTokenFactory,
    isStorageBrowserPolicyFactory,
    isStorageRetryPolicyFactory,
    isStorageTelemetryPolicyFactory,
    isCoreHttpPolicyFactory
  ];
  if (pipeline.factories.length) {
    const novelFactories = pipeline.factories.filter((factory) => {
      return !knownFactoryFunctions.some((knownFactory) => knownFactory(factory));
    });
    if (novelFactories.length) {
      const hasInjector = novelFactories.some((factory) => isInjectorPolicyFactory(factory));
      return {
        wrappedPolicies: createRequestPolicyFactoryPolicy(novelFactories),
        afterRetry: hasInjector
      };
    }
  }
  return void 0;
}
function getCoreClientOptions(pipeline) {
  var _a4;
  const _b2 = pipeline.options, { httpClient: v1Client } = _b2, restOptions = __rest(_b2, ["httpClient"]);
  let httpClient = pipeline._coreHttpClient;
  if (!httpClient) {
    httpClient = v1Client ? convertHttpClient(v1Client) : getCachedDefaultHttpClient2();
    pipeline._coreHttpClient = httpClient;
  }
  let corePipeline = pipeline._corePipeline;
  if (!corePipeline) {
    const packageDetails = `azsdk-js-azure-storage-blob/${SDK_VERSION2}`;
    const userAgentPrefix = restOptions.userAgentOptions && restOptions.userAgentOptions.userAgentPrefix ? `${restOptions.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
    corePipeline = createClientPipeline(Object.assign(Object.assign({}, restOptions), { loggingOptions: {
      additionalAllowedHeaderNames: StorageBlobLoggingAllowedHeaderNames,
      additionalAllowedQueryParameters: StorageBlobLoggingAllowedQueryParameters,
      logger: logger4.info
    }, userAgentOptions: {
      userAgentPrefix
    }, serializationOptions: {
      stringifyXML,
      serializerOptions: {
        xml: {
          // Use customized XML char key of "#" so we can deserialize metadata
          // with "_" key
          xmlCharKey: "#"
        }
      }
    }, deserializationOptions: {
      parseXML,
      serializerOptions: {
        xml: {
          // Use customized XML char key of "#" so we can deserialize metadata
          // with "_" key
          xmlCharKey: "#"
        }
      }
    } }));
    corePipeline.removePolicy({ phase: "Retry" });
    corePipeline.removePolicy({ name: decompressResponsePolicyName });
    corePipeline.addPolicy(storageCorrectContentLengthPolicy());
    corePipeline.addPolicy(storageRetryPolicy(restOptions.retryOptions), { phase: "Retry" });
    corePipeline.addPolicy(storageBrowserPolicy());
    const downlevelResults = processDownlevelPipeline(pipeline);
    if (downlevelResults) {
      corePipeline.addPolicy(downlevelResults.wrappedPolicies, downlevelResults.afterRetry ? { afterPhase: "Retry" } : void 0);
    }
    const credential = getCredentialFromPipeline(pipeline);
    if (isTokenCredential(credential)) {
      corePipeline.addPolicy(bearerTokenAuthenticationPolicy({
        credential,
        scopes: (_a4 = restOptions.audience) !== null && _a4 !== void 0 ? _a4 : StorageOAuthScopes,
        challengeCallbacks: { authorizeRequestOnChallenge: authorizeRequestOnTenantChallenge }
      }), { phase: "Sign" });
    } else if (credential instanceof StorageSharedKeyCredential) {
      corePipeline.addPolicy(storageSharedKeyCredentialPolicy({
        accountName: credential.accountName,
        accountKey: credential.accountKey
      }), { phase: "Sign" });
    }
    pipeline._corePipeline = corePipeline;
  }
  return Object.assign(Object.assign({}, restOptions), { allowInsecureConnection: true, httpClient, pipeline: corePipeline });
}
function getCredentialFromPipeline(pipeline) {
  if (pipeline._credential) {
    return pipeline._credential;
  }
  let credential = new AnonymousCredential();
  for (const factory of pipeline.factories) {
    if (isTokenCredential(factory.credential)) {
      credential = factory.credential;
    } else if (isStorageSharedKeyCredential(factory)) {
      return factory;
    }
  }
  return credential;
}
function isStorageSharedKeyCredential(factory) {
  if (factory instanceof StorageSharedKeyCredential) {
    return true;
  }
  return factory.constructor.name === "StorageSharedKeyCredential";
}
function isAnonymousCredential(factory) {
  if (factory instanceof AnonymousCredential) {
    return true;
  }
  return factory.constructor.name === "AnonymousCredential";
}
function isCoreHttpBearerTokenFactory(factory) {
  return isTokenCredential(factory.credential);
}
function isStorageBrowserPolicyFactory(factory) {
  if (factory instanceof StorageBrowserPolicyFactory) {
    return true;
  }
  return factory.constructor.name === "StorageBrowserPolicyFactory";
}
function isStorageRetryPolicyFactory(factory) {
  if (factory instanceof StorageRetryPolicyFactory) {
    return true;
  }
  return factory.constructor.name === "StorageRetryPolicyFactory";
}
function isStorageTelemetryPolicyFactory(factory) {
  return factory.constructor.name === "TelemetryPolicyFactory";
}
function isInjectorPolicyFactory(factory) {
  return factory.constructor.name === "InjectorPolicyFactory";
}
function isCoreHttpPolicyFactory(factory) {
  const knownPolicies = [
    "GenerateClientRequestIdPolicy",
    "TracingPolicy",
    "LogPolicy",
    "ProxyPolicy",
    "DisableResponseDecompressionPolicy",
    "KeepAlivePolicy",
    "DeserializationPolicy"
  ];
  const mockHttpClient = {
    sendRequest: /* @__PURE__ */ __name(async (request3) => {
      return {
        request: request3,
        headers: request3.headers.clone(),
        status: 500
      };
    }, "sendRequest")
  };
  const mockRequestPolicyOptions2 = {
    log(_logLevel, _message) {
    },
    shouldLog(_logLevel) {
      return false;
    }
  };
  const policyInstance = factory.create(mockHttpClient, mockRequestPolicyOptions2);
  const policyName = policyInstance.constructor.name;
  return knownPolicies.some((knownPolicyName) => {
    return policyName.startsWith(knownPolicyName);
  });
}
var Pipeline;
var init_Pipeline = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js"() {
    "use strict";
    init_tslib_es6();
    init_esm9();
    init_esm6();
    init_esm8();
    init_esm10();
    init_esm7();
    init_log4();
    init_StorageRetryPolicyFactory();
    init_StorageSharedKeyCredential();
    init_AnonymousCredential();
    init_constants2();
    init_cache();
    init_StorageBrowserPolicyV2();
    init_StorageRetryPolicyV2();
    init_StorageSharedKeyCredentialPolicyV2();
    init_StorageBrowserPolicyFactory();
    init_StorageCorrectContentLengthPolicy();
    __name(isPipelineLike, "isPipelineLike");
    Pipeline = class {
      static {
        __name(this, "Pipeline");
      }
      /**
       * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
       *
       * @param factories -
       * @param options -
       */
      constructor(factories, options = {}) {
        this.factories = factories;
        this.options = options;
      }
      /**
       * Transfer Pipeline object to ServiceClientOptions object which is required by
       * ServiceClient constructor.
       *
       * @returns The ServiceClientOptions object from this Pipeline.
       */
      toServiceClientOptions() {
        return {
          httpClient: this.options.httpClient,
          requestPolicyFactories: this.factories
        };
      }
    };
    __name(newPipeline, "newPipeline");
    __name(processDownlevelPipeline, "processDownlevelPipeline");
    __name(getCoreClientOptions, "getCoreClientOptions");
    __name(getCredentialFromPipeline, "getCredentialFromPipeline");
    __name(isStorageSharedKeyCredential, "isStorageSharedKeyCredential");
    __name(isAnonymousCredential, "isAnonymousCredential");
    __name(isCoreHttpBearerTokenFactory, "isCoreHttpBearerTokenFactory");
    __name(isStorageBrowserPolicyFactory, "isStorageBrowserPolicyFactory");
    __name(isStorageRetryPolicyFactory, "isStorageRetryPolicyFactory");
    __name(isStorageTelemetryPolicyFactory, "isStorageTelemetryPolicyFactory");
    __name(isInjectorPolicyFactory, "isInjectorPolicyFactory");
    __name(isCoreHttpPolicyFactory, "isCoreHttpPolicyFactory");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js
var KnownEncryptionAlgorithmType, KnownBlobExpiryOptions, KnownStorageErrorCode;
var init_models = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js"() {
    "use strict";
    (function(KnownEncryptionAlgorithmType3) {
      KnownEncryptionAlgorithmType3["AES256"] = "AES256";
    })(KnownEncryptionAlgorithmType || (KnownEncryptionAlgorithmType = {}));
    (function(KnownBlobExpiryOptions2) {
      KnownBlobExpiryOptions2["NeverExpire"] = "NeverExpire";
      KnownBlobExpiryOptions2["RelativeToCreation"] = "RelativeToCreation";
      KnownBlobExpiryOptions2["RelativeToNow"] = "RelativeToNow";
      KnownBlobExpiryOptions2["Absolute"] = "Absolute";
    })(KnownBlobExpiryOptions || (KnownBlobExpiryOptions = {}));
    (function(KnownStorageErrorCode2) {
      KnownStorageErrorCode2["AccountAlreadyExists"] = "AccountAlreadyExists";
      KnownStorageErrorCode2["AccountBeingCreated"] = "AccountBeingCreated";
      KnownStorageErrorCode2["AccountIsDisabled"] = "AccountIsDisabled";
      KnownStorageErrorCode2["AuthenticationFailed"] = "AuthenticationFailed";
      KnownStorageErrorCode2["AuthorizationFailure"] = "AuthorizationFailure";
      KnownStorageErrorCode2["ConditionHeadersNotSupported"] = "ConditionHeadersNotSupported";
      KnownStorageErrorCode2["ConditionNotMet"] = "ConditionNotMet";
      KnownStorageErrorCode2["EmptyMetadataKey"] = "EmptyMetadataKey";
      KnownStorageErrorCode2["InsufficientAccountPermissions"] = "InsufficientAccountPermissions";
      KnownStorageErrorCode2["InternalError"] = "InternalError";
      KnownStorageErrorCode2["InvalidAuthenticationInfo"] = "InvalidAuthenticationInfo";
      KnownStorageErrorCode2["InvalidHeaderValue"] = "InvalidHeaderValue";
      KnownStorageErrorCode2["InvalidHttpVerb"] = "InvalidHttpVerb";
      KnownStorageErrorCode2["InvalidInput"] = "InvalidInput";
      KnownStorageErrorCode2["InvalidMd5"] = "InvalidMd5";
      KnownStorageErrorCode2["InvalidMetadata"] = "InvalidMetadata";
      KnownStorageErrorCode2["InvalidQueryParameterValue"] = "InvalidQueryParameterValue";
      KnownStorageErrorCode2["InvalidRange"] = "InvalidRange";
      KnownStorageErrorCode2["InvalidResourceName"] = "InvalidResourceName";
      KnownStorageErrorCode2["InvalidUri"] = "InvalidUri";
      KnownStorageErrorCode2["InvalidXmlDocument"] = "InvalidXmlDocument";
      KnownStorageErrorCode2["InvalidXmlNodeValue"] = "InvalidXmlNodeValue";
      KnownStorageErrorCode2["Md5Mismatch"] = "Md5Mismatch";
      KnownStorageErrorCode2["MetadataTooLarge"] = "MetadataTooLarge";
      KnownStorageErrorCode2["MissingContentLengthHeader"] = "MissingContentLengthHeader";
      KnownStorageErrorCode2["MissingRequiredQueryParameter"] = "MissingRequiredQueryParameter";
      KnownStorageErrorCode2["MissingRequiredHeader"] = "MissingRequiredHeader";
      KnownStorageErrorCode2["MissingRequiredXmlNode"] = "MissingRequiredXmlNode";
      KnownStorageErrorCode2["MultipleConditionHeadersNotSupported"] = "MultipleConditionHeadersNotSupported";
      KnownStorageErrorCode2["OperationTimedOut"] = "OperationTimedOut";
      KnownStorageErrorCode2["OutOfRangeInput"] = "OutOfRangeInput";
      KnownStorageErrorCode2["OutOfRangeQueryParameterValue"] = "OutOfRangeQueryParameterValue";
      KnownStorageErrorCode2["RequestBodyTooLarge"] = "RequestBodyTooLarge";
      KnownStorageErrorCode2["ResourceTypeMismatch"] = "ResourceTypeMismatch";
      KnownStorageErrorCode2["RequestUrlFailedToParse"] = "RequestUrlFailedToParse";
      KnownStorageErrorCode2["ResourceAlreadyExists"] = "ResourceAlreadyExists";
      KnownStorageErrorCode2["ResourceNotFound"] = "ResourceNotFound";
      KnownStorageErrorCode2["ServerBusy"] = "ServerBusy";
      KnownStorageErrorCode2["UnsupportedHeader"] = "UnsupportedHeader";
      KnownStorageErrorCode2["UnsupportedXmlNode"] = "UnsupportedXmlNode";
      KnownStorageErrorCode2["UnsupportedQueryParameter"] = "UnsupportedQueryParameter";
      KnownStorageErrorCode2["UnsupportedHttpVerb"] = "UnsupportedHttpVerb";
      KnownStorageErrorCode2["AppendPositionConditionNotMet"] = "AppendPositionConditionNotMet";
      KnownStorageErrorCode2["BlobAlreadyExists"] = "BlobAlreadyExists";
      KnownStorageErrorCode2["BlobImmutableDueToPolicy"] = "BlobImmutableDueToPolicy";
      KnownStorageErrorCode2["BlobNotFound"] = "BlobNotFound";
      KnownStorageErrorCode2["BlobOverwritten"] = "BlobOverwritten";
      KnownStorageErrorCode2["BlobTierInadequateForContentLength"] = "BlobTierInadequateForContentLength";
      KnownStorageErrorCode2["BlobUsesCustomerSpecifiedEncryption"] = "BlobUsesCustomerSpecifiedEncryption";
      KnownStorageErrorCode2["BlockCountExceedsLimit"] = "BlockCountExceedsLimit";
      KnownStorageErrorCode2["BlockListTooLong"] = "BlockListTooLong";
      KnownStorageErrorCode2["CannotChangeToLowerTier"] = "CannotChangeToLowerTier";
      KnownStorageErrorCode2["CannotVerifyCopySource"] = "CannotVerifyCopySource";
      KnownStorageErrorCode2["ContainerAlreadyExists"] = "ContainerAlreadyExists";
      KnownStorageErrorCode2["ContainerBeingDeleted"] = "ContainerBeingDeleted";
      KnownStorageErrorCode2["ContainerDisabled"] = "ContainerDisabled";
      KnownStorageErrorCode2["ContainerNotFound"] = "ContainerNotFound";
      KnownStorageErrorCode2["ContentLengthLargerThanTierLimit"] = "ContentLengthLargerThanTierLimit";
      KnownStorageErrorCode2["CopyAcrossAccountsNotSupported"] = "CopyAcrossAccountsNotSupported";
      KnownStorageErrorCode2["CopyIdMismatch"] = "CopyIdMismatch";
      KnownStorageErrorCode2["FeatureVersionMismatch"] = "FeatureVersionMismatch";
      KnownStorageErrorCode2["IncrementalCopyBlobMismatch"] = "IncrementalCopyBlobMismatch";
      KnownStorageErrorCode2["IncrementalCopyOfEarlierVersionSnapshotNotAllowed"] = "IncrementalCopyOfEarlierVersionSnapshotNotAllowed";
      KnownStorageErrorCode2["IncrementalCopySourceMustBeSnapshot"] = "IncrementalCopySourceMustBeSnapshot";
      KnownStorageErrorCode2["InfiniteLeaseDurationRequired"] = "InfiniteLeaseDurationRequired";
      KnownStorageErrorCode2["InvalidBlobOrBlock"] = "InvalidBlobOrBlock";
      KnownStorageErrorCode2["InvalidBlobTier"] = "InvalidBlobTier";
      KnownStorageErrorCode2["InvalidBlobType"] = "InvalidBlobType";
      KnownStorageErrorCode2["InvalidBlockId"] = "InvalidBlockId";
      KnownStorageErrorCode2["InvalidBlockList"] = "InvalidBlockList";
      KnownStorageErrorCode2["InvalidOperation"] = "InvalidOperation";
      KnownStorageErrorCode2["InvalidPageRange"] = "InvalidPageRange";
      KnownStorageErrorCode2["InvalidSourceBlobType"] = "InvalidSourceBlobType";
      KnownStorageErrorCode2["InvalidSourceBlobUrl"] = "InvalidSourceBlobUrl";
      KnownStorageErrorCode2["InvalidVersionForPageBlobOperation"] = "InvalidVersionForPageBlobOperation";
      KnownStorageErrorCode2["LeaseAlreadyPresent"] = "LeaseAlreadyPresent";
      KnownStorageErrorCode2["LeaseAlreadyBroken"] = "LeaseAlreadyBroken";
      KnownStorageErrorCode2["LeaseIdMismatchWithBlobOperation"] = "LeaseIdMismatchWithBlobOperation";
      KnownStorageErrorCode2["LeaseIdMismatchWithContainerOperation"] = "LeaseIdMismatchWithContainerOperation";
      KnownStorageErrorCode2["LeaseIdMismatchWithLeaseOperation"] = "LeaseIdMismatchWithLeaseOperation";
      KnownStorageErrorCode2["LeaseIdMissing"] = "LeaseIdMissing";
      KnownStorageErrorCode2["LeaseIsBreakingAndCannotBeAcquired"] = "LeaseIsBreakingAndCannotBeAcquired";
      KnownStorageErrorCode2["LeaseIsBreakingAndCannotBeChanged"] = "LeaseIsBreakingAndCannotBeChanged";
      KnownStorageErrorCode2["LeaseIsBrokenAndCannotBeRenewed"] = "LeaseIsBrokenAndCannotBeRenewed";
      KnownStorageErrorCode2["LeaseLost"] = "LeaseLost";
      KnownStorageErrorCode2["LeaseNotPresentWithBlobOperation"] = "LeaseNotPresentWithBlobOperation";
      KnownStorageErrorCode2["LeaseNotPresentWithContainerOperation"] = "LeaseNotPresentWithContainerOperation";
      KnownStorageErrorCode2["LeaseNotPresentWithLeaseOperation"] = "LeaseNotPresentWithLeaseOperation";
      KnownStorageErrorCode2["MaxBlobSizeConditionNotMet"] = "MaxBlobSizeConditionNotMet";
      KnownStorageErrorCode2["NoAuthenticationInformation"] = "NoAuthenticationInformation";
      KnownStorageErrorCode2["NoPendingCopyOperation"] = "NoPendingCopyOperation";
      KnownStorageErrorCode2["OperationNotAllowedOnIncrementalCopyBlob"] = "OperationNotAllowedOnIncrementalCopyBlob";
      KnownStorageErrorCode2["PendingCopyOperation"] = "PendingCopyOperation";
      KnownStorageErrorCode2["PreviousSnapshotCannotBeNewer"] = "PreviousSnapshotCannotBeNewer";
      KnownStorageErrorCode2["PreviousSnapshotNotFound"] = "PreviousSnapshotNotFound";
      KnownStorageErrorCode2["PreviousSnapshotOperationNotSupported"] = "PreviousSnapshotOperationNotSupported";
      KnownStorageErrorCode2["SequenceNumberConditionNotMet"] = "SequenceNumberConditionNotMet";
      KnownStorageErrorCode2["SequenceNumberIncrementTooLarge"] = "SequenceNumberIncrementTooLarge";
      KnownStorageErrorCode2["SnapshotCountExceeded"] = "SnapshotCountExceeded";
      KnownStorageErrorCode2["SnapshotOperationRateExceeded"] = "SnapshotOperationRateExceeded";
      KnownStorageErrorCode2["SnapshotsPresent"] = "SnapshotsPresent";
      KnownStorageErrorCode2["SourceConditionNotMet"] = "SourceConditionNotMet";
      KnownStorageErrorCode2["SystemInUse"] = "SystemInUse";
      KnownStorageErrorCode2["TargetConditionNotMet"] = "TargetConditionNotMet";
      KnownStorageErrorCode2["UnauthorizedBlobOverwrite"] = "UnauthorizedBlobOverwrite";
      KnownStorageErrorCode2["BlobBeingRehydrated"] = "BlobBeingRehydrated";
      KnownStorageErrorCode2["BlobArchived"] = "BlobArchived";
      KnownStorageErrorCode2["BlobNotArchived"] = "BlobNotArchived";
      KnownStorageErrorCode2["AuthorizationSourceIPMismatch"] = "AuthorizationSourceIPMismatch";
      KnownStorageErrorCode2["AuthorizationProtocolMismatch"] = "AuthorizationProtocolMismatch";
      KnownStorageErrorCode2["AuthorizationPermissionMismatch"] = "AuthorizationPermissionMismatch";
      KnownStorageErrorCode2["AuthorizationServiceMismatch"] = "AuthorizationServiceMismatch";
      KnownStorageErrorCode2["AuthorizationResourceTypeMismatch"] = "AuthorizationResourceTypeMismatch";
      KnownStorageErrorCode2["BlobAccessTierNotSupportedForAccountType"] = "BlobAccessTierNotSupportedForAccountType";
    })(KnownStorageErrorCode || (KnownStorageErrorCode = {}));
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js
var mappers_exports = {};
__export(mappers_exports, {
  AccessPolicy: () => AccessPolicy,
  AppendBlobAppendBlockExceptionHeaders: () => AppendBlobAppendBlockExceptionHeaders,
  AppendBlobAppendBlockFromUrlExceptionHeaders: () => AppendBlobAppendBlockFromUrlExceptionHeaders,
  AppendBlobAppendBlockFromUrlHeaders: () => AppendBlobAppendBlockFromUrlHeaders,
  AppendBlobAppendBlockHeaders: () => AppendBlobAppendBlockHeaders,
  AppendBlobCreateExceptionHeaders: () => AppendBlobCreateExceptionHeaders,
  AppendBlobCreateHeaders: () => AppendBlobCreateHeaders,
  AppendBlobSealExceptionHeaders: () => AppendBlobSealExceptionHeaders,
  AppendBlobSealHeaders: () => AppendBlobSealHeaders,
  ArrowConfiguration: () => ArrowConfiguration,
  ArrowField: () => ArrowField,
  BlobAbortCopyFromURLExceptionHeaders: () => BlobAbortCopyFromURLExceptionHeaders,
  BlobAbortCopyFromURLHeaders: () => BlobAbortCopyFromURLHeaders,
  BlobAcquireLeaseExceptionHeaders: () => BlobAcquireLeaseExceptionHeaders,
  BlobAcquireLeaseHeaders: () => BlobAcquireLeaseHeaders,
  BlobBreakLeaseExceptionHeaders: () => BlobBreakLeaseExceptionHeaders,
  BlobBreakLeaseHeaders: () => BlobBreakLeaseHeaders,
  BlobChangeLeaseExceptionHeaders: () => BlobChangeLeaseExceptionHeaders,
  BlobChangeLeaseHeaders: () => BlobChangeLeaseHeaders,
  BlobCopyFromURLExceptionHeaders: () => BlobCopyFromURLExceptionHeaders,
  BlobCopyFromURLHeaders: () => BlobCopyFromURLHeaders,
  BlobCreateSnapshotExceptionHeaders: () => BlobCreateSnapshotExceptionHeaders,
  BlobCreateSnapshotHeaders: () => BlobCreateSnapshotHeaders,
  BlobDeleteExceptionHeaders: () => BlobDeleteExceptionHeaders,
  BlobDeleteHeaders: () => BlobDeleteHeaders,
  BlobDeleteImmutabilityPolicyExceptionHeaders: () => BlobDeleteImmutabilityPolicyExceptionHeaders,
  BlobDeleteImmutabilityPolicyHeaders: () => BlobDeleteImmutabilityPolicyHeaders,
  BlobDownloadExceptionHeaders: () => BlobDownloadExceptionHeaders,
  BlobDownloadHeaders: () => BlobDownloadHeaders,
  BlobFlatListSegment: () => BlobFlatListSegment,
  BlobGetAccountInfoExceptionHeaders: () => BlobGetAccountInfoExceptionHeaders,
  BlobGetAccountInfoHeaders: () => BlobGetAccountInfoHeaders,
  BlobGetPropertiesExceptionHeaders: () => BlobGetPropertiesExceptionHeaders,
  BlobGetPropertiesHeaders: () => BlobGetPropertiesHeaders,
  BlobGetTagsExceptionHeaders: () => BlobGetTagsExceptionHeaders,
  BlobGetTagsHeaders: () => BlobGetTagsHeaders,
  BlobHierarchyListSegment: () => BlobHierarchyListSegment,
  BlobItemInternal: () => BlobItemInternal,
  BlobName: () => BlobName,
  BlobPrefix: () => BlobPrefix,
  BlobPropertiesInternal: () => BlobPropertiesInternal,
  BlobQueryExceptionHeaders: () => BlobQueryExceptionHeaders,
  BlobQueryHeaders: () => BlobQueryHeaders,
  BlobReleaseLeaseExceptionHeaders: () => BlobReleaseLeaseExceptionHeaders,
  BlobReleaseLeaseHeaders: () => BlobReleaseLeaseHeaders,
  BlobRenewLeaseExceptionHeaders: () => BlobRenewLeaseExceptionHeaders,
  BlobRenewLeaseHeaders: () => BlobRenewLeaseHeaders,
  BlobServiceProperties: () => BlobServiceProperties,
  BlobServiceStatistics: () => BlobServiceStatistics,
  BlobSetExpiryExceptionHeaders: () => BlobSetExpiryExceptionHeaders,
  BlobSetExpiryHeaders: () => BlobSetExpiryHeaders,
  BlobSetHttpHeadersExceptionHeaders: () => BlobSetHttpHeadersExceptionHeaders,
  BlobSetHttpHeadersHeaders: () => BlobSetHttpHeadersHeaders,
  BlobSetImmutabilityPolicyExceptionHeaders: () => BlobSetImmutabilityPolicyExceptionHeaders,
  BlobSetImmutabilityPolicyHeaders: () => BlobSetImmutabilityPolicyHeaders,
  BlobSetLegalHoldExceptionHeaders: () => BlobSetLegalHoldExceptionHeaders,
  BlobSetLegalHoldHeaders: () => BlobSetLegalHoldHeaders,
  BlobSetMetadataExceptionHeaders: () => BlobSetMetadataExceptionHeaders,
  BlobSetMetadataHeaders: () => BlobSetMetadataHeaders,
  BlobSetTagsExceptionHeaders: () => BlobSetTagsExceptionHeaders,
  BlobSetTagsHeaders: () => BlobSetTagsHeaders,
  BlobSetTierExceptionHeaders: () => BlobSetTierExceptionHeaders,
  BlobSetTierHeaders: () => BlobSetTierHeaders,
  BlobStartCopyFromURLExceptionHeaders: () => BlobStartCopyFromURLExceptionHeaders,
  BlobStartCopyFromURLHeaders: () => BlobStartCopyFromURLHeaders,
  BlobTag: () => BlobTag,
  BlobTags: () => BlobTags,
  BlobUndeleteExceptionHeaders: () => BlobUndeleteExceptionHeaders,
  BlobUndeleteHeaders: () => BlobUndeleteHeaders,
  Block: () => Block,
  BlockBlobCommitBlockListExceptionHeaders: () => BlockBlobCommitBlockListExceptionHeaders,
  BlockBlobCommitBlockListHeaders: () => BlockBlobCommitBlockListHeaders,
  BlockBlobGetBlockListExceptionHeaders: () => BlockBlobGetBlockListExceptionHeaders,
  BlockBlobGetBlockListHeaders: () => BlockBlobGetBlockListHeaders,
  BlockBlobPutBlobFromUrlExceptionHeaders: () => BlockBlobPutBlobFromUrlExceptionHeaders,
  BlockBlobPutBlobFromUrlHeaders: () => BlockBlobPutBlobFromUrlHeaders,
  BlockBlobStageBlockExceptionHeaders: () => BlockBlobStageBlockExceptionHeaders,
  BlockBlobStageBlockFromURLExceptionHeaders: () => BlockBlobStageBlockFromURLExceptionHeaders,
  BlockBlobStageBlockFromURLHeaders: () => BlockBlobStageBlockFromURLHeaders,
  BlockBlobStageBlockHeaders: () => BlockBlobStageBlockHeaders,
  BlockBlobUploadExceptionHeaders: () => BlockBlobUploadExceptionHeaders,
  BlockBlobUploadHeaders: () => BlockBlobUploadHeaders,
  BlockList: () => BlockList,
  BlockLookupList: () => BlockLookupList,
  ClearRange: () => ClearRange,
  ContainerAcquireLeaseExceptionHeaders: () => ContainerAcquireLeaseExceptionHeaders,
  ContainerAcquireLeaseHeaders: () => ContainerAcquireLeaseHeaders,
  ContainerBreakLeaseExceptionHeaders: () => ContainerBreakLeaseExceptionHeaders,
  ContainerBreakLeaseHeaders: () => ContainerBreakLeaseHeaders,
  ContainerChangeLeaseExceptionHeaders: () => ContainerChangeLeaseExceptionHeaders,
  ContainerChangeLeaseHeaders: () => ContainerChangeLeaseHeaders,
  ContainerCreateExceptionHeaders: () => ContainerCreateExceptionHeaders,
  ContainerCreateHeaders: () => ContainerCreateHeaders,
  ContainerDeleteExceptionHeaders: () => ContainerDeleteExceptionHeaders,
  ContainerDeleteHeaders: () => ContainerDeleteHeaders,
  ContainerFilterBlobsExceptionHeaders: () => ContainerFilterBlobsExceptionHeaders,
  ContainerFilterBlobsHeaders: () => ContainerFilterBlobsHeaders,
  ContainerGetAccessPolicyExceptionHeaders: () => ContainerGetAccessPolicyExceptionHeaders,
  ContainerGetAccessPolicyHeaders: () => ContainerGetAccessPolicyHeaders,
  ContainerGetAccountInfoExceptionHeaders: () => ContainerGetAccountInfoExceptionHeaders,
  ContainerGetAccountInfoHeaders: () => ContainerGetAccountInfoHeaders,
  ContainerGetPropertiesExceptionHeaders: () => ContainerGetPropertiesExceptionHeaders,
  ContainerGetPropertiesHeaders: () => ContainerGetPropertiesHeaders,
  ContainerItem: () => ContainerItem,
  ContainerListBlobFlatSegmentExceptionHeaders: () => ContainerListBlobFlatSegmentExceptionHeaders,
  ContainerListBlobFlatSegmentHeaders: () => ContainerListBlobFlatSegmentHeaders,
  ContainerListBlobHierarchySegmentExceptionHeaders: () => ContainerListBlobHierarchySegmentExceptionHeaders,
  ContainerListBlobHierarchySegmentHeaders: () => ContainerListBlobHierarchySegmentHeaders,
  ContainerProperties: () => ContainerProperties,
  ContainerReleaseLeaseExceptionHeaders: () => ContainerReleaseLeaseExceptionHeaders,
  ContainerReleaseLeaseHeaders: () => ContainerReleaseLeaseHeaders,
  ContainerRenameExceptionHeaders: () => ContainerRenameExceptionHeaders,
  ContainerRenameHeaders: () => ContainerRenameHeaders,
  ContainerRenewLeaseExceptionHeaders: () => ContainerRenewLeaseExceptionHeaders,
  ContainerRenewLeaseHeaders: () => ContainerRenewLeaseHeaders,
  ContainerRestoreExceptionHeaders: () => ContainerRestoreExceptionHeaders,
  ContainerRestoreHeaders: () => ContainerRestoreHeaders,
  ContainerSetAccessPolicyExceptionHeaders: () => ContainerSetAccessPolicyExceptionHeaders,
  ContainerSetAccessPolicyHeaders: () => ContainerSetAccessPolicyHeaders,
  ContainerSetMetadataExceptionHeaders: () => ContainerSetMetadataExceptionHeaders,
  ContainerSetMetadataHeaders: () => ContainerSetMetadataHeaders,
  ContainerSubmitBatchExceptionHeaders: () => ContainerSubmitBatchExceptionHeaders,
  ContainerSubmitBatchHeaders: () => ContainerSubmitBatchHeaders,
  CorsRule: () => CorsRule,
  DelimitedTextConfiguration: () => DelimitedTextConfiguration,
  FilterBlobItem: () => FilterBlobItem,
  FilterBlobSegment: () => FilterBlobSegment,
  GeoReplication: () => GeoReplication,
  JsonTextConfiguration: () => JsonTextConfiguration,
  KeyInfo: () => KeyInfo,
  ListBlobsFlatSegmentResponse: () => ListBlobsFlatSegmentResponse,
  ListBlobsHierarchySegmentResponse: () => ListBlobsHierarchySegmentResponse,
  ListContainersSegmentResponse: () => ListContainersSegmentResponse,
  Logging: () => Logging,
  Metrics: () => Metrics,
  PageBlobClearPagesExceptionHeaders: () => PageBlobClearPagesExceptionHeaders,
  PageBlobClearPagesHeaders: () => PageBlobClearPagesHeaders,
  PageBlobCopyIncrementalExceptionHeaders: () => PageBlobCopyIncrementalExceptionHeaders,
  PageBlobCopyIncrementalHeaders: () => PageBlobCopyIncrementalHeaders,
  PageBlobCreateExceptionHeaders: () => PageBlobCreateExceptionHeaders,
  PageBlobCreateHeaders: () => PageBlobCreateHeaders,
  PageBlobGetPageRangesDiffExceptionHeaders: () => PageBlobGetPageRangesDiffExceptionHeaders,
  PageBlobGetPageRangesDiffHeaders: () => PageBlobGetPageRangesDiffHeaders,
  PageBlobGetPageRangesExceptionHeaders: () => PageBlobGetPageRangesExceptionHeaders,
  PageBlobGetPageRangesHeaders: () => PageBlobGetPageRangesHeaders,
  PageBlobResizeExceptionHeaders: () => PageBlobResizeExceptionHeaders,
  PageBlobResizeHeaders: () => PageBlobResizeHeaders,
  PageBlobUpdateSequenceNumberExceptionHeaders: () => PageBlobUpdateSequenceNumberExceptionHeaders,
  PageBlobUpdateSequenceNumberHeaders: () => PageBlobUpdateSequenceNumberHeaders,
  PageBlobUploadPagesExceptionHeaders: () => PageBlobUploadPagesExceptionHeaders,
  PageBlobUploadPagesFromURLExceptionHeaders: () => PageBlobUploadPagesFromURLExceptionHeaders,
  PageBlobUploadPagesFromURLHeaders: () => PageBlobUploadPagesFromURLHeaders,
  PageBlobUploadPagesHeaders: () => PageBlobUploadPagesHeaders,
  PageList: () => PageList,
  PageRange: () => PageRange,
  QueryFormat: () => QueryFormat,
  QueryRequest: () => QueryRequest,
  QuerySerialization: () => QuerySerialization,
  RetentionPolicy: () => RetentionPolicy,
  ServiceFilterBlobsExceptionHeaders: () => ServiceFilterBlobsExceptionHeaders,
  ServiceFilterBlobsHeaders: () => ServiceFilterBlobsHeaders,
  ServiceGetAccountInfoExceptionHeaders: () => ServiceGetAccountInfoExceptionHeaders,
  ServiceGetAccountInfoHeaders: () => ServiceGetAccountInfoHeaders,
  ServiceGetPropertiesExceptionHeaders: () => ServiceGetPropertiesExceptionHeaders,
  ServiceGetPropertiesHeaders: () => ServiceGetPropertiesHeaders,
  ServiceGetStatisticsExceptionHeaders: () => ServiceGetStatisticsExceptionHeaders,
  ServiceGetStatisticsHeaders: () => ServiceGetStatisticsHeaders,
  ServiceGetUserDelegationKeyExceptionHeaders: () => ServiceGetUserDelegationKeyExceptionHeaders,
  ServiceGetUserDelegationKeyHeaders: () => ServiceGetUserDelegationKeyHeaders,
  ServiceListContainersSegmentExceptionHeaders: () => ServiceListContainersSegmentExceptionHeaders,
  ServiceListContainersSegmentHeaders: () => ServiceListContainersSegmentHeaders,
  ServiceSetPropertiesExceptionHeaders: () => ServiceSetPropertiesExceptionHeaders,
  ServiceSetPropertiesHeaders: () => ServiceSetPropertiesHeaders,
  ServiceSubmitBatchExceptionHeaders: () => ServiceSubmitBatchExceptionHeaders,
  ServiceSubmitBatchHeaders: () => ServiceSubmitBatchHeaders,
  SignedIdentifier: () => SignedIdentifier,
  StaticWebsite: () => StaticWebsite,
  StorageError: () => StorageError,
  UserDelegationKey: () => UserDelegationKey
});
var BlobServiceProperties, Logging, RetentionPolicy, Metrics, CorsRule, StaticWebsite, StorageError, BlobServiceStatistics, GeoReplication, ListContainersSegmentResponse, ContainerItem, ContainerProperties, KeyInfo, UserDelegationKey, FilterBlobSegment, FilterBlobItem, BlobTags, BlobTag, SignedIdentifier, AccessPolicy, ListBlobsFlatSegmentResponse, BlobFlatListSegment, BlobItemInternal, BlobName, BlobPropertiesInternal, ListBlobsHierarchySegmentResponse, BlobHierarchyListSegment, BlobPrefix, BlockLookupList, BlockList, Block, PageList, PageRange, ClearRange, QueryRequest, QuerySerialization, QueryFormat, DelimitedTextConfiguration, JsonTextConfiguration, ArrowConfiguration, ArrowField, ServiceSetPropertiesHeaders, ServiceSetPropertiesExceptionHeaders, ServiceGetPropertiesHeaders, ServiceGetPropertiesExceptionHeaders, ServiceGetStatisticsHeaders, ServiceGetStatisticsExceptionHeaders, ServiceListContainersSegmentHeaders, ServiceListContainersSegmentExceptionHeaders, ServiceGetUserDelegationKeyHeaders, ServiceGetUserDelegationKeyExceptionHeaders, ServiceGetAccountInfoHeaders, ServiceGetAccountInfoExceptionHeaders, ServiceSubmitBatchHeaders, ServiceSubmitBatchExceptionHeaders, ServiceFilterBlobsHeaders, ServiceFilterBlobsExceptionHeaders, ContainerCreateHeaders, ContainerCreateExceptionHeaders, ContainerGetPropertiesHeaders, ContainerGetPropertiesExceptionHeaders, ContainerDeleteHeaders, ContainerDeleteExceptionHeaders, ContainerSetMetadataHeaders, ContainerSetMetadataExceptionHeaders, ContainerGetAccessPolicyHeaders, ContainerGetAccessPolicyExceptionHeaders, ContainerSetAccessPolicyHeaders, ContainerSetAccessPolicyExceptionHeaders, ContainerRestoreHeaders, ContainerRestoreExceptionHeaders, ContainerRenameHeaders, ContainerRenameExceptionHeaders, ContainerSubmitBatchHeaders, ContainerSubmitBatchExceptionHeaders, ContainerFilterBlobsHeaders, ContainerFilterBlobsExceptionHeaders, ContainerAcquireLeaseHeaders, ContainerAcquireLeaseExceptionHeaders, ContainerReleaseLeaseHeaders, ContainerReleaseLeaseExceptionHeaders, ContainerRenewLeaseHeaders, ContainerRenewLeaseExceptionHeaders, ContainerBreakLeaseHeaders, ContainerBreakLeaseExceptionHeaders, ContainerChangeLeaseHeaders, ContainerChangeLeaseExceptionHeaders, ContainerListBlobFlatSegmentHeaders, ContainerListBlobFlatSegmentExceptionHeaders, ContainerListBlobHierarchySegmentHeaders, ContainerListBlobHierarchySegmentExceptionHeaders, ContainerGetAccountInfoHeaders, ContainerGetAccountInfoExceptionHeaders, BlobDownloadHeaders, BlobDownloadExceptionHeaders, BlobGetPropertiesHeaders, BlobGetPropertiesExceptionHeaders, BlobDeleteHeaders, BlobDeleteExceptionHeaders, BlobUndeleteHeaders, BlobUndeleteExceptionHeaders, BlobSetExpiryHeaders, BlobSetExpiryExceptionHeaders, BlobSetHttpHeadersHeaders, BlobSetHttpHeadersExceptionHeaders, BlobSetImmutabilityPolicyHeaders, BlobSetImmutabilityPolicyExceptionHeaders, BlobDeleteImmutabilityPolicyHeaders, BlobDeleteImmutabilityPolicyExceptionHeaders, BlobSetLegalHoldHeaders, BlobSetLegalHoldExceptionHeaders, BlobSetMetadataHeaders, BlobSetMetadataExceptionHeaders, BlobAcquireLeaseHeaders, BlobAcquireLeaseExceptionHeaders, BlobReleaseLeaseHeaders, BlobReleaseLeaseExceptionHeaders, BlobRenewLeaseHeaders, BlobRenewLeaseExceptionHeaders, BlobChangeLeaseHeaders, BlobChangeLeaseExceptionHeaders, BlobBreakLeaseHeaders, BlobBreakLeaseExceptionHeaders, BlobCreateSnapshotHeaders, BlobCreateSnapshotExceptionHeaders, BlobStartCopyFromURLHeaders, BlobStartCopyFromURLExceptionHeaders, BlobCopyFromURLHeaders, BlobCopyFromURLExceptionHeaders, BlobAbortCopyFromURLHeaders, BlobAbortCopyFromURLExceptionHeaders, BlobSetTierHeaders, BlobSetTierExceptionHeaders, BlobGetAccountInfoHeaders, BlobGetAccountInfoExceptionHeaders, BlobQueryHeaders, BlobQueryExceptionHeaders, BlobGetTagsHeaders, BlobGetTagsExceptionHeaders, BlobSetTagsHeaders, BlobSetTagsExceptionHeaders, PageBlobCreateHeaders, PageBlobCreateExceptionHeaders, PageBlobUploadPagesHeaders, PageBlobUploadPagesExceptionHeaders, PageBlobClearPagesHeaders, PageBlobClearPagesExceptionHeaders, PageBlobUploadPagesFromURLHeaders, PageBlobUploadPagesFromURLExceptionHeaders, PageBlobGetPageRangesHeaders, PageBlobGetPageRangesExceptionHeaders, PageBlobGetPageRangesDiffHeaders, PageBlobGetPageRangesDiffExceptionHeaders, PageBlobResizeHeaders, PageBlobResizeExceptionHeaders, PageBlobUpdateSequenceNumberHeaders, PageBlobUpdateSequenceNumberExceptionHeaders, PageBlobCopyIncrementalHeaders, PageBlobCopyIncrementalExceptionHeaders, AppendBlobCreateHeaders, AppendBlobCreateExceptionHeaders, AppendBlobAppendBlockHeaders, AppendBlobAppendBlockExceptionHeaders, AppendBlobAppendBlockFromUrlHeaders, AppendBlobAppendBlockFromUrlExceptionHeaders, AppendBlobSealHeaders, AppendBlobSealExceptionHeaders, BlockBlobUploadHeaders, BlockBlobUploadExceptionHeaders, BlockBlobPutBlobFromUrlHeaders, BlockBlobPutBlobFromUrlExceptionHeaders, BlockBlobStageBlockHeaders, BlockBlobStageBlockExceptionHeaders, BlockBlobStageBlockFromURLHeaders, BlockBlobStageBlockFromURLExceptionHeaders, BlockBlobCommitBlockListHeaders, BlockBlobCommitBlockListExceptionHeaders, BlockBlobGetBlockListHeaders, BlockBlobGetBlockListExceptionHeaders;
var init_mappers = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"() {
    "use strict";
    BlobServiceProperties = {
      serializedName: "BlobServiceProperties",
      xmlName: "StorageServiceProperties",
      type: {
        name: "Composite",
        className: "BlobServiceProperties",
        modelProperties: {
          blobAnalyticsLogging: {
            serializedName: "Logging",
            xmlName: "Logging",
            type: {
              name: "Composite",
              className: "Logging"
            }
          },
          hourMetrics: {
            serializedName: "HourMetrics",
            xmlName: "HourMetrics",
            type: {
              name: "Composite",
              className: "Metrics"
            }
          },
          minuteMetrics: {
            serializedName: "MinuteMetrics",
            xmlName: "MinuteMetrics",
            type: {
              name: "Composite",
              className: "Metrics"
            }
          },
          cors: {
            serializedName: "Cors",
            xmlName: "Cors",
            xmlIsWrapped: true,
            xmlElementName: "CorsRule",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "CorsRule"
                }
              }
            }
          },
          defaultServiceVersion: {
            serializedName: "DefaultServiceVersion",
            xmlName: "DefaultServiceVersion",
            type: {
              name: "String"
            }
          },
          deleteRetentionPolicy: {
            serializedName: "DeleteRetentionPolicy",
            xmlName: "DeleteRetentionPolicy",
            type: {
              name: "Composite",
              className: "RetentionPolicy"
            }
          },
          staticWebsite: {
            serializedName: "StaticWebsite",
            xmlName: "StaticWebsite",
            type: {
              name: "Composite",
              className: "StaticWebsite"
            }
          }
        }
      }
    };
    Logging = {
      serializedName: "Logging",
      type: {
        name: "Composite",
        className: "Logging",
        modelProperties: {
          version: {
            serializedName: "Version",
            required: true,
            xmlName: "Version",
            type: {
              name: "String"
            }
          },
          deleteProperty: {
            serializedName: "Delete",
            required: true,
            xmlName: "Delete",
            type: {
              name: "Boolean"
            }
          },
          read: {
            serializedName: "Read",
            required: true,
            xmlName: "Read",
            type: {
              name: "Boolean"
            }
          },
          write: {
            serializedName: "Write",
            required: true,
            xmlName: "Write",
            type: {
              name: "Boolean"
            }
          },
          retentionPolicy: {
            serializedName: "RetentionPolicy",
            xmlName: "RetentionPolicy",
            type: {
              name: "Composite",
              className: "RetentionPolicy"
            }
          }
        }
      }
    };
    RetentionPolicy = {
      serializedName: "RetentionPolicy",
      type: {
        name: "Composite",
        className: "RetentionPolicy",
        modelProperties: {
          enabled: {
            serializedName: "Enabled",
            required: true,
            xmlName: "Enabled",
            type: {
              name: "Boolean"
            }
          },
          days: {
            constraints: {
              InclusiveMinimum: 1
            },
            serializedName: "Days",
            xmlName: "Days",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    Metrics = {
      serializedName: "Metrics",
      type: {
        name: "Composite",
        className: "Metrics",
        modelProperties: {
          version: {
            serializedName: "Version",
            xmlName: "Version",
            type: {
              name: "String"
            }
          },
          enabled: {
            serializedName: "Enabled",
            required: true,
            xmlName: "Enabled",
            type: {
              name: "Boolean"
            }
          },
          includeAPIs: {
            serializedName: "IncludeAPIs",
            xmlName: "IncludeAPIs",
            type: {
              name: "Boolean"
            }
          },
          retentionPolicy: {
            serializedName: "RetentionPolicy",
            xmlName: "RetentionPolicy",
            type: {
              name: "Composite",
              className: "RetentionPolicy"
            }
          }
        }
      }
    };
    CorsRule = {
      serializedName: "CorsRule",
      type: {
        name: "Composite",
        className: "CorsRule",
        modelProperties: {
          allowedOrigins: {
            serializedName: "AllowedOrigins",
            required: true,
            xmlName: "AllowedOrigins",
            type: {
              name: "String"
            }
          },
          allowedMethods: {
            serializedName: "AllowedMethods",
            required: true,
            xmlName: "AllowedMethods",
            type: {
              name: "String"
            }
          },
          allowedHeaders: {
            serializedName: "AllowedHeaders",
            required: true,
            xmlName: "AllowedHeaders",
            type: {
              name: "String"
            }
          },
          exposedHeaders: {
            serializedName: "ExposedHeaders",
            required: true,
            xmlName: "ExposedHeaders",
            type: {
              name: "String"
            }
          },
          maxAgeInSeconds: {
            constraints: {
              InclusiveMinimum: 0
            },
            serializedName: "MaxAgeInSeconds",
            required: true,
            xmlName: "MaxAgeInSeconds",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    StaticWebsite = {
      serializedName: "StaticWebsite",
      type: {
        name: "Composite",
        className: "StaticWebsite",
        modelProperties: {
          enabled: {
            serializedName: "Enabled",
            required: true,
            xmlName: "Enabled",
            type: {
              name: "Boolean"
            }
          },
          indexDocument: {
            serializedName: "IndexDocument",
            xmlName: "IndexDocument",
            type: {
              name: "String"
            }
          },
          errorDocument404Path: {
            serializedName: "ErrorDocument404Path",
            xmlName: "ErrorDocument404Path",
            type: {
              name: "String"
            }
          },
          defaultIndexDocumentPath: {
            serializedName: "DefaultIndexDocumentPath",
            xmlName: "DefaultIndexDocumentPath",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    StorageError = {
      serializedName: "StorageError",
      type: {
        name: "Composite",
        className: "StorageError",
        modelProperties: {
          message: {
            serializedName: "Message",
            xmlName: "Message",
            type: {
              name: "String"
            }
          },
          code: {
            serializedName: "Code",
            xmlName: "Code",
            type: {
              name: "String"
            }
          },
          authenticationErrorDetail: {
            serializedName: "AuthenticationErrorDetail",
            xmlName: "AuthenticationErrorDetail",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobServiceStatistics = {
      serializedName: "BlobServiceStatistics",
      xmlName: "StorageServiceStats",
      type: {
        name: "Composite",
        className: "BlobServiceStatistics",
        modelProperties: {
          geoReplication: {
            serializedName: "GeoReplication",
            xmlName: "GeoReplication",
            type: {
              name: "Composite",
              className: "GeoReplication"
            }
          }
        }
      }
    };
    GeoReplication = {
      serializedName: "GeoReplication",
      type: {
        name: "Composite",
        className: "GeoReplication",
        modelProperties: {
          status: {
            serializedName: "Status",
            required: true,
            xmlName: "Status",
            type: {
              name: "Enum",
              allowedValues: ["live", "bootstrap", "unavailable"]
            }
          },
          lastSyncOn: {
            serializedName: "LastSyncTime",
            required: true,
            xmlName: "LastSyncTime",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    ListContainersSegmentResponse = {
      serializedName: "ListContainersSegmentResponse",
      xmlName: "EnumerationResults",
      type: {
        name: "Composite",
        className: "ListContainersSegmentResponse",
        modelProperties: {
          serviceEndpoint: {
            serializedName: "ServiceEndpoint",
            required: true,
            xmlName: "ServiceEndpoint",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          prefix: {
            serializedName: "Prefix",
            xmlName: "Prefix",
            type: {
              name: "String"
            }
          },
          marker: {
            serializedName: "Marker",
            xmlName: "Marker",
            type: {
              name: "String"
            }
          },
          maxPageSize: {
            serializedName: "MaxResults",
            xmlName: "MaxResults",
            type: {
              name: "Number"
            }
          },
          containerItems: {
            serializedName: "ContainerItems",
            required: true,
            xmlName: "Containers",
            xmlIsWrapped: true,
            xmlElementName: "Container",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "ContainerItem"
                }
              }
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerItem = {
      serializedName: "ContainerItem",
      xmlName: "Container",
      type: {
        name: "Composite",
        className: "ContainerItem",
        modelProperties: {
          name: {
            serializedName: "Name",
            required: true,
            xmlName: "Name",
            type: {
              name: "String"
            }
          },
          deleted: {
            serializedName: "Deleted",
            xmlName: "Deleted",
            type: {
              name: "Boolean"
            }
          },
          version: {
            serializedName: "Version",
            xmlName: "Version",
            type: {
              name: "String"
            }
          },
          properties: {
            serializedName: "Properties",
            xmlName: "Properties",
            type: {
              name: "Composite",
              className: "ContainerProperties"
            }
          },
          metadata: {
            serializedName: "Metadata",
            xmlName: "Metadata",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }
        }
      }
    };
    ContainerProperties = {
      serializedName: "ContainerProperties",
      type: {
        name: "Composite",
        className: "ContainerProperties",
        modelProperties: {
          lastModified: {
            serializedName: "Last-Modified",
            required: true,
            xmlName: "Last-Modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "Etag",
            required: true,
            xmlName: "Etag",
            type: {
              name: "String"
            }
          },
          leaseStatus: {
            serializedName: "LeaseStatus",
            xmlName: "LeaseStatus",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          leaseState: {
            serializedName: "LeaseState",
            xmlName: "LeaseState",
            type: {
              name: "Enum",
              allowedValues: [
                "available",
                "leased",
                "expired",
                "breaking",
                "broken"
              ]
            }
          },
          leaseDuration: {
            serializedName: "LeaseDuration",
            xmlName: "LeaseDuration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          publicAccess: {
            serializedName: "PublicAccess",
            xmlName: "PublicAccess",
            type: {
              name: "Enum",
              allowedValues: ["container", "blob"]
            }
          },
          hasImmutabilityPolicy: {
            serializedName: "HasImmutabilityPolicy",
            xmlName: "HasImmutabilityPolicy",
            type: {
              name: "Boolean"
            }
          },
          hasLegalHold: {
            serializedName: "HasLegalHold",
            xmlName: "HasLegalHold",
            type: {
              name: "Boolean"
            }
          },
          defaultEncryptionScope: {
            serializedName: "DefaultEncryptionScope",
            xmlName: "DefaultEncryptionScope",
            type: {
              name: "String"
            }
          },
          preventEncryptionScopeOverride: {
            serializedName: "DenyEncryptionScopeOverride",
            xmlName: "DenyEncryptionScopeOverride",
            type: {
              name: "Boolean"
            }
          },
          deletedOn: {
            serializedName: "DeletedTime",
            xmlName: "DeletedTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          remainingRetentionDays: {
            serializedName: "RemainingRetentionDays",
            xmlName: "RemainingRetentionDays",
            type: {
              name: "Number"
            }
          },
          isImmutableStorageWithVersioningEnabled: {
            serializedName: "ImmutableStorageWithVersioningEnabled",
            xmlName: "ImmutableStorageWithVersioningEnabled",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    KeyInfo = {
      serializedName: "KeyInfo",
      type: {
        name: "Composite",
        className: "KeyInfo",
        modelProperties: {
          startsOn: {
            serializedName: "Start",
            required: true,
            xmlName: "Start",
            type: {
              name: "String"
            }
          },
          expiresOn: {
            serializedName: "Expiry",
            required: true,
            xmlName: "Expiry",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    UserDelegationKey = {
      serializedName: "UserDelegationKey",
      type: {
        name: "Composite",
        className: "UserDelegationKey",
        modelProperties: {
          signedObjectId: {
            serializedName: "SignedOid",
            required: true,
            xmlName: "SignedOid",
            type: {
              name: "String"
            }
          },
          signedTenantId: {
            serializedName: "SignedTid",
            required: true,
            xmlName: "SignedTid",
            type: {
              name: "String"
            }
          },
          signedStartsOn: {
            serializedName: "SignedStart",
            required: true,
            xmlName: "SignedStart",
            type: {
              name: "String"
            }
          },
          signedExpiresOn: {
            serializedName: "SignedExpiry",
            required: true,
            xmlName: "SignedExpiry",
            type: {
              name: "String"
            }
          },
          signedService: {
            serializedName: "SignedService",
            required: true,
            xmlName: "SignedService",
            type: {
              name: "String"
            }
          },
          signedVersion: {
            serializedName: "SignedVersion",
            required: true,
            xmlName: "SignedVersion",
            type: {
              name: "String"
            }
          },
          value: {
            serializedName: "Value",
            required: true,
            xmlName: "Value",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    FilterBlobSegment = {
      serializedName: "FilterBlobSegment",
      xmlName: "EnumerationResults",
      type: {
        name: "Composite",
        className: "FilterBlobSegment",
        modelProperties: {
          serviceEndpoint: {
            serializedName: "ServiceEndpoint",
            required: true,
            xmlName: "ServiceEndpoint",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          where: {
            serializedName: "Where",
            required: true,
            xmlName: "Where",
            type: {
              name: "String"
            }
          },
          blobs: {
            serializedName: "Blobs",
            required: true,
            xmlName: "Blobs",
            xmlIsWrapped: true,
            xmlElementName: "Blob",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "FilterBlobItem"
                }
              }
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    FilterBlobItem = {
      serializedName: "FilterBlobItem",
      xmlName: "Blob",
      type: {
        name: "Composite",
        className: "FilterBlobItem",
        modelProperties: {
          name: {
            serializedName: "Name",
            required: true,
            xmlName: "Name",
            type: {
              name: "String"
            }
          },
          containerName: {
            serializedName: "ContainerName",
            required: true,
            xmlName: "ContainerName",
            type: {
              name: "String"
            }
          },
          tags: {
            serializedName: "Tags",
            xmlName: "Tags",
            type: {
              name: "Composite",
              className: "BlobTags"
            }
          }
        }
      }
    };
    BlobTags = {
      serializedName: "BlobTags",
      xmlName: "Tags",
      type: {
        name: "Composite",
        className: "BlobTags",
        modelProperties: {
          blobTagSet: {
            serializedName: "BlobTagSet",
            required: true,
            xmlName: "TagSet",
            xmlIsWrapped: true,
            xmlElementName: "Tag",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "BlobTag"
                }
              }
            }
          }
        }
      }
    };
    BlobTag = {
      serializedName: "BlobTag",
      xmlName: "Tag",
      type: {
        name: "Composite",
        className: "BlobTag",
        modelProperties: {
          key: {
            serializedName: "Key",
            required: true,
            xmlName: "Key",
            type: {
              name: "String"
            }
          },
          value: {
            serializedName: "Value",
            required: true,
            xmlName: "Value",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    SignedIdentifier = {
      serializedName: "SignedIdentifier",
      xmlName: "SignedIdentifier",
      type: {
        name: "Composite",
        className: "SignedIdentifier",
        modelProperties: {
          id: {
            serializedName: "Id",
            required: true,
            xmlName: "Id",
            type: {
              name: "String"
            }
          },
          accessPolicy: {
            serializedName: "AccessPolicy",
            xmlName: "AccessPolicy",
            type: {
              name: "Composite",
              className: "AccessPolicy"
            }
          }
        }
      }
    };
    AccessPolicy = {
      serializedName: "AccessPolicy",
      type: {
        name: "Composite",
        className: "AccessPolicy",
        modelProperties: {
          startsOn: {
            serializedName: "Start",
            xmlName: "Start",
            type: {
              name: "String"
            }
          },
          expiresOn: {
            serializedName: "Expiry",
            xmlName: "Expiry",
            type: {
              name: "String"
            }
          },
          permissions: {
            serializedName: "Permission",
            xmlName: "Permission",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ListBlobsFlatSegmentResponse = {
      serializedName: "ListBlobsFlatSegmentResponse",
      xmlName: "EnumerationResults",
      type: {
        name: "Composite",
        className: "ListBlobsFlatSegmentResponse",
        modelProperties: {
          serviceEndpoint: {
            serializedName: "ServiceEndpoint",
            required: true,
            xmlName: "ServiceEndpoint",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          containerName: {
            serializedName: "ContainerName",
            required: true,
            xmlName: "ContainerName",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          prefix: {
            serializedName: "Prefix",
            xmlName: "Prefix",
            type: {
              name: "String"
            }
          },
          marker: {
            serializedName: "Marker",
            xmlName: "Marker",
            type: {
              name: "String"
            }
          },
          maxPageSize: {
            serializedName: "MaxResults",
            xmlName: "MaxResults",
            type: {
              name: "Number"
            }
          },
          segment: {
            serializedName: "Segment",
            xmlName: "Blobs",
            type: {
              name: "Composite",
              className: "BlobFlatListSegment"
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobFlatListSegment = {
      serializedName: "BlobFlatListSegment",
      xmlName: "Blobs",
      type: {
        name: "Composite",
        className: "BlobFlatListSegment",
        modelProperties: {
          blobItems: {
            serializedName: "BlobItems",
            required: true,
            xmlName: "BlobItems",
            xmlElementName: "Blob",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "BlobItemInternal"
                }
              }
            }
          }
        }
      }
    };
    BlobItemInternal = {
      serializedName: "BlobItemInternal",
      xmlName: "Blob",
      type: {
        name: "Composite",
        className: "BlobItemInternal",
        modelProperties: {
          name: {
            serializedName: "Name",
            xmlName: "Name",
            type: {
              name: "Composite",
              className: "BlobName"
            }
          },
          deleted: {
            serializedName: "Deleted",
            required: true,
            xmlName: "Deleted",
            type: {
              name: "Boolean"
            }
          },
          snapshot: {
            serializedName: "Snapshot",
            required: true,
            xmlName: "Snapshot",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "VersionId",
            xmlName: "VersionId",
            type: {
              name: "String"
            }
          },
          isCurrentVersion: {
            serializedName: "IsCurrentVersion",
            xmlName: "IsCurrentVersion",
            type: {
              name: "Boolean"
            }
          },
          properties: {
            serializedName: "Properties",
            xmlName: "Properties",
            type: {
              name: "Composite",
              className: "BlobPropertiesInternal"
            }
          },
          metadata: {
            serializedName: "Metadata",
            xmlName: "Metadata",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          },
          blobTags: {
            serializedName: "BlobTags",
            xmlName: "Tags",
            type: {
              name: "Composite",
              className: "BlobTags"
            }
          },
          objectReplicationMetadata: {
            serializedName: "ObjectReplicationMetadata",
            xmlName: "OrMetadata",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          },
          hasVersionsOnly: {
            serializedName: "HasVersionsOnly",
            xmlName: "HasVersionsOnly",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    BlobName = {
      serializedName: "BlobName",
      type: {
        name: "Composite",
        className: "BlobName",
        modelProperties: {
          encoded: {
            serializedName: "Encoded",
            xmlName: "Encoded",
            xmlIsAttribute: true,
            type: {
              name: "Boolean"
            }
          },
          content: {
            serializedName: "content",
            xmlName: "content",
            xmlIsMsText: true,
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobPropertiesInternal = {
      serializedName: "BlobPropertiesInternal",
      xmlName: "Properties",
      type: {
        name: "Composite",
        className: "BlobPropertiesInternal",
        modelProperties: {
          createdOn: {
            serializedName: "Creation-Time",
            xmlName: "Creation-Time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          lastModified: {
            serializedName: "Last-Modified",
            required: true,
            xmlName: "Last-Modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "Etag",
            required: true,
            xmlName: "Etag",
            type: {
              name: "String"
            }
          },
          contentLength: {
            serializedName: "Content-Length",
            xmlName: "Content-Length",
            type: {
              name: "Number"
            }
          },
          contentType: {
            serializedName: "Content-Type",
            xmlName: "Content-Type",
            type: {
              name: "String"
            }
          },
          contentEncoding: {
            serializedName: "Content-Encoding",
            xmlName: "Content-Encoding",
            type: {
              name: "String"
            }
          },
          contentLanguage: {
            serializedName: "Content-Language",
            xmlName: "Content-Language",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "Content-MD5",
            xmlName: "Content-MD5",
            type: {
              name: "ByteArray"
            }
          },
          contentDisposition: {
            serializedName: "Content-Disposition",
            xmlName: "Content-Disposition",
            type: {
              name: "String"
            }
          },
          cacheControl: {
            serializedName: "Cache-Control",
            xmlName: "Cache-Control",
            type: {
              name: "String"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          blobType: {
            serializedName: "BlobType",
            xmlName: "BlobType",
            type: {
              name: "Enum",
              allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
            }
          },
          leaseStatus: {
            serializedName: "LeaseStatus",
            xmlName: "LeaseStatus",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          leaseState: {
            serializedName: "LeaseState",
            xmlName: "LeaseState",
            type: {
              name: "Enum",
              allowedValues: [
                "available",
                "leased",
                "expired",
                "breaking",
                "broken"
              ]
            }
          },
          leaseDuration: {
            serializedName: "LeaseDuration",
            xmlName: "LeaseDuration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          copyId: {
            serializedName: "CopyId",
            xmlName: "CopyId",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "CopyStatus",
            xmlName: "CopyStatus",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          copySource: {
            serializedName: "CopySource",
            xmlName: "CopySource",
            type: {
              name: "String"
            }
          },
          copyProgress: {
            serializedName: "CopyProgress",
            xmlName: "CopyProgress",
            type: {
              name: "String"
            }
          },
          copyCompletedOn: {
            serializedName: "CopyCompletionTime",
            xmlName: "CopyCompletionTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyStatusDescription: {
            serializedName: "CopyStatusDescription",
            xmlName: "CopyStatusDescription",
            type: {
              name: "String"
            }
          },
          serverEncrypted: {
            serializedName: "ServerEncrypted",
            xmlName: "ServerEncrypted",
            type: {
              name: "Boolean"
            }
          },
          incrementalCopy: {
            serializedName: "IncrementalCopy",
            xmlName: "IncrementalCopy",
            type: {
              name: "Boolean"
            }
          },
          destinationSnapshot: {
            serializedName: "DestinationSnapshot",
            xmlName: "DestinationSnapshot",
            type: {
              name: "String"
            }
          },
          deletedOn: {
            serializedName: "DeletedTime",
            xmlName: "DeletedTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          remainingRetentionDays: {
            serializedName: "RemainingRetentionDays",
            xmlName: "RemainingRetentionDays",
            type: {
              name: "Number"
            }
          },
          accessTier: {
            serializedName: "AccessTier",
            xmlName: "AccessTier",
            type: {
              name: "Enum",
              allowedValues: [
                "P4",
                "P6",
                "P10",
                "P15",
                "P20",
                "P30",
                "P40",
                "P50",
                "P60",
                "P70",
                "P80",
                "Hot",
                "Cool",
                "Archive",
                "Cold"
              ]
            }
          },
          accessTierInferred: {
            serializedName: "AccessTierInferred",
            xmlName: "AccessTierInferred",
            type: {
              name: "Boolean"
            }
          },
          archiveStatus: {
            serializedName: "ArchiveStatus",
            xmlName: "ArchiveStatus",
            type: {
              name: "Enum",
              allowedValues: [
                "rehydrate-pending-to-hot",
                "rehydrate-pending-to-cool",
                "rehydrate-pending-to-cold"
              ]
            }
          },
          customerProvidedKeySha256: {
            serializedName: "CustomerProvidedKeySha256",
            xmlName: "CustomerProvidedKeySha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "EncryptionScope",
            xmlName: "EncryptionScope",
            type: {
              name: "String"
            }
          },
          accessTierChangedOn: {
            serializedName: "AccessTierChangeTime",
            xmlName: "AccessTierChangeTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          tagCount: {
            serializedName: "TagCount",
            xmlName: "TagCount",
            type: {
              name: "Number"
            }
          },
          expiresOn: {
            serializedName: "Expiry-Time",
            xmlName: "Expiry-Time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isSealed: {
            serializedName: "Sealed",
            xmlName: "Sealed",
            type: {
              name: "Boolean"
            }
          },
          rehydratePriority: {
            serializedName: "RehydratePriority",
            xmlName: "RehydratePriority",
            type: {
              name: "Enum",
              allowedValues: ["High", "Standard"]
            }
          },
          lastAccessedOn: {
            serializedName: "LastAccessTime",
            xmlName: "LastAccessTime",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyExpiresOn: {
            serializedName: "ImmutabilityPolicyUntilDate",
            xmlName: "ImmutabilityPolicyUntilDate",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyMode: {
            serializedName: "ImmutabilityPolicyMode",
            xmlName: "ImmutabilityPolicyMode",
            type: {
              name: "Enum",
              allowedValues: ["Mutable", "Unlocked", "Locked"]
            }
          },
          legalHold: {
            serializedName: "LegalHold",
            xmlName: "LegalHold",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    ListBlobsHierarchySegmentResponse = {
      serializedName: "ListBlobsHierarchySegmentResponse",
      xmlName: "EnumerationResults",
      type: {
        name: "Composite",
        className: "ListBlobsHierarchySegmentResponse",
        modelProperties: {
          serviceEndpoint: {
            serializedName: "ServiceEndpoint",
            required: true,
            xmlName: "ServiceEndpoint",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          containerName: {
            serializedName: "ContainerName",
            required: true,
            xmlName: "ContainerName",
            xmlIsAttribute: true,
            type: {
              name: "String"
            }
          },
          prefix: {
            serializedName: "Prefix",
            xmlName: "Prefix",
            type: {
              name: "String"
            }
          },
          marker: {
            serializedName: "Marker",
            xmlName: "Marker",
            type: {
              name: "String"
            }
          },
          maxPageSize: {
            serializedName: "MaxResults",
            xmlName: "MaxResults",
            type: {
              name: "Number"
            }
          },
          delimiter: {
            serializedName: "Delimiter",
            xmlName: "Delimiter",
            type: {
              name: "String"
            }
          },
          segment: {
            serializedName: "Segment",
            xmlName: "Blobs",
            type: {
              name: "Composite",
              className: "BlobHierarchyListSegment"
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobHierarchyListSegment = {
      serializedName: "BlobHierarchyListSegment",
      xmlName: "Blobs",
      type: {
        name: "Composite",
        className: "BlobHierarchyListSegment",
        modelProperties: {
          blobPrefixes: {
            serializedName: "BlobPrefixes",
            xmlName: "BlobPrefixes",
            xmlElementName: "BlobPrefix",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "BlobPrefix"
                }
              }
            }
          },
          blobItems: {
            serializedName: "BlobItems",
            required: true,
            xmlName: "BlobItems",
            xmlElementName: "Blob",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "BlobItemInternal"
                }
              }
            }
          }
        }
      }
    };
    BlobPrefix = {
      serializedName: "BlobPrefix",
      type: {
        name: "Composite",
        className: "BlobPrefix",
        modelProperties: {
          name: {
            serializedName: "Name",
            xmlName: "Name",
            type: {
              name: "Composite",
              className: "BlobName"
            }
          }
        }
      }
    };
    BlockLookupList = {
      serializedName: "BlockLookupList",
      xmlName: "BlockList",
      type: {
        name: "Composite",
        className: "BlockLookupList",
        modelProperties: {
          committed: {
            serializedName: "Committed",
            xmlName: "Committed",
            xmlElementName: "Committed",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          },
          uncommitted: {
            serializedName: "Uncommitted",
            xmlName: "Uncommitted",
            xmlElementName: "Uncommitted",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          },
          latest: {
            serializedName: "Latest",
            xmlName: "Latest",
            xmlElementName: "Latest",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    };
    BlockList = {
      serializedName: "BlockList",
      type: {
        name: "Composite",
        className: "BlockList",
        modelProperties: {
          committedBlocks: {
            serializedName: "CommittedBlocks",
            xmlName: "CommittedBlocks",
            xmlIsWrapped: true,
            xmlElementName: "Block",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "Block"
                }
              }
            }
          },
          uncommittedBlocks: {
            serializedName: "UncommittedBlocks",
            xmlName: "UncommittedBlocks",
            xmlIsWrapped: true,
            xmlElementName: "Block",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "Block"
                }
              }
            }
          }
        }
      }
    };
    Block = {
      serializedName: "Block",
      type: {
        name: "Composite",
        className: "Block",
        modelProperties: {
          name: {
            serializedName: "Name",
            required: true,
            xmlName: "Name",
            type: {
              name: "String"
            }
          },
          size: {
            serializedName: "Size",
            required: true,
            xmlName: "Size",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    PageList = {
      serializedName: "PageList",
      type: {
        name: "Composite",
        className: "PageList",
        modelProperties: {
          pageRange: {
            serializedName: "PageRange",
            xmlName: "PageRange",
            xmlElementName: "PageRange",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "PageRange"
                }
              }
            }
          },
          clearRange: {
            serializedName: "ClearRange",
            xmlName: "ClearRange",
            xmlElementName: "ClearRange",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "ClearRange"
                }
              }
            }
          },
          continuationToken: {
            serializedName: "NextMarker",
            xmlName: "NextMarker",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageRange = {
      serializedName: "PageRange",
      xmlName: "PageRange",
      type: {
        name: "Composite",
        className: "PageRange",
        modelProperties: {
          start: {
            serializedName: "Start",
            required: true,
            xmlName: "Start",
            type: {
              name: "Number"
            }
          },
          end: {
            serializedName: "End",
            required: true,
            xmlName: "End",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    ClearRange = {
      serializedName: "ClearRange",
      xmlName: "ClearRange",
      type: {
        name: "Composite",
        className: "ClearRange",
        modelProperties: {
          start: {
            serializedName: "Start",
            required: true,
            xmlName: "Start",
            type: {
              name: "Number"
            }
          },
          end: {
            serializedName: "End",
            required: true,
            xmlName: "End",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    QueryRequest = {
      serializedName: "QueryRequest",
      xmlName: "QueryRequest",
      type: {
        name: "Composite",
        className: "QueryRequest",
        modelProperties: {
          queryType: {
            serializedName: "QueryType",
            required: true,
            xmlName: "QueryType",
            type: {
              name: "String"
            }
          },
          expression: {
            serializedName: "Expression",
            required: true,
            xmlName: "Expression",
            type: {
              name: "String"
            }
          },
          inputSerialization: {
            serializedName: "InputSerialization",
            xmlName: "InputSerialization",
            type: {
              name: "Composite",
              className: "QuerySerialization"
            }
          },
          outputSerialization: {
            serializedName: "OutputSerialization",
            xmlName: "OutputSerialization",
            type: {
              name: "Composite",
              className: "QuerySerialization"
            }
          }
        }
      }
    };
    QuerySerialization = {
      serializedName: "QuerySerialization",
      type: {
        name: "Composite",
        className: "QuerySerialization",
        modelProperties: {
          format: {
            serializedName: "Format",
            xmlName: "Format",
            type: {
              name: "Composite",
              className: "QueryFormat"
            }
          }
        }
      }
    };
    QueryFormat = {
      serializedName: "QueryFormat",
      type: {
        name: "Composite",
        className: "QueryFormat",
        modelProperties: {
          type: {
            serializedName: "Type",
            required: true,
            xmlName: "Type",
            type: {
              name: "Enum",
              allowedValues: ["delimited", "json", "arrow", "parquet"]
            }
          },
          delimitedTextConfiguration: {
            serializedName: "DelimitedTextConfiguration",
            xmlName: "DelimitedTextConfiguration",
            type: {
              name: "Composite",
              className: "DelimitedTextConfiguration"
            }
          },
          jsonTextConfiguration: {
            serializedName: "JsonTextConfiguration",
            xmlName: "JsonTextConfiguration",
            type: {
              name: "Composite",
              className: "JsonTextConfiguration"
            }
          },
          arrowConfiguration: {
            serializedName: "ArrowConfiguration",
            xmlName: "ArrowConfiguration",
            type: {
              name: "Composite",
              className: "ArrowConfiguration"
            }
          },
          parquetTextConfiguration: {
            serializedName: "ParquetTextConfiguration",
            xmlName: "ParquetTextConfiguration",
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      }
    };
    DelimitedTextConfiguration = {
      serializedName: "DelimitedTextConfiguration",
      xmlName: "DelimitedTextConfiguration",
      type: {
        name: "Composite",
        className: "DelimitedTextConfiguration",
        modelProperties: {
          columnSeparator: {
            serializedName: "ColumnSeparator",
            xmlName: "ColumnSeparator",
            type: {
              name: "String"
            }
          },
          fieldQuote: {
            serializedName: "FieldQuote",
            xmlName: "FieldQuote",
            type: {
              name: "String"
            }
          },
          recordSeparator: {
            serializedName: "RecordSeparator",
            xmlName: "RecordSeparator",
            type: {
              name: "String"
            }
          },
          escapeChar: {
            serializedName: "EscapeChar",
            xmlName: "EscapeChar",
            type: {
              name: "String"
            }
          },
          headersPresent: {
            serializedName: "HeadersPresent",
            xmlName: "HasHeaders",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    JsonTextConfiguration = {
      serializedName: "JsonTextConfiguration",
      xmlName: "JsonTextConfiguration",
      type: {
        name: "Composite",
        className: "JsonTextConfiguration",
        modelProperties: {
          recordSeparator: {
            serializedName: "RecordSeparator",
            xmlName: "RecordSeparator",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ArrowConfiguration = {
      serializedName: "ArrowConfiguration",
      xmlName: "ArrowConfiguration",
      type: {
        name: "Composite",
        className: "ArrowConfiguration",
        modelProperties: {
          schema: {
            serializedName: "Schema",
            required: true,
            xmlName: "Schema",
            xmlIsWrapped: true,
            xmlElementName: "Field",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "ArrowField"
                }
              }
            }
          }
        }
      }
    };
    ArrowField = {
      serializedName: "ArrowField",
      xmlName: "Field",
      type: {
        name: "Composite",
        className: "ArrowField",
        modelProperties: {
          type: {
            serializedName: "Type",
            required: true,
            xmlName: "Type",
            type: {
              name: "String"
            }
          },
          name: {
            serializedName: "Name",
            xmlName: "Name",
            type: {
              name: "String"
            }
          },
          precision: {
            serializedName: "Precision",
            xmlName: "Precision",
            type: {
              name: "Number"
            }
          },
          scale: {
            serializedName: "Scale",
            xmlName: "Scale",
            type: {
              name: "Number"
            }
          }
        }
      }
    };
    ServiceSetPropertiesHeaders = {
      serializedName: "Service_setPropertiesHeaders",
      type: {
        name: "Composite",
        className: "ServiceSetPropertiesHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceSetPropertiesExceptionHeaders = {
      serializedName: "Service_setPropertiesExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceSetPropertiesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceGetPropertiesHeaders = {
      serializedName: "Service_getPropertiesHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetPropertiesHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceGetPropertiesExceptionHeaders = {
      serializedName: "Service_getPropertiesExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetPropertiesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceGetStatisticsHeaders = {
      serializedName: "Service_getStatisticsHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetStatisticsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceGetStatisticsExceptionHeaders = {
      serializedName: "Service_getStatisticsExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetStatisticsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceListContainersSegmentHeaders = {
      serializedName: "Service_listContainersSegmentHeaders",
      type: {
        name: "Composite",
        className: "ServiceListContainersSegmentHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceListContainersSegmentExceptionHeaders = {
      serializedName: "Service_listContainersSegmentExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceListContainersSegmentExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceGetUserDelegationKeyHeaders = {
      serializedName: "Service_getUserDelegationKeyHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetUserDelegationKeyHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceGetUserDelegationKeyExceptionHeaders = {
      serializedName: "Service_getUserDelegationKeyExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetUserDelegationKeyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceGetAccountInfoHeaders = {
      serializedName: "Service_getAccountInfoHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetAccountInfoHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          skuName: {
            serializedName: "x-ms-sku-name",
            xmlName: "x-ms-sku-name",
            type: {
              name: "Enum",
              allowedValues: [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS"
              ]
            }
          },
          accountKind: {
            serializedName: "x-ms-account-kind",
            xmlName: "x-ms-account-kind",
            type: {
              name: "Enum",
              allowedValues: [
                "Storage",
                "BlobStorage",
                "StorageV2",
                "FileStorage",
                "BlockBlobStorage"
              ]
            }
          },
          isHierarchicalNamespaceEnabled: {
            serializedName: "x-ms-is-hns-enabled",
            xmlName: "x-ms-is-hns-enabled",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceGetAccountInfoExceptionHeaders = {
      serializedName: "Service_getAccountInfoExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceGetAccountInfoExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceSubmitBatchHeaders = {
      serializedName: "Service_submitBatchHeaders",
      type: {
        name: "Composite",
        className: "ServiceSubmitBatchHeaders",
        modelProperties: {
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceSubmitBatchExceptionHeaders = {
      serializedName: "Service_submitBatchExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceSubmitBatchExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceFilterBlobsHeaders = {
      serializedName: "Service_filterBlobsHeaders",
      type: {
        name: "Composite",
        className: "ServiceFilterBlobsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ServiceFilterBlobsExceptionHeaders = {
      serializedName: "Service_filterBlobsExceptionHeaders",
      type: {
        name: "Composite",
        className: "ServiceFilterBlobsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerCreateHeaders = {
      serializedName: "Container_createHeaders",
      type: {
        name: "Composite",
        className: "ContainerCreateHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerCreateExceptionHeaders = {
      serializedName: "Container_createExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerCreateExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerGetPropertiesHeaders = {
      serializedName: "Container_getPropertiesHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetPropertiesHeaders",
        modelProperties: {
          metadata: {
            serializedName: "x-ms-meta",
            headerCollectionPrefix: "x-ms-meta-",
            xmlName: "x-ms-meta",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseDuration: {
            serializedName: "x-ms-lease-duration",
            xmlName: "x-ms-lease-duration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          leaseState: {
            serializedName: "x-ms-lease-state",
            xmlName: "x-ms-lease-state",
            type: {
              name: "Enum",
              allowedValues: [
                "available",
                "leased",
                "expired",
                "breaking",
                "broken"
              ]
            }
          },
          leaseStatus: {
            serializedName: "x-ms-lease-status",
            xmlName: "x-ms-lease-status",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobPublicAccess: {
            serializedName: "x-ms-blob-public-access",
            xmlName: "x-ms-blob-public-access",
            type: {
              name: "Enum",
              allowedValues: ["container", "blob"]
            }
          },
          hasImmutabilityPolicy: {
            serializedName: "x-ms-has-immutability-policy",
            xmlName: "x-ms-has-immutability-policy",
            type: {
              name: "Boolean"
            }
          },
          hasLegalHold: {
            serializedName: "x-ms-has-legal-hold",
            xmlName: "x-ms-has-legal-hold",
            type: {
              name: "Boolean"
            }
          },
          defaultEncryptionScope: {
            serializedName: "x-ms-default-encryption-scope",
            xmlName: "x-ms-default-encryption-scope",
            type: {
              name: "String"
            }
          },
          denyEncryptionScopeOverride: {
            serializedName: "x-ms-deny-encryption-scope-override",
            xmlName: "x-ms-deny-encryption-scope-override",
            type: {
              name: "Boolean"
            }
          },
          isImmutableStorageWithVersioningEnabled: {
            serializedName: "x-ms-immutable-storage-with-versioning-enabled",
            xmlName: "x-ms-immutable-storage-with-versioning-enabled",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerGetPropertiesExceptionHeaders = {
      serializedName: "Container_getPropertiesExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetPropertiesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerDeleteHeaders = {
      serializedName: "Container_deleteHeaders",
      type: {
        name: "Composite",
        className: "ContainerDeleteHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerDeleteExceptionHeaders = {
      serializedName: "Container_deleteExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerDeleteExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerSetMetadataHeaders = {
      serializedName: "Container_setMetadataHeaders",
      type: {
        name: "Composite",
        className: "ContainerSetMetadataHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerSetMetadataExceptionHeaders = {
      serializedName: "Container_setMetadataExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerSetMetadataExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerGetAccessPolicyHeaders = {
      serializedName: "Container_getAccessPolicyHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetAccessPolicyHeaders",
        modelProperties: {
          blobPublicAccess: {
            serializedName: "x-ms-blob-public-access",
            xmlName: "x-ms-blob-public-access",
            type: {
              name: "Enum",
              allowedValues: ["container", "blob"]
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerGetAccessPolicyExceptionHeaders = {
      serializedName: "Container_getAccessPolicyExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetAccessPolicyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerSetAccessPolicyHeaders = {
      serializedName: "Container_setAccessPolicyHeaders",
      type: {
        name: "Composite",
        className: "ContainerSetAccessPolicyHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerSetAccessPolicyExceptionHeaders = {
      serializedName: "Container_setAccessPolicyExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerSetAccessPolicyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerRestoreHeaders = {
      serializedName: "Container_restoreHeaders",
      type: {
        name: "Composite",
        className: "ContainerRestoreHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerRestoreExceptionHeaders = {
      serializedName: "Container_restoreExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerRestoreExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerRenameHeaders = {
      serializedName: "Container_renameHeaders",
      type: {
        name: "Composite",
        className: "ContainerRenameHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerRenameExceptionHeaders = {
      serializedName: "Container_renameExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerRenameExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerSubmitBatchHeaders = {
      serializedName: "Container_submitBatchHeaders",
      type: {
        name: "Composite",
        className: "ContainerSubmitBatchHeaders",
        modelProperties: {
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerSubmitBatchExceptionHeaders = {
      serializedName: "Container_submitBatchExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerSubmitBatchExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerFilterBlobsHeaders = {
      serializedName: "Container_filterBlobsHeaders",
      type: {
        name: "Composite",
        className: "ContainerFilterBlobsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    ContainerFilterBlobsExceptionHeaders = {
      serializedName: "Container_filterBlobsExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerFilterBlobsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerAcquireLeaseHeaders = {
      serializedName: "Container_acquireLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerAcquireLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    ContainerAcquireLeaseExceptionHeaders = {
      serializedName: "Container_acquireLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerAcquireLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerReleaseLeaseHeaders = {
      serializedName: "Container_releaseLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerReleaseLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    ContainerReleaseLeaseExceptionHeaders = {
      serializedName: "Container_releaseLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerReleaseLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerRenewLeaseHeaders = {
      serializedName: "Container_renewLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerRenewLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    ContainerRenewLeaseExceptionHeaders = {
      serializedName: "Container_renewLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerRenewLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerBreakLeaseHeaders = {
      serializedName: "Container_breakLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerBreakLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseTime: {
            serializedName: "x-ms-lease-time",
            xmlName: "x-ms-lease-time",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    ContainerBreakLeaseExceptionHeaders = {
      serializedName: "Container_breakLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerBreakLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerChangeLeaseHeaders = {
      serializedName: "Container_changeLeaseHeaders",
      type: {
        name: "Composite",
        className: "ContainerChangeLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    ContainerChangeLeaseExceptionHeaders = {
      serializedName: "Container_changeLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerChangeLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerListBlobFlatSegmentHeaders = {
      serializedName: "Container_listBlobFlatSegmentHeaders",
      type: {
        name: "Composite",
        className: "ContainerListBlobFlatSegmentHeaders",
        modelProperties: {
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerListBlobFlatSegmentExceptionHeaders = {
      serializedName: "Container_listBlobFlatSegmentExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerListBlobFlatSegmentExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerListBlobHierarchySegmentHeaders = {
      serializedName: "Container_listBlobHierarchySegmentHeaders",
      type: {
        name: "Composite",
        className: "ContainerListBlobHierarchySegmentHeaders",
        modelProperties: {
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerListBlobHierarchySegmentExceptionHeaders = {
      serializedName: "Container_listBlobHierarchySegmentExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerListBlobHierarchySegmentExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    ContainerGetAccountInfoHeaders = {
      serializedName: "Container_getAccountInfoHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetAccountInfoHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          skuName: {
            serializedName: "x-ms-sku-name",
            xmlName: "x-ms-sku-name",
            type: {
              name: "Enum",
              allowedValues: [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS"
              ]
            }
          },
          accountKind: {
            serializedName: "x-ms-account-kind",
            xmlName: "x-ms-account-kind",
            type: {
              name: "Enum",
              allowedValues: [
                "Storage",
                "BlobStorage",
                "StorageV2",
                "FileStorage",
                "BlockBlobStorage"
              ]
            }
          },
          isHierarchicalNamespaceEnabled: {
            serializedName: "x-ms-is-hns-enabled",
            xmlName: "x-ms-is-hns-enabled",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    ContainerGetAccountInfoExceptionHeaders = {
      serializedName: "Container_getAccountInfoExceptionHeaders",
      type: {
        name: "Composite",
        className: "ContainerGetAccountInfoExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobDownloadHeaders = {
      serializedName: "Blob_downloadHeaders",
      type: {
        name: "Composite",
        className: "BlobDownloadHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          createdOn: {
            serializedName: "x-ms-creation-time",
            xmlName: "x-ms-creation-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          metadata: {
            serializedName: "x-ms-meta",
            headerCollectionPrefix: "x-ms-meta-",
            xmlName: "x-ms-meta",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          },
          objectReplicationPolicyId: {
            serializedName: "x-ms-or-policy-id",
            xmlName: "x-ms-or-policy-id",
            type: {
              name: "String"
            }
          },
          objectReplicationRules: {
            serializedName: "x-ms-or",
            headerCollectionPrefix: "x-ms-or-",
            xmlName: "x-ms-or",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          },
          contentLength: {
            serializedName: "content-length",
            xmlName: "content-length",
            type: {
              name: "Number"
            }
          },
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          contentRange: {
            serializedName: "content-range",
            xmlName: "content-range",
            type: {
              name: "String"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          contentEncoding: {
            serializedName: "content-encoding",
            xmlName: "content-encoding",
            type: {
              name: "String"
            }
          },
          cacheControl: {
            serializedName: "cache-control",
            xmlName: "cache-control",
            type: {
              name: "String"
            }
          },
          contentDisposition: {
            serializedName: "content-disposition",
            xmlName: "content-disposition",
            type: {
              name: "String"
            }
          },
          contentLanguage: {
            serializedName: "content-language",
            xmlName: "content-language",
            type: {
              name: "String"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          blobType: {
            serializedName: "x-ms-blob-type",
            xmlName: "x-ms-blob-type",
            type: {
              name: "Enum",
              allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
            }
          },
          copyCompletedOn: {
            serializedName: "x-ms-copy-completion-time",
            xmlName: "x-ms-copy-completion-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyStatusDescription: {
            serializedName: "x-ms-copy-status-description",
            xmlName: "x-ms-copy-status-description",
            type: {
              name: "String"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyProgress: {
            serializedName: "x-ms-copy-progress",
            xmlName: "x-ms-copy-progress",
            type: {
              name: "String"
            }
          },
          copySource: {
            serializedName: "x-ms-copy-source",
            xmlName: "x-ms-copy-source",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          leaseDuration: {
            serializedName: "x-ms-lease-duration",
            xmlName: "x-ms-lease-duration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          leaseState: {
            serializedName: "x-ms-lease-state",
            xmlName: "x-ms-lease-state",
            type: {
              name: "Enum",
              allowedValues: [
                "available",
                "leased",
                "expired",
                "breaking",
                "broken"
              ]
            }
          },
          leaseStatus: {
            serializedName: "x-ms-lease-status",
            xmlName: "x-ms-lease-status",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          isCurrentVersion: {
            serializedName: "x-ms-is-current-version",
            xmlName: "x-ms-is-current-version",
            type: {
              name: "Boolean"
            }
          },
          acceptRanges: {
            serializedName: "accept-ranges",
            xmlName: "accept-ranges",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-server-encrypted",
            xmlName: "x-ms-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          blobContentMD5: {
            serializedName: "x-ms-blob-content-md5",
            xmlName: "x-ms-blob-content-md5",
            type: {
              name: "ByteArray"
            }
          },
          tagCount: {
            serializedName: "x-ms-tag-count",
            xmlName: "x-ms-tag-count",
            type: {
              name: "Number"
            }
          },
          isSealed: {
            serializedName: "x-ms-blob-sealed",
            xmlName: "x-ms-blob-sealed",
            type: {
              name: "Boolean"
            }
          },
          lastAccessed: {
            serializedName: "x-ms-last-access-time",
            xmlName: "x-ms-last-access-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyExpiresOn: {
            serializedName: "x-ms-immutability-policy-until-date",
            xmlName: "x-ms-immutability-policy-until-date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyMode: {
            serializedName: "x-ms-immutability-policy-mode",
            xmlName: "x-ms-immutability-policy-mode",
            type: {
              name: "Enum",
              allowedValues: ["Mutable", "Unlocked", "Locked"]
            }
          },
          legalHold: {
            serializedName: "x-ms-legal-hold",
            xmlName: "x-ms-legal-hold",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          },
          contentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    };
    BlobDownloadExceptionHeaders = {
      serializedName: "Blob_downloadExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobDownloadExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobGetPropertiesHeaders = {
      serializedName: "Blob_getPropertiesHeaders",
      type: {
        name: "Composite",
        className: "BlobGetPropertiesHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          createdOn: {
            serializedName: "x-ms-creation-time",
            xmlName: "x-ms-creation-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          metadata: {
            serializedName: "x-ms-meta",
            headerCollectionPrefix: "x-ms-meta-",
            xmlName: "x-ms-meta",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          },
          objectReplicationPolicyId: {
            serializedName: "x-ms-or-policy-id",
            xmlName: "x-ms-or-policy-id",
            type: {
              name: "String"
            }
          },
          objectReplicationRules: {
            serializedName: "x-ms-or",
            headerCollectionPrefix: "x-ms-or-",
            xmlName: "x-ms-or",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          },
          blobType: {
            serializedName: "x-ms-blob-type",
            xmlName: "x-ms-blob-type",
            type: {
              name: "Enum",
              allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
            }
          },
          copyCompletedOn: {
            serializedName: "x-ms-copy-completion-time",
            xmlName: "x-ms-copy-completion-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyStatusDescription: {
            serializedName: "x-ms-copy-status-description",
            xmlName: "x-ms-copy-status-description",
            type: {
              name: "String"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyProgress: {
            serializedName: "x-ms-copy-progress",
            xmlName: "x-ms-copy-progress",
            type: {
              name: "String"
            }
          },
          copySource: {
            serializedName: "x-ms-copy-source",
            xmlName: "x-ms-copy-source",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          isIncrementalCopy: {
            serializedName: "x-ms-incremental-copy",
            xmlName: "x-ms-incremental-copy",
            type: {
              name: "Boolean"
            }
          },
          destinationSnapshot: {
            serializedName: "x-ms-copy-destination-snapshot",
            xmlName: "x-ms-copy-destination-snapshot",
            type: {
              name: "String"
            }
          },
          leaseDuration: {
            serializedName: "x-ms-lease-duration",
            xmlName: "x-ms-lease-duration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          leaseState: {
            serializedName: "x-ms-lease-state",
            xmlName: "x-ms-lease-state",
            type: {
              name: "Enum",
              allowedValues: [
                "available",
                "leased",
                "expired",
                "breaking",
                "broken"
              ]
            }
          },
          leaseStatus: {
            serializedName: "x-ms-lease-status",
            xmlName: "x-ms-lease-status",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          contentLength: {
            serializedName: "content-length",
            xmlName: "content-length",
            type: {
              name: "Number"
            }
          },
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          contentEncoding: {
            serializedName: "content-encoding",
            xmlName: "content-encoding",
            type: {
              name: "String"
            }
          },
          contentDisposition: {
            serializedName: "content-disposition",
            xmlName: "content-disposition",
            type: {
              name: "String"
            }
          },
          contentLanguage: {
            serializedName: "content-language",
            xmlName: "content-language",
            type: {
              name: "String"
            }
          },
          cacheControl: {
            serializedName: "cache-control",
            xmlName: "cache-control",
            type: {
              name: "String"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          acceptRanges: {
            serializedName: "accept-ranges",
            xmlName: "accept-ranges",
            type: {
              name: "String"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-server-encrypted",
            xmlName: "x-ms-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          accessTier: {
            serializedName: "x-ms-access-tier",
            xmlName: "x-ms-access-tier",
            type: {
              name: "String"
            }
          },
          accessTierInferred: {
            serializedName: "x-ms-access-tier-inferred",
            xmlName: "x-ms-access-tier-inferred",
            type: {
              name: "Boolean"
            }
          },
          archiveStatus: {
            serializedName: "x-ms-archive-status",
            xmlName: "x-ms-archive-status",
            type: {
              name: "String"
            }
          },
          accessTierChangedOn: {
            serializedName: "x-ms-access-tier-change-time",
            xmlName: "x-ms-access-tier-change-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          isCurrentVersion: {
            serializedName: "x-ms-is-current-version",
            xmlName: "x-ms-is-current-version",
            type: {
              name: "Boolean"
            }
          },
          tagCount: {
            serializedName: "x-ms-tag-count",
            xmlName: "x-ms-tag-count",
            type: {
              name: "Number"
            }
          },
          expiresOn: {
            serializedName: "x-ms-expiry-time",
            xmlName: "x-ms-expiry-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isSealed: {
            serializedName: "x-ms-blob-sealed",
            xmlName: "x-ms-blob-sealed",
            type: {
              name: "Boolean"
            }
          },
          rehydratePriority: {
            serializedName: "x-ms-rehydrate-priority",
            xmlName: "x-ms-rehydrate-priority",
            type: {
              name: "Enum",
              allowedValues: ["High", "Standard"]
            }
          },
          lastAccessed: {
            serializedName: "x-ms-last-access-time",
            xmlName: "x-ms-last-access-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyExpiresOn: {
            serializedName: "x-ms-immutability-policy-until-date",
            xmlName: "x-ms-immutability-policy-until-date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyMode: {
            serializedName: "x-ms-immutability-policy-mode",
            xmlName: "x-ms-immutability-policy-mode",
            type: {
              name: "Enum",
              allowedValues: ["Mutable", "Unlocked", "Locked"]
            }
          },
          legalHold: {
            serializedName: "x-ms-legal-hold",
            xmlName: "x-ms-legal-hold",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobGetPropertiesExceptionHeaders = {
      serializedName: "Blob_getPropertiesExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobGetPropertiesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobDeleteHeaders = {
      serializedName: "Blob_deleteHeaders",
      type: {
        name: "Composite",
        className: "BlobDeleteHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobDeleteExceptionHeaders = {
      serializedName: "Blob_deleteExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobDeleteExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobUndeleteHeaders = {
      serializedName: "Blob_undeleteHeaders",
      type: {
        name: "Composite",
        className: "BlobUndeleteHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobUndeleteExceptionHeaders = {
      serializedName: "Blob_undeleteExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobUndeleteExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetExpiryHeaders = {
      serializedName: "Blob_setExpiryHeaders",
      type: {
        name: "Composite",
        className: "BlobSetExpiryHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    BlobSetExpiryExceptionHeaders = {
      serializedName: "Blob_setExpiryExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetExpiryExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetHttpHeadersHeaders = {
      serializedName: "Blob_setHttpHeadersHeaders",
      type: {
        name: "Composite",
        className: "BlobSetHttpHeadersHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetHttpHeadersExceptionHeaders = {
      serializedName: "Blob_setHttpHeadersExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetHttpHeadersExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetImmutabilityPolicyHeaders = {
      serializedName: "Blob_setImmutabilityPolicyHeaders",
      type: {
        name: "Composite",
        className: "BlobSetImmutabilityPolicyHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyExpiry: {
            serializedName: "x-ms-immutability-policy-until-date",
            xmlName: "x-ms-immutability-policy-until-date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          immutabilityPolicyMode: {
            serializedName: "x-ms-immutability-policy-mode",
            xmlName: "x-ms-immutability-policy-mode",
            type: {
              name: "Enum",
              allowedValues: ["Mutable", "Unlocked", "Locked"]
            }
          }
        }
      }
    };
    BlobSetImmutabilityPolicyExceptionHeaders = {
      serializedName: "Blob_setImmutabilityPolicyExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetImmutabilityPolicyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobDeleteImmutabilityPolicyHeaders = {
      serializedName: "Blob_deleteImmutabilityPolicyHeaders",
      type: {
        name: "Composite",
        className: "BlobDeleteImmutabilityPolicyHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    BlobDeleteImmutabilityPolicyExceptionHeaders = {
      serializedName: "Blob_deleteImmutabilityPolicyExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobDeleteImmutabilityPolicyExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetLegalHoldHeaders = {
      serializedName: "Blob_setLegalHoldHeaders",
      type: {
        name: "Composite",
        className: "BlobSetLegalHoldHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          legalHold: {
            serializedName: "x-ms-legal-hold",
            xmlName: "x-ms-legal-hold",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    BlobSetLegalHoldExceptionHeaders = {
      serializedName: "Blob_setLegalHoldExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetLegalHoldExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetMetadataHeaders = {
      serializedName: "Blob_setMetadataHeaders",
      type: {
        name: "Composite",
        className: "BlobSetMetadataHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetMetadataExceptionHeaders = {
      serializedName: "Blob_setMetadataExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetMetadataExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobAcquireLeaseHeaders = {
      serializedName: "Blob_acquireLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobAcquireLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    BlobAcquireLeaseExceptionHeaders = {
      serializedName: "Blob_acquireLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobAcquireLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobReleaseLeaseHeaders = {
      serializedName: "Blob_releaseLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobReleaseLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    BlobReleaseLeaseExceptionHeaders = {
      serializedName: "Blob_releaseLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobReleaseLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobRenewLeaseHeaders = {
      serializedName: "Blob_renewLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobRenewLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    BlobRenewLeaseExceptionHeaders = {
      serializedName: "Blob_renewLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobRenewLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobChangeLeaseHeaders = {
      serializedName: "Blob_changeLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobChangeLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          leaseId: {
            serializedName: "x-ms-lease-id",
            xmlName: "x-ms-lease-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    BlobChangeLeaseExceptionHeaders = {
      serializedName: "Blob_changeLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobChangeLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobBreakLeaseHeaders = {
      serializedName: "Blob_breakLeaseHeaders",
      type: {
        name: "Composite",
        className: "BlobBreakLeaseHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          leaseTime: {
            serializedName: "x-ms-lease-time",
            xmlName: "x-ms-lease-time",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          }
        }
      }
    };
    BlobBreakLeaseExceptionHeaders = {
      serializedName: "Blob_breakLeaseExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobBreakLeaseExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobCreateSnapshotHeaders = {
      serializedName: "Blob_createSnapshotHeaders",
      type: {
        name: "Composite",
        className: "BlobCreateSnapshotHeaders",
        modelProperties: {
          snapshot: {
            serializedName: "x-ms-snapshot",
            xmlName: "x-ms-snapshot",
            type: {
              name: "String"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobCreateSnapshotExceptionHeaders = {
      serializedName: "Blob_createSnapshotExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobCreateSnapshotExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobStartCopyFromURLHeaders = {
      serializedName: "Blob_startCopyFromURLHeaders",
      type: {
        name: "Composite",
        className: "BlobStartCopyFromURLHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobStartCopyFromURLExceptionHeaders = {
      serializedName: "Blob_startCopyFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobStartCopyFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobCopyFromURLHeaders = {
      serializedName: "Blob_copyFromURLHeaders",
      type: {
        name: "Composite",
        className: "BlobCopyFromURLHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            defaultValue: "success",
            isConstant: true,
            serializedName: "x-ms-copy-status",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobCopyFromURLExceptionHeaders = {
      serializedName: "Blob_copyFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobCopyFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobAbortCopyFromURLHeaders = {
      serializedName: "Blob_abortCopyFromURLHeaders",
      type: {
        name: "Composite",
        className: "BlobAbortCopyFromURLHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobAbortCopyFromURLExceptionHeaders = {
      serializedName: "Blob_abortCopyFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobAbortCopyFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetTierHeaders = {
      serializedName: "Blob_setTierHeaders",
      type: {
        name: "Composite",
        className: "BlobSetTierHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetTierExceptionHeaders = {
      serializedName: "Blob_setTierExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetTierExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobGetAccountInfoHeaders = {
      serializedName: "Blob_getAccountInfoHeaders",
      type: {
        name: "Composite",
        className: "BlobGetAccountInfoHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          skuName: {
            serializedName: "x-ms-sku-name",
            xmlName: "x-ms-sku-name",
            type: {
              name: "Enum",
              allowedValues: [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS"
              ]
            }
          },
          accountKind: {
            serializedName: "x-ms-account-kind",
            xmlName: "x-ms-account-kind",
            type: {
              name: "Enum",
              allowedValues: [
                "Storage",
                "BlobStorage",
                "StorageV2",
                "FileStorage",
                "BlockBlobStorage"
              ]
            }
          },
          isHierarchicalNamespaceEnabled: {
            serializedName: "x-ms-is-hns-enabled",
            xmlName: "x-ms-is-hns-enabled",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    BlobGetAccountInfoExceptionHeaders = {
      serializedName: "Blob_getAccountInfoExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobGetAccountInfoExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobQueryHeaders = {
      serializedName: "Blob_queryHeaders",
      type: {
        name: "Composite",
        className: "BlobQueryHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          metadata: {
            serializedName: "x-ms-meta",
            headerCollectionPrefix: "x-ms-meta-",
            xmlName: "x-ms-meta",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          },
          contentLength: {
            serializedName: "content-length",
            xmlName: "content-length",
            type: {
              name: "Number"
            }
          },
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          contentRange: {
            serializedName: "content-range",
            xmlName: "content-range",
            type: {
              name: "String"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          contentEncoding: {
            serializedName: "content-encoding",
            xmlName: "content-encoding",
            type: {
              name: "String"
            }
          },
          cacheControl: {
            serializedName: "cache-control",
            xmlName: "cache-control",
            type: {
              name: "String"
            }
          },
          contentDisposition: {
            serializedName: "content-disposition",
            xmlName: "content-disposition",
            type: {
              name: "String"
            }
          },
          contentLanguage: {
            serializedName: "content-language",
            xmlName: "content-language",
            type: {
              name: "String"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          blobType: {
            serializedName: "x-ms-blob-type",
            xmlName: "x-ms-blob-type",
            type: {
              name: "Enum",
              allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
            }
          },
          copyCompletionTime: {
            serializedName: "x-ms-copy-completion-time",
            xmlName: "x-ms-copy-completion-time",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyStatusDescription: {
            serializedName: "x-ms-copy-status-description",
            xmlName: "x-ms-copy-status-description",
            type: {
              name: "String"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyProgress: {
            serializedName: "x-ms-copy-progress",
            xmlName: "x-ms-copy-progress",
            type: {
              name: "String"
            }
          },
          copySource: {
            serializedName: "x-ms-copy-source",
            xmlName: "x-ms-copy-source",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          leaseDuration: {
            serializedName: "x-ms-lease-duration",
            xmlName: "x-ms-lease-duration",
            type: {
              name: "Enum",
              allowedValues: ["infinite", "fixed"]
            }
          },
          leaseState: {
            serializedName: "x-ms-lease-state",
            xmlName: "x-ms-lease-state",
            type: {
              name: "Enum",
              allowedValues: [
                "available",
                "leased",
                "expired",
                "breaking",
                "broken"
              ]
            }
          },
          leaseStatus: {
            serializedName: "x-ms-lease-status",
            xmlName: "x-ms-lease-status",
            type: {
              name: "Enum",
              allowedValues: ["locked", "unlocked"]
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          acceptRanges: {
            serializedName: "accept-ranges",
            xmlName: "accept-ranges",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-server-encrypted",
            xmlName: "x-ms-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          blobContentMD5: {
            serializedName: "x-ms-blob-content-md5",
            xmlName: "x-ms-blob-content-md5",
            type: {
              name: "ByteArray"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          },
          contentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    };
    BlobQueryExceptionHeaders = {
      serializedName: "Blob_queryExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobQueryExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobGetTagsHeaders = {
      serializedName: "Blob_getTagsHeaders",
      type: {
        name: "Composite",
        className: "BlobGetTagsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobGetTagsExceptionHeaders = {
      serializedName: "Blob_getTagsExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobGetTagsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetTagsHeaders = {
      serializedName: "Blob_setTagsHeaders",
      type: {
        name: "Composite",
        className: "BlobSetTagsHeaders",
        modelProperties: {
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlobSetTagsExceptionHeaders = {
      serializedName: "Blob_setTagsExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlobSetTagsExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobCreateHeaders = {
      serializedName: "PageBlob_createHeaders",
      type: {
        name: "Composite",
        className: "PageBlobCreateHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobCreateExceptionHeaders = {
      serializedName: "PageBlob_createExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobCreateExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobUploadPagesHeaders = {
      serializedName: "PageBlob_uploadPagesHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUploadPagesHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobUploadPagesExceptionHeaders = {
      serializedName: "PageBlob_uploadPagesExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUploadPagesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobClearPagesHeaders = {
      serializedName: "PageBlob_clearPagesHeaders",
      type: {
        name: "Composite",
        className: "PageBlobClearPagesHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobClearPagesExceptionHeaders = {
      serializedName: "PageBlob_clearPagesExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobClearPagesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobUploadPagesFromURLHeaders = {
      serializedName: "PageBlob_uploadPagesFromURLHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUploadPagesFromURLHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobUploadPagesFromURLExceptionHeaders = {
      serializedName: "PageBlob_uploadPagesFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUploadPagesFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobGetPageRangesHeaders = {
      serializedName: "PageBlob_getPageRangesHeaders",
      type: {
        name: "Composite",
        className: "PageBlobGetPageRangesHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          blobContentLength: {
            serializedName: "x-ms-blob-content-length",
            xmlName: "x-ms-blob-content-length",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobGetPageRangesExceptionHeaders = {
      serializedName: "PageBlob_getPageRangesExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobGetPageRangesExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobGetPageRangesDiffHeaders = {
      serializedName: "PageBlob_getPageRangesDiffHeaders",
      type: {
        name: "Composite",
        className: "PageBlobGetPageRangesDiffHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          blobContentLength: {
            serializedName: "x-ms-blob-content-length",
            xmlName: "x-ms-blob-content-length",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobGetPageRangesDiffExceptionHeaders = {
      serializedName: "PageBlob_getPageRangesDiffExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobGetPageRangesDiffExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobResizeHeaders = {
      serializedName: "PageBlob_resizeHeaders",
      type: {
        name: "Composite",
        className: "PageBlobResizeHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobResizeExceptionHeaders = {
      serializedName: "PageBlob_resizeExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobResizeExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobUpdateSequenceNumberHeaders = {
      serializedName: "PageBlob_updateSequenceNumberHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUpdateSequenceNumberHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobSequenceNumber: {
            serializedName: "x-ms-blob-sequence-number",
            xmlName: "x-ms-blob-sequence-number",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobUpdateSequenceNumberExceptionHeaders = {
      serializedName: "PageBlob_updateSequenceNumberExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobUpdateSequenceNumberExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobCopyIncrementalHeaders = {
      serializedName: "PageBlob_copyIncrementalHeaders",
      type: {
        name: "Composite",
        className: "PageBlobCopyIncrementalHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          copyId: {
            serializedName: "x-ms-copy-id",
            xmlName: "x-ms-copy-id",
            type: {
              name: "String"
            }
          },
          copyStatus: {
            serializedName: "x-ms-copy-status",
            xmlName: "x-ms-copy-status",
            type: {
              name: "Enum",
              allowedValues: ["pending", "success", "aborted", "failed"]
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    PageBlobCopyIncrementalExceptionHeaders = {
      serializedName: "PageBlob_copyIncrementalExceptionHeaders",
      type: {
        name: "Composite",
        className: "PageBlobCopyIncrementalExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    AppendBlobCreateHeaders = {
      serializedName: "AppendBlob_createHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobCreateHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    AppendBlobCreateExceptionHeaders = {
      serializedName: "AppendBlob_createExceptionHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobCreateExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    AppendBlobAppendBlockHeaders = {
      serializedName: "AppendBlob_appendBlockHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobAppendBlockHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobAppendOffset: {
            serializedName: "x-ms-blob-append-offset",
            xmlName: "x-ms-blob-append-offset",
            type: {
              name: "String"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    AppendBlobAppendBlockExceptionHeaders = {
      serializedName: "AppendBlob_appendBlockExceptionHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobAppendBlockExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    AppendBlobAppendBlockFromUrlHeaders = {
      serializedName: "AppendBlob_appendBlockFromUrlHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobAppendBlockFromUrlHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          blobAppendOffset: {
            serializedName: "x-ms-blob-append-offset",
            xmlName: "x-ms-blob-append-offset",
            type: {
              name: "String"
            }
          },
          blobCommittedBlockCount: {
            serializedName: "x-ms-blob-committed-block-count",
            xmlName: "x-ms-blob-committed-block-count",
            type: {
              name: "Number"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    AppendBlobAppendBlockFromUrlExceptionHeaders = {
      serializedName: "AppendBlob_appendBlockFromUrlExceptionHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobAppendBlockFromUrlExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    AppendBlobSealHeaders = {
      serializedName: "AppendBlob_sealHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobSealHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isSealed: {
            serializedName: "x-ms-blob-sealed",
            xmlName: "x-ms-blob-sealed",
            type: {
              name: "Boolean"
            }
          }
        }
      }
    };
    AppendBlobSealExceptionHeaders = {
      serializedName: "AppendBlob_sealExceptionHeaders",
      type: {
        name: "Composite",
        className: "AppendBlobSealExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobUploadHeaders = {
      serializedName: "BlockBlob_uploadHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobUploadHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobUploadExceptionHeaders = {
      serializedName: "BlockBlob_uploadExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobUploadExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobPutBlobFromUrlHeaders = {
      serializedName: "BlockBlob_putBlobFromUrlHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobPutBlobFromUrlHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobPutBlobFromUrlExceptionHeaders = {
      serializedName: "BlockBlob_putBlobFromUrlExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobPutBlobFromUrlExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobStageBlockHeaders = {
      serializedName: "BlockBlob_stageBlockHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobStageBlockHeaders",
        modelProperties: {
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobStageBlockExceptionHeaders = {
      serializedName: "BlockBlob_stageBlockExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobStageBlockExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobStageBlockFromURLHeaders = {
      serializedName: "BlockBlob_stageBlockFromURLHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobStageBlockFromURLHeaders",
        modelProperties: {
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobStageBlockFromURLExceptionHeaders = {
      serializedName: "BlockBlob_stageBlockFromURLExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobStageBlockFromURLExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobCommitBlockListHeaders = {
      serializedName: "BlockBlob_commitBlockListHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobCommitBlockListHeaders",
        modelProperties: {
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          contentMD5: {
            serializedName: "content-md5",
            xmlName: "content-md5",
            type: {
              name: "ByteArray"
            }
          },
          xMsContentCrc64: {
            serializedName: "x-ms-content-crc64",
            xmlName: "x-ms-content-crc64",
            type: {
              name: "ByteArray"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          versionId: {
            serializedName: "x-ms-version-id",
            xmlName: "x-ms-version-id",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          isServerEncrypted: {
            serializedName: "x-ms-request-server-encrypted",
            xmlName: "x-ms-request-server-encrypted",
            type: {
              name: "Boolean"
            }
          },
          encryptionKeySha256: {
            serializedName: "x-ms-encryption-key-sha256",
            xmlName: "x-ms-encryption-key-sha256",
            type: {
              name: "String"
            }
          },
          encryptionScope: {
            serializedName: "x-ms-encryption-scope",
            xmlName: "x-ms-encryption-scope",
            type: {
              name: "String"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobCommitBlockListExceptionHeaders = {
      serializedName: "BlockBlob_commitBlockListExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobCommitBlockListExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobGetBlockListHeaders = {
      serializedName: "BlockBlob_getBlockListHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobGetBlockListHeaders",
        modelProperties: {
          lastModified: {
            serializedName: "last-modified",
            xmlName: "last-modified",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          etag: {
            serializedName: "etag",
            xmlName: "etag",
            type: {
              name: "String"
            }
          },
          contentType: {
            serializedName: "content-type",
            xmlName: "content-type",
            type: {
              name: "String"
            }
          },
          blobContentLength: {
            serializedName: "x-ms-blob-content-length",
            xmlName: "x-ms-blob-content-length",
            type: {
              name: "Number"
            }
          },
          clientRequestId: {
            serializedName: "x-ms-client-request-id",
            xmlName: "x-ms-client-request-id",
            type: {
              name: "String"
            }
          },
          requestId: {
            serializedName: "x-ms-request-id",
            xmlName: "x-ms-request-id",
            type: {
              name: "String"
            }
          },
          version: {
            serializedName: "x-ms-version",
            xmlName: "x-ms-version",
            type: {
              name: "String"
            }
          },
          date: {
            serializedName: "date",
            xmlName: "date",
            type: {
              name: "DateTimeRfc1123"
            }
          },
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
    BlockBlobGetBlockListExceptionHeaders = {
      serializedName: "BlockBlob_getBlockListExceptionHeaders",
      type: {
        name: "Composite",
        className: "BlockBlobGetBlockListExceptionHeaders",
        modelProperties: {
          errorCode: {
            serializedName: "x-ms-error-code",
            xmlName: "x-ms-error-code",
            type: {
              name: "String"
            }
          }
        }
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js
var contentType, blobServiceProperties, accept, url, restype, comp, timeoutInSeconds, version2, requestId, accept1, comp1, comp2, prefix, marker, maxPageSize, include, keyInfo, comp3, restype1, body, comp4, contentLength, multipartContentType, comp5, where, restype2, metadata2, access, defaultEncryptionScope, preventEncryptionScopeOverride, leaseId, ifModifiedSince, ifUnmodifiedSince, comp6, comp7, containerAcl, comp8, deletedContainerName, deletedContainerVersion, comp9, sourceContainerName, sourceLeaseId, comp10, action, duration, proposedLeaseId, action1, leaseId1, action2, action3, breakPeriod, action4, proposedLeaseId1, include1, delimiter, snapshot, versionId, range, rangeGetContentMD5, rangeGetContentCRC64, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, deleteSnapshots, blobDeleteType, comp11, expiryOptions, expiresOn, blobCacheControl, blobContentType, blobContentMD5, blobContentEncoding, blobContentLanguage, blobContentDisposition, comp12, immutabilityPolicyExpiry, immutabilityPolicyMode, comp13, legalHold, encryptionScope, comp14, tier, rehydratePriority, sourceIfModifiedSince, sourceIfUnmodifiedSince, sourceIfMatch, sourceIfNoneMatch, sourceIfTags, copySource, blobTagsString, sealBlob, legalHold1, xMsRequiresSync, sourceContentMD5, copySourceAuthorization, copySourceTags, comp15, copyActionAbortConstant, copyId, comp16, tier1, queryRequest, comp17, comp18, tags, transactionalContentMD5, transactionalContentCrc64, blobType, blobContentLength, blobSequenceNumber, contentType1, body1, accept2, comp19, pageWrite, ifSequenceNumberLessThanOrEqualTo, ifSequenceNumberLessThan, ifSequenceNumberEqualTo, pageWrite1, sourceUrl, sourceRange, sourceContentCrc64, range1, comp20, prevsnapshot, prevSnapshotUrl, sequenceNumberAction, comp21, blobType1, comp22, maxSize, appendPosition, sourceRange1, comp23, blobType2, copySourceBlobProperties, comp24, blockId, blocks, comp25, listType;
var init_parameters = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"() {
    "use strict";
    init_mappers();
    contentType = {
      parameterPath: ["options", "contentType"],
      mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
          name: "String"
        }
      }
    };
    blobServiceProperties = {
      parameterPath: "blobServiceProperties",
      mapper: BlobServiceProperties
    };
    accept = {
      parameterPath: "accept",
      mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
          name: "String"
        }
      }
    };
    url = {
      parameterPath: "url",
      mapper: {
        serializedName: "url",
        required: true,
        xmlName: "url",
        type: {
          name: "String"
        }
      },
      skipEncoding: true
    };
    restype = {
      parameterPath: "restype",
      mapper: {
        defaultValue: "service",
        isConstant: true,
        serializedName: "restype",
        type: {
          name: "String"
        }
      }
    };
    comp = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "properties",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    timeoutInSeconds = {
      parameterPath: ["options", "timeoutInSeconds"],
      mapper: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "timeout",
        xmlName: "timeout",
        type: {
          name: "Number"
        }
      }
    };
    version2 = {
      parameterPath: "version",
      mapper: {
        defaultValue: "2025-01-05",
        isConstant: true,
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    };
    requestId = {
      parameterPath: ["options", "requestId"],
      mapper: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      }
    };
    accept1 = {
      parameterPath: "accept",
      mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
          name: "String"
        }
      }
    };
    comp1 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "stats",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    comp2 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "list",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    prefix = {
      parameterPath: ["options", "prefix"],
      mapper: {
        serializedName: "prefix",
        xmlName: "prefix",
        type: {
          name: "String"
        }
      }
    };
    marker = {
      parameterPath: ["options", "marker"],
      mapper: {
        serializedName: "marker",
        xmlName: "marker",
        type: {
          name: "String"
        }
      }
    };
    maxPageSize = {
      parameterPath: ["options", "maxPageSize"],
      mapper: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "maxresults",
        xmlName: "maxresults",
        type: {
          name: "Number"
        }
      }
    };
    include = {
      parameterPath: ["options", "include"],
      mapper: {
        serializedName: "include",
        xmlName: "include",
        xmlElementName: "ListContainersIncludeType",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["metadata", "deleted", "system"]
            }
          }
        }
      },
      collectionFormat: "CSV"
    };
    keyInfo = {
      parameterPath: "keyInfo",
      mapper: KeyInfo
    };
    comp3 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "userdelegationkey",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    restype1 = {
      parameterPath: "restype",
      mapper: {
        defaultValue: "account",
        isConstant: true,
        serializedName: "restype",
        type: {
          name: "String"
        }
      }
    };
    body = {
      parameterPath: "body",
      mapper: {
        serializedName: "body",
        required: true,
        xmlName: "body",
        type: {
          name: "Stream"
        }
      }
    };
    comp4 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "batch",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    contentLength = {
      parameterPath: "contentLength",
      mapper: {
        serializedName: "Content-Length",
        required: true,
        xmlName: "Content-Length",
        type: {
          name: "Number"
        }
      }
    };
    multipartContentType = {
      parameterPath: "multipartContentType",
      mapper: {
        serializedName: "Content-Type",
        required: true,
        xmlName: "Content-Type",
        type: {
          name: "String"
        }
      }
    };
    comp5 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "blobs",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    where = {
      parameterPath: ["options", "where"],
      mapper: {
        serializedName: "where",
        xmlName: "where",
        type: {
          name: "String"
        }
      }
    };
    restype2 = {
      parameterPath: "restype",
      mapper: {
        defaultValue: "container",
        isConstant: true,
        serializedName: "restype",
        type: {
          name: "String"
        }
      }
    };
    metadata2 = {
      parameterPath: ["options", "metadata"],
      mapper: {
        serializedName: "x-ms-meta",
        xmlName: "x-ms-meta",
        headerCollectionPrefix: "x-ms-meta-",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    };
    access = {
      parameterPath: ["options", "access"],
      mapper: {
        serializedName: "x-ms-blob-public-access",
        xmlName: "x-ms-blob-public-access",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      }
    };
    defaultEncryptionScope = {
      parameterPath: [
        "options",
        "containerEncryptionScope",
        "defaultEncryptionScope"
      ],
      mapper: {
        serializedName: "x-ms-default-encryption-scope",
        xmlName: "x-ms-default-encryption-scope",
        type: {
          name: "String"
        }
      }
    };
    preventEncryptionScopeOverride = {
      parameterPath: [
        "options",
        "containerEncryptionScope",
        "preventEncryptionScopeOverride"
      ],
      mapper: {
        serializedName: "x-ms-deny-encryption-scope-override",
        xmlName: "x-ms-deny-encryption-scope-override",
        type: {
          name: "Boolean"
        }
      }
    };
    leaseId = {
      parameterPath: ["options", "leaseAccessConditions", "leaseId"],
      mapper: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      }
    };
    ifModifiedSince = {
      parameterPath: ["options", "modifiedAccessConditions", "ifModifiedSince"],
      mapper: {
        serializedName: "If-Modified-Since",
        xmlName: "If-Modified-Since",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    ifUnmodifiedSince = {
      parameterPath: ["options", "modifiedAccessConditions", "ifUnmodifiedSince"],
      mapper: {
        serializedName: "If-Unmodified-Since",
        xmlName: "If-Unmodified-Since",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    comp6 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "metadata",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    comp7 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "acl",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    containerAcl = {
      parameterPath: ["options", "containerAcl"],
      mapper: {
        serializedName: "containerAcl",
        xmlName: "SignedIdentifiers",
        xmlIsWrapped: true,
        xmlElementName: "SignedIdentifier",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedIdentifier"
            }
          }
        }
      }
    };
    comp8 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "undelete",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    deletedContainerName = {
      parameterPath: ["options", "deletedContainerName"],
      mapper: {
        serializedName: "x-ms-deleted-container-name",
        xmlName: "x-ms-deleted-container-name",
        type: {
          name: "String"
        }
      }
    };
    deletedContainerVersion = {
      parameterPath: ["options", "deletedContainerVersion"],
      mapper: {
        serializedName: "x-ms-deleted-container-version",
        xmlName: "x-ms-deleted-container-version",
        type: {
          name: "String"
        }
      }
    };
    comp9 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "rename",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    sourceContainerName = {
      parameterPath: "sourceContainerName",
      mapper: {
        serializedName: "x-ms-source-container-name",
        required: true,
        xmlName: "x-ms-source-container-name",
        type: {
          name: "String"
        }
      }
    };
    sourceLeaseId = {
      parameterPath: ["options", "sourceLeaseId"],
      mapper: {
        serializedName: "x-ms-source-lease-id",
        xmlName: "x-ms-source-lease-id",
        type: {
          name: "String"
        }
      }
    };
    comp10 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "lease",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    action = {
      parameterPath: "action",
      mapper: {
        defaultValue: "acquire",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    duration = {
      parameterPath: ["options", "duration"],
      mapper: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Number"
        }
      }
    };
    proposedLeaseId = {
      parameterPath: ["options", "proposedLeaseId"],
      mapper: {
        serializedName: "x-ms-proposed-lease-id",
        xmlName: "x-ms-proposed-lease-id",
        type: {
          name: "String"
        }
      }
    };
    action1 = {
      parameterPath: "action",
      mapper: {
        defaultValue: "release",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    leaseId1 = {
      parameterPath: "leaseId",
      mapper: {
        serializedName: "x-ms-lease-id",
        required: true,
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      }
    };
    action2 = {
      parameterPath: "action",
      mapper: {
        defaultValue: "renew",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    action3 = {
      parameterPath: "action",
      mapper: {
        defaultValue: "break",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    breakPeriod = {
      parameterPath: ["options", "breakPeriod"],
      mapper: {
        serializedName: "x-ms-lease-break-period",
        xmlName: "x-ms-lease-break-period",
        type: {
          name: "Number"
        }
      }
    };
    action4 = {
      parameterPath: "action",
      mapper: {
        defaultValue: "change",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
          name: "String"
        }
      }
    };
    proposedLeaseId1 = {
      parameterPath: "proposedLeaseId",
      mapper: {
        serializedName: "x-ms-proposed-lease-id",
        required: true,
        xmlName: "x-ms-proposed-lease-id",
        type: {
          name: "String"
        }
      }
    };
    include1 = {
      parameterPath: ["options", "include"],
      mapper: {
        serializedName: "include",
        xmlName: "include",
        xmlElementName: "ListBlobsIncludeItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "copy",
                "deleted",
                "metadata",
                "snapshots",
                "uncommittedblobs",
                "versions",
                "tags",
                "immutabilitypolicy",
                "legalhold",
                "deletedwithversions"
              ]
            }
          }
        }
      },
      collectionFormat: "CSV"
    };
    delimiter = {
      parameterPath: "delimiter",
      mapper: {
        serializedName: "delimiter",
        required: true,
        xmlName: "delimiter",
        type: {
          name: "String"
        }
      }
    };
    snapshot = {
      parameterPath: ["options", "snapshot"],
      mapper: {
        serializedName: "snapshot",
        xmlName: "snapshot",
        type: {
          name: "String"
        }
      }
    };
    versionId = {
      parameterPath: ["options", "versionId"],
      mapper: {
        serializedName: "versionid",
        xmlName: "versionid",
        type: {
          name: "String"
        }
      }
    };
    range = {
      parameterPath: ["options", "range"],
      mapper: {
        serializedName: "x-ms-range",
        xmlName: "x-ms-range",
        type: {
          name: "String"
        }
      }
    };
    rangeGetContentMD5 = {
      parameterPath: ["options", "rangeGetContentMD5"],
      mapper: {
        serializedName: "x-ms-range-get-content-md5",
        xmlName: "x-ms-range-get-content-md5",
        type: {
          name: "Boolean"
        }
      }
    };
    rangeGetContentCRC64 = {
      parameterPath: ["options", "rangeGetContentCRC64"],
      mapper: {
        serializedName: "x-ms-range-get-content-crc64",
        xmlName: "x-ms-range-get-content-crc64",
        type: {
          name: "Boolean"
        }
      }
    };
    encryptionKey = {
      parameterPath: ["options", "cpkInfo", "encryptionKey"],
      mapper: {
        serializedName: "x-ms-encryption-key",
        xmlName: "x-ms-encryption-key",
        type: {
          name: "String"
        }
      }
    };
    encryptionKeySha256 = {
      parameterPath: ["options", "cpkInfo", "encryptionKeySha256"],
      mapper: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      }
    };
    encryptionAlgorithm = {
      parameterPath: ["options", "cpkInfo", "encryptionAlgorithm"],
      mapper: {
        serializedName: "x-ms-encryption-algorithm",
        xmlName: "x-ms-encryption-algorithm",
        type: {
          name: "String"
        }
      }
    };
    ifMatch = {
      parameterPath: ["options", "modifiedAccessConditions", "ifMatch"],
      mapper: {
        serializedName: "If-Match",
        xmlName: "If-Match",
        type: {
          name: "String"
        }
      }
    };
    ifNoneMatch = {
      parameterPath: ["options", "modifiedAccessConditions", "ifNoneMatch"],
      mapper: {
        serializedName: "If-None-Match",
        xmlName: "If-None-Match",
        type: {
          name: "String"
        }
      }
    };
    ifTags = {
      parameterPath: ["options", "modifiedAccessConditions", "ifTags"],
      mapper: {
        serializedName: "x-ms-if-tags",
        xmlName: "x-ms-if-tags",
        type: {
          name: "String"
        }
      }
    };
    deleteSnapshots = {
      parameterPath: ["options", "deleteSnapshots"],
      mapper: {
        serializedName: "x-ms-delete-snapshots",
        xmlName: "x-ms-delete-snapshots",
        type: {
          name: "Enum",
          allowedValues: ["include", "only"]
        }
      }
    };
    blobDeleteType = {
      parameterPath: ["options", "blobDeleteType"],
      mapper: {
        serializedName: "deletetype",
        xmlName: "deletetype",
        type: {
          name: "String"
        }
      }
    };
    comp11 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "expiry",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    expiryOptions = {
      parameterPath: "expiryOptions",
      mapper: {
        serializedName: "x-ms-expiry-option",
        required: true,
        xmlName: "x-ms-expiry-option",
        type: {
          name: "String"
        }
      }
    };
    expiresOn = {
      parameterPath: ["options", "expiresOn"],
      mapper: {
        serializedName: "x-ms-expiry-time",
        xmlName: "x-ms-expiry-time",
        type: {
          name: "String"
        }
      }
    };
    blobCacheControl = {
      parameterPath: ["options", "blobHttpHeaders", "blobCacheControl"],
      mapper: {
        serializedName: "x-ms-blob-cache-control",
        xmlName: "x-ms-blob-cache-control",
        type: {
          name: "String"
        }
      }
    };
    blobContentType = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentType"],
      mapper: {
        serializedName: "x-ms-blob-content-type",
        xmlName: "x-ms-blob-content-type",
        type: {
          name: "String"
        }
      }
    };
    blobContentMD5 = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentMD5"],
      mapper: {
        serializedName: "x-ms-blob-content-md5",
        xmlName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      }
    };
    blobContentEncoding = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentEncoding"],
      mapper: {
        serializedName: "x-ms-blob-content-encoding",
        xmlName: "x-ms-blob-content-encoding",
        type: {
          name: "String"
        }
      }
    };
    blobContentLanguage = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentLanguage"],
      mapper: {
        serializedName: "x-ms-blob-content-language",
        xmlName: "x-ms-blob-content-language",
        type: {
          name: "String"
        }
      }
    };
    blobContentDisposition = {
      parameterPath: ["options", "blobHttpHeaders", "blobContentDisposition"],
      mapper: {
        serializedName: "x-ms-blob-content-disposition",
        xmlName: "x-ms-blob-content-disposition",
        type: {
          name: "String"
        }
      }
    };
    comp12 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "immutabilityPolicies",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    immutabilityPolicyExpiry = {
      parameterPath: ["options", "immutabilityPolicyExpiry"],
      mapper: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    immutabilityPolicyMode = {
      parameterPath: ["options", "immutabilityPolicyMode"],
      mapper: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      }
    };
    comp13 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "legalhold",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    legalHold = {
      parameterPath: "legalHold",
      mapper: {
        serializedName: "x-ms-legal-hold",
        required: true,
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      }
    };
    encryptionScope = {
      parameterPath: ["options", "encryptionScope"],
      mapper: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      }
    };
    comp14 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "snapshot",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    tier = {
      parameterPath: ["options", "tier"],
      mapper: {
        serializedName: "x-ms-access-tier",
        xmlName: "x-ms-access-tier",
        type: {
          name: "Enum",
          allowedValues: [
            "P4",
            "P6",
            "P10",
            "P15",
            "P20",
            "P30",
            "P40",
            "P50",
            "P60",
            "P70",
            "P80",
            "Hot",
            "Cool",
            "Archive",
            "Cold"
          ]
        }
      }
    };
    rehydratePriority = {
      parameterPath: ["options", "rehydratePriority"],
      mapper: {
        serializedName: "x-ms-rehydrate-priority",
        xmlName: "x-ms-rehydrate-priority",
        type: {
          name: "Enum",
          allowedValues: ["High", "Standard"]
        }
      }
    };
    sourceIfModifiedSince = {
      parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfModifiedSince"
      ],
      mapper: {
        serializedName: "x-ms-source-if-modified-since",
        xmlName: "x-ms-source-if-modified-since",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    sourceIfUnmodifiedSince = {
      parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfUnmodifiedSince"
      ],
      mapper: {
        serializedName: "x-ms-source-if-unmodified-since",
        xmlName: "x-ms-source-if-unmodified-since",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    };
    sourceIfMatch = {
      parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfMatch"],
      mapper: {
        serializedName: "x-ms-source-if-match",
        xmlName: "x-ms-source-if-match",
        type: {
          name: "String"
        }
      }
    };
    sourceIfNoneMatch = {
      parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfNoneMatch"
      ],
      mapper: {
        serializedName: "x-ms-source-if-none-match",
        xmlName: "x-ms-source-if-none-match",
        type: {
          name: "String"
        }
      }
    };
    sourceIfTags = {
      parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfTags"],
      mapper: {
        serializedName: "x-ms-source-if-tags",
        xmlName: "x-ms-source-if-tags",
        type: {
          name: "String"
        }
      }
    };
    copySource = {
      parameterPath: "copySource",
      mapper: {
        serializedName: "x-ms-copy-source",
        required: true,
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      }
    };
    blobTagsString = {
      parameterPath: ["options", "blobTagsString"],
      mapper: {
        serializedName: "x-ms-tags",
        xmlName: "x-ms-tags",
        type: {
          name: "String"
        }
      }
    };
    sealBlob = {
      parameterPath: ["options", "sealBlob"],
      mapper: {
        serializedName: "x-ms-seal-blob",
        xmlName: "x-ms-seal-blob",
        type: {
          name: "Boolean"
        }
      }
    };
    legalHold1 = {
      parameterPath: ["options", "legalHold"],
      mapper: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      }
    };
    xMsRequiresSync = {
      parameterPath: "xMsRequiresSync",
      mapper: {
        defaultValue: "true",
        isConstant: true,
        serializedName: "x-ms-requires-sync",
        type: {
          name: "String"
        }
      }
    };
    sourceContentMD5 = {
      parameterPath: ["options", "sourceContentMD5"],
      mapper: {
        serializedName: "x-ms-source-content-md5",
        xmlName: "x-ms-source-content-md5",
        type: {
          name: "ByteArray"
        }
      }
    };
    copySourceAuthorization = {
      parameterPath: ["options", "copySourceAuthorization"],
      mapper: {
        serializedName: "x-ms-copy-source-authorization",
        xmlName: "x-ms-copy-source-authorization",
        type: {
          name: "String"
        }
      }
    };
    copySourceTags = {
      parameterPath: ["options", "copySourceTags"],
      mapper: {
        serializedName: "x-ms-copy-source-tag-option",
        xmlName: "x-ms-copy-source-tag-option",
        type: {
          name: "Enum",
          allowedValues: ["REPLACE", "COPY"]
        }
      }
    };
    comp15 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "copy",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    copyActionAbortConstant = {
      parameterPath: "copyActionAbortConstant",
      mapper: {
        defaultValue: "abort",
        isConstant: true,
        serializedName: "x-ms-copy-action",
        type: {
          name: "String"
        }
      }
    };
    copyId = {
      parameterPath: "copyId",
      mapper: {
        serializedName: "copyid",
        required: true,
        xmlName: "copyid",
        type: {
          name: "String"
        }
      }
    };
    comp16 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "tier",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    tier1 = {
      parameterPath: "tier",
      mapper: {
        serializedName: "x-ms-access-tier",
        required: true,
        xmlName: "x-ms-access-tier",
        type: {
          name: "Enum",
          allowedValues: [
            "P4",
            "P6",
            "P10",
            "P15",
            "P20",
            "P30",
            "P40",
            "P50",
            "P60",
            "P70",
            "P80",
            "Hot",
            "Cool",
            "Archive",
            "Cold"
          ]
        }
      }
    };
    queryRequest = {
      parameterPath: ["options", "queryRequest"],
      mapper: QueryRequest
    };
    comp17 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "query",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    comp18 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "tags",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    tags = {
      parameterPath: ["options", "tags"],
      mapper: BlobTags
    };
    transactionalContentMD5 = {
      parameterPath: ["options", "transactionalContentMD5"],
      mapper: {
        serializedName: "Content-MD5",
        xmlName: "Content-MD5",
        type: {
          name: "ByteArray"
        }
      }
    };
    transactionalContentCrc64 = {
      parameterPath: ["options", "transactionalContentCrc64"],
      mapper: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    };
    blobType = {
      parameterPath: "blobType",
      mapper: {
        defaultValue: "PageBlob",
        isConstant: true,
        serializedName: "x-ms-blob-type",
        type: {
          name: "String"
        }
      }
    };
    blobContentLength = {
      parameterPath: "blobContentLength",
      mapper: {
        serializedName: "x-ms-blob-content-length",
        required: true,
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      }
    };
    blobSequenceNumber = {
      parameterPath: ["options", "blobSequenceNumber"],
      mapper: {
        defaultValue: 0,
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      }
    };
    contentType1 = {
      parameterPath: ["options", "contentType"],
      mapper: {
        defaultValue: "application/octet-stream",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
          name: "String"
        }
      }
    };
    body1 = {
      parameterPath: "body",
      mapper: {
        serializedName: "body",
        required: true,
        xmlName: "body",
        type: {
          name: "Stream"
        }
      }
    };
    accept2 = {
      parameterPath: "accept",
      mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
          name: "String"
        }
      }
    };
    comp19 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "page",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    pageWrite = {
      parameterPath: "pageWrite",
      mapper: {
        defaultValue: "update",
        isConstant: true,
        serializedName: "x-ms-page-write",
        type: {
          name: "String"
        }
      }
    };
    ifSequenceNumberLessThanOrEqualTo = {
      parameterPath: [
        "options",
        "sequenceNumberAccessConditions",
        "ifSequenceNumberLessThanOrEqualTo"
      ],
      mapper: {
        serializedName: "x-ms-if-sequence-number-le",
        xmlName: "x-ms-if-sequence-number-le",
        type: {
          name: "Number"
        }
      }
    };
    ifSequenceNumberLessThan = {
      parameterPath: [
        "options",
        "sequenceNumberAccessConditions",
        "ifSequenceNumberLessThan"
      ],
      mapper: {
        serializedName: "x-ms-if-sequence-number-lt",
        xmlName: "x-ms-if-sequence-number-lt",
        type: {
          name: "Number"
        }
      }
    };
    ifSequenceNumberEqualTo = {
      parameterPath: [
        "options",
        "sequenceNumberAccessConditions",
        "ifSequenceNumberEqualTo"
      ],
      mapper: {
        serializedName: "x-ms-if-sequence-number-eq",
        xmlName: "x-ms-if-sequence-number-eq",
        type: {
          name: "Number"
        }
      }
    };
    pageWrite1 = {
      parameterPath: "pageWrite",
      mapper: {
        defaultValue: "clear",
        isConstant: true,
        serializedName: "x-ms-page-write",
        type: {
          name: "String"
        }
      }
    };
    sourceUrl = {
      parameterPath: "sourceUrl",
      mapper: {
        serializedName: "x-ms-copy-source",
        required: true,
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      }
    };
    sourceRange = {
      parameterPath: "sourceRange",
      mapper: {
        serializedName: "x-ms-source-range",
        required: true,
        xmlName: "x-ms-source-range",
        type: {
          name: "String"
        }
      }
    };
    sourceContentCrc64 = {
      parameterPath: ["options", "sourceContentCrc64"],
      mapper: {
        serializedName: "x-ms-source-content-crc64",
        xmlName: "x-ms-source-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    };
    range1 = {
      parameterPath: "range",
      mapper: {
        serializedName: "x-ms-range",
        required: true,
        xmlName: "x-ms-range",
        type: {
          name: "String"
        }
      }
    };
    comp20 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "pagelist",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    prevsnapshot = {
      parameterPath: ["options", "prevsnapshot"],
      mapper: {
        serializedName: "prevsnapshot",
        xmlName: "prevsnapshot",
        type: {
          name: "String"
        }
      }
    };
    prevSnapshotUrl = {
      parameterPath: ["options", "prevSnapshotUrl"],
      mapper: {
        serializedName: "x-ms-previous-snapshot-url",
        xmlName: "x-ms-previous-snapshot-url",
        type: {
          name: "String"
        }
      }
    };
    sequenceNumberAction = {
      parameterPath: "sequenceNumberAction",
      mapper: {
        serializedName: "x-ms-sequence-number-action",
        required: true,
        xmlName: "x-ms-sequence-number-action",
        type: {
          name: "Enum",
          allowedValues: ["max", "update", "increment"]
        }
      }
    };
    comp21 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "incrementalcopy",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    blobType1 = {
      parameterPath: "blobType",
      mapper: {
        defaultValue: "AppendBlob",
        isConstant: true,
        serializedName: "x-ms-blob-type",
        type: {
          name: "String"
        }
      }
    };
    comp22 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "appendblock",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    maxSize = {
      parameterPath: ["options", "appendPositionAccessConditions", "maxSize"],
      mapper: {
        serializedName: "x-ms-blob-condition-maxsize",
        xmlName: "x-ms-blob-condition-maxsize",
        type: {
          name: "Number"
        }
      }
    };
    appendPosition = {
      parameterPath: [
        "options",
        "appendPositionAccessConditions",
        "appendPosition"
      ],
      mapper: {
        serializedName: "x-ms-blob-condition-appendpos",
        xmlName: "x-ms-blob-condition-appendpos",
        type: {
          name: "Number"
        }
      }
    };
    sourceRange1 = {
      parameterPath: ["options", "sourceRange"],
      mapper: {
        serializedName: "x-ms-source-range",
        xmlName: "x-ms-source-range",
        type: {
          name: "String"
        }
      }
    };
    comp23 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "seal",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    blobType2 = {
      parameterPath: "blobType",
      mapper: {
        defaultValue: "BlockBlob",
        isConstant: true,
        serializedName: "x-ms-blob-type",
        type: {
          name: "String"
        }
      }
    };
    copySourceBlobProperties = {
      parameterPath: ["options", "copySourceBlobProperties"],
      mapper: {
        serializedName: "x-ms-copy-source-blob-properties",
        xmlName: "x-ms-copy-source-blob-properties",
        type: {
          name: "Boolean"
        }
      }
    };
    comp24 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "block",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    blockId = {
      parameterPath: "blockId",
      mapper: {
        serializedName: "blockid",
        required: true,
        xmlName: "blockid",
        type: {
          name: "String"
        }
      }
    };
    blocks = {
      parameterPath: "blocks",
      mapper: BlockLookupList
    };
    comp25 = {
      parameterPath: "comp",
      mapper: {
        defaultValue: "blocklist",
        isConstant: true,
        serializedName: "comp",
        type: {
          name: "String"
        }
      }
    };
    listType = {
      parameterPath: "listType",
      mapper: {
        defaultValue: "committed",
        serializedName: "blocklisttype",
        required: true,
        xmlName: "blocklisttype",
        type: {
          name: "Enum",
          allowedValues: ["committed", "uncommitted", "all"]
        }
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js
var ServiceImpl, xmlSerializer, setPropertiesOperationSpec, getPropertiesOperationSpec, getStatisticsOperationSpec, listContainersSegmentOperationSpec, getUserDelegationKeyOperationSpec, getAccountInfoOperationSpec, submitBatchOperationSpec, filterBlobsOperationSpec;
var init_service = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js"() {
    "use strict";
    init_esm8();
    init_mappers();
    init_parameters();
    ServiceImpl = class {
      static {
        __name(this, "ServiceImpl");
      }
      /**
       * Initialize a new instance of the class Service class.
       * @param client Reference to the service client
       */
      constructor(client) {
        this.client = client;
      }
      /**
       * Sets properties for a storage account's Blob service endpoint, including properties for Storage
       * Analytics and CORS (Cross-Origin Resource Sharing) rules
       * @param blobServiceProperties The StorageService properties.
       * @param options The options parameters.
       */
      setProperties(blobServiceProperties2, options) {
        return this.client.sendOperationRequest({ blobServiceProperties: blobServiceProperties2, options }, setPropertiesOperationSpec);
      }
      /**
       * gets the properties of a storage account's Blob service, including properties for Storage Analytics
       * and CORS (Cross-Origin Resource Sharing) rules.
       * @param options The options parameters.
       */
      getProperties(options) {
        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);
      }
      /**
       * Retrieves statistics related to replication for the Blob service. It is only available on the
       * secondary location endpoint when read-access geo-redundant replication is enabled for the storage
       * account.
       * @param options The options parameters.
       */
      getStatistics(options) {
        return this.client.sendOperationRequest({ options }, getStatisticsOperationSpec);
      }
      /**
       * The List Containers Segment operation returns a list of the containers under the specified account
       * @param options The options parameters.
       */
      listContainersSegment(options) {
        return this.client.sendOperationRequest({ options }, listContainersSegmentOperationSpec);
      }
      /**
       * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
       * bearer token authentication.
       * @param keyInfo Key information
       * @param options The options parameters.
       */
      getUserDelegationKey(keyInfo2, options) {
        return this.client.sendOperationRequest({ keyInfo: keyInfo2, options }, getUserDelegationKeyOperationSpec);
      }
      /**
       * Returns the sku name and account kind
       * @param options The options parameters.
       */
      getAccountInfo(options) {
        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);
      }
      /**
       * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
       * @param contentLength The length of the request.
       * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
       *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
       * @param body Initial data
       * @param options The options parameters.
       */
      submitBatch(contentLength2, multipartContentType2, body2, options) {
        return this.client.sendOperationRequest({ contentLength: contentLength2, multipartContentType: multipartContentType2, body: body2, options }, submitBatchOperationSpec);
      }
      /**
       * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a
       * given search expression.  Filter blobs searches across all containers within a storage account but
       * can be scoped within the expression to a single container.
       * @param options The options parameters.
       */
      filterBlobs(options) {
        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);
      }
    };
    xmlSerializer = createSerializer(
      mappers_exports,
      /* isXml */
      true
    );
    setPropertiesOperationSpec = {
      path: "/",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: ServiceSetPropertiesHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ServiceSetPropertiesExceptionHeaders
        }
      },
      requestBody: blobServiceProperties,
      queryParameters: [
        restype,
        comp,
        timeoutInSeconds
      ],
      urlParameters: [url],
      headerParameters: [
        contentType,
        accept,
        version2,
        requestId
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    getPropertiesOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: BlobServiceProperties,
          headersMapper: ServiceGetPropertiesHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ServiceGetPropertiesExceptionHeaders
        }
      },
      queryParameters: [
        restype,
        comp,
        timeoutInSeconds
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer
    };
    getStatisticsOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: BlobServiceStatistics,
          headersMapper: ServiceGetStatisticsHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ServiceGetStatisticsExceptionHeaders
        }
      },
      queryParameters: [
        restype,
        timeoutInSeconds,
        comp1
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer
    };
    listContainersSegmentOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: ListContainersSegmentResponse,
          headersMapper: ServiceListContainersSegmentHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ServiceListContainersSegmentExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        comp2,
        prefix,
        marker,
        maxPageSize,
        include
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer
    };
    getUserDelegationKeyOperationSpec = {
      path: "/",
      httpMethod: "POST",
      responses: {
        200: {
          bodyMapper: UserDelegationKey,
          headersMapper: ServiceGetUserDelegationKeyHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ServiceGetUserDelegationKeyExceptionHeaders
        }
      },
      requestBody: keyInfo,
      queryParameters: [
        restype,
        timeoutInSeconds,
        comp3
      ],
      urlParameters: [url],
      headerParameters: [
        contentType,
        accept,
        version2,
        requestId
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    getAccountInfoOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          headersMapper: ServiceGetAccountInfoHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ServiceGetAccountInfoExceptionHeaders
        }
      },
      queryParameters: [
        comp,
        timeoutInSeconds,
        restype1
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer
    };
    submitBatchOperationSpec = {
      path: "/",
      httpMethod: "POST",
      responses: {
        202: {
          bodyMapper: {
            type: { name: "Stream" },
            serializedName: "parsedResponse"
          },
          headersMapper: ServiceSubmitBatchHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ServiceSubmitBatchExceptionHeaders
        }
      },
      requestBody: body,
      queryParameters: [timeoutInSeconds, comp4],
      urlParameters: [url],
      headerParameters: [
        accept,
        version2,
        requestId,
        contentLength,
        multipartContentType
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer
    };
    filterBlobsOperationSpec = {
      path: "/",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: FilterBlobSegment,
          headersMapper: ServiceFilterBlobsHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ServiceFilterBlobsExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        marker,
        maxPageSize,
        comp5,
        where
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js
var ContainerImpl, xmlSerializer2, createOperationSpec, getPropertiesOperationSpec2, deleteOperationSpec, setMetadataOperationSpec, getAccessPolicyOperationSpec, setAccessPolicyOperationSpec, restoreOperationSpec, renameOperationSpec, submitBatchOperationSpec2, filterBlobsOperationSpec2, acquireLeaseOperationSpec, releaseLeaseOperationSpec, renewLeaseOperationSpec, breakLeaseOperationSpec, changeLeaseOperationSpec, listBlobFlatSegmentOperationSpec, listBlobHierarchySegmentOperationSpec, getAccountInfoOperationSpec2;
var init_container = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js"() {
    "use strict";
    init_esm8();
    init_mappers();
    init_parameters();
    ContainerImpl = class {
      static {
        __name(this, "ContainerImpl");
      }
      /**
       * Initialize a new instance of the class Container class.
       * @param client Reference to the service client
       */
      constructor(client) {
        this.client = client;
      }
      /**
       * creates a new container under the specified account. If the container with the same name already
       * exists, the operation fails
       * @param options The options parameters.
       */
      create(options) {
        return this.client.sendOperationRequest({ options }, createOperationSpec);
      }
      /**
       * returns all user-defined metadata and system properties for the specified container. The data
       * returned does not include the container's list of blobs
       * @param options The options parameters.
       */
      getProperties(options) {
        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec2);
      }
      /**
       * operation marks the specified container for deletion. The container and any blobs contained within
       * it are later deleted during garbage collection
       * @param options The options parameters.
       */
      delete(options) {
        return this.client.sendOperationRequest({ options }, deleteOperationSpec);
      }
      /**
       * operation sets one or more user-defined name-value pairs for the specified container.
       * @param options The options parameters.
       */
      setMetadata(options) {
        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);
      }
      /**
       * gets the permissions for the specified container. The permissions indicate whether container data
       * may be accessed publicly.
       * @param options The options parameters.
       */
      getAccessPolicy(options) {
        return this.client.sendOperationRequest({ options }, getAccessPolicyOperationSpec);
      }
      /**
       * sets the permissions for the specified container. The permissions indicate whether blobs in a
       * container may be accessed publicly.
       * @param options The options parameters.
       */
      setAccessPolicy(options) {
        return this.client.sendOperationRequest({ options }, setAccessPolicyOperationSpec);
      }
      /**
       * Restores a previously-deleted container.
       * @param options The options parameters.
       */
      restore(options) {
        return this.client.sendOperationRequest({ options }, restoreOperationSpec);
      }
      /**
       * Renames an existing container.
       * @param sourceContainerName Required.  Specifies the name of the container to rename.
       * @param options The options parameters.
       */
      rename(sourceContainerName2, options) {
        return this.client.sendOperationRequest({ sourceContainerName: sourceContainerName2, options }, renameOperationSpec);
      }
      /**
       * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
       * @param contentLength The length of the request.
       * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
       *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
       * @param body Initial data
       * @param options The options parameters.
       */
      submitBatch(contentLength2, multipartContentType2, body2, options) {
        return this.client.sendOperationRequest({ contentLength: contentLength2, multipartContentType: multipartContentType2, body: body2, options }, submitBatchOperationSpec2);
      }
      /**
       * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given
       * search expression.  Filter blobs searches within the given container.
       * @param options The options parameters.
       */
      filterBlobs(options) {
        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec2);
      }
      /**
       * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
       * be 15 to 60 seconds, or can be infinite
       * @param options The options parameters.
       */
      acquireLease(options) {
        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);
      }
      /**
       * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
       * be 15 to 60 seconds, or can be infinite
       * @param leaseId Specifies the current lease ID on the resource.
       * @param options The options parameters.
       */
      releaseLease(leaseId2, options) {
        return this.client.sendOperationRequest({ leaseId: leaseId2, options }, releaseLeaseOperationSpec);
      }
      /**
       * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
       * be 15 to 60 seconds, or can be infinite
       * @param leaseId Specifies the current lease ID on the resource.
       * @param options The options parameters.
       */
      renewLease(leaseId2, options) {
        return this.client.sendOperationRequest({ leaseId: leaseId2, options }, renewLeaseOperationSpec);
      }
      /**
       * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
       * be 15 to 60 seconds, or can be infinite
       * @param options The options parameters.
       */
      breakLease(options) {
        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);
      }
      /**
       * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
       * be 15 to 60 seconds, or can be infinite
       * @param leaseId Specifies the current lease ID on the resource.
       * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
       *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
       *                        (String) for a list of valid GUID string formats.
       * @param options The options parameters.
       */
      changeLease(leaseId2, proposedLeaseId2, options) {
        return this.client.sendOperationRequest({ leaseId: leaseId2, proposedLeaseId: proposedLeaseId2, options }, changeLeaseOperationSpec);
      }
      /**
       * [Update] The List Blobs operation returns a list of the blobs under the specified container
       * @param options The options parameters.
       */
      listBlobFlatSegment(options) {
        return this.client.sendOperationRequest({ options }, listBlobFlatSegmentOperationSpec);
      }
      /**
       * [Update] The List Blobs operation returns a list of the blobs under the specified container
       * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix
       *                  element in the response body that acts as a placeholder for all blobs whose names begin with the
       *                  same substring up to the appearance of the delimiter character. The delimiter may be a single
       *                  character or a string.
       * @param options The options parameters.
       */
      listBlobHierarchySegment(delimiter2, options) {
        return this.client.sendOperationRequest({ delimiter: delimiter2, options }, listBlobHierarchySegmentOperationSpec);
      }
      /**
       * Returns the sku name and account kind
       * @param options The options parameters.
       */
      getAccountInfo(options) {
        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec2);
      }
    };
    xmlSerializer2 = createSerializer(
      mappers_exports,
      /* isXml */
      true
    );
    createOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: ContainerCreateHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerCreateExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, restype2],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        metadata2,
        access,
        defaultEncryptionScope,
        preventEncryptionScopeOverride
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    getPropertiesOperationSpec2 = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          headersMapper: ContainerGetPropertiesHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerGetPropertiesExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, restype2],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    deleteOperationSpec = {
      path: "/{containerName}",
      httpMethod: "DELETE",
      responses: {
        202: {
          headersMapper: ContainerDeleteHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerDeleteExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, restype2],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    setMetadataOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: ContainerSetMetadataHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerSetMetadataExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp6
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        metadata2,
        leaseId,
        ifModifiedSince
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    getAccessPolicyOperationSpec = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: {
            type: {
              name: "Sequence",
              element: {
                type: { name: "Composite", className: "SignedIdentifier" }
              }
            },
            serializedName: "SignedIdentifiers",
            xmlName: "SignedIdentifiers",
            xmlIsWrapped: true,
            xmlElementName: "SignedIdentifier"
          },
          headersMapper: ContainerGetAccessPolicyHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerGetAccessPolicyExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp7
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    setAccessPolicyOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: ContainerSetAccessPolicyHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerSetAccessPolicyExceptionHeaders
        }
      },
      requestBody: containerAcl,
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp7
      ],
      urlParameters: [url],
      headerParameters: [
        contentType,
        accept,
        version2,
        requestId,
        access,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer2
    };
    restoreOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: ContainerRestoreHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerRestoreExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp8
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        deletedContainerName,
        deletedContainerVersion
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    renameOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: ContainerRenameHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerRenameExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp9
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        sourceContainerName,
        sourceLeaseId
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    submitBatchOperationSpec2 = {
      path: "/{containerName}",
      httpMethod: "POST",
      responses: {
        202: {
          bodyMapper: {
            type: { name: "Stream" },
            serializedName: "parsedResponse"
          },
          headersMapper: ContainerSubmitBatchHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerSubmitBatchExceptionHeaders
        }
      },
      requestBody: body,
      queryParameters: [
        timeoutInSeconds,
        comp4,
        restype2
      ],
      urlParameters: [url],
      headerParameters: [
        accept,
        version2,
        requestId,
        contentLength,
        multipartContentType
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer2
    };
    filterBlobsOperationSpec2 = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: FilterBlobSegment,
          headersMapper: ContainerFilterBlobsHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerFilterBlobsExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        marker,
        maxPageSize,
        comp5,
        where,
        restype2
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    acquireLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: ContainerAcquireLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerAcquireLeaseExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp10
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        action,
        duration,
        proposedLeaseId
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    releaseLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: ContainerReleaseLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerReleaseLeaseExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp10
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        action1,
        leaseId1
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    renewLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: ContainerRenewLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerRenewLeaseExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp10
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        leaseId1,
        action2
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    breakLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: ContainerBreakLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerBreakLeaseExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp10
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        action3,
        breakPeriod
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    changeLeaseOperationSpec = {
      path: "/{containerName}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: ContainerChangeLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerChangeLeaseExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        restype2,
        comp10
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        leaseId1,
        action4,
        proposedLeaseId1
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    listBlobFlatSegmentOperationSpec = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: ListBlobsFlatSegmentResponse,
          headersMapper: ContainerListBlobFlatSegmentHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerListBlobFlatSegmentExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        comp2,
        prefix,
        marker,
        maxPageSize,
        restype2,
        include1
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    listBlobHierarchySegmentOperationSpec = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: ListBlobsHierarchySegmentResponse,
          headersMapper: ContainerListBlobHierarchySegmentHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerListBlobHierarchySegmentExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        comp2,
        prefix,
        marker,
        maxPageSize,
        restype2,
        include1,
        delimiter
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
    getAccountInfoOperationSpec2 = {
      path: "/{containerName}",
      httpMethod: "GET",
      responses: {
        200: {
          headersMapper: ContainerGetAccountInfoHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: ContainerGetAccountInfoExceptionHeaders
        }
      },
      queryParameters: [
        comp,
        timeoutInSeconds,
        restype1
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer2
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js
var BlobImpl, xmlSerializer3, downloadOperationSpec, getPropertiesOperationSpec3, deleteOperationSpec2, undeleteOperationSpec, setExpiryOperationSpec, setHttpHeadersOperationSpec, setImmutabilityPolicyOperationSpec, deleteImmutabilityPolicyOperationSpec, setLegalHoldOperationSpec, setMetadataOperationSpec2, acquireLeaseOperationSpec2, releaseLeaseOperationSpec2, renewLeaseOperationSpec2, changeLeaseOperationSpec2, breakLeaseOperationSpec2, createSnapshotOperationSpec, startCopyFromURLOperationSpec, copyFromURLOperationSpec, abortCopyFromURLOperationSpec, setTierOperationSpec, getAccountInfoOperationSpec3, queryOperationSpec, getTagsOperationSpec, setTagsOperationSpec;
var init_blob = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js"() {
    "use strict";
    init_esm8();
    init_mappers();
    init_parameters();
    BlobImpl = class {
      static {
        __name(this, "BlobImpl");
      }
      /**
       * Initialize a new instance of the class Blob class.
       * @param client Reference to the service client
       */
      constructor(client) {
        this.client = client;
      }
      /**
       * The Download operation reads or downloads a blob from the system, including its metadata and
       * properties. You can also call Download to read a snapshot.
       * @param options The options parameters.
       */
      download(options) {
        return this.client.sendOperationRequest({ options }, downloadOperationSpec);
      }
      /**
       * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system
       * properties for the blob. It does not return the content of the blob.
       * @param options The options parameters.
       */
      getProperties(options) {
        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec3);
      }
      /**
       * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is
       * permanently removed from the storage account. If the storage account's soft delete feature is
       * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible
       * immediately. However, the blob service retains the blob or snapshot for the number of days specified
       * by the DeleteRetentionPolicy section of [Storage service properties]
       * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is
       * permanently removed from the storage account. Note that you continue to be charged for the
       * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the
       * "include=deleted" query parameter to discover which blobs and snapshots have been soft deleted. You
       * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a
       * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404
       * (ResourceNotFound).
       * @param options The options parameters.
       */
      delete(options) {
        return this.client.sendOperationRequest({ options }, deleteOperationSpec2);
      }
      /**
       * Undelete a blob that was previously soft deleted
       * @param options The options parameters.
       */
      undelete(options) {
        return this.client.sendOperationRequest({ options }, undeleteOperationSpec);
      }
      /**
       * Sets the time a blob will expire and be deleted.
       * @param expiryOptions Required. Indicates mode of the expiry time
       * @param options The options parameters.
       */
      setExpiry(expiryOptions2, options) {
        return this.client.sendOperationRequest({ expiryOptions: expiryOptions2, options }, setExpiryOperationSpec);
      }
      /**
       * The Set HTTP Headers operation sets system properties on the blob
       * @param options The options parameters.
       */
      setHttpHeaders(options) {
        return this.client.sendOperationRequest({ options }, setHttpHeadersOperationSpec);
      }
      /**
       * The Set Immutability Policy operation sets the immutability policy on the blob
       * @param options The options parameters.
       */
      setImmutabilityPolicy(options) {
        return this.client.sendOperationRequest({ options }, setImmutabilityPolicyOperationSpec);
      }
      /**
       * The Delete Immutability Policy operation deletes the immutability policy on the blob
       * @param options The options parameters.
       */
      deleteImmutabilityPolicy(options) {
        return this.client.sendOperationRequest({ options }, deleteImmutabilityPolicyOperationSpec);
      }
      /**
       * The Set Legal Hold operation sets a legal hold on the blob.
       * @param legalHold Specified if a legal hold should be set on the blob.
       * @param options The options parameters.
       */
      setLegalHold(legalHold2, options) {
        return this.client.sendOperationRequest({ legalHold: legalHold2, options }, setLegalHoldOperationSpec);
      }
      /**
       * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more
       * name-value pairs
       * @param options The options parameters.
       */
      setMetadata(options) {
        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec2);
      }
      /**
       * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
       * operations
       * @param options The options parameters.
       */
      acquireLease(options) {
        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec2);
      }
      /**
       * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
       * operations
       * @param leaseId Specifies the current lease ID on the resource.
       * @param options The options parameters.
       */
      releaseLease(leaseId2, options) {
        return this.client.sendOperationRequest({ leaseId: leaseId2, options }, releaseLeaseOperationSpec2);
      }
      /**
       * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
       * operations
       * @param leaseId Specifies the current lease ID on the resource.
       * @param options The options parameters.
       */
      renewLease(leaseId2, options) {
        return this.client.sendOperationRequest({ leaseId: leaseId2, options }, renewLeaseOperationSpec2);
      }
      /**
       * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
       * operations
       * @param leaseId Specifies the current lease ID on the resource.
       * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
       *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
       *                        (String) for a list of valid GUID string formats.
       * @param options The options parameters.
       */
      changeLease(leaseId2, proposedLeaseId2, options) {
        return this.client.sendOperationRequest({ leaseId: leaseId2, proposedLeaseId: proposedLeaseId2, options }, changeLeaseOperationSpec2);
      }
      /**
       * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
       * operations
       * @param options The options parameters.
       */
      breakLease(options) {
        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec2);
      }
      /**
       * The Create Snapshot operation creates a read-only snapshot of a blob
       * @param options The options parameters.
       */
      createSnapshot(options) {
        return this.client.sendOperationRequest({ options }, createSnapshotOperationSpec);
      }
      /**
       * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
       * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
       *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
       *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
       *                   access signature.
       * @param options The options parameters.
       */
      startCopyFromURL(copySource2, options) {
        return this.client.sendOperationRequest({ copySource: copySource2, options }, startCopyFromURLOperationSpec);
      }
      /**
       * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return
       * a response until the copy is complete.
       * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
       *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
       *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
       *                   access signature.
       * @param options The options parameters.
       */
      copyFromURL(copySource2, options) {
        return this.client.sendOperationRequest({ copySource: copySource2, options }, copyFromURLOperationSpec);
      }
      /**
       * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination
       * blob with zero length and full metadata.
       * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob
       *               operation.
       * @param options The options parameters.
       */
      abortCopyFromURL(copyId2, options) {
        return this.client.sendOperationRequest({ copyId: copyId2, options }, abortCopyFromURLOperationSpec);
      }
      /**
       * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium
       * storage account and on a block blob in a blob storage account (locally redundant storage only). A
       * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block
       * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's
       * ETag.
       * @param tier Indicates the tier to be set on the blob.
       * @param options The options parameters.
       */
      setTier(tier2, options) {
        return this.client.sendOperationRequest({ tier: tier2, options }, setTierOperationSpec);
      }
      /**
       * Returns the sku name and account kind
       * @param options The options parameters.
       */
      getAccountInfo(options) {
        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec3);
      }
      /**
       * The Query operation enables users to select/project on blob data by providing simple query
       * expressions.
       * @param options The options parameters.
       */
      query(options) {
        return this.client.sendOperationRequest({ options }, queryOperationSpec);
      }
      /**
       * The Get Tags operation enables users to get the tags associated with a blob.
       * @param options The options parameters.
       */
      getTags(options) {
        return this.client.sendOperationRequest({ options }, getTagsOperationSpec);
      }
      /**
       * The Set Tags operation enables users to set tags on a blob.
       * @param options The options parameters.
       */
      setTags(options) {
        return this.client.sendOperationRequest({ options }, setTagsOperationSpec);
      }
    };
    xmlSerializer3 = createSerializer(
      mappers_exports,
      /* isXml */
      true
    );
    downloadOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: {
            type: { name: "Stream" },
            serializedName: "parsedResponse"
          },
          headersMapper: BlobDownloadHeaders
        },
        206: {
          bodyMapper: {
            type: { name: "Stream" },
            serializedName: "parsedResponse"
          },
          headersMapper: BlobDownloadHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobDownloadExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        versionId
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        range,
        rangeGetContentMD5,
        rangeGetContentCRC64,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    getPropertiesOperationSpec3 = {
      path: "/{containerName}/{blob}",
      httpMethod: "HEAD",
      responses: {
        200: {
          headersMapper: BlobGetPropertiesHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobGetPropertiesExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        versionId
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    deleteOperationSpec2 = {
      path: "/{containerName}/{blob}",
      httpMethod: "DELETE",
      responses: {
        202: {
          headersMapper: BlobDeleteHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobDeleteExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        versionId,
        blobDeleteType
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        ifMatch,
        ifNoneMatch,
        ifTags,
        deleteSnapshots
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    undeleteOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobUndeleteHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobUndeleteExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp8],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    setExpiryOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobSetExpiryHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobSetExpiryExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp11],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        expiryOptions,
        expiresOn
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    setHttpHeadersOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobSetHttpHeadersHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobSetHttpHeadersExceptionHeaders
        }
      },
      queryParameters: [comp, timeoutInSeconds],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        ifMatch,
        ifNoneMatch,
        ifTags,
        blobCacheControl,
        blobContentType,
        blobContentMD5,
        blobContentEncoding,
        blobContentLanguage,
        blobContentDisposition
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    setImmutabilityPolicyOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobSetImmutabilityPolicyHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobSetImmutabilityPolicyExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        versionId,
        comp12
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifUnmodifiedSince,
        immutabilityPolicyExpiry,
        immutabilityPolicyMode
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    deleteImmutabilityPolicyOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "DELETE",
      responses: {
        200: {
          headersMapper: BlobDeleteImmutabilityPolicyHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobDeleteImmutabilityPolicyExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        versionId,
        comp12
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    setLegalHoldOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobSetLegalHoldHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobSetLegalHoldExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        versionId,
        comp13
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        legalHold
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    setMetadataOperationSpec2 = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobSetMetadataHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobSetMetadataExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp6],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        metadata2,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        encryptionScope
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    acquireLeaseOperationSpec2 = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: BlobAcquireLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobAcquireLeaseExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp10],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        action,
        duration,
        proposedLeaseId,
        ifMatch,
        ifNoneMatch,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    releaseLeaseOperationSpec2 = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobReleaseLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobReleaseLeaseExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp10],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        action1,
        leaseId1,
        ifMatch,
        ifNoneMatch,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    renewLeaseOperationSpec2 = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobRenewLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobRenewLeaseExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp10],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        leaseId1,
        action2,
        ifMatch,
        ifNoneMatch,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    changeLeaseOperationSpec2 = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobChangeLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobChangeLeaseExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp10],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        leaseId1,
        action4,
        proposedLeaseId1,
        ifMatch,
        ifNoneMatch,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    breakLeaseOperationSpec2 = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: BlobBreakLeaseHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobBreakLeaseExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp10],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        action3,
        breakPeriod,
        ifMatch,
        ifNoneMatch,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    createSnapshotOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: BlobCreateSnapshotHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobCreateSnapshotExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp14],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        metadata2,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        encryptionScope
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    startCopyFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: BlobStartCopyFromURLHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobStartCopyFromURLExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        metadata2,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        ifMatch,
        ifNoneMatch,
        ifTags,
        immutabilityPolicyExpiry,
        immutabilityPolicyMode,
        tier,
        rehydratePriority,
        sourceIfModifiedSince,
        sourceIfUnmodifiedSince,
        sourceIfMatch,
        sourceIfNoneMatch,
        sourceIfTags,
        copySource,
        blobTagsString,
        sealBlob,
        legalHold1
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    copyFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: BlobCopyFromURLHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobCopyFromURLExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        metadata2,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        ifMatch,
        ifNoneMatch,
        ifTags,
        immutabilityPolicyExpiry,
        immutabilityPolicyMode,
        encryptionScope,
        tier,
        sourceIfModifiedSince,
        sourceIfUnmodifiedSince,
        sourceIfMatch,
        sourceIfNoneMatch,
        copySource,
        blobTagsString,
        legalHold1,
        xMsRequiresSync,
        sourceContentMD5,
        copySourceAuthorization,
        copySourceTags
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    abortCopyFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        204: {
          headersMapper: BlobAbortCopyFromURLHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobAbortCopyFromURLExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        comp15,
        copyId
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        copyActionAbortConstant
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    setTierOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: BlobSetTierHeaders
        },
        202: {
          headersMapper: BlobSetTierHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobSetTierExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        versionId,
        comp16
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifTags,
        rehydratePriority,
        tier1
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    getAccountInfoOperationSpec3 = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          headersMapper: BlobGetAccountInfoHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobGetAccountInfoExceptionHeaders
        }
      },
      queryParameters: [
        comp,
        timeoutInSeconds,
        restype1
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    queryOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "POST",
      responses: {
        200: {
          bodyMapper: {
            type: { name: "Stream" },
            serializedName: "parsedResponse"
          },
          headersMapper: BlobQueryHeaders
        },
        206: {
          bodyMapper: {
            type: { name: "Stream" },
            serializedName: "parsedResponse"
          },
          headersMapper: BlobQueryHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobQueryExceptionHeaders
        }
      },
      requestBody: queryRequest,
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        comp17
      ],
      urlParameters: [url],
      headerParameters: [
        contentType,
        accept,
        version2,
        requestId,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer3
    };
    getTagsOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: BlobTags,
          headersMapper: BlobGetTagsHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobGetTagsExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        versionId,
        comp18
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer3
    };
    setTagsOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        204: {
          headersMapper: BlobSetTagsHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlobSetTagsExceptionHeaders
        }
      },
      requestBody: tags,
      queryParameters: [
        timeoutInSeconds,
        versionId,
        comp18
      ],
      urlParameters: [url],
      headerParameters: [
        contentType,
        accept,
        version2,
        requestId,
        leaseId,
        ifTags,
        transactionalContentMD5,
        transactionalContentCrc64
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer3
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js
var PageBlobImpl, xmlSerializer4, createOperationSpec2, uploadPagesOperationSpec, clearPagesOperationSpec, uploadPagesFromURLOperationSpec, getPageRangesOperationSpec, getPageRangesDiffOperationSpec, resizeOperationSpec, updateSequenceNumberOperationSpec, copyIncrementalOperationSpec;
var init_pageBlob = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js"() {
    "use strict";
    init_esm8();
    init_mappers();
    init_parameters();
    PageBlobImpl = class {
      static {
        __name(this, "PageBlobImpl");
      }
      /**
       * Initialize a new instance of the class PageBlob class.
       * @param client Reference to the service client
       */
      constructor(client) {
        this.client = client;
      }
      /**
       * The Create operation creates a new page blob.
       * @param contentLength The length of the request.
       * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
       *                          page blob size must be aligned to a 512-byte boundary.
       * @param options The options parameters.
       */
      create(contentLength2, blobContentLength2, options) {
        return this.client.sendOperationRequest({ contentLength: contentLength2, blobContentLength: blobContentLength2, options }, createOperationSpec2);
      }
      /**
       * The Upload Pages operation writes a range of pages to a page blob
       * @param contentLength The length of the request.
       * @param body Initial data
       * @param options The options parameters.
       */
      uploadPages(contentLength2, body2, options) {
        return this.client.sendOperationRequest({ contentLength: contentLength2, body: body2, options }, uploadPagesOperationSpec);
      }
      /**
       * The Clear Pages operation clears a set of pages from a page blob
       * @param contentLength The length of the request.
       * @param options The options parameters.
       */
      clearPages(contentLength2, options) {
        return this.client.sendOperationRequest({ contentLength: contentLength2, options }, clearPagesOperationSpec);
      }
      /**
       * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a
       * URL
       * @param sourceUrl Specify a URL to the copy source.
       * @param sourceRange Bytes of source data in the specified range. The length of this range should
       *                    match the ContentLength header and x-ms-range/Range destination range header.
       * @param contentLength The length of the request.
       * @param range The range of bytes to which the source range would be written. The range should be 512
       *              aligned and range-end is required.
       * @param options The options parameters.
       */
      uploadPagesFromURL(sourceUrl2, sourceRange2, contentLength2, range2, options) {
        return this.client.sendOperationRequest({ sourceUrl: sourceUrl2, sourceRange: sourceRange2, contentLength: contentLength2, range: range2, options }, uploadPagesFromURLOperationSpec);
      }
      /**
       * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a
       * page blob
       * @param options The options parameters.
       */
      getPageRanges(options) {
        return this.client.sendOperationRequest({ options }, getPageRangesOperationSpec);
      }
      /**
       * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were
       * changed between target blob and previous snapshot.
       * @param options The options parameters.
       */
      getPageRangesDiff(options) {
        return this.client.sendOperationRequest({ options }, getPageRangesDiffOperationSpec);
      }
      /**
       * Resize the Blob
       * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
       *                          page blob size must be aligned to a 512-byte boundary.
       * @param options The options parameters.
       */
      resize(blobContentLength2, options) {
        return this.client.sendOperationRequest({ blobContentLength: blobContentLength2, options }, resizeOperationSpec);
      }
      /**
       * Update the sequence number of the blob
       * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.
       *                             This property applies to page blobs only. This property indicates how the service should modify the
       *                             blob's sequence number
       * @param options The options parameters.
       */
      updateSequenceNumber(sequenceNumberAction2, options) {
        return this.client.sendOperationRequest({ sequenceNumberAction: sequenceNumberAction2, options }, updateSequenceNumberOperationSpec);
      }
      /**
       * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.
       * The snapshot is copied such that only the differential changes between the previously copied
       * snapshot are transferred to the destination. The copied snapshots are complete copies of the
       * original snapshot and can be read or copied from as usual. This API is supported since REST version
       * 2016-05-31.
       * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
       *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
       *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
       *                   access signature.
       * @param options The options parameters.
       */
      copyIncremental(copySource2, options) {
        return this.client.sendOperationRequest({ copySource: copySource2, options }, copyIncrementalOperationSpec);
      }
    };
    xmlSerializer4 = createSerializer(
      mappers_exports,
      /* isXml */
      true
    );
    createOperationSpec2 = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: PageBlobCreateHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: PageBlobCreateExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        contentLength,
        metadata2,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        blobCacheControl,
        blobContentType,
        blobContentMD5,
        blobContentEncoding,
        blobContentLanguage,
        blobContentDisposition,
        immutabilityPolicyExpiry,
        immutabilityPolicyMode,
        encryptionScope,
        tier,
        blobTagsString,
        legalHold1,
        blobType,
        blobContentLength,
        blobSequenceNumber
      ],
      isXML: true,
      serializer: xmlSerializer4
    };
    uploadPagesOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: PageBlobUploadPagesHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: PageBlobUploadPagesExceptionHeaders
        }
      },
      requestBody: body1,
      queryParameters: [timeoutInSeconds, comp19],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        contentLength,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        range,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        encryptionScope,
        transactionalContentMD5,
        transactionalContentCrc64,
        contentType1,
        accept2,
        pageWrite,
        ifSequenceNumberLessThanOrEqualTo,
        ifSequenceNumberLessThan,
        ifSequenceNumberEqualTo
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "binary",
      serializer: xmlSerializer4
    };
    clearPagesOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: PageBlobClearPagesHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: PageBlobClearPagesExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp19],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        contentLength,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        range,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        encryptionScope,
        ifSequenceNumberLessThanOrEqualTo,
        ifSequenceNumberLessThan,
        ifSequenceNumberEqualTo,
        pageWrite1
      ],
      isXML: true,
      serializer: xmlSerializer4
    };
    uploadPagesFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: PageBlobUploadPagesFromURLHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: PageBlobUploadPagesFromURLExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp19],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        contentLength,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        encryptionScope,
        sourceIfModifiedSince,
        sourceIfUnmodifiedSince,
        sourceIfMatch,
        sourceIfNoneMatch,
        sourceContentMD5,
        copySourceAuthorization,
        pageWrite,
        ifSequenceNumberLessThanOrEqualTo,
        ifSequenceNumberLessThan,
        ifSequenceNumberEqualTo,
        sourceUrl,
        sourceRange,
        sourceContentCrc64,
        range1
      ],
      isXML: true,
      serializer: xmlSerializer4
    };
    getPageRangesOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: PageList,
          headersMapper: PageBlobGetPageRangesHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: PageBlobGetPageRangesExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        marker,
        maxPageSize,
        snapshot,
        comp20
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        range,
        ifMatch,
        ifNoneMatch,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer4
    };
    getPageRangesDiffOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: PageList,
          headersMapper: PageBlobGetPageRangesDiffHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: PageBlobGetPageRangesDiffExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        marker,
        maxPageSize,
        snapshot,
        comp20,
        prevsnapshot
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        range,
        ifMatch,
        ifNoneMatch,
        ifTags,
        prevSnapshotUrl
      ],
      isXML: true,
      serializer: xmlSerializer4
    };
    resizeOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: PageBlobResizeHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: PageBlobResizeExceptionHeaders
        }
      },
      queryParameters: [comp, timeoutInSeconds],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        encryptionScope,
        blobContentLength
      ],
      isXML: true,
      serializer: xmlSerializer4
    };
    updateSequenceNumberOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: PageBlobUpdateSequenceNumberHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: PageBlobUpdateSequenceNumberExceptionHeaders
        }
      },
      queryParameters: [comp, timeoutInSeconds],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        ifMatch,
        ifNoneMatch,
        ifTags,
        blobSequenceNumber,
        sequenceNumberAction
      ],
      isXML: true,
      serializer: xmlSerializer4
    };
    copyIncrementalOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        202: {
          headersMapper: PageBlobCopyIncrementalHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: PageBlobCopyIncrementalExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp21],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        ifModifiedSince,
        ifUnmodifiedSince,
        ifMatch,
        ifNoneMatch,
        ifTags,
        copySource
      ],
      isXML: true,
      serializer: xmlSerializer4
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js
var AppendBlobImpl, xmlSerializer5, createOperationSpec3, appendBlockOperationSpec, appendBlockFromUrlOperationSpec, sealOperationSpec;
var init_appendBlob = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js"() {
    "use strict";
    init_esm8();
    init_mappers();
    init_parameters();
    AppendBlobImpl = class {
      static {
        __name(this, "AppendBlobImpl");
      }
      /**
       * Initialize a new instance of the class AppendBlob class.
       * @param client Reference to the service client
       */
      constructor(client) {
        this.client = client;
      }
      /**
       * The Create Append Blob operation creates a new append blob.
       * @param contentLength The length of the request.
       * @param options The options parameters.
       */
      create(contentLength2, options) {
        return this.client.sendOperationRequest({ contentLength: contentLength2, options }, createOperationSpec3);
      }
      /**
       * The Append Block operation commits a new block of data to the end of an existing append blob. The
       * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to
       * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.
       * @param contentLength The length of the request.
       * @param body Initial data
       * @param options The options parameters.
       */
      appendBlock(contentLength2, body2, options) {
        return this.client.sendOperationRequest({ contentLength: contentLength2, body: body2, options }, appendBlockOperationSpec);
      }
      /**
       * The Append Block operation commits a new block of data to the end of an existing append blob where
       * the contents are read from a source url. The Append Block operation is permitted only if the blob
       * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version
       * 2015-02-21 version or later.
       * @param sourceUrl Specify a URL to the copy source.
       * @param contentLength The length of the request.
       * @param options The options parameters.
       */
      appendBlockFromUrl(sourceUrl2, contentLength2, options) {
        return this.client.sendOperationRequest({ sourceUrl: sourceUrl2, contentLength: contentLength2, options }, appendBlockFromUrlOperationSpec);
      }
      /**
       * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version
       * 2019-12-12 version or later.
       * @param options The options parameters.
       */
      seal(options) {
        return this.client.sendOperationRequest({ options }, sealOperationSpec);
      }
    };
    xmlSerializer5 = createSerializer(
      mappers_exports,
      /* isXml */
      true
    );
    createOperationSpec3 = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: AppendBlobCreateHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: AppendBlobCreateExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        contentLength,
        metadata2,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        blobCacheControl,
        blobContentType,
        blobContentMD5,
        blobContentEncoding,
        blobContentLanguage,
        blobContentDisposition,
        immutabilityPolicyExpiry,
        immutabilityPolicyMode,
        encryptionScope,
        blobTagsString,
        legalHold1,
        blobType1
      ],
      isXML: true,
      serializer: xmlSerializer5
    };
    appendBlockOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: AppendBlobAppendBlockHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: AppendBlobAppendBlockExceptionHeaders
        }
      },
      requestBody: body1,
      queryParameters: [timeoutInSeconds, comp22],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        contentLength,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        encryptionScope,
        transactionalContentMD5,
        transactionalContentCrc64,
        contentType1,
        accept2,
        maxSize,
        appendPosition
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "binary",
      serializer: xmlSerializer5
    };
    appendBlockFromUrlOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: AppendBlobAppendBlockFromUrlHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: AppendBlobAppendBlockFromUrlExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp22],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        contentLength,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        encryptionScope,
        sourceIfModifiedSince,
        sourceIfUnmodifiedSince,
        sourceIfMatch,
        sourceIfNoneMatch,
        sourceContentMD5,
        copySourceAuthorization,
        transactionalContentMD5,
        sourceUrl,
        sourceContentCrc64,
        maxSize,
        appendPosition,
        sourceRange1
      ],
      isXML: true,
      serializer: xmlSerializer5
    };
    sealOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        200: {
          headersMapper: AppendBlobSealHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: AppendBlobSealExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds, comp23],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        ifMatch,
        ifNoneMatch,
        appendPosition
      ],
      isXML: true,
      serializer: xmlSerializer5
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js
var BlockBlobImpl, xmlSerializer6, uploadOperationSpec, putBlobFromUrlOperationSpec, stageBlockOperationSpec, stageBlockFromURLOperationSpec, commitBlockListOperationSpec, getBlockListOperationSpec;
var init_blockBlob = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js"() {
    "use strict";
    init_esm8();
    init_mappers();
    init_parameters();
    BlockBlobImpl = class {
      static {
        __name(this, "BlockBlobImpl");
      }
      /**
       * Initialize a new instance of the class BlockBlob class.
       * @param client Reference to the service client
       */
      constructor(client) {
        this.client = client;
      }
      /**
       * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing
       * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put
       * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a
       * partial update of the content of a block blob, use the Put Block List operation.
       * @param contentLength The length of the request.
       * @param body Initial data
       * @param options The options parameters.
       */
      upload(contentLength2, body2, options) {
        return this.client.sendOperationRequest({ contentLength: contentLength2, body: body2, options }, uploadOperationSpec);
      }
      /**
       * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read
       * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are
       * not supported with Put Blob from URL; the content of an existing blob is overwritten with the
       * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,
       * use the Put Block from URL API in conjunction with Put Block List.
       * @param contentLength The length of the request.
       * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
       *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
       *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
       *                   access signature.
       * @param options The options parameters.
       */
      putBlobFromUrl(contentLength2, copySource2, options) {
        return this.client.sendOperationRequest({ contentLength: contentLength2, copySource: copySource2, options }, putBlobFromUrlOperationSpec);
      }
      /**
       * The Stage Block operation creates a new block to be committed as part of a blob
       * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
       *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
       *                for the blockid parameter must be the same size for each block.
       * @param contentLength The length of the request.
       * @param body Initial data
       * @param options The options parameters.
       */
      stageBlock(blockId2, contentLength2, body2, options) {
        return this.client.sendOperationRequest({ blockId: blockId2, contentLength: contentLength2, body: body2, options }, stageBlockOperationSpec);
      }
      /**
       * The Stage Block operation creates a new block to be committed as part of a blob where the contents
       * are read from a URL.
       * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
       *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
       *                for the blockid parameter must be the same size for each block.
       * @param contentLength The length of the request.
       * @param sourceUrl Specify a URL to the copy source.
       * @param options The options parameters.
       */
      stageBlockFromURL(blockId2, contentLength2, sourceUrl2, options) {
        return this.client.sendOperationRequest({ blockId: blockId2, contentLength: contentLength2, sourceUrl: sourceUrl2, options }, stageBlockFromURLOperationSpec);
      }
      /**
       * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the
       * blob. In order to be written as part of a blob, a block must have been successfully written to the
       * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading
       * only those blocks that have changed, then committing the new and existing blocks together. You can
       * do this by specifying whether to commit a block from the committed block list or from the
       * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list
       * it may belong to.
       * @param blocks Blob Blocks.
       * @param options The options parameters.
       */
      commitBlockList(blocks2, options) {
        return this.client.sendOperationRequest({ blocks: blocks2, options }, commitBlockListOperationSpec);
      }
      /**
       * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block
       * blob
       * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted
       *                 blocks, or both lists together.
       * @param options The options parameters.
       */
      getBlockList(listType2, options) {
        return this.client.sendOperationRequest({ listType: listType2, options }, getBlockListOperationSpec);
      }
    };
    xmlSerializer6 = createSerializer(
      mappers_exports,
      /* isXml */
      true
    );
    uploadOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: BlockBlobUploadHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlockBlobUploadExceptionHeaders
        }
      },
      requestBody: body1,
      queryParameters: [timeoutInSeconds],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        contentLength,
        metadata2,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        blobCacheControl,
        blobContentType,
        blobContentMD5,
        blobContentEncoding,
        blobContentLanguage,
        blobContentDisposition,
        immutabilityPolicyExpiry,
        immutabilityPolicyMode,
        encryptionScope,
        tier,
        blobTagsString,
        legalHold1,
        transactionalContentMD5,
        transactionalContentCrc64,
        contentType1,
        accept2,
        blobType2
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "binary",
      serializer: xmlSerializer6
    };
    putBlobFromUrlOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: BlockBlobPutBlobFromUrlHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlockBlobPutBlobFromUrlExceptionHeaders
        }
      },
      queryParameters: [timeoutInSeconds],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        contentLength,
        metadata2,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        blobCacheControl,
        blobContentType,
        blobContentMD5,
        blobContentEncoding,
        blobContentLanguage,
        blobContentDisposition,
        encryptionScope,
        tier,
        sourceIfModifiedSince,
        sourceIfUnmodifiedSince,
        sourceIfMatch,
        sourceIfNoneMatch,
        sourceIfTags,
        copySource,
        blobTagsString,
        sourceContentMD5,
        copySourceAuthorization,
        copySourceTags,
        transactionalContentMD5,
        blobType2,
        copySourceBlobProperties
      ],
      isXML: true,
      serializer: xmlSerializer6
    };
    stageBlockOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: BlockBlobStageBlockHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlockBlobStageBlockExceptionHeaders
        }
      },
      requestBody: body1,
      queryParameters: [
        timeoutInSeconds,
        comp24,
        blockId
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        contentLength,
        leaseId,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        encryptionScope,
        transactionalContentMD5,
        transactionalContentCrc64,
        contentType1,
        accept2
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "binary",
      serializer: xmlSerializer6
    };
    stageBlockFromURLOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: BlockBlobStageBlockFromURLHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlockBlobStageBlockFromURLExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        comp24,
        blockId
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        contentLength,
        leaseId,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        encryptionScope,
        sourceIfModifiedSince,
        sourceIfUnmodifiedSince,
        sourceIfMatch,
        sourceIfNoneMatch,
        sourceContentMD5,
        copySourceAuthorization,
        sourceUrl,
        sourceContentCrc64,
        sourceRange1
      ],
      isXML: true,
      serializer: xmlSerializer6
    };
    commitBlockListOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "PUT",
      responses: {
        201: {
          headersMapper: BlockBlobCommitBlockListHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlockBlobCommitBlockListExceptionHeaders
        }
      },
      requestBody: blocks,
      queryParameters: [timeoutInSeconds, comp25],
      urlParameters: [url],
      headerParameters: [
        contentType,
        accept,
        version2,
        requestId,
        metadata2,
        leaseId,
        ifModifiedSince,
        ifUnmodifiedSince,
        encryptionKey,
        encryptionKeySha256,
        encryptionAlgorithm,
        ifMatch,
        ifNoneMatch,
        ifTags,
        blobCacheControl,
        blobContentType,
        blobContentMD5,
        blobContentEncoding,
        blobContentLanguage,
        blobContentDisposition,
        immutabilityPolicyExpiry,
        immutabilityPolicyMode,
        encryptionScope,
        tier,
        blobTagsString,
        legalHold1,
        transactionalContentMD5,
        transactionalContentCrc64
      ],
      isXML: true,
      contentType: "application/xml; charset=utf-8",
      mediaType: "xml",
      serializer: xmlSerializer6
    };
    getBlockListOperationSpec = {
      path: "/{containerName}/{blob}",
      httpMethod: "GET",
      responses: {
        200: {
          bodyMapper: BlockList,
          headersMapper: BlockBlobGetBlockListHeaders
        },
        default: {
          bodyMapper: StorageError,
          headersMapper: BlockBlobGetBlockListExceptionHeaders
        }
      },
      queryParameters: [
        timeoutInSeconds,
        snapshot,
        comp25,
        listType
      ],
      urlParameters: [url],
      headerParameters: [
        version2,
        requestId,
        accept1,
        leaseId,
        ifTags
      ],
      isXML: true,
      serializer: xmlSerializer6
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js
var init_operations = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js"() {
    "use strict";
    init_service();
    init_container();
    init_blob();
    init_pageBlob();
    init_appendBlob();
    init_blockBlob();
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js
var StorageClient;
var init_storageClient = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js"() {
    "use strict";
    init_esm9();
    init_operations();
    StorageClient = class extends ExtendedServiceClient {
      static {
        __name(this, "StorageClient");
      }
      /**
       * Initializes a new instance of the StorageClient class.
       * @param url The URL of the service account, container, or blob that is the target of the desired
       *            operation.
       * @param options The parameter options
       */
      constructor(url2, options) {
        var _a4, _b2;
        if (url2 === void 0) {
          throw new Error("'url' cannot be null");
        }
        if (!options) {
          options = {};
        }
        const defaults2 = {
          requestContentType: "application/json; charset=utf-8"
        };
        const packageDetails = `azsdk-js-azure-storage-blob/12.26.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults2), options), { userAgentOptions: {
          userAgentPrefix
        }, endpoint: (_b2 = (_a4 = options.endpoint) !== null && _a4 !== void 0 ? _a4 : options.baseUri) !== null && _b2 !== void 0 ? _b2 : "{url}" });
        super(optionsWithDefaults);
        this.url = url2;
        this.version = options.version || "2025-01-05";
        this.service = new ServiceImpl(this);
        this.container = new ContainerImpl(this);
        this.blob = new BlobImpl(this);
        this.pageBlob = new PageBlobImpl(this);
        this.appendBlob = new AppendBlobImpl(this);
        this.blockBlob = new BlockBlobImpl(this);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/service.js
var init_service2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/service.js"() {
    "use strict";
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/container.js
var init_container2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/container.js"() {
    "use strict";
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/blob.js
var init_blob2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/blob.js"() {
    "use strict";
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/pageBlob.js
var init_pageBlob2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/pageBlob.js"() {
    "use strict";
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/appendBlob.js
var init_appendBlob2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/appendBlob.js"() {
    "use strict";
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/blockBlob.js
var init_blockBlob2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/blockBlob.js"() {
    "use strict";
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/index.js
var init_operationsInterfaces = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/index.js"() {
    "use strict";
    init_service2();
    init_container2();
    init_blob2();
    init_pageBlob2();
    init_appendBlob2();
    init_blockBlob2();
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/index.js
var init_src = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/index.js"() {
    "use strict";
    init_models();
    init_storageClient();
    init_operationsInterfaces();
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js
var StorageContextClient;
var init_StorageContextClient = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js"() {
    "use strict";
    init_src();
    StorageContextClient = class extends StorageClient {
      static {
        __name(this, "StorageContextClient");
      }
      async sendOperationRequest(operationArguments, operationSpec) {
        const operationSpecToSend = Object.assign({}, operationSpec);
        if (operationSpecToSend.path === "/{containerName}" || operationSpecToSend.path === "/{containerName}/{blob}") {
          operationSpecToSend.path = "";
        }
        return super.sendOperationRequest(operationArguments, operationSpecToSend);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js
var StorageClient2;
var init_StorageClient = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js"() {
    "use strict";
    init_StorageContextClient();
    init_Pipeline();
    init_utils_common();
    StorageClient2 = class {
      static {
        __name(this, "StorageClient");
      }
      /**
       * Creates an instance of StorageClient.
       * @param url - url to resource
       * @param pipeline - request policy pipeline.
       */
      constructor(url2, pipeline) {
        this.url = escapeURLPath(url2);
        this.accountName = getAccountNameFromUrl(url2);
        this.pipeline = pipeline;
        this.storageClientContext = new StorageContextClient(this.url, getCoreClientOptions(pipeline));
        this.isHttps = iEqual(getURLScheme(this.url) || "", "https");
        this.credential = getCredentialFromPipeline(pipeline);
        const storageClientContext = this.storageClientContext;
        storageClientContext.requestContentType = void 0;
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js
var tracingClient;
var init_tracing = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js"() {
    "use strict";
    init_esm5();
    init_constants2();
    tracingClient = createTracingClient({
      packageName: "@azure/storage-blob",
      packageVersion: SDK_VERSION2,
      namespace: "Microsoft.Storage"
    });
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js
var BlobSASPermissions;
var init_BlobSASPermissions = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js"() {
    "use strict";
    BlobSASPermissions = class _BlobSASPermissions {
      static {
        __name(this, "BlobSASPermissions");
      }
      constructor() {
        this.read = false;
        this.add = false;
        this.create = false;
        this.write = false;
        this.delete = false;
        this.deleteVersion = false;
        this.tag = false;
        this.move = false;
        this.execute = false;
        this.setImmutabilityPolicy = false;
        this.permanentDelete = false;
      }
      /**
       * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an
       * Error if it encounters a character that does not correspond to a valid permission.
       *
       * @param permissions -
       */
      static parse(permissions) {
        const blobSASPermissions = new _BlobSASPermissions();
        for (const char of permissions) {
          switch (char) {
            case "r":
              blobSASPermissions.read = true;
              break;
            case "a":
              blobSASPermissions.add = true;
              break;
            case "c":
              blobSASPermissions.create = true;
              break;
            case "w":
              blobSASPermissions.write = true;
              break;
            case "d":
              blobSASPermissions.delete = true;
              break;
            case "x":
              blobSASPermissions.deleteVersion = true;
              break;
            case "t":
              blobSASPermissions.tag = true;
              break;
            case "m":
              blobSASPermissions.move = true;
              break;
            case "e":
              blobSASPermissions.execute = true;
              break;
            case "i":
              blobSASPermissions.setImmutabilityPolicy = true;
              break;
            case "y":
              blobSASPermissions.permanentDelete = true;
              break;
            default:
              throw new RangeError(`Invalid permission: ${char}`);
          }
        }
        return blobSASPermissions;
      }
      /**
       * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it
       * and boolean values for them.
       *
       * @param permissionLike -
       */
      static from(permissionLike) {
        const blobSASPermissions = new _BlobSASPermissions();
        if (permissionLike.read) {
          blobSASPermissions.read = true;
        }
        if (permissionLike.add) {
          blobSASPermissions.add = true;
        }
        if (permissionLike.create) {
          blobSASPermissions.create = true;
        }
        if (permissionLike.write) {
          blobSASPermissions.write = true;
        }
        if (permissionLike.delete) {
          blobSASPermissions.delete = true;
        }
        if (permissionLike.deleteVersion) {
          blobSASPermissions.deleteVersion = true;
        }
        if (permissionLike.tag) {
          blobSASPermissions.tag = true;
        }
        if (permissionLike.move) {
          blobSASPermissions.move = true;
        }
        if (permissionLike.execute) {
          blobSASPermissions.execute = true;
        }
        if (permissionLike.setImmutabilityPolicy) {
          blobSASPermissions.setImmutabilityPolicy = true;
        }
        if (permissionLike.permanentDelete) {
          blobSASPermissions.permanentDelete = true;
        }
        return blobSASPermissions;
      }
      /**
       * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
       * order accepted by the service.
       *
       * @returns A string which represents the BlobSASPermissions
       */
      toString() {
        const permissions = [];
        if (this.read) {
          permissions.push("r");
        }
        if (this.add) {
          permissions.push("a");
        }
        if (this.create) {
          permissions.push("c");
        }
        if (this.write) {
          permissions.push("w");
        }
        if (this.delete) {
          permissions.push("d");
        }
        if (this.deleteVersion) {
          permissions.push("x");
        }
        if (this.tag) {
          permissions.push("t");
        }
        if (this.move) {
          permissions.push("m");
        }
        if (this.execute) {
          permissions.push("e");
        }
        if (this.setImmutabilityPolicy) {
          permissions.push("i");
        }
        if (this.permanentDelete) {
          permissions.push("y");
        }
        return permissions.join("");
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js
var ContainerSASPermissions;
var init_ContainerSASPermissions = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js"() {
    "use strict";
    ContainerSASPermissions = class _ContainerSASPermissions {
      static {
        __name(this, "ContainerSASPermissions");
      }
      constructor() {
        this.read = false;
        this.add = false;
        this.create = false;
        this.write = false;
        this.delete = false;
        this.deleteVersion = false;
        this.list = false;
        this.tag = false;
        this.move = false;
        this.execute = false;
        this.setImmutabilityPolicy = false;
        this.permanentDelete = false;
        this.filterByTags = false;
      }
      /**
       * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an
       * Error if it encounters a character that does not correspond to a valid permission.
       *
       * @param permissions -
       */
      static parse(permissions) {
        const containerSASPermissions = new _ContainerSASPermissions();
        for (const char of permissions) {
          switch (char) {
            case "r":
              containerSASPermissions.read = true;
              break;
            case "a":
              containerSASPermissions.add = true;
              break;
            case "c":
              containerSASPermissions.create = true;
              break;
            case "w":
              containerSASPermissions.write = true;
              break;
            case "d":
              containerSASPermissions.delete = true;
              break;
            case "l":
              containerSASPermissions.list = true;
              break;
            case "t":
              containerSASPermissions.tag = true;
              break;
            case "x":
              containerSASPermissions.deleteVersion = true;
              break;
            case "m":
              containerSASPermissions.move = true;
              break;
            case "e":
              containerSASPermissions.execute = true;
              break;
            case "i":
              containerSASPermissions.setImmutabilityPolicy = true;
              break;
            case "y":
              containerSASPermissions.permanentDelete = true;
              break;
            case "f":
              containerSASPermissions.filterByTags = true;
              break;
            default:
              throw new RangeError(`Invalid permission ${char}`);
          }
        }
        return containerSASPermissions;
      }
      /**
       * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it
       * and boolean values for them.
       *
       * @param permissionLike -
       */
      static from(permissionLike) {
        const containerSASPermissions = new _ContainerSASPermissions();
        if (permissionLike.read) {
          containerSASPermissions.read = true;
        }
        if (permissionLike.add) {
          containerSASPermissions.add = true;
        }
        if (permissionLike.create) {
          containerSASPermissions.create = true;
        }
        if (permissionLike.write) {
          containerSASPermissions.write = true;
        }
        if (permissionLike.delete) {
          containerSASPermissions.delete = true;
        }
        if (permissionLike.list) {
          containerSASPermissions.list = true;
        }
        if (permissionLike.deleteVersion) {
          containerSASPermissions.deleteVersion = true;
        }
        if (permissionLike.tag) {
          containerSASPermissions.tag = true;
        }
        if (permissionLike.move) {
          containerSASPermissions.move = true;
        }
        if (permissionLike.execute) {
          containerSASPermissions.execute = true;
        }
        if (permissionLike.setImmutabilityPolicy) {
          containerSASPermissions.setImmutabilityPolicy = true;
        }
        if (permissionLike.permanentDelete) {
          containerSASPermissions.permanentDelete = true;
        }
        if (permissionLike.filterByTags) {
          containerSASPermissions.filterByTags = true;
        }
        return containerSASPermissions;
      }
      /**
       * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
       * order accepted by the service.
       *
       * The order of the characters should be as specified here to ensure correctness.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
       *
       */
      toString() {
        const permissions = [];
        if (this.read) {
          permissions.push("r");
        }
        if (this.add) {
          permissions.push("a");
        }
        if (this.create) {
          permissions.push("c");
        }
        if (this.write) {
          permissions.push("w");
        }
        if (this.delete) {
          permissions.push("d");
        }
        if (this.deleteVersion) {
          permissions.push("x");
        }
        if (this.list) {
          permissions.push("l");
        }
        if (this.tag) {
          permissions.push("t");
        }
        if (this.move) {
          permissions.push("m");
        }
        if (this.execute) {
          permissions.push("e");
        }
        if (this.setImmutabilityPolicy) {
          permissions.push("i");
        }
        if (this.permanentDelete) {
          permissions.push("y");
        }
        if (this.filterByTags) {
          permissions.push("f");
        }
        return permissions.join("");
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js
import { createHmac as createHmac3 } from "crypto";
var UserDelegationKeyCredential;
var init_UserDelegationKeyCredential = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js"() {
    "use strict";
    UserDelegationKeyCredential = class {
      static {
        __name(this, "UserDelegationKeyCredential");
      }
      /**
       * Creates an instance of UserDelegationKeyCredential.
       * @param accountName -
       * @param userDelegationKey -
       */
      constructor(accountName, userDelegationKey) {
        this.accountName = accountName;
        this.userDelegationKey = userDelegationKey;
        this.key = Buffer.from(userDelegationKey.value, "base64");
      }
      /**
       * Generates a hash signature for an HTTP request or for a SAS.
       *
       * @param stringToSign -
       */
      computeHMACSHA256(stringToSign) {
        return createHmac3("sha256", this.key).update(stringToSign, "utf8").digest("base64");
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js
function ipRangeToString(ipRange) {
  return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;
}
var init_SasIPRange = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js"() {
    "use strict";
    __name(ipRangeToString, "ipRangeToString");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js
var SASProtocol, SASQueryParameters;
var init_SASQueryParameters = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js"() {
    "use strict";
    init_SasIPRange();
    init_utils_common();
    (function(SASProtocol2) {
      SASProtocol2["Https"] = "https";
      SASProtocol2["HttpsAndHttp"] = "https,http";
    })(SASProtocol || (SASProtocol = {}));
    SASQueryParameters = class {
      static {
        __name(this, "SASQueryParameters");
      }
      /**
       * Optional. IP range allowed for this SAS.
       *
       * @readonly
       */
      get ipRange() {
        if (this.ipRangeInner) {
          return {
            end: this.ipRangeInner.end,
            start: this.ipRangeInner.start
          };
        }
        return void 0;
      }
      constructor(version3, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn2, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType2, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope2) {
        this.version = version3;
        this.signature = signature;
        if (permissionsOrOptions !== void 0 && typeof permissionsOrOptions !== "string") {
          this.permissions = permissionsOrOptions.permissions;
          this.services = permissionsOrOptions.services;
          this.resourceTypes = permissionsOrOptions.resourceTypes;
          this.protocol = permissionsOrOptions.protocol;
          this.startsOn = permissionsOrOptions.startsOn;
          this.expiresOn = permissionsOrOptions.expiresOn;
          this.ipRangeInner = permissionsOrOptions.ipRange;
          this.identifier = permissionsOrOptions.identifier;
          this.encryptionScope = permissionsOrOptions.encryptionScope;
          this.resource = permissionsOrOptions.resource;
          this.cacheControl = permissionsOrOptions.cacheControl;
          this.contentDisposition = permissionsOrOptions.contentDisposition;
          this.contentEncoding = permissionsOrOptions.contentEncoding;
          this.contentLanguage = permissionsOrOptions.contentLanguage;
          this.contentType = permissionsOrOptions.contentType;
          if (permissionsOrOptions.userDelegationKey) {
            this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;
            this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;
            this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;
            this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;
            this.signedService = permissionsOrOptions.userDelegationKey.signedService;
            this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;
            this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;
            this.correlationId = permissionsOrOptions.correlationId;
          }
        } else {
          this.services = services;
          this.resourceTypes = resourceTypes;
          this.expiresOn = expiresOn2;
          this.permissions = permissionsOrOptions;
          this.protocol = protocol;
          this.startsOn = startsOn;
          this.ipRangeInner = ipRange;
          this.encryptionScope = encryptionScope2;
          this.identifier = identifier;
          this.resource = resource;
          this.cacheControl = cacheControl;
          this.contentDisposition = contentDisposition;
          this.contentEncoding = contentEncoding;
          this.contentLanguage = contentLanguage;
          this.contentType = contentType2;
          if (userDelegationKey) {
            this.signedOid = userDelegationKey.signedObjectId;
            this.signedTenantId = userDelegationKey.signedTenantId;
            this.signedStartsOn = userDelegationKey.signedStartsOn;
            this.signedExpiresOn = userDelegationKey.signedExpiresOn;
            this.signedService = userDelegationKey.signedService;
            this.signedVersion = userDelegationKey.signedVersion;
            this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;
            this.correlationId = correlationId;
          }
        }
      }
      /**
       * Encodes all SAS query parameters into a string that can be appended to a URL.
       *
       */
      toString() {
        const params = [
          "sv",
          "ss",
          "srt",
          "spr",
          "st",
          "se",
          "sip",
          "si",
          "ses",
          "skoid",
          // Signed object ID
          "sktid",
          // Signed tenant ID
          "skt",
          // Signed key start time
          "ske",
          // Signed key expiry time
          "sks",
          // Signed key service
          "skv",
          // Signed key version
          "sr",
          "sp",
          "sig",
          "rscc",
          "rscd",
          "rsce",
          "rscl",
          "rsct",
          "saoid",
          "scid"
        ];
        const queries = [];
        for (const param of params) {
          switch (param) {
            case "sv":
              this.tryAppendQueryParameter(queries, param, this.version);
              break;
            case "ss":
              this.tryAppendQueryParameter(queries, param, this.services);
              break;
            case "srt":
              this.tryAppendQueryParameter(queries, param, this.resourceTypes);
              break;
            case "spr":
              this.tryAppendQueryParameter(queries, param, this.protocol);
              break;
            case "st":
              this.tryAppendQueryParameter(queries, param, this.startsOn ? truncatedISO8061Date(this.startsOn, false) : void 0);
              break;
            case "se":
              this.tryAppendQueryParameter(queries, param, this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : void 0);
              break;
            case "sip":
              this.tryAppendQueryParameter(queries, param, this.ipRange ? ipRangeToString(this.ipRange) : void 0);
              break;
            case "si":
              this.tryAppendQueryParameter(queries, param, this.identifier);
              break;
            case "ses":
              this.tryAppendQueryParameter(queries, param, this.encryptionScope);
              break;
            case "skoid":
              this.tryAppendQueryParameter(queries, param, this.signedOid);
              break;
            case "sktid":
              this.tryAppendQueryParameter(queries, param, this.signedTenantId);
              break;
            case "skt":
              this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : void 0);
              break;
            case "ske":
              this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : void 0);
              break;
            case "sks":
              this.tryAppendQueryParameter(queries, param, this.signedService);
              break;
            case "skv":
              this.tryAppendQueryParameter(queries, param, this.signedVersion);
              break;
            case "sr":
              this.tryAppendQueryParameter(queries, param, this.resource);
              break;
            case "sp":
              this.tryAppendQueryParameter(queries, param, this.permissions);
              break;
            case "sig":
              this.tryAppendQueryParameter(queries, param, this.signature);
              break;
            case "rscc":
              this.tryAppendQueryParameter(queries, param, this.cacheControl);
              break;
            case "rscd":
              this.tryAppendQueryParameter(queries, param, this.contentDisposition);
              break;
            case "rsce":
              this.tryAppendQueryParameter(queries, param, this.contentEncoding);
              break;
            case "rscl":
              this.tryAppendQueryParameter(queries, param, this.contentLanguage);
              break;
            case "rsct":
              this.tryAppendQueryParameter(queries, param, this.contentType);
              break;
            case "saoid":
              this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);
              break;
            case "scid":
              this.tryAppendQueryParameter(queries, param, this.correlationId);
              break;
          }
        }
        return queries.join("&");
      }
      /**
       * A private helper method used to filter and append query key/value pairs into an array.
       *
       * @param queries -
       * @param key -
       * @param value -
       */
      tryAppendQueryParameter(queries, key, value) {
        if (!value) {
          return;
        }
        key = encodeURIComponent(key);
        value = encodeURIComponent(value);
        if (key.length > 0 && value.length > 0) {
          queries.push(`${key}=${value}`);
        }
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js
function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
  return generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName).sasQueryParameters;
}
function generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
  const version3 = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;
  const sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential ? sharedKeyCredentialOrUserDelegationKey : void 0;
  let userDelegationKeyCredential;
  if (sharedKeyCredential === void 0 && accountName !== void 0) {
    userDelegationKeyCredential = new UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);
  }
  if (sharedKeyCredential === void 0 && userDelegationKeyCredential === void 0) {
    throw TypeError("Invalid sharedKeyCredential, userDelegationKey or accountName.");
  }
  if (version3 >= "2020-12-06") {
    if (sharedKeyCredential !== void 0) {
      return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);
    } else {
      return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);
    }
  }
  if (version3 >= "2018-11-09") {
    if (sharedKeyCredential !== void 0) {
      return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);
    } else {
      if (version3 >= "2020-02-10") {
        return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);
      } else {
        return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);
      }
    }
  }
  if (version3 >= "2015-04-05") {
    if (sharedKeyCredential !== void 0) {
      return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);
    } else {
      throw new RangeError("'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.");
    }
  }
  throw new RangeError("'version' must be >= '2015-04-05'.");
}
function generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  let resource = "c";
  if (blobSASSignatureValues.blobName) {
    resource = "b";
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    blobSASSignatureValues.identifier,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""
  ].join("\n");
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),
    stringToSign
  };
}
function generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    blobSASSignatureValues.identifier,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""
  ].join("\n");
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),
    stringToSign
  };
}
function generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    blobSASSignatureValues.identifier,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.encryptionScope,
    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""
  ].join("\n");
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, void 0, void 0, void 0, blobSASSignatureValues.encryptionScope),
    stringToSign
  };
}
function generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    userDelegationKeyCredential.userDelegationKey.signedObjectId,
    userDelegationKeyCredential.userDelegationKey.signedTenantId,
    userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedService,
    userDelegationKeyCredential.userDelegationKey.signedVersion,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.cacheControl,
    blobSASSignatureValues.contentDisposition,
    blobSASSignatureValues.contentEncoding,
    blobSASSignatureValues.contentLanguage,
    blobSASSignatureValues.contentType
  ].join("\n");
  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey),
    stringToSign
  };
}
function generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    userDelegationKeyCredential.userDelegationKey.signedObjectId,
    userDelegationKeyCredential.userDelegationKey.signedTenantId,
    userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedService,
    userDelegationKeyCredential.userDelegationKey.signedVersion,
    blobSASSignatureValues.preauthorizedAgentObjectId,
    void 0,
    // agentObjectId
    blobSASSignatureValues.correlationId,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.cacheControl,
    blobSASSignatureValues.contentDisposition,
    blobSASSignatureValues.contentEncoding,
    blobSASSignatureValues.contentLanguage,
    blobSASSignatureValues.contentType
  ].join("\n");
  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId),
    stringToSign
  };
}
function generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    userDelegationKeyCredential.userDelegationKey.signedObjectId,
    userDelegationKeyCredential.userDelegationKey.signedTenantId,
    userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedService,
    userDelegationKeyCredential.userDelegationKey.signedVersion,
    blobSASSignatureValues.preauthorizedAgentObjectId,
    void 0,
    // agentObjectId
    blobSASSignatureValues.correlationId,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.encryptionScope,
    blobSASSignatureValues.cacheControl,
    blobSASSignatureValues.contentDisposition,
    blobSASSignatureValues.contentEncoding,
    blobSASSignatureValues.contentLanguage,
    blobSASSignatureValues.contentType
  ].join("\n");
  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope),
    stringToSign
  };
}
function getCanonicalName(accountName, containerName, blobName) {
  const elements = [`/blob/${accountName}/${containerName}`];
  if (blobName) {
    elements.push(`/${blobName}`);
  }
  return elements.join("");
}
function SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {
  const version3 = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;
  if (blobSASSignatureValues.snapshotTime && version3 < "2018-11-09") {
    throw RangeError("'version' must be >= '2018-11-09' when providing 'snapshotTime'.");
  }
  if (blobSASSignatureValues.blobName === void 0 && blobSASSignatureValues.snapshotTime) {
    throw RangeError("Must provide 'blobName' when providing 'snapshotTime'.");
  }
  if (blobSASSignatureValues.versionId && version3 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'versionId'.");
  }
  if (blobSASSignatureValues.blobName === void 0 && blobSASSignatureValues.versionId) {
    throw RangeError("Must provide 'blobName' when providing 'versionId'.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.setImmutabilityPolicy && version3 < "2020-08-04") {
    throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.deleteVersion && version3 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'x' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.permanentDelete && version3 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'y' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.tag && version3 < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when providing 't' permission.");
  }
  if (version3 < "2020-02-10" && blobSASSignatureValues.permissions && (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.");
  }
  if (version3 < "2021-04-10" && blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.filterByTags) {
    throw RangeError("'version' must be >= '2021-04-10' when providing the 'f' permission.");
  }
  if (version3 < "2020-02-10" && (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.");
  }
  if (blobSASSignatureValues.encryptionScope && version3 < "2020-12-06") {
    throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
  }
  blobSASSignatureValues.version = version3;
  return blobSASSignatureValues;
}
var init_BlobSASSignatureValues = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js"() {
    "use strict";
    init_BlobSASPermissions();
    init_ContainerSASPermissions();
    init_StorageSharedKeyCredential();
    init_UserDelegationKeyCredential();
    init_SasIPRange();
    init_SASQueryParameters();
    init_constants2();
    init_utils_common();
    __name(generateBlobSASQueryParameters, "generateBlobSASQueryParameters");
    __name(generateBlobSASQueryParametersInternal, "generateBlobSASQueryParametersInternal");
    __name(generateBlobSASQueryParameters20150405, "generateBlobSASQueryParameters20150405");
    __name(generateBlobSASQueryParameters20181109, "generateBlobSASQueryParameters20181109");
    __name(generateBlobSASQueryParameters20201206, "generateBlobSASQueryParameters20201206");
    __name(generateBlobSASQueryParametersUDK20181109, "generateBlobSASQueryParametersUDK20181109");
    __name(generateBlobSASQueryParametersUDK20200210, "generateBlobSASQueryParametersUDK20200210");
    __name(generateBlobSASQueryParametersUDK20201206, "generateBlobSASQueryParametersUDK20201206");
    __name(getCanonicalName, "getCanonicalName");
    __name(SASSignatureValuesSanityCheckAndAutofill, "SASSignatureValuesSanityCheckAndAutofill");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js
var BlobLeaseClient;
var init_BlobLeaseClient = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js"() {
    "use strict";
    init_esm3();
    init_constants2();
    init_tracing();
    init_utils_common();
    BlobLeaseClient = class {
      static {
        __name(this, "BlobLeaseClient");
      }
      /**
       * Gets the lease Id.
       *
       * @readonly
       */
      get leaseId() {
        return this._leaseId;
      }
      /**
       * Gets the url.
       *
       * @readonly
       */
      get url() {
        return this._url;
      }
      /**
       * Creates an instance of BlobLeaseClient.
       * @param client - The client to make the lease operation requests.
       * @param leaseId - Initial proposed lease id.
       */
      constructor(client, leaseId2) {
        const clientContext = client.storageClientContext;
        this._url = client.url;
        if (client.name === void 0) {
          this._isContainer = true;
          this._containerOrBlobOperation = clientContext.container;
        } else {
          this._isContainer = false;
          this._containerOrBlobOperation = clientContext.blob;
        }
        if (!leaseId2) {
          leaseId2 = randomUUID();
        }
        this._leaseId = leaseId2;
      }
      /**
       * Establishes and manages a lock on a container for delete operations, or on a blob
       * for write and delete operations.
       * The lock duration can be 15 to 60 seconds, or can be infinite.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
       * and
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
       *
       * @param duration - Must be between 15 to 60 seconds, or infinite (-1)
       * @param options - option to configure lease management operations.
       * @returns Response data for acquire lease operation.
       */
      async acquireLease(duration2, options = {}) {
        var _a4, _b2, _c2, _d2, _e2;
        if (this._isContainer && (((_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e2 = options.conditions) === null || _e2 === void 0 ? void 0 : _e2.tagConditions))) {
          throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        }
        return tracingClient.withSpan("BlobLeaseClient-acquireLease", options, async (updatedOptions) => {
          var _a5;
          return assertResponse(await this._containerOrBlobOperation.acquireLease({
            abortSignal: options.abortSignal,
            duration: duration2,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a5 = options.conditions) === null || _a5 === void 0 ? void 0 : _a5.tagConditions }),
            proposedLeaseId: this._leaseId,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * To change the ID of the lease.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
       * and
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
       *
       * @param proposedLeaseId - the proposed new lease Id.
       * @param options - option to configure lease management operations.
       * @returns Response data for change lease operation.
       */
      async changeLease(proposedLeaseId2, options = {}) {
        var _a4, _b2, _c2, _d2, _e2;
        if (this._isContainer && (((_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e2 = options.conditions) === null || _e2 === void 0 ? void 0 : _e2.tagConditions))) {
          throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        }
        return tracingClient.withSpan("BlobLeaseClient-changeLease", options, async (updatedOptions) => {
          var _a5;
          const response = assertResponse(await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId2, {
            abortSignal: options.abortSignal,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a5 = options.conditions) === null || _a5 === void 0 ? void 0 : _a5.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          }));
          this._leaseId = proposedLeaseId2;
          return response;
        });
      }
      /**
       * To free the lease if it is no longer needed so that another client may
       * immediately acquire a lease against the container or the blob.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
       * and
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
       *
       * @param options - option to configure lease management operations.
       * @returns Response data for release lease operation.
       */
      async releaseLease(options = {}) {
        var _a4, _b2, _c2, _d2, _e2;
        if (this._isContainer && (((_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e2 = options.conditions) === null || _e2 === void 0 ? void 0 : _e2.tagConditions))) {
          throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        }
        return tracingClient.withSpan("BlobLeaseClient-releaseLease", options, async (updatedOptions) => {
          var _a5;
          return assertResponse(await this._containerOrBlobOperation.releaseLease(this._leaseId, {
            abortSignal: options.abortSignal,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a5 = options.conditions) === null || _a5 === void 0 ? void 0 : _a5.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * To renew the lease.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
       * and
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
       *
       * @param options - Optional option to configure lease management operations.
       * @returns Response data for renew lease operation.
       */
      async renewLease(options = {}) {
        var _a4, _b2, _c2, _d2, _e2;
        if (this._isContainer && (((_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e2 = options.conditions) === null || _e2 === void 0 ? void 0 : _e2.tagConditions))) {
          throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        }
        return tracingClient.withSpan("BlobLeaseClient-renewLease", options, async (updatedOptions) => {
          var _a5;
          return this._containerOrBlobOperation.renewLease(this._leaseId, {
            abortSignal: options.abortSignal,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a5 = options.conditions) === null || _a5 === void 0 ? void 0 : _a5.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          });
        });
      }
      /**
       * To end the lease but ensure that another client cannot acquire a new lease
       * until the current lease period has expired.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
       * and
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
       *
       * @param breakPeriod - Break period
       * @param options - Optional options to configure lease management operations.
       * @returns Response data for break lease operation.
       */
      async breakLease(breakPeriod2, options = {}) {
        var _a4, _b2, _c2, _d2, _e2;
        if (this._isContainer && (((_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e2 = options.conditions) === null || _e2 === void 0 ? void 0 : _e2.tagConditions))) {
          throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        }
        return tracingClient.withSpan("BlobLeaseClient-breakLease", options, async (updatedOptions) => {
          var _a5;
          const operationOptions = {
            abortSignal: options.abortSignal,
            breakPeriod: breakPeriod2,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a5 = options.conditions) === null || _a5 === void 0 ? void 0 : _a5.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          };
          return assertResponse(await this._containerOrBlobOperation.breakLease(operationOptions));
        });
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js
import { Readable as Readable2 } from "stream";
var RetriableReadableStream;
var init_RetriableReadableStream = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js"() {
    "use strict";
    init_esm11();
    RetriableReadableStream = class extends Readable2 {
      static {
        __name(this, "RetriableReadableStream");
      }
      /**
       * Creates an instance of RetriableReadableStream.
       *
       * @param source - The current ReadableStream returned from getter
       * @param getter - A method calling downloading request returning
       *                                      a new ReadableStream from specified offset
       * @param offset - Offset position in original data source to read
       * @param count - How much data in original data source to read
       * @param options -
       */
      constructor(source, getter, offset, count, options = {}) {
        super({ highWaterMark: options.highWaterMark });
        this.retries = 0;
        this.sourceDataHandler = (data) => {
          if (this.options.doInjectErrorOnce) {
            this.options.doInjectErrorOnce = void 0;
            this.source.pause();
            this.sourceErrorOrEndHandler();
            this.source.destroy();
            return;
          }
          this.offset += data.length;
          if (this.onProgress) {
            this.onProgress({ loadedBytes: this.offset - this.start });
          }
          if (!this.push(data)) {
            this.source.pause();
          }
        };
        this.sourceAbortedHandler = () => {
          const abortError = new AbortError3("The operation was aborted.");
          this.destroy(abortError);
        };
        this.sourceErrorOrEndHandler = (err) => {
          if (err && err.name === "AbortError") {
            this.destroy(err);
            return;
          }
          this.removeSourceEventHandlers();
          if (this.offset - 1 === this.end) {
            this.push(null);
          } else if (this.offset <= this.end) {
            if (this.retries < this.maxRetryRequests) {
              this.retries += 1;
              this.getter(this.offset).then((newSource) => {
                this.source = newSource;
                this.setSourceEventHandlers();
                return;
              }).catch((error) => {
                this.destroy(error);
              });
            } else {
              this.destroy(new Error(`Data corruption failure: received less data than required and reached maxRetires limitation. Received data offset: ${this.offset - 1}, data needed offset: ${this.end}, retries: ${this.retries}, max retries: ${this.maxRetryRequests}`));
            }
          } else {
            this.destroy(new Error(`Data corruption failure: Received more data than original request, data needed offset is ${this.end}, received offset: ${this.offset - 1}`));
          }
        };
        this.getter = getter;
        this.source = source;
        this.start = offset;
        this.offset = offset;
        this.end = offset + count - 1;
        this.maxRetryRequests = options.maxRetryRequests && options.maxRetryRequests >= 0 ? options.maxRetryRequests : 0;
        this.onProgress = options.onProgress;
        this.options = options;
        this.setSourceEventHandlers();
      }
      _read() {
        this.source.resume();
      }
      setSourceEventHandlers() {
        this.source.on("data", this.sourceDataHandler);
        this.source.on("end", this.sourceErrorOrEndHandler);
        this.source.on("error", this.sourceErrorOrEndHandler);
        this.source.on("aborted", this.sourceAbortedHandler);
      }
      removeSourceEventHandlers() {
        this.source.removeListener("data", this.sourceDataHandler);
        this.source.removeListener("end", this.sourceErrorOrEndHandler);
        this.source.removeListener("error", this.sourceErrorOrEndHandler);
        this.source.removeListener("aborted", this.sourceAbortedHandler);
      }
      _destroy(error, callback) {
        this.removeSourceEventHandlers();
        this.source.destroy();
        callback(error === null ? void 0 : error);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js
var BlobDownloadResponse;
var init_BlobDownloadResponse = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js"() {
    "use strict";
    init_esm3();
    init_RetriableReadableStream();
    BlobDownloadResponse = class {
      static {
        __name(this, "BlobDownloadResponse");
      }
      /**
       * Indicates that the service supports
       * requests for partial file content.
       *
       * @readonly
       */
      get acceptRanges() {
        return this.originalResponse.acceptRanges;
      }
      /**
       * Returns if it was previously specified
       * for the file.
       *
       * @readonly
       */
      get cacheControl() {
        return this.originalResponse.cacheControl;
      }
      /**
       * Returns the value that was specified
       * for the 'x-ms-content-disposition' header and specifies how to process the
       * response.
       *
       * @readonly
       */
      get contentDisposition() {
        return this.originalResponse.contentDisposition;
      }
      /**
       * Returns the value that was specified
       * for the Content-Encoding request header.
       *
       * @readonly
       */
      get contentEncoding() {
        return this.originalResponse.contentEncoding;
      }
      /**
       * Returns the value that was specified
       * for the Content-Language request header.
       *
       * @readonly
       */
      get contentLanguage() {
        return this.originalResponse.contentLanguage;
      }
      /**
       * The current sequence number for a
       * page blob. This header is not returned for block blobs or append blobs.
       *
       * @readonly
       */
      get blobSequenceNumber() {
        return this.originalResponse.blobSequenceNumber;
      }
      /**
       * The blob's type. Possible values include:
       * 'BlockBlob', 'PageBlob', 'AppendBlob'.
       *
       * @readonly
       */
      get blobType() {
        return this.originalResponse.blobType;
      }
      /**
       * The number of bytes present in the
       * response body.
       *
       * @readonly
       */
      get contentLength() {
        return this.originalResponse.contentLength;
      }
      /**
       * If the file has an MD5 hash and the
       * request is to read the full file, this response header is returned so that
       * the client can check for message content integrity. If the request is to
       * read a specified range and the 'x-ms-range-get-content-md5' is set to
       * true, then the request returns an MD5 hash for the range, as long as the
       * range size is less than or equal to 4 MB. If neither of these sets of
       * conditions is true, then no value is returned for the 'Content-MD5'
       * header.
       *
       * @readonly
       */
      get contentMD5() {
        return this.originalResponse.contentMD5;
      }
      /**
       * Indicates the range of bytes returned if
       * the client requested a subset of the file by setting the Range request
       * header.
       *
       * @readonly
       */
      get contentRange() {
        return this.originalResponse.contentRange;
      }
      /**
       * The content type specified for the file.
       * The default content type is 'application/octet-stream'
       *
       * @readonly
       */
      get contentType() {
        return this.originalResponse.contentType;
      }
      /**
       * Conclusion time of the last attempted
       * Copy File operation where this file was the destination file. This value
       * can specify the time of a completed, aborted, or failed copy attempt.
       *
       * @readonly
       */
      get copyCompletedOn() {
        return this.originalResponse.copyCompletedOn;
      }
      /**
       * String identifier for the last attempted Copy
       * File operation where this file was the destination file.
       *
       * @readonly
       */
      get copyId() {
        return this.originalResponse.copyId;
      }
      /**
       * Contains the number of bytes copied and
       * the total bytes in the source in the last attempted Copy File operation
       * where this file was the destination file. Can show between 0 and
       * Content-Length bytes copied.
       *
       * @readonly
       */
      get copyProgress() {
        return this.originalResponse.copyProgress;
      }
      /**
       * URL up to 2KB in length that specifies the
       * source file used in the last attempted Copy File operation where this file
       * was the destination file.
       *
       * @readonly
       */
      get copySource() {
        return this.originalResponse.copySource;
      }
      /**
       * State of the copy operation
       * identified by 'x-ms-copy-id'. Possible values include: 'pending',
       * 'success', 'aborted', 'failed'
       *
       * @readonly
       */
      get copyStatus() {
        return this.originalResponse.copyStatus;
      }
      /**
       * Only appears when
       * x-ms-copy-status is failed or pending. Describes cause of fatal or
       * non-fatal copy operation failure.
       *
       * @readonly
       */
      get copyStatusDescription() {
        return this.originalResponse.copyStatusDescription;
      }
      /**
       * When a blob is leased,
       * specifies whether the lease is of infinite or fixed duration. Possible
       * values include: 'infinite', 'fixed'.
       *
       * @readonly
       */
      get leaseDuration() {
        return this.originalResponse.leaseDuration;
      }
      /**
       * Lease state of the blob. Possible
       * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.
       *
       * @readonly
       */
      get leaseState() {
        return this.originalResponse.leaseState;
      }
      /**
       * The current lease status of the
       * blob. Possible values include: 'locked', 'unlocked'.
       *
       * @readonly
       */
      get leaseStatus() {
        return this.originalResponse.leaseStatus;
      }
      /**
       * A UTC date/time value generated by the service that
       * indicates the time at which the response was initiated.
       *
       * @readonly
       */
      get date() {
        return this.originalResponse.date;
      }
      /**
       * The number of committed blocks
       * present in the blob. This header is returned only for append blobs.
       *
       * @readonly
       */
      get blobCommittedBlockCount() {
        return this.originalResponse.blobCommittedBlockCount;
      }
      /**
       * The ETag contains a value that you can use to
       * perform operations conditionally, in quotes.
       *
       * @readonly
       */
      get etag() {
        return this.originalResponse.etag;
      }
      /**
       * The number of tags associated with the blob
       *
       * @readonly
       */
      get tagCount() {
        return this.originalResponse.tagCount;
      }
      /**
       * The error code.
       *
       * @readonly
       */
      get errorCode() {
        return this.originalResponse.errorCode;
      }
      /**
       * The value of this header is set to
       * true if the file data and application metadata are completely encrypted
       * using the specified algorithm. Otherwise, the value is set to false (when
       * the file is unencrypted, or if only parts of the file/application metadata
       * are encrypted).
       *
       * @readonly
       */
      get isServerEncrypted() {
        return this.originalResponse.isServerEncrypted;
      }
      /**
       * If the blob has a MD5 hash, and if
       * request contains range header (Range or x-ms-range), this response header
       * is returned with the value of the whole blob's MD5 value. This value may
       * or may not be equal to the value returned in Content-MD5 header, with the
       * latter calculated from the requested range.
       *
       * @readonly
       */
      get blobContentMD5() {
        return this.originalResponse.blobContentMD5;
      }
      /**
       * Returns the date and time the file was last
       * modified. Any operation that modifies the file or its properties updates
       * the last modified time.
       *
       * @readonly
       */
      get lastModified() {
        return this.originalResponse.lastModified;
      }
      /**
       * Returns the UTC date and time generated by the service that indicates the time at which the blob was
       * last read or written to.
       *
       * @readonly
       */
      get lastAccessed() {
        return this.originalResponse.lastAccessed;
      }
      /**
       * Returns the date and time the blob was created.
       *
       * @readonly
       */
      get createdOn() {
        return this.originalResponse.createdOn;
      }
      /**
       * A name-value pair
       * to associate with a file storage object.
       *
       * @readonly
       */
      get metadata() {
        return this.originalResponse.metadata;
      }
      /**
       * This header uniquely identifies the request
       * that was made and can be used for troubleshooting the request.
       *
       * @readonly
       */
      get requestId() {
        return this.originalResponse.requestId;
      }
      /**
       * If a client request id header is sent in the request, this header will be present in the
       * response with the same value.
       *
       * @readonly
       */
      get clientRequestId() {
        return this.originalResponse.clientRequestId;
      }
      /**
       * Indicates the version of the Blob service used
       * to execute the request.
       *
       * @readonly
       */
      get version() {
        return this.originalResponse.version;
      }
      /**
       * Indicates the versionId of the downloaded blob version.
       *
       * @readonly
       */
      get versionId() {
        return this.originalResponse.versionId;
      }
      /**
       * Indicates whether version of this blob is a current version.
       *
       * @readonly
       */
      get isCurrentVersion() {
        return this.originalResponse.isCurrentVersion;
      }
      /**
       * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned
       * when the blob was encrypted with a customer-provided key.
       *
       * @readonly
       */
      get encryptionKeySha256() {
        return this.originalResponse.encryptionKeySha256;
      }
      /**
       * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to
       * true, then the request returns a crc64 for the range, as long as the range size is less than
       * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is
       * specified in the same request, it will fail with 400(Bad Request)
       */
      get contentCrc64() {
        return this.originalResponse.contentCrc64;
      }
      /**
       * Object Replication Policy Id of the destination blob.
       *
       * @readonly
       */
      get objectReplicationDestinationPolicyId() {
        return this.originalResponse.objectReplicationDestinationPolicyId;
      }
      /**
       * Parsed Object Replication Policy Id, Rule Id(s) and status of the source blob.
       *
       * @readonly
       */
      get objectReplicationSourceProperties() {
        return this.originalResponse.objectReplicationSourceProperties;
      }
      /**
       * If this blob has been sealed.
       *
       * @readonly
       */
      get isSealed() {
        return this.originalResponse.isSealed;
      }
      /**
       * UTC date/time value generated by the service that indicates the time at which the blob immutability policy will expire.
       *
       * @readonly
       */
      get immutabilityPolicyExpiresOn() {
        return this.originalResponse.immutabilityPolicyExpiresOn;
      }
      /**
       * Indicates immutability policy mode.
       *
       * @readonly
       */
      get immutabilityPolicyMode() {
        return this.originalResponse.immutabilityPolicyMode;
      }
      /**
       * Indicates if a legal hold is present on the blob.
       *
       * @readonly
       */
      get legalHold() {
        return this.originalResponse.legalHold;
      }
      /**
       * The response body as a browser Blob.
       * Always undefined in node.js.
       *
       * @readonly
       */
      get contentAsBlob() {
        return this.originalResponse.blobBody;
      }
      /**
       * The response body as a node.js Readable stream.
       * Always undefined in the browser.
       *
       * It will automatically retry when internal read stream unexpected ends.
       *
       * @readonly
       */
      get readableStreamBody() {
        return isNode ? this.blobDownloadStream : void 0;
      }
      /**
       * The HTTP response.
       */
      get _response() {
        return this.originalResponse._response;
      }
      /**
       * Creates an instance of BlobDownloadResponse.
       *
       * @param originalResponse -
       * @param getter -
       * @param offset -
       * @param count -
       * @param options -
       */
      constructor(originalResponse2, getter, offset, count, options = {}) {
        this.originalResponse = originalResponse2;
        this.blobDownloadStream = new RetriableReadableStream(this.originalResponse.readableStreamBody, getter, offset, count, options);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js
var AVRO_SYNC_MARKER_SIZE, AVRO_INIT_BYTES, AVRO_CODEC_KEY, AVRO_SCHEMA_KEY;
var init_AvroConstants = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js"() {
    "use strict";
    AVRO_SYNC_MARKER_SIZE = 16;
    AVRO_INIT_BYTES = new Uint8Array([79, 98, 106, 1]);
    AVRO_CODEC_KEY = "avro.codec";
    AVRO_SCHEMA_KEY = "avro.schema";
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js
var AvroParser, AvroComplex, AvroPrimitive, AvroType, AvroPrimitiveType, AvroEnumType, AvroUnionType, AvroMapType, AvroRecordType;
var init_AvroParser = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js"() {
    "use strict";
    AvroParser = class _AvroParser {
      static {
        __name(this, "AvroParser");
      }
      /**
       * Reads a fixed number of bytes from the stream.
       *
       * @param stream -
       * @param length -
       * @param options -
       */
      static async readFixedBytes(stream, length, options = {}) {
        const bytes = await stream.read(length, { abortSignal: options.abortSignal });
        if (bytes.length !== length) {
          throw new Error("Hit stream end.");
        }
        return bytes;
      }
      /**
       * Reads a single byte from the stream.
       *
       * @param stream -
       * @param options -
       */
      static async readByte(stream, options = {}) {
        const buf = await _AvroParser.readFixedBytes(stream, 1, options);
        return buf[0];
      }
      // int and long are stored in variable-length zig-zag coding.
      // variable-length: https://lucene.apache.org/core/3_5_0/fileformats.html#VInt
      // zig-zag: https://developers.google.com/protocol-buffers/docs/encoding?csw=1#types
      static async readZigZagLong(stream, options = {}) {
        let zigZagEncoded = 0;
        let significanceInBit = 0;
        let byte, haveMoreByte, significanceInFloat;
        do {
          byte = await _AvroParser.readByte(stream, options);
          haveMoreByte = byte & 128;
          zigZagEncoded |= (byte & 127) << significanceInBit;
          significanceInBit += 7;
        } while (haveMoreByte && significanceInBit < 28);
        if (haveMoreByte) {
          zigZagEncoded = zigZagEncoded;
          significanceInFloat = 268435456;
          do {
            byte = await _AvroParser.readByte(stream, options);
            zigZagEncoded += (byte & 127) * significanceInFloat;
            significanceInFloat *= 128;
          } while (byte & 128);
          const res = (zigZagEncoded % 2 ? -(zigZagEncoded + 1) : zigZagEncoded) / 2;
          if (res < Number.MIN_SAFE_INTEGER || res > Number.MAX_SAFE_INTEGER) {
            throw new Error("Integer overflow.");
          }
          return res;
        }
        return zigZagEncoded >> 1 ^ -(zigZagEncoded & 1);
      }
      static async readLong(stream, options = {}) {
        return _AvroParser.readZigZagLong(stream, options);
      }
      static async readInt(stream, options = {}) {
        return _AvroParser.readZigZagLong(stream, options);
      }
      static async readNull() {
        return null;
      }
      static async readBoolean(stream, options = {}) {
        const b3 = await _AvroParser.readByte(stream, options);
        if (b3 === 1) {
          return true;
        } else if (b3 === 0) {
          return false;
        } else {
          throw new Error("Byte was not a boolean.");
        }
      }
      static async readFloat(stream, options = {}) {
        const u8arr = await _AvroParser.readFixedBytes(stream, 4, options);
        const view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);
        return view.getFloat32(0, true);
      }
      static async readDouble(stream, options = {}) {
        const u8arr = await _AvroParser.readFixedBytes(stream, 8, options);
        const view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);
        return view.getFloat64(0, true);
      }
      static async readBytes(stream, options = {}) {
        const size = await _AvroParser.readLong(stream, options);
        if (size < 0) {
          throw new Error("Bytes size was negative.");
        }
        return stream.read(size, { abortSignal: options.abortSignal });
      }
      static async readString(stream, options = {}) {
        const u8arr = await _AvroParser.readBytes(stream, options);
        const utf8decoder = new TextDecoder();
        return utf8decoder.decode(u8arr);
      }
      static async readMapPair(stream, readItemMethod, options = {}) {
        const key = await _AvroParser.readString(stream, options);
        const value = await readItemMethod(stream, options);
        return { key, value };
      }
      static async readMap(stream, readItemMethod, options = {}) {
        const readPairMethod = /* @__PURE__ */ __name((s3, opts = {}) => {
          return _AvroParser.readMapPair(s3, readItemMethod, opts);
        }, "readPairMethod");
        const pairs2 = await _AvroParser.readArray(stream, readPairMethod, options);
        const dict = {};
        for (const pair of pairs2) {
          dict[pair.key] = pair.value;
        }
        return dict;
      }
      static async readArray(stream, readItemMethod, options = {}) {
        const items = [];
        for (let count = await _AvroParser.readLong(stream, options); count !== 0; count = await _AvroParser.readLong(stream, options)) {
          if (count < 0) {
            await _AvroParser.readLong(stream, options);
            count = -count;
          }
          while (count--) {
            const item = await readItemMethod(stream, options);
            items.push(item);
          }
        }
        return items;
      }
    };
    (function(AvroComplex2) {
      AvroComplex2["RECORD"] = "record";
      AvroComplex2["ENUM"] = "enum";
      AvroComplex2["ARRAY"] = "array";
      AvroComplex2["MAP"] = "map";
      AvroComplex2["UNION"] = "union";
      AvroComplex2["FIXED"] = "fixed";
    })(AvroComplex || (AvroComplex = {}));
    (function(AvroPrimitive2) {
      AvroPrimitive2["NULL"] = "null";
      AvroPrimitive2["BOOLEAN"] = "boolean";
      AvroPrimitive2["INT"] = "int";
      AvroPrimitive2["LONG"] = "long";
      AvroPrimitive2["FLOAT"] = "float";
      AvroPrimitive2["DOUBLE"] = "double";
      AvroPrimitive2["BYTES"] = "bytes";
      AvroPrimitive2["STRING"] = "string";
    })(AvroPrimitive || (AvroPrimitive = {}));
    AvroType = class _AvroType {
      static {
        __name(this, "AvroType");
      }
      /**
       * Determines the AvroType from the Avro Schema.
       */
      // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types
      static fromSchema(schema) {
        if (typeof schema === "string") {
          return _AvroType.fromStringSchema(schema);
        } else if (Array.isArray(schema)) {
          return _AvroType.fromArraySchema(schema);
        } else {
          return _AvroType.fromObjectSchema(schema);
        }
      }
      static fromStringSchema(schema) {
        switch (schema) {
          case AvroPrimitive.NULL:
          case AvroPrimitive.BOOLEAN:
          case AvroPrimitive.INT:
          case AvroPrimitive.LONG:
          case AvroPrimitive.FLOAT:
          case AvroPrimitive.DOUBLE:
          case AvroPrimitive.BYTES:
          case AvroPrimitive.STRING:
            return new AvroPrimitiveType(schema);
          default:
            throw new Error(`Unexpected Avro type ${schema}`);
        }
      }
      static fromArraySchema(schema) {
        return new AvroUnionType(schema.map(_AvroType.fromSchema));
      }
      static fromObjectSchema(schema) {
        const type2 = schema.type;
        try {
          return _AvroType.fromStringSchema(type2);
        } catch (_a4) {
        }
        switch (type2) {
          case AvroComplex.RECORD:
            if (schema.aliases) {
              throw new Error(`aliases currently is not supported, schema: ${schema}`);
            }
            if (!schema.name) {
              throw new Error(`Required attribute 'name' doesn't exist on schema: ${schema}`);
            }
            const fields = {};
            if (!schema.fields) {
              throw new Error(`Required attribute 'fields' doesn't exist on schema: ${schema}`);
            }
            for (const field of schema.fields) {
              fields[field.name] = _AvroType.fromSchema(field.type);
            }
            return new AvroRecordType(fields, schema.name);
          case AvroComplex.ENUM:
            if (schema.aliases) {
              throw new Error(`aliases currently is not supported, schema: ${schema}`);
            }
            if (!schema.symbols) {
              throw new Error(`Required attribute 'symbols' doesn't exist on schema: ${schema}`);
            }
            return new AvroEnumType(schema.symbols);
          case AvroComplex.MAP:
            if (!schema.values) {
              throw new Error(`Required attribute 'values' doesn't exist on schema: ${schema}`);
            }
            return new AvroMapType(_AvroType.fromSchema(schema.values));
          case AvroComplex.ARRAY:
          // Unused today
          case AvroComplex.FIXED:
          // Unused today
          default:
            throw new Error(`Unexpected Avro type ${type2} in ${schema}`);
        }
      }
    };
    AvroPrimitiveType = class extends AvroType {
      static {
        __name(this, "AvroPrimitiveType");
      }
      constructor(primitive) {
        super();
        this._primitive = primitive;
      }
      // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types
      read(stream, options = {}) {
        switch (this._primitive) {
          case AvroPrimitive.NULL:
            return AvroParser.readNull();
          case AvroPrimitive.BOOLEAN:
            return AvroParser.readBoolean(stream, options);
          case AvroPrimitive.INT:
            return AvroParser.readInt(stream, options);
          case AvroPrimitive.LONG:
            return AvroParser.readLong(stream, options);
          case AvroPrimitive.FLOAT:
            return AvroParser.readFloat(stream, options);
          case AvroPrimitive.DOUBLE:
            return AvroParser.readDouble(stream, options);
          case AvroPrimitive.BYTES:
            return AvroParser.readBytes(stream, options);
          case AvroPrimitive.STRING:
            return AvroParser.readString(stream, options);
          default:
            throw new Error("Unknown Avro Primitive");
        }
      }
    };
    AvroEnumType = class extends AvroType {
      static {
        __name(this, "AvroEnumType");
      }
      constructor(symbols) {
        super();
        this._symbols = symbols;
      }
      // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types
      async read(stream, options = {}) {
        const value = await AvroParser.readInt(stream, options);
        return this._symbols[value];
      }
    };
    AvroUnionType = class extends AvroType {
      static {
        __name(this, "AvroUnionType");
      }
      constructor(types2) {
        super();
        this._types = types2;
      }
      async read(stream, options = {}) {
        const typeIndex = await AvroParser.readInt(stream, options);
        return this._types[typeIndex].read(stream, options);
      }
    };
    AvroMapType = class extends AvroType {
      static {
        __name(this, "AvroMapType");
      }
      constructor(itemType) {
        super();
        this._itemType = itemType;
      }
      // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types
      read(stream, options = {}) {
        const readItemMethod = /* @__PURE__ */ __name((s3, opts) => {
          return this._itemType.read(s3, opts);
        }, "readItemMethod");
        return AvroParser.readMap(stream, readItemMethod, options);
      }
    };
    AvroRecordType = class extends AvroType {
      static {
        __name(this, "AvroRecordType");
      }
      constructor(fields, name2) {
        super();
        this._fields = fields;
        this._name = name2;
      }
      // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types
      async read(stream, options = {}) {
        const record = {};
        record["$schema"] = this._name;
        for (const key in this._fields) {
          if (Object.prototype.hasOwnProperty.call(this._fields, key)) {
            record[key] = await this._fields[key].read(stream, options);
          }
        }
        return record;
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js
function arraysEqual(a3, b3) {
  if (a3 === b3)
    return true;
  if (a3 == null || b3 == null)
    return false;
  if (a3.length !== b3.length)
    return false;
  for (let i3 = 0; i3 < a3.length; ++i3) {
    if (a3[i3] !== b3[i3])
      return false;
  }
  return true;
}
var init_utils_common2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js"() {
    "use strict";
    __name(arraysEqual, "arraysEqual");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js
var AvroReader;
var init_AvroReader = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js"() {
    "use strict";
    init_tslib_es6();
    init_AvroConstants();
    init_AvroParser();
    init_utils_common2();
    AvroReader = class {
      static {
        __name(this, "AvroReader");
      }
      get blockOffset() {
        return this._blockOffset;
      }
      get objectIndex() {
        return this._objectIndex;
      }
      constructor(dataStream, headerStream, currentBlockOffset, indexWithinCurrentBlock) {
        this._dataStream = dataStream;
        this._headerStream = headerStream || dataStream;
        this._initialized = false;
        this._blockOffset = currentBlockOffset || 0;
        this._objectIndex = indexWithinCurrentBlock || 0;
        this._initialBlockOffset = currentBlockOffset || 0;
      }
      async initialize(options = {}) {
        const header = await AvroParser.readFixedBytes(this._headerStream, AVRO_INIT_BYTES.length, {
          abortSignal: options.abortSignal
        });
        if (!arraysEqual(header, AVRO_INIT_BYTES)) {
          throw new Error("Stream is not an Avro file.");
        }
        this._metadata = await AvroParser.readMap(this._headerStream, AvroParser.readString, {
          abortSignal: options.abortSignal
        });
        const codec = this._metadata[AVRO_CODEC_KEY];
        if (!(codec === void 0 || codec === null || codec === "null")) {
          throw new Error("Codecs are not supported");
        }
        this._syncMarker = await AvroParser.readFixedBytes(this._headerStream, AVRO_SYNC_MARKER_SIZE, {
          abortSignal: options.abortSignal
        });
        const schema = JSON.parse(this._metadata[AVRO_SCHEMA_KEY]);
        this._itemType = AvroType.fromSchema(schema);
        if (this._blockOffset === 0) {
          this._blockOffset = this._initialBlockOffset + this._dataStream.position;
        }
        this._itemsRemainingInBlock = await AvroParser.readLong(this._dataStream, {
          abortSignal: options.abortSignal
        });
        await AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal });
        this._initialized = true;
        if (this._objectIndex && this._objectIndex > 0) {
          for (let i3 = 0; i3 < this._objectIndex; i3++) {
            await this._itemType.read(this._dataStream, { abortSignal: options.abortSignal });
            this._itemsRemainingInBlock--;
          }
        }
      }
      hasNext() {
        return !this._initialized || this._itemsRemainingInBlock > 0;
      }
      parseObjects() {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* parseObjects_1(options = {}) {
          if (!this._initialized) {
            yield __await(this.initialize(options));
          }
          while (this.hasNext()) {
            const result = yield __await(this._itemType.read(this._dataStream, {
              abortSignal: options.abortSignal
            }));
            this._itemsRemainingInBlock--;
            this._objectIndex++;
            if (this._itemsRemainingInBlock === 0) {
              const marker2 = yield __await(AvroParser.readFixedBytes(this._dataStream, AVRO_SYNC_MARKER_SIZE, {
                abortSignal: options.abortSignal
              }));
              this._blockOffset = this._initialBlockOffset + this._dataStream.position;
              this._objectIndex = 0;
              if (!arraysEqual(this._syncMarker, marker2)) {
                throw new Error("Stream is not a valid Avro file.");
              }
              try {
                this._itemsRemainingInBlock = yield __await(AvroParser.readLong(this._dataStream, {
                  abortSignal: options.abortSignal
                }));
              } catch (_a4) {
                this._itemsRemainingInBlock = 0;
              }
              if (this._itemsRemainingInBlock > 0) {
                yield __await(AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal }));
              }
            }
            yield yield __await(result);
          }
        }, "parseObjects_1"));
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js
var AvroReadable;
var init_AvroReadable = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js"() {
    "use strict";
    AvroReadable = class {
      static {
        __name(this, "AvroReadable");
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js
var ABORT_ERROR, AvroReadableFromStream;
var init_AvroReadableFromStream = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js"() {
    "use strict";
    init_AvroReadable();
    init_esm11();
    ABORT_ERROR = new AbortError3("Reading from the avro stream was aborted.");
    AvroReadableFromStream = class extends AvroReadable {
      static {
        __name(this, "AvroReadableFromStream");
      }
      toUint8Array(data) {
        if (typeof data === "string") {
          return Buffer.from(data);
        }
        return data;
      }
      constructor(readable) {
        super();
        this._readable = readable;
        this._position = 0;
      }
      get position() {
        return this._position;
      }
      async read(size, options = {}) {
        var _a4;
        if ((_a4 = options.abortSignal) === null || _a4 === void 0 ? void 0 : _a4.aborted) {
          throw ABORT_ERROR;
        }
        if (size < 0) {
          throw new Error(`size parameter should be positive: ${size}`);
        }
        if (size === 0) {
          return new Uint8Array();
        }
        if (!this._readable.readable) {
          throw new Error("Stream no longer readable.");
        }
        const chunk = this._readable.read(size);
        if (chunk) {
          this._position += chunk.length;
          return this.toUint8Array(chunk);
        } else {
          return new Promise((resolve2, reject) => {
            const cleanUp = /* @__PURE__ */ __name(() => {
              this._readable.removeListener("readable", readableCallback);
              this._readable.removeListener("error", rejectCallback);
              this._readable.removeListener("end", rejectCallback);
              this._readable.removeListener("close", rejectCallback);
              if (options.abortSignal) {
                options.abortSignal.removeEventListener("abort", abortHandler);
              }
            }, "cleanUp");
            const readableCallback = /* @__PURE__ */ __name(() => {
              const callbackChunk = this._readable.read(size);
              if (callbackChunk) {
                this._position += callbackChunk.length;
                cleanUp();
                resolve2(this.toUint8Array(callbackChunk));
              }
            }, "readableCallback");
            const rejectCallback = /* @__PURE__ */ __name(() => {
              cleanUp();
              reject();
            }, "rejectCallback");
            const abortHandler = /* @__PURE__ */ __name(() => {
              cleanUp();
              reject(ABORT_ERROR);
            }, "abortHandler");
            this._readable.on("readable", readableCallback);
            this._readable.once("error", rejectCallback);
            this._readable.once("end", rejectCallback);
            this._readable.once("close", rejectCallback);
            if (options.abortSignal) {
              options.abortSignal.addEventListener("abort", abortHandler);
            }
          });
        }
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/index.js
var init_src2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/index.js"() {
    "use strict";
    init_AvroReader();
    init_AvroReadableFromStream();
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js
import { Readable as Readable3 } from "stream";
var BlobQuickQueryStream;
var init_BlobQuickQueryStream = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js"() {
    "use strict";
    init_src2();
    BlobQuickQueryStream = class extends Readable3 {
      static {
        __name(this, "BlobQuickQueryStream");
      }
      /**
       * Creates an instance of BlobQuickQueryStream.
       *
       * @param source - The current ReadableStream returned from getter
       * @param options -
       */
      constructor(source, options = {}) {
        super();
        this.avroPaused = true;
        this.source = source;
        this.onProgress = options.onProgress;
        this.onError = options.onError;
        this.avroReader = new AvroReader(new AvroReadableFromStream(this.source));
        this.avroIter = this.avroReader.parseObjects({ abortSignal: options.abortSignal });
      }
      _read() {
        if (this.avroPaused) {
          this.readInternal().catch((err) => {
            this.emit("error", err);
          });
        }
      }
      async readInternal() {
        this.avroPaused = false;
        let avroNext;
        do {
          avroNext = await this.avroIter.next();
          if (avroNext.done) {
            break;
          }
          const obj = avroNext.value;
          const schema = obj.$schema;
          if (typeof schema !== "string") {
            throw Error("Missing schema in avro record.");
          }
          switch (schema) {
            case "com.microsoft.azure.storage.queryBlobContents.resultData":
              {
                const data = obj.data;
                if (data instanceof Uint8Array === false) {
                  throw Error("Invalid data in avro result record.");
                }
                if (!this.push(Buffer.from(data))) {
                  this.avroPaused = true;
                }
              }
              break;
            case "com.microsoft.azure.storage.queryBlobContents.progress":
              {
                const bytesScanned = obj.bytesScanned;
                if (typeof bytesScanned !== "number") {
                  throw Error("Invalid bytesScanned in avro progress record.");
                }
                if (this.onProgress) {
                  this.onProgress({ loadedBytes: bytesScanned });
                }
              }
              break;
            case "com.microsoft.azure.storage.queryBlobContents.end":
              if (this.onProgress) {
                const totalBytes = obj.totalBytes;
                if (typeof totalBytes !== "number") {
                  throw Error("Invalid totalBytes in avro end record.");
                }
                this.onProgress({ loadedBytes: totalBytes });
              }
              this.push(null);
              break;
            case "com.microsoft.azure.storage.queryBlobContents.error":
              if (this.onError) {
                const fatal2 = obj.fatal;
                if (typeof fatal2 !== "boolean") {
                  throw Error("Invalid fatal in avro error record.");
                }
                const name2 = obj.name;
                if (typeof name2 !== "string") {
                  throw Error("Invalid name in avro error record.");
                }
                const description = obj.description;
                if (typeof description !== "string") {
                  throw Error("Invalid description in avro error record.");
                }
                const position2 = obj.position;
                if (typeof position2 !== "number") {
                  throw Error("Invalid position in avro error record.");
                }
                this.onError({
                  position: position2,
                  name: name2,
                  isFatal: fatal2,
                  description
                });
              }
              break;
            default:
              throw Error(`Unknown schema ${schema} in avro progress record.`);
          }
        } while (!avroNext.done && !this.avroPaused);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js
var BlobQueryResponse;
var init_BlobQueryResponse = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js"() {
    "use strict";
    init_esm3();
    init_BlobQuickQueryStream();
    BlobQueryResponse = class {
      static {
        __name(this, "BlobQueryResponse");
      }
      /**
       * Indicates that the service supports
       * requests for partial file content.
       *
       * @readonly
       */
      get acceptRanges() {
        return this.originalResponse.acceptRanges;
      }
      /**
       * Returns if it was previously specified
       * for the file.
       *
       * @readonly
       */
      get cacheControl() {
        return this.originalResponse.cacheControl;
      }
      /**
       * Returns the value that was specified
       * for the 'x-ms-content-disposition' header and specifies how to process the
       * response.
       *
       * @readonly
       */
      get contentDisposition() {
        return this.originalResponse.contentDisposition;
      }
      /**
       * Returns the value that was specified
       * for the Content-Encoding request header.
       *
       * @readonly
       */
      get contentEncoding() {
        return this.originalResponse.contentEncoding;
      }
      /**
       * Returns the value that was specified
       * for the Content-Language request header.
       *
       * @readonly
       */
      get contentLanguage() {
        return this.originalResponse.contentLanguage;
      }
      /**
       * The current sequence number for a
       * page blob. This header is not returned for block blobs or append blobs.
       *
       * @readonly
       */
      get blobSequenceNumber() {
        return this.originalResponse.blobSequenceNumber;
      }
      /**
       * The blob's type. Possible values include:
       * 'BlockBlob', 'PageBlob', 'AppendBlob'.
       *
       * @readonly
       */
      get blobType() {
        return this.originalResponse.blobType;
      }
      /**
       * The number of bytes present in the
       * response body.
       *
       * @readonly
       */
      get contentLength() {
        return this.originalResponse.contentLength;
      }
      /**
       * If the file has an MD5 hash and the
       * request is to read the full file, this response header is returned so that
       * the client can check for message content integrity. If the request is to
       * read a specified range and the 'x-ms-range-get-content-md5' is set to
       * true, then the request returns an MD5 hash for the range, as long as the
       * range size is less than or equal to 4 MB. If neither of these sets of
       * conditions is true, then no value is returned for the 'Content-MD5'
       * header.
       *
       * @readonly
       */
      get contentMD5() {
        return this.originalResponse.contentMD5;
      }
      /**
       * Indicates the range of bytes returned if
       * the client requested a subset of the file by setting the Range request
       * header.
       *
       * @readonly
       */
      get contentRange() {
        return this.originalResponse.contentRange;
      }
      /**
       * The content type specified for the file.
       * The default content type is 'application/octet-stream'
       *
       * @readonly
       */
      get contentType() {
        return this.originalResponse.contentType;
      }
      /**
       * Conclusion time of the last attempted
       * Copy File operation where this file was the destination file. This value
       * can specify the time of a completed, aborted, or failed copy attempt.
       *
       * @readonly
       */
      get copyCompletedOn() {
        return void 0;
      }
      /**
       * String identifier for the last attempted Copy
       * File operation where this file was the destination file.
       *
       * @readonly
       */
      get copyId() {
        return this.originalResponse.copyId;
      }
      /**
       * Contains the number of bytes copied and
       * the total bytes in the source in the last attempted Copy File operation
       * where this file was the destination file. Can show between 0 and
       * Content-Length bytes copied.
       *
       * @readonly
       */
      get copyProgress() {
        return this.originalResponse.copyProgress;
      }
      /**
       * URL up to 2KB in length that specifies the
       * source file used in the last attempted Copy File operation where this file
       * was the destination file.
       *
       * @readonly
       */
      get copySource() {
        return this.originalResponse.copySource;
      }
      /**
       * State of the copy operation
       * identified by 'x-ms-copy-id'. Possible values include: 'pending',
       * 'success', 'aborted', 'failed'
       *
       * @readonly
       */
      get copyStatus() {
        return this.originalResponse.copyStatus;
      }
      /**
       * Only appears when
       * x-ms-copy-status is failed or pending. Describes cause of fatal or
       * non-fatal copy operation failure.
       *
       * @readonly
       */
      get copyStatusDescription() {
        return this.originalResponse.copyStatusDescription;
      }
      /**
       * When a blob is leased,
       * specifies whether the lease is of infinite or fixed duration. Possible
       * values include: 'infinite', 'fixed'.
       *
       * @readonly
       */
      get leaseDuration() {
        return this.originalResponse.leaseDuration;
      }
      /**
       * Lease state of the blob. Possible
       * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.
       *
       * @readonly
       */
      get leaseState() {
        return this.originalResponse.leaseState;
      }
      /**
       * The current lease status of the
       * blob. Possible values include: 'locked', 'unlocked'.
       *
       * @readonly
       */
      get leaseStatus() {
        return this.originalResponse.leaseStatus;
      }
      /**
       * A UTC date/time value generated by the service that
       * indicates the time at which the response was initiated.
       *
       * @readonly
       */
      get date() {
        return this.originalResponse.date;
      }
      /**
       * The number of committed blocks
       * present in the blob. This header is returned only for append blobs.
       *
       * @readonly
       */
      get blobCommittedBlockCount() {
        return this.originalResponse.blobCommittedBlockCount;
      }
      /**
       * The ETag contains a value that you can use to
       * perform operations conditionally, in quotes.
       *
       * @readonly
       */
      get etag() {
        return this.originalResponse.etag;
      }
      /**
       * The error code.
       *
       * @readonly
       */
      get errorCode() {
        return this.originalResponse.errorCode;
      }
      /**
       * The value of this header is set to
       * true if the file data and application metadata are completely encrypted
       * using the specified algorithm. Otherwise, the value is set to false (when
       * the file is unencrypted, or if only parts of the file/application metadata
       * are encrypted).
       *
       * @readonly
       */
      get isServerEncrypted() {
        return this.originalResponse.isServerEncrypted;
      }
      /**
       * If the blob has a MD5 hash, and if
       * request contains range header (Range or x-ms-range), this response header
       * is returned with the value of the whole blob's MD5 value. This value may
       * or may not be equal to the value returned in Content-MD5 header, with the
       * latter calculated from the requested range.
       *
       * @readonly
       */
      get blobContentMD5() {
        return this.originalResponse.blobContentMD5;
      }
      /**
       * Returns the date and time the file was last
       * modified. Any operation that modifies the file or its properties updates
       * the last modified time.
       *
       * @readonly
       */
      get lastModified() {
        return this.originalResponse.lastModified;
      }
      /**
       * A name-value pair
       * to associate with a file storage object.
       *
       * @readonly
       */
      get metadata() {
        return this.originalResponse.metadata;
      }
      /**
       * This header uniquely identifies the request
       * that was made and can be used for troubleshooting the request.
       *
       * @readonly
       */
      get requestId() {
        return this.originalResponse.requestId;
      }
      /**
       * If a client request id header is sent in the request, this header will be present in the
       * response with the same value.
       *
       * @readonly
       */
      get clientRequestId() {
        return this.originalResponse.clientRequestId;
      }
      /**
       * Indicates the version of the File service used
       * to execute the request.
       *
       * @readonly
       */
      get version() {
        return this.originalResponse.version;
      }
      /**
       * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned
       * when the blob was encrypted with a customer-provided key.
       *
       * @readonly
       */
      get encryptionKeySha256() {
        return this.originalResponse.encryptionKeySha256;
      }
      /**
       * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to
       * true, then the request returns a crc64 for the range, as long as the range size is less than
       * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is
       * specified in the same request, it will fail with 400(Bad Request)
       */
      get contentCrc64() {
        return this.originalResponse.contentCrc64;
      }
      /**
       * The response body as a browser Blob.
       * Always undefined in node.js.
       *
       * @readonly
       */
      get blobBody() {
        return void 0;
      }
      /**
       * The response body as a node.js Readable stream.
       * Always undefined in the browser.
       *
       * It will parse avor data returned by blob query.
       *
       * @readonly
       */
      get readableStreamBody() {
        return isNode ? this.blobDownloadStream : void 0;
      }
      /**
       * The HTTP response.
       */
      get _response() {
        return this.originalResponse._response;
      }
      /**
       * Creates an instance of BlobQueryResponse.
       *
       * @param originalResponse -
       * @param options -
       */
      constructor(originalResponse2, options = {}) {
        this.originalResponse = originalResponse2;
        this.blobDownloadStream = new BlobQuickQueryStream(this.originalResponse.readableStreamBody, options);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js
function toAccessTier(tier2) {
  if (tier2 === void 0) {
    return void 0;
  }
  return tier2;
}
function ensureCpkIfSpecified(cpk, isHttps) {
  if (cpk && !isHttps) {
    throw new RangeError("Customer-provided encryption key must be used over HTTPS.");
  }
  if (cpk && !cpk.encryptionAlgorithm) {
    cpk.encryptionAlgorithm = EncryptionAlgorithmAES25;
  }
}
function getBlobServiceAccountAudience(storageAccountName) {
  return `https://${storageAccountName}.blob.core.windows.net/.default`;
}
var BlockBlobTier, PremiumPageBlobTier, StorageBlobAudience;
var init_models2 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js"() {
    "use strict";
    init_constants2();
    (function(BlockBlobTier2) {
      BlockBlobTier2["Hot"] = "Hot";
      BlockBlobTier2["Cool"] = "Cool";
      BlockBlobTier2["Cold"] = "Cold";
      BlockBlobTier2["Archive"] = "Archive";
    })(BlockBlobTier || (BlockBlobTier = {}));
    (function(PremiumPageBlobTier2) {
      PremiumPageBlobTier2["P4"] = "P4";
      PremiumPageBlobTier2["P6"] = "P6";
      PremiumPageBlobTier2["P10"] = "P10";
      PremiumPageBlobTier2["P15"] = "P15";
      PremiumPageBlobTier2["P20"] = "P20";
      PremiumPageBlobTier2["P30"] = "P30";
      PremiumPageBlobTier2["P40"] = "P40";
      PremiumPageBlobTier2["P50"] = "P50";
      PremiumPageBlobTier2["P60"] = "P60";
      PremiumPageBlobTier2["P70"] = "P70";
      PremiumPageBlobTier2["P80"] = "P80";
    })(PremiumPageBlobTier || (PremiumPageBlobTier = {}));
    __name(toAccessTier, "toAccessTier");
    __name(ensureCpkIfSpecified, "ensureCpkIfSpecified");
    (function(StorageBlobAudience2) {
      StorageBlobAudience2["StorageOAuthScopes"] = "https://storage.azure.com/.default";
      StorageBlobAudience2["DiskComputeOAuthScopes"] = "https://disk.compute.azure.com/.default";
    })(StorageBlobAudience || (StorageBlobAudience = {}));
    __name(getBlobServiceAccountAudience, "getBlobServiceAccountAudience");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js
function rangeResponseFromModel(response) {
  const pageRange = (response._response.parsedBody.pageRange || []).map((x3) => ({
    offset: x3.start,
    count: x3.end - x3.start
  }));
  const clearRange = (response._response.parsedBody.clearRange || []).map((x3) => ({
    offset: x3.start,
    count: x3.end - x3.start
  }));
  return Object.assign(Object.assign({}, response), {
    pageRange,
    clearRange,
    _response: Object.assign(Object.assign({}, response._response), { parsedBody: {
      pageRange,
      clearRange
    } })
  });
}
var init_PageBlobRangeResponse = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js"() {
    "use strict";
    __name(rangeResponseFromModel, "rangeResponseFromModel");
  }
});

// node_modules/@azure/core-lro/dist/esm/logger.js
var logger5;
var init_logger = __esm({
  "node_modules/@azure/core-lro/dist/esm/logger.js"() {
    "use strict";
    init_esm();
    logger5 = createClientLogger("core-lro");
  }
});

// node_modules/@azure/core-lro/dist/esm/poller/constants.js
var init_constants3 = __esm({
  "node_modules/@azure/core-lro/dist/esm/poller/constants.js"() {
    "use strict";
  }
});

// node_modules/@azure/core-lro/dist/esm/poller/operation.js
var init_operation = __esm({
  "node_modules/@azure/core-lro/dist/esm/poller/operation.js"() {
    "use strict";
    init_logger();
    init_constants3();
  }
});

// node_modules/@azure/core-lro/dist/esm/http/operation.js
var init_operation2 = __esm({
  "node_modules/@azure/core-lro/dist/esm/http/operation.js"() {
    "use strict";
    init_operation();
    init_logger();
  }
});

// node_modules/@azure/core-lro/dist/esm/poller/poller.js
var init_poller = __esm({
  "node_modules/@azure/core-lro/dist/esm/poller/poller.js"() {
    "use strict";
    init_operation();
    init_constants3();
    init_esm3();
  }
});

// node_modules/@azure/core-lro/dist/esm/http/poller.js
var init_poller2 = __esm({
  "node_modules/@azure/core-lro/dist/esm/http/poller.js"() {
    "use strict";
    init_operation2();
    init_poller();
  }
});

// node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js
var init_operation3 = __esm({
  "node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js"() {
    "use strict";
    init_operation2();
    init_logger();
  }
});

// node_modules/@azure/core-lro/dist/esm/legacy/poller.js
var PollerStoppedError, PollerCancelledError, Poller;
var init_poller3 = __esm({
  "node_modules/@azure/core-lro/dist/esm/legacy/poller.js"() {
    "use strict";
    PollerStoppedError = class _PollerStoppedError extends Error {
      static {
        __name(this, "PollerStoppedError");
      }
      constructor(message) {
        super(message);
        this.name = "PollerStoppedError";
        Object.setPrototypeOf(this, _PollerStoppedError.prototype);
      }
    };
    PollerCancelledError = class _PollerCancelledError extends Error {
      static {
        __name(this, "PollerCancelledError");
      }
      constructor(message) {
        super(message);
        this.name = "PollerCancelledError";
        Object.setPrototypeOf(this, _PollerCancelledError.prototype);
      }
    };
    Poller = class {
      static {
        __name(this, "Poller");
      }
      /**
       * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.
       *
       * When writing an implementation of a Poller, this implementation needs to deal with the initialization
       * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
       * operation has already been defined, at least its basic properties. The code below shows how to approach
       * the definition of the constructor of a new custom poller.
       *
       * ```ts
       * export class MyPoller extends Poller<MyOperationState, string> {
       *   constructor({
       *     // Anything you might need outside of the basics
       *   }) {
       *     let state: MyOperationState = {
       *       privateProperty: private,
       *       publicProperty: public,
       *     };
       *
       *     const operation = {
       *       state,
       *       update,
       *       cancel,
       *       toString
       *     }
       *
       *     // Sending the operation to the parent's constructor.
       *     super(operation);
       *
       *     // You can assign more local properties here.
       *   }
       * }
       * ```
       *
       * Inside of this constructor, a new promise is created. This will be used to
       * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
       * resolve and reject methods are also used internally to control when to resolve
       * or reject anyone waiting for the poller to finish.
       *
       * The constructor of a custom implementation of a poller is where any serialized version of
       * a previous poller's operation should be deserialized into the operation sent to the
       * base constructor. For example:
       *
       * ```ts
       * export class MyPoller extends Poller<MyOperationState, string> {
       *   constructor(
       *     baseOperation: string | undefined
       *   ) {
       *     let state: MyOperationState = {};
       *     if (baseOperation) {
       *       state = {
       *         ...JSON.parse(baseOperation).state,
       *         ...state
       *       };
       *     }
       *     const operation = {
       *       state,
       *       // ...
       *     }
       *     super(operation);
       *   }
       * }
       * ```
       *
       * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.
       */
      constructor(operation) {
        this.resolveOnUnsuccessful = false;
        this.stopped = true;
        this.pollProgressCallbacks = [];
        this.operation = operation;
        this.promise = new Promise((resolve2, reject) => {
          this.resolve = resolve2;
          this.reject = reject;
        });
        this.promise.catch(() => {
        });
      }
      /**
       * Starts a loop that will break only if the poller is done
       * or if the poller is stopped.
       */
      async startPolling(pollOptions = {}) {
        if (this.stopped) {
          this.stopped = false;
        }
        while (!this.isStopped() && !this.isDone()) {
          await this.poll(pollOptions);
          await this.delay();
        }
      }
      /**
       * pollOnce does one polling, by calling to the update method of the underlying
       * poll operation to make any relevant change effective.
       *
       * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
       *
       * @param options - Optional properties passed to the operation's update method.
       */
      async pollOnce(options = {}) {
        if (!this.isDone()) {
          this.operation = await this.operation.update({
            abortSignal: options.abortSignal,
            fireProgress: this.fireProgress.bind(this)
          });
        }
        this.processUpdatedState();
      }
      /**
       * fireProgress calls the functions passed in via onProgress the method of the poller.
       *
       * It loops over all of the callbacks received from onProgress, and executes them, sending them
       * the current operation state.
       *
       * @param state - The current operation state.
       */
      fireProgress(state3) {
        for (const callback of this.pollProgressCallbacks) {
          callback(state3);
        }
      }
      /**
       * Invokes the underlying operation's cancel method.
       */
      async cancelOnce(options = {}) {
        this.operation = await this.operation.cancel(options);
      }
      /**
       * Returns a promise that will resolve once a single polling request finishes.
       * It does this by calling the update method of the Poller's operation.
       *
       * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
       *
       * @param options - Optional properties passed to the operation's update method.
       */
      poll(options = {}) {
        if (!this.pollOncePromise) {
          this.pollOncePromise = this.pollOnce(options);
          const clearPollOncePromise = /* @__PURE__ */ __name(() => {
            this.pollOncePromise = void 0;
          }, "clearPollOncePromise");
          this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
        }
        return this.pollOncePromise;
      }
      processUpdatedState() {
        if (this.operation.state.error) {
          this.stopped = true;
          if (!this.resolveOnUnsuccessful) {
            this.reject(this.operation.state.error);
            throw this.operation.state.error;
          }
        }
        if (this.operation.state.isCancelled) {
          this.stopped = true;
          if (!this.resolveOnUnsuccessful) {
            const error = new PollerCancelledError("Operation was canceled");
            this.reject(error);
            throw error;
          }
        }
        if (this.isDone() && this.resolve) {
          this.resolve(this.getResult());
        }
      }
      /**
       * Returns a promise that will resolve once the underlying operation is completed.
       */
      async pollUntilDone(pollOptions = {}) {
        if (this.stopped) {
          this.startPolling(pollOptions).catch(this.reject);
        }
        this.processUpdatedState();
        return this.promise;
      }
      /**
       * Invokes the provided callback after each polling is completed,
       * sending the current state of the poller's operation.
       *
       * It returns a method that can be used to stop receiving updates on the given callback function.
       */
      onProgress(callback) {
        this.pollProgressCallbacks.push(callback);
        return () => {
          this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c3) => c3 !== callback);
        };
      }
      /**
       * Returns true if the poller has finished polling.
       */
      isDone() {
        const state3 = this.operation.state;
        return Boolean(state3.isCompleted || state3.isCancelled || state3.error);
      }
      /**
       * Stops the poller from continuing to poll.
       */
      stopPolling() {
        if (!this.stopped) {
          this.stopped = true;
          if (this.reject) {
            this.reject(new PollerStoppedError("This poller is already stopped"));
          }
        }
      }
      /**
       * Returns true if the poller is stopped.
       */
      isStopped() {
        return this.stopped;
      }
      /**
       * Attempts to cancel the underlying operation.
       *
       * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
       *
       * If it's called again before it finishes, it will throw an error.
       *
       * @param options - Optional properties passed to the operation's update method.
       */
      cancelOperation(options = {}) {
        if (!this.cancelPromise) {
          this.cancelPromise = this.cancelOnce(options);
        } else if (options.abortSignal) {
          throw new Error("A cancel request is currently pending");
        }
        return this.cancelPromise;
      }
      /**
       * Returns the state of the operation.
       *
       * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
       * implementations of the pollers can customize what's shared with the public by writing their own
       * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
       * and a public type representing a safe to share subset of the properties of the internal state.
       * Their definition of getOperationState can then return their public type.
       *
       * Example:
       *
       * ```ts
       * // Let's say we have our poller's operation state defined as:
       * interface MyOperationState extends PollOperationState<ResultType> {
       *   privateProperty?: string;
       *   publicProperty?: string;
       * }
       *
       * // To allow us to have a true separation of public and private state, we have to define another interface:
       * interface PublicState extends PollOperationState<ResultType> {
       *   publicProperty?: string;
       * }
       *
       * // Then, we define our Poller as follows:
       * export class MyPoller extends Poller<MyOperationState, ResultType> {
       *   // ... More content is needed here ...
       *
       *   public getOperationState(): PublicState {
       *     const state: PublicState = this.operation.state;
       *     return {
       *       // Properties from PollOperationState<TResult>
       *       isStarted: state.isStarted,
       *       isCompleted: state.isCompleted,
       *       isCancelled: state.isCancelled,
       *       error: state.error,
       *       result: state.result,
       *
       *       // The only other property needed by PublicState.
       *       publicProperty: state.publicProperty
       *     }
       *   }
       * }
       * ```
       *
       * You can see this in the tests of this repository, go to the file:
       * `../test/utils/testPoller.ts`
       * and look for the getOperationState implementation.
       */
      getOperationState() {
        return this.operation.state;
      }
      /**
       * Returns the result value of the operation,
       * regardless of the state of the poller.
       * It can return undefined or an incomplete form of the final TResult value
       * depending on the implementation.
       */
      getResult() {
        const state3 = this.operation.state;
        return state3.result;
      }
      /**
       * Returns a serialized version of the poller's operation
       * by invoking the operation's toString method.
       */
      toString() {
        return this.operation.toString();
      }
    };
  }
});

// node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js
var init_lroEngine = __esm({
  "node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js"() {
    "use strict";
    init_operation3();
    init_constants3();
    init_poller3();
    init_operation();
  }
});

// node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js
var init_lroEngine2 = __esm({
  "node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js"() {
    "use strict";
    init_lroEngine();
  }
});

// node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js
var init_pollOperation = __esm({
  "node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js"() {
    "use strict";
  }
});

// node_modules/@azure/core-lro/dist/esm/index.js
var init_esm12 = __esm({
  "node_modules/@azure/core-lro/dist/esm/index.js"() {
    "use strict";
    init_poller2();
    init_lroEngine2();
    init_poller3();
    init_pollOperation();
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js
function makeBlobBeginCopyFromURLPollOperation(state3) {
  return {
    state: Object.assign({}, state3),
    cancel,
    toString: toString2,
    update: update2
  };
}
var BlobBeginCopyFromUrlPoller, cancel, update2, toString2;
var init_BlobStartCopyFromUrlPoller = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js"() {
    "use strict";
    init_esm3();
    init_esm12();
    BlobBeginCopyFromUrlPoller = class extends Poller {
      static {
        __name(this, "BlobBeginCopyFromUrlPoller");
      }
      constructor(options) {
        const { blobClient, copySource: copySource2, intervalInMs = 15e3, onProgress, resumeFrom, startCopyFromURLOptions } = options;
        let state3;
        if (resumeFrom) {
          state3 = JSON.parse(resumeFrom).state;
        }
        const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state3), {
          blobClient,
          copySource: copySource2,
          startCopyFromURLOptions
        }));
        super(operation);
        if (typeof onProgress === "function") {
          this.onProgress(onProgress);
        }
        this.intervalInMs = intervalInMs;
      }
      delay() {
        return delay(this.intervalInMs);
      }
    };
    cancel = /* @__PURE__ */ __name(async function cancel2(options = {}) {
      const state3 = this.state;
      const { copyId: copyId2 } = state3;
      if (state3.isCompleted) {
        return makeBlobBeginCopyFromURLPollOperation(state3);
      }
      if (!copyId2) {
        state3.isCancelled = true;
        return makeBlobBeginCopyFromURLPollOperation(state3);
      }
      await state3.blobClient.abortCopyFromURL(copyId2, {
        abortSignal: options.abortSignal
      });
      state3.isCancelled = true;
      return makeBlobBeginCopyFromURLPollOperation(state3);
    }, "cancel");
    update2 = /* @__PURE__ */ __name(async function update3(options = {}) {
      const state3 = this.state;
      const { blobClient, copySource: copySource2, startCopyFromURLOptions } = state3;
      if (!state3.isStarted) {
        state3.isStarted = true;
        const result = await blobClient.startCopyFromURL(copySource2, startCopyFromURLOptions);
        state3.copyId = result.copyId;
        if (result.copyStatus === "success") {
          state3.result = result;
          state3.isCompleted = true;
        }
      } else if (!state3.isCompleted) {
        try {
          const result = await state3.blobClient.getProperties({ abortSignal: options.abortSignal });
          const { copyStatus, copyProgress } = result;
          const prevCopyProgress = state3.copyProgress;
          if (copyProgress) {
            state3.copyProgress = copyProgress;
          }
          if (copyStatus === "pending" && copyProgress !== prevCopyProgress && typeof options.fireProgress === "function") {
            options.fireProgress(state3);
          } else if (copyStatus === "success") {
            state3.result = result;
            state3.isCompleted = true;
          } else if (copyStatus === "failed") {
            state3.error = new Error(`Blob copy failed with reason: "${result.copyStatusDescription || "unknown"}"`);
            state3.isCompleted = true;
          }
        } catch (err) {
          state3.error = err;
          state3.isCompleted = true;
        }
      }
      return makeBlobBeginCopyFromURLPollOperation(state3);
    }, "update");
    toString2 = /* @__PURE__ */ __name(function toString3() {
      return JSON.stringify({ state: this.state }, (key, value) => {
        if (key === "blobClient") {
          return void 0;
        }
        return value;
      });
    }, "toString");
    __name(makeBlobBeginCopyFromURLPollOperation, "makeBlobBeginCopyFromURLPollOperation");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js
function rangeToString(iRange) {
  if (iRange.offset < 0) {
    throw new RangeError(`Range.offset cannot be smaller than 0.`);
  }
  if (iRange.count && iRange.count <= 0) {
    throw new RangeError(`Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`);
  }
  return iRange.count ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}` : `bytes=${iRange.offset}-`;
}
var init_Range = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js"() {
    "use strict";
    __name(rangeToString, "rangeToString");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js
import { EventEmitter } from "events";
var BatchStates, Batch;
var init_Batch = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js"() {
    "use strict";
    (function(BatchStates2) {
      BatchStates2[BatchStates2["Good"] = 0] = "Good";
      BatchStates2[BatchStates2["Error"] = 1] = "Error";
    })(BatchStates || (BatchStates = {}));
    Batch = class {
      static {
        __name(this, "Batch");
      }
      /**
       * Creates an instance of Batch.
       * @param concurrency -
       */
      constructor(concurrency = 5) {
        this.actives = 0;
        this.completed = 0;
        this.offset = 0;
        this.operations = [];
        this.state = BatchStates.Good;
        if (concurrency < 1) {
          throw new RangeError("concurrency must be larger than 0");
        }
        this.concurrency = concurrency;
        this.emitter = new EventEmitter();
      }
      /**
       * Add a operation into queue.
       *
       * @param operation -
       */
      addOperation(operation) {
        this.operations.push(async () => {
          try {
            this.actives++;
            await operation();
            this.actives--;
            this.completed++;
            this.parallelExecute();
          } catch (error) {
            this.emitter.emit("error", error);
          }
        });
      }
      /**
       * Start execute operations in the queue.
       *
       */
      async do() {
        if (this.operations.length === 0) {
          return Promise.resolve();
        }
        this.parallelExecute();
        return new Promise((resolve2, reject) => {
          this.emitter.on("finish", resolve2);
          this.emitter.on("error", (error) => {
            this.state = BatchStates.Error;
            reject(error);
          });
        });
      }
      /**
       * Get next operation to be executed. Return null when reaching ends.
       *
       */
      nextOperation() {
        if (this.offset < this.operations.length) {
          return this.operations[this.offset++];
        }
        return null;
      }
      /**
       * Start execute operations. One one the most important difference between
       * this method with do() is that do() wraps as an sync method.
       *
       */
      parallelExecute() {
        if (this.state === BatchStates.Error) {
          return;
        }
        if (this.completed >= this.operations.length) {
          this.emitter.emit("finish");
          return;
        }
        while (this.actives < this.concurrency) {
          const operation = this.nextOperation();
          if (operation) {
            operation();
          } else {
            return;
          }
        }
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js
import { Readable as Readable4 } from "stream";
var BuffersStream;
var init_BuffersStream = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js"() {
    "use strict";
    BuffersStream = class extends Readable4 {
      static {
        __name(this, "BuffersStream");
      }
      /**
       * Creates an instance of BuffersStream that will emit the data
       * contained in the array of buffers.
       *
       * @param buffers - Array of buffers containing the data
       * @param byteLength - The total length of data contained in the buffers
       */
      constructor(buffers, byteLength, options) {
        super(options);
        this.buffers = buffers;
        this.byteLength = byteLength;
        this.byteOffsetInCurrentBuffer = 0;
        this.bufferIndex = 0;
        this.pushedBytesLength = 0;
        let buffersLength = 0;
        for (const buf of this.buffers) {
          buffersLength += buf.byteLength;
        }
        if (buffersLength < this.byteLength) {
          throw new Error("Data size shouldn't be larger than the total length of buffers.");
        }
      }
      /**
       * Internal _read() that will be called when the stream wants to pull more data in.
       *
       * @param size - Optional. The size of data to be read
       */
      _read(size) {
        if (this.pushedBytesLength >= this.byteLength) {
          this.push(null);
        }
        if (!size) {
          size = this.readableHighWaterMark;
        }
        const outBuffers = [];
        let i3 = 0;
        while (i3 < size && this.pushedBytesLength < this.byteLength) {
          const remainingDataInAllBuffers = this.byteLength - this.pushedBytesLength;
          const remainingCapacityInThisBuffer = this.buffers[this.bufferIndex].byteLength - this.byteOffsetInCurrentBuffer;
          const remaining = Math.min(remainingCapacityInThisBuffer, remainingDataInAllBuffers);
          if (remaining > size - i3) {
            const end = this.byteOffsetInCurrentBuffer + size - i3;
            outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));
            this.pushedBytesLength += size - i3;
            this.byteOffsetInCurrentBuffer = end;
            i3 = size;
            break;
          } else {
            const end = this.byteOffsetInCurrentBuffer + remaining;
            outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));
            if (remaining === remainingCapacityInThisBuffer) {
              this.byteOffsetInCurrentBuffer = 0;
              this.bufferIndex++;
            } else {
              this.byteOffsetInCurrentBuffer = end;
            }
            this.pushedBytesLength += remaining;
            i3 += remaining;
          }
        }
        if (outBuffers.length > 1) {
          this.push(Buffer.concat(outBuffers));
        } else if (outBuffers.length === 1) {
          this.push(outBuffers[0]);
        }
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js
import buffer from "buffer";
var maxBufferLength, PooledBuffer;
var init_PooledBuffer = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js"() {
    "use strict";
    init_BuffersStream();
    maxBufferLength = buffer.constants.MAX_LENGTH;
    PooledBuffer = class {
      static {
        __name(this, "PooledBuffer");
      }
      /**
       * The size of the data contained in the pooled buffers.
       */
      get size() {
        return this._size;
      }
      constructor(capacity, buffers, totalLength) {
        this.buffers = [];
        this.capacity = capacity;
        this._size = 0;
        const bufferNum = Math.ceil(capacity / maxBufferLength);
        for (let i3 = 0; i3 < bufferNum; i3++) {
          let len = i3 === bufferNum - 1 ? capacity % maxBufferLength : maxBufferLength;
          if (len === 0) {
            len = maxBufferLength;
          }
          this.buffers.push(Buffer.allocUnsafe(len));
        }
        if (buffers) {
          this.fill(buffers, totalLength);
        }
      }
      /**
       * Fill the internal buffers with data in the input buffers serially
       * with respect to the total length and the total capacity of the internal buffers.
       * Data copied will be shift out of the input buffers.
       *
       * @param buffers - Input buffers containing the data to be filled in the pooled buffer
       * @param totalLength - Total length of the data to be filled in.
       *
       */
      fill(buffers, totalLength) {
        this._size = Math.min(this.capacity, totalLength);
        let i3 = 0, j3 = 0, targetOffset = 0, sourceOffset = 0, totalCopiedNum = 0;
        while (totalCopiedNum < this._size) {
          const source = buffers[i3];
          const target = this.buffers[j3];
          const copiedNum = source.copy(target, targetOffset, sourceOffset);
          totalCopiedNum += copiedNum;
          sourceOffset += copiedNum;
          targetOffset += copiedNum;
          if (sourceOffset === source.length) {
            i3++;
            sourceOffset = 0;
          }
          if (targetOffset === target.length) {
            j3++;
            targetOffset = 0;
          }
        }
        buffers.splice(0, i3);
        if (buffers.length > 0) {
          buffers[0] = buffers[0].slice(sourceOffset);
        }
      }
      /**
       * Get the readable stream assembled from all the data in the internal buffers.
       *
       */
      getReadableStream() {
        return new BuffersStream(this.buffers, this.size);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js
import { EventEmitter as EventEmitter2 } from "events";
var BufferScheduler;
var init_BufferScheduler = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js"() {
    "use strict";
    init_PooledBuffer();
    BufferScheduler = class {
      static {
        __name(this, "BufferScheduler");
      }
      /**
       * Creates an instance of BufferScheduler.
       *
       * @param readable - A Node.js Readable stream
       * @param bufferSize - Buffer size of every maintained buffer
       * @param maxBuffers - How many buffers can be allocated
       * @param outgoingHandler - An async function scheduled to be
       *                                          triggered when a buffer fully filled
       *                                          with stream data
       * @param concurrency - Concurrency of executing outgoingHandlers (>0)
       * @param encoding - [Optional] Encoding of Readable stream when it's a string stream
       */
      constructor(readable, bufferSize, maxBuffers, outgoingHandler, concurrency, encoding) {
        this.emitter = new EventEmitter2();
        this.offset = 0;
        this.isStreamEnd = false;
        this.isError = false;
        this.executingOutgoingHandlers = 0;
        this.numBuffers = 0;
        this.unresolvedDataArray = [];
        this.unresolvedLength = 0;
        this.incoming = [];
        this.outgoing = [];
        if (bufferSize <= 0) {
          throw new RangeError(`bufferSize must be larger than 0, current is ${bufferSize}`);
        }
        if (maxBuffers <= 0) {
          throw new RangeError(`maxBuffers must be larger than 0, current is ${maxBuffers}`);
        }
        if (concurrency <= 0) {
          throw new RangeError(`concurrency must be larger than 0, current is ${concurrency}`);
        }
        this.bufferSize = bufferSize;
        this.maxBuffers = maxBuffers;
        this.readable = readable;
        this.outgoingHandler = outgoingHandler;
        this.concurrency = concurrency;
        this.encoding = encoding;
      }
      /**
       * Start the scheduler, will return error when stream of any of the outgoingHandlers
       * returns error.
       *
       */
      async do() {
        return new Promise((resolve2, reject) => {
          this.readable.on("data", (data) => {
            data = typeof data === "string" ? Buffer.from(data, this.encoding) : data;
            this.appendUnresolvedData(data);
            if (!this.resolveData()) {
              this.readable.pause();
            }
          });
          this.readable.on("error", (err) => {
            this.emitter.emit("error", err);
          });
          this.readable.on("end", () => {
            this.isStreamEnd = true;
            this.emitter.emit("checkEnd");
          });
          this.emitter.on("error", (err) => {
            this.isError = true;
            this.readable.pause();
            reject(err);
          });
          this.emitter.on("checkEnd", () => {
            if (this.outgoing.length > 0) {
              this.triggerOutgoingHandlers();
              return;
            }
            if (this.isStreamEnd && this.executingOutgoingHandlers === 0) {
              if (this.unresolvedLength > 0 && this.unresolvedLength < this.bufferSize) {
                const buffer2 = this.shiftBufferFromUnresolvedDataArray();
                this.outgoingHandler(() => buffer2.getReadableStream(), buffer2.size, this.offset).then(resolve2).catch(reject);
              } else if (this.unresolvedLength >= this.bufferSize) {
                return;
              } else {
                resolve2();
              }
            }
          });
        });
      }
      /**
       * Insert a new data into unresolved array.
       *
       * @param data -
       */
      appendUnresolvedData(data) {
        this.unresolvedDataArray.push(data);
        this.unresolvedLength += data.length;
      }
      /**
       * Try to shift a buffer with size in blockSize. The buffer returned may be less
       * than blockSize when data in unresolvedDataArray is less than bufferSize.
       *
       */
      shiftBufferFromUnresolvedDataArray(buffer2) {
        if (!buffer2) {
          buffer2 = new PooledBuffer(this.bufferSize, this.unresolvedDataArray, this.unresolvedLength);
        } else {
          buffer2.fill(this.unresolvedDataArray, this.unresolvedLength);
        }
        this.unresolvedLength -= buffer2.size;
        return buffer2;
      }
      /**
       * Resolve data in unresolvedDataArray. For every buffer with size in blockSize
       * shifted, it will try to get (or allocate a buffer) from incoming, and fill it,
       * then push it into outgoing to be handled by outgoing handler.
       *
       * Return false when available buffers in incoming are not enough, else true.
       *
       * @returns Return false when buffers in incoming are not enough, else true.
       */
      resolveData() {
        while (this.unresolvedLength >= this.bufferSize) {
          let buffer2;
          if (this.incoming.length > 0) {
            buffer2 = this.incoming.shift();
            this.shiftBufferFromUnresolvedDataArray(buffer2);
          } else {
            if (this.numBuffers < this.maxBuffers) {
              buffer2 = this.shiftBufferFromUnresolvedDataArray();
              this.numBuffers++;
            } else {
              return false;
            }
          }
          this.outgoing.push(buffer2);
          this.triggerOutgoingHandlers();
        }
        return true;
      }
      /**
       * Try to trigger a outgoing handler for every buffer in outgoing. Stop when
       * concurrency reaches.
       */
      async triggerOutgoingHandlers() {
        let buffer2;
        do {
          if (this.executingOutgoingHandlers >= this.concurrency) {
            return;
          }
          buffer2 = this.outgoing.shift();
          if (buffer2) {
            this.triggerOutgoingHandler(buffer2);
          }
        } while (buffer2);
      }
      /**
       * Trigger a outgoing handler for a buffer shifted from outgoing.
       *
       * @param buffer -
       */
      async triggerOutgoingHandler(buffer2) {
        const bufferLength = buffer2.size;
        this.executingOutgoingHandlers++;
        this.offset += bufferLength;
        try {
          await this.outgoingHandler(() => buffer2.getReadableStream(), bufferLength, this.offset - bufferLength);
        } catch (err) {
          this.emitter.emit("error", err);
          return;
        }
        this.executingOutgoingHandlers--;
        this.reuseBuffer(buffer2);
        this.emitter.emit("checkEnd");
      }
      /**
       * Return buffer used by outgoing handler into incoming.
       *
       * @param buffer -
       */
      reuseBuffer(buffer2) {
        this.incoming.push(buffer2);
        if (!this.isError && this.resolveData() && !this.isStreamEnd) {
          this.readable.resume();
        }
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-common/src/index.js
var init_src3 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-common/src/index.js"() {
    "use strict";
    init_BufferScheduler();
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js
import * as fs3 from "fs";
import * as util2 from "util";
async function streamToBuffer(stream, buffer2, offset, end, encoding) {
  let pos = 0;
  const count = end - offset;
  return new Promise((resolve2, reject) => {
    const timeout = setTimeout(() => reject(new Error(`The operation cannot be completed in timeout.`)), REQUEST_TIMEOUT);
    stream.on("readable", () => {
      if (pos >= count) {
        clearTimeout(timeout);
        resolve2();
        return;
      }
      let chunk = stream.read();
      if (!chunk) {
        return;
      }
      if (typeof chunk === "string") {
        chunk = Buffer.from(chunk, encoding);
      }
      const chunkLength = pos + chunk.length > count ? count - pos : chunk.length;
      buffer2.fill(chunk.slice(0, chunkLength), offset + pos, offset + pos + chunkLength);
      pos += chunkLength;
    });
    stream.on("end", () => {
      clearTimeout(timeout);
      if (pos < count) {
        reject(new Error(`Stream drains before getting enough data needed. Data read: ${pos}, data need: ${count}`));
      }
      resolve2();
    });
    stream.on("error", (msg) => {
      clearTimeout(timeout);
      reject(msg);
    });
  });
}
async function streamToBuffer2(stream, buffer2, encoding) {
  let pos = 0;
  const bufferSize = buffer2.length;
  return new Promise((resolve2, reject) => {
    stream.on("readable", () => {
      let chunk = stream.read();
      if (!chunk) {
        return;
      }
      if (typeof chunk === "string") {
        chunk = Buffer.from(chunk, encoding);
      }
      if (pos + chunk.length > bufferSize) {
        reject(new Error(`Stream exceeds buffer size. Buffer size: ${bufferSize}`));
        return;
      }
      buffer2.fill(chunk, pos, pos + chunk.length);
      pos += chunk.length;
    });
    stream.on("end", () => {
      resolve2(pos);
    });
    stream.on("error", reject);
  });
}
async function readStreamToLocalFile(rs2, file) {
  return new Promise((resolve2, reject) => {
    const ws = fs3.createWriteStream(file);
    rs2.on("error", (err) => {
      reject(err);
    });
    ws.on("error", (err) => {
      reject(err);
    });
    ws.on("close", resolve2);
    rs2.pipe(ws);
  });
}
var fsStat, fsCreateReadStream;
var init_utils_node = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js"() {
    "use strict";
    init_constants2();
    __name(streamToBuffer, "streamToBuffer");
    __name(streamToBuffer2, "streamToBuffer2");
    __name(readStreamToLocalFile, "readStreamToLocalFile");
    fsStat = util2.promisify(fs3.stat);
    fsCreateReadStream = fs3.createReadStream;
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js
var BlobClient, AppendBlobClient, BlockBlobClient, PageBlobClient;
var init_Clients = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js"() {
    "use strict";
    init_tslib_es6();
    init_esm6();
    init_esm7();
    init_esm3();
    init_esm3();
    init_BlobDownloadResponse();
    init_BlobQueryResponse();
    init_AnonymousCredential();
    init_StorageSharedKeyCredential();
    init_models2();
    init_PageBlobRangeResponse();
    init_Pipeline();
    init_BlobStartCopyFromUrlPoller();
    init_Range();
    init_StorageClient();
    init_Batch();
    init_src3();
    init_constants2();
    init_tracing();
    init_utils_common();
    init_utils_node();
    init_BlobSASSignatureValues();
    init_BlobLeaseClient();
    BlobClient = class _BlobClient extends StorageClient2 {
      static {
        __name(this, "BlobClient");
      }
      /**
       * The name of the blob.
       */
      get name() {
        return this._name;
      }
      /**
       * The name of the storage container the blob is associated with.
       */
      get containerName() {
        return this._containerName;
      }
      constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
        options = options || {};
        let pipeline;
        let url2;
        if (isPipelineLike(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          options = blobNameOrOptions;
          pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          url2 = urlOrConnectionString;
          if (blobNameOrOptions && typeof blobNameOrOptions !== "string") {
            options = blobNameOrOptions;
          }
          pipeline = newPipeline(new AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
          const containerName = credentialOrPipelineOrContainerName;
          const blobName = blobNameOrOptions;
          const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
          if (extractedCreds.kind === "AccountConnString") {
            if (isNode) {
              const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
              if (!options.proxyOptions) {
                options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
              }
              pipeline = newPipeline(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
            pipeline = newPipeline(new AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }
        super(url2, pipeline);
        ({ blobName: this._name, containerName: this._containerName } = this.getBlobAndContainerNamesFromUrl());
        this.blobContext = this.storageClientContext.blob;
        this._snapshot = getURLParameter(this.url, URLConstants.Parameters.SNAPSHOT);
        this._versionId = getURLParameter(this.url, URLConstants.Parameters.VERSIONID);
      }
      /**
       * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.
       * Provide "" will remove the snapshot and return a Client to the base blob.
       *
       * @param snapshot - The snapshot timestamp.
       * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp
       */
      withSnapshot(snapshot2) {
        return new _BlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
      }
      /**
       * Creates a new BlobClient object pointing to a version of this blob.
       * Provide "" will remove the versionId and return a Client to the base blob.
       *
       * @param versionId - The versionId.
       * @returns A new BlobClient object pointing to the version of this blob.
       */
      withVersion(versionId2) {
        return new _BlobClient(setURLParameter(this.url, URLConstants.Parameters.VERSIONID, versionId2.length === 0 ? void 0 : versionId2), this.pipeline);
      }
      /**
       * Creates a AppendBlobClient object.
       *
       */
      getAppendBlobClient() {
        return new AppendBlobClient(this.url, this.pipeline);
      }
      /**
       * Creates a BlockBlobClient object.
       *
       */
      getBlockBlobClient() {
        return new BlockBlobClient(this.url, this.pipeline);
      }
      /**
       * Creates a PageBlobClient object.
       *
       */
      getPageBlobClient() {
        return new PageBlobClient(this.url, this.pipeline);
      }
      /**
       * Reads or downloads a blob from the system, including its metadata and properties.
       * You can also call Get Blob to read a snapshot.
       *
       * * In Node.js, data returns in a Readable stream readableStreamBody
       * * In browsers, data returns in a promise blobBody
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob
       *
       * @param offset - From which position of the blob to download, greater than or equal to 0
       * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
       * @param options - Optional options to Blob Download operation.
       *
       *
       * Example usage (Node.js):
       *
       * ```js
       * // Download and convert a blob to a string
       * const downloadBlockBlobResponse = await blobClient.download();
       * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);
       * console.log("Downloaded blob content:", downloaded.toString());
       *
       * async function streamToBuffer(readableStream) {
       * return new Promise((resolve, reject) => {
       * const chunks = [];
       * readableStream.on("data", (data) => {
       * chunks.push(data instanceof Buffer ? data : Buffer.from(data));
       * });
       * readableStream.on("end", () => {
       * resolve(Buffer.concat(chunks));
       * });
       * readableStream.on("error", reject);
       * });
       * }
       * ```
       *
       * Example usage (browser):
       *
       * ```js
       * // Download and convert a blob to a string
       * const downloadBlockBlobResponse = await blobClient.download();
       * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);
       * console.log(
       *   "Downloaded blob content",
       *   downloaded
       * );
       *
       * async function blobToString(blob: Blob): Promise<string> {
       *   const fileReader = new FileReader();
       *   return new Promise<string>((resolve, reject) => {
       *     fileReader.onloadend = (ev: any) => {
       *       resolve(ev.target!.result);
       *     };
       *     fileReader.onerror = reject;
       *     fileReader.readAsText(blob);
       *   });
       * }
       * ```
       */
      async download(offset = 0, count, options = {}) {
        options.conditions = options.conditions || {};
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlobClient-download", options, async (updatedOptions) => {
          var _a4;
          const res = assertResponse(await this.blobContext.download({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            requestOptions: {
              onDownloadProgress: isNode ? void 0 : options.onProgress
              // for Node.js, progress is reported by RetriableReadableStream
            },
            range: offset === 0 && !count ? void 0 : rangeToString({ offset, count }),
            rangeGetContentMD5: options.rangeGetContentMD5,
            rangeGetContentCRC64: options.rangeGetContentCrc64,
            snapshot: options.snapshot,
            cpkInfo: options.customerProvidedKey,
            tracingOptions: updatedOptions.tracingOptions
          }));
          const wrappedRes = Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });
          if (!isNode) {
            return wrappedRes;
          }
          if (options.maxRetryRequests === void 0 || options.maxRetryRequests < 0) {
            options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;
          }
          if (res.contentLength === void 0) {
            throw new RangeError(`File download response doesn't contain valid content length header`);
          }
          if (!res.etag) {
            throw new RangeError(`File download response doesn't contain valid etag header`);
          }
          return new BlobDownloadResponse(wrappedRes, async (start) => {
            var _a5;
            const updatedDownloadOptions = {
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: {
                ifMatch: options.conditions.ifMatch || res.etag,
                ifModifiedSince: options.conditions.ifModifiedSince,
                ifNoneMatch: options.conditions.ifNoneMatch,
                ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,
                ifTags: (_a5 = options.conditions) === null || _a5 === void 0 ? void 0 : _a5.tagConditions
              },
              range: rangeToString({
                count: offset + res.contentLength - start,
                offset: start
              }),
              rangeGetContentMD5: options.rangeGetContentMD5,
              rangeGetContentCRC64: options.rangeGetContentCrc64,
              snapshot: options.snapshot,
              cpkInfo: options.customerProvidedKey
            };
            return (await this.blobContext.download(Object.assign({ abortSignal: options.abortSignal }, updatedDownloadOptions))).readableStreamBody;
          }, offset, res.contentLength, {
            maxRetryRequests: options.maxRetryRequests,
            onProgress: options.onProgress
          });
        });
      }
      /**
       * Returns true if the Azure blob resource represented by this client exists; false otherwise.
       *
       * NOTE: use this function with care since an existing blob might be deleted by other clients or
       * applications. Vice versa new blobs might be added by other clients or applications after this
       * function completes.
       *
       * @param options - options to Exists operation.
       */
      async exists(options = {}) {
        return tracingClient.withSpan("BlobClient-exists", options, async (updatedOptions) => {
          try {
            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            await this.getProperties({
              abortSignal: options.abortSignal,
              customerProvidedKey: options.customerProvidedKey,
              conditions: options.conditions,
              tracingOptions: updatedOptions.tracingOptions
            });
            return true;
          } catch (e3) {
            if (e3.statusCode === 404) {
              return false;
            } else if (e3.statusCode === 409 && (e3.details.errorCode === BlobUsesCustomerSpecifiedEncryptionMsg || e3.details.errorCode === BlobDoesNotUseCustomerSpecifiedEncryption)) {
              return true;
            }
            throw e3;
          }
        });
      }
      /**
       * Returns all user-defined metadata, standard HTTP properties, and system properties
       * for the blob. It does not return the content of the blob.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
       *
       * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
       * they originally contained uppercase characters. This differs from the metadata keys returned by
       * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which
       * will retain their original casing.
       *
       * @param options - Optional options to Get Properties operation.
       */
      async getProperties(options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlobClient-getProperties", options, async (updatedOptions) => {
          var _a4;
          const res = assertResponse(await this.blobContext.getProperties({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            cpkInfo: options.customerProvidedKey,
            tracingOptions: updatedOptions.tracingOptions
          }));
          return Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });
        });
      }
      /**
       * Marks the specified blob or snapshot for deletion. The blob is later deleted
       * during garbage collection. Note that in order to delete a blob, you must delete
       * all of its snapshots. You can delete both at the same time with the Delete
       * Blob operation.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
       *
       * @param options - Optional options to Blob Delete operation.
       */
      async delete(options = {}) {
        options.conditions = options.conditions || {};
        return tracingClient.withSpan("BlobClient-delete", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.blobContext.delete({
            abortSignal: options.abortSignal,
            deleteSnapshots: options.deleteSnapshots,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted
       * during garbage collection. Note that in order to delete a blob, you must delete
       * all of its snapshots. You can delete both at the same time with the Delete
       * Blob operation.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
       *
       * @param options - Optional options to Blob Delete operation.
       */
      async deleteIfExists(options = {}) {
        return tracingClient.withSpan("BlobClient-deleteIfExists", options, async (updatedOptions) => {
          var _a4, _b2;
          try {
            const res = assertResponse(await this.delete(updatedOptions));
            return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
          } catch (e3) {
            if (((_a4 = e3.details) === null || _a4 === void 0 ? void 0 : _a4.errorCode) === "BlobNotFound") {
              return Object.assign(Object.assign({ succeeded: false }, (_b2 = e3.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e3.response });
            }
            throw e3;
          }
        });
      }
      /**
       * Restores the contents and metadata of soft deleted blob and any associated
       * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29
       * or later.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob
       *
       * @param options - Optional options to Blob Undelete operation.
       */
      async undelete(options = {}) {
        return tracingClient.withSpan("BlobClient-undelete", options, async (updatedOptions) => {
          return assertResponse(await this.blobContext.undelete({
            abortSignal: options.abortSignal,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Sets system properties on the blob.
       *
       * If no value provided, or no value provided for the specified blob HTTP headers,
       * these blob HTTP headers without a value will be cleared.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
       *
       * @param blobHTTPHeaders - If no value provided, or no value provided for
       *                                                   the specified blob HTTP headers, these blob HTTP
       *                                                   headers without a value will be cleared.
       *                                                   A common header to set is `blobContentType`
       *                                                   enabling the browser to provide functionality
       *                                                   based on file type.
       * @param options - Optional options to Blob Set HTTP Headers operation.
       */
      async setHTTPHeaders(blobHTTPHeaders, options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlobClient-setHTTPHeaders", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.blobContext.setHttpHeaders({
            abortSignal: options.abortSignal,
            blobHttpHeaders: blobHTTPHeaders,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            // cpkInfo: options.customerProvidedKey, // CPK is not included in Swagger, should change this back when this issue is fixed in Swagger.
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Sets user-defined metadata for the specified blob as one or more name-value pairs.
       *
       * If no option provided, or no metadata defined in the parameter, the blob
       * metadata will be removed.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
       *
       * @param metadata - Replace existing metadata with this value.
       *                               If no value provided the existing metadata will be removed.
       * @param options - Optional options to Set Metadata operation.
       */
      async setMetadata(metadata3, options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlobClient-setMetadata", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.blobContext.setMetadata({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            metadata: metadata3,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Sets tags on the underlying blob.
       * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.
       * Valid tag key and value characters include lower and upper case letters, digits (0-9),
       * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
       *
       * @param tags -
       * @param options -
       */
      async setTags(tags2, options = {}) {
        return tracingClient.withSpan("BlobClient-setTags", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.blobContext.setTags({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions,
            tags: toBlobTags(tags2)
          }));
        });
      }
      /**
       * Gets the tags associated with the underlying blob.
       *
       * @param options -
       */
      async getTags(options = {}) {
        return tracingClient.withSpan("BlobClient-getTags", options, async (updatedOptions) => {
          var _a4;
          const response = assertResponse(await this.blobContext.getTags({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          }));
          const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, tags: toTags({ blobTagSet: response.blobTagSet }) || {} });
          return wrappedResponse;
        });
      }
      /**
       * Get a {@link BlobLeaseClient} that manages leases on the blob.
       *
       * @param proposeLeaseId - Initial proposed lease Id.
       * @returns A new BlobLeaseClient object for managing leases on the blob.
       */
      getBlobLeaseClient(proposeLeaseId) {
        return new BlobLeaseClient(this, proposeLeaseId);
      }
      /**
       * Creates a read-only snapshot of a blob.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
       *
       * @param options - Optional options to the Blob Create Snapshot operation.
       */
      async createSnapshot(options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlobClient-createSnapshot", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.blobContext.createSnapshot({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            metadata: options.metadata,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Asynchronously copies a blob to a destination within the storage account.
       * This method returns a long running operation poller that allows you to wait
       * indefinitely until the copy is completed.
       * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.
       * Note that the onProgress callback will not be invoked if the operation completes in the first
       * request, and attempting to cancel a completed copy will result in an error being thrown.
       *
       * In version 2012-02-12 and later, the source for a Copy Blob operation can be
       * a committed blob in any Azure storage account.
       * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
       * an Azure file in any Azure storage account.
       * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
       * operation to copy from another storage account.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
       *
       * Example using automatic polling:
       *
       * ```js
       * const copyPoller = await blobClient.beginCopyFromURL('url');
       * const result = await copyPoller.pollUntilDone();
       * ```
       *
       * Example using manual polling:
       *
       * ```js
       * const copyPoller = await blobClient.beginCopyFromURL('url');
       * while (!poller.isDone()) {
       *    await poller.poll();
       * }
       * const result = copyPoller.getResult();
       * ```
       *
       * Example using progress updates:
       *
       * ```js
       * const copyPoller = await blobClient.beginCopyFromURL('url', {
       *   onProgress(state) {
       *     console.log(`Progress: ${state.copyProgress}`);
       *   }
       * });
       * const result = await copyPoller.pollUntilDone();
       * ```
       *
       * Example using a changing polling interval (default 15 seconds):
       *
       * ```js
       * const copyPoller = await blobClient.beginCopyFromURL('url', {
       *   intervalInMs: 1000 // poll blob every 1 second for copy progress
       * });
       * const result = await copyPoller.pollUntilDone();
       * ```
       *
       * Example using copy cancellation:
       *
       * ```js
       * const copyPoller = await blobClient.beginCopyFromURL('url');
       * // cancel operation after starting it.
       * try {
       *   await copyPoller.cancelOperation();
       *   // calls to get the result now throw PollerCancelledError
       *   await copyPoller.getResult();
       * } catch (err) {
       *   if (err.name === 'PollerCancelledError') {
       *     console.log('The copy was cancelled.');
       *   }
       * }
       * ```
       *
       * @param copySource - url to the source Azure Blob/File.
       * @param options - Optional options to the Blob Start Copy From URL operation.
       */
      async beginCopyFromURL(copySource2, options = {}) {
        const client = {
          abortCopyFromURL: /* @__PURE__ */ __name((...args) => this.abortCopyFromURL(...args), "abortCopyFromURL"),
          getProperties: /* @__PURE__ */ __name((...args) => this.getProperties(...args), "getProperties"),
          startCopyFromURL: /* @__PURE__ */ __name((...args) => this.startCopyFromURL(...args), "startCopyFromURL")
        };
        const poller = new BlobBeginCopyFromUrlPoller({
          blobClient: client,
          copySource: copySource2,
          intervalInMs: options.intervalInMs,
          onProgress: options.onProgress,
          resumeFrom: options.resumeFrom,
          startCopyFromURLOptions: options
        });
        await poller.poll();
        return poller;
      }
      /**
       * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero
       * length and full metadata. Version 2012-02-12 and newer.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
       *
       * @param copyId - Id of the Copy From URL operation.
       * @param options - Optional options to the Blob Abort Copy From URL operation.
       */
      async abortCopyFromURL(copyId2, options = {}) {
        return tracingClient.withSpan("BlobClient-abortCopyFromURL", options, async (updatedOptions) => {
          return assertResponse(await this.blobContext.abortCopyFromURL(copyId2, {
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not
       * return a response until the copy is complete.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url
       *
       * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication
       * @param options -
       */
      async syncCopyFromURL(copySource2, options = {}) {
        options.conditions = options.conditions || {};
        options.sourceConditions = options.sourceConditions || {};
        return tracingClient.withSpan("BlobClient-syncCopyFromURL", options, async (updatedOptions) => {
          var _a4, _b2, _c2, _d2, _e2, _f, _g;
          return assertResponse(await this.blobContext.copyFromURL(copySource2, {
            abortSignal: options.abortSignal,
            metadata: options.metadata,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            sourceModifiedAccessConditions: {
              sourceIfMatch: (_b2 = options.sourceConditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch,
              sourceIfModifiedSince: (_c2 = options.sourceConditions) === null || _c2 === void 0 ? void 0 : _c2.ifModifiedSince,
              sourceIfNoneMatch: (_d2 = options.sourceConditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch,
              sourceIfUnmodifiedSince: (_e2 = options.sourceConditions) === null || _e2 === void 0 ? void 0 : _e2.ifUnmodifiedSince
            },
            sourceContentMD5: options.sourceContentMD5,
            copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
            tier: toAccessTier(options.tier),
            blobTagsString: toBlobTagsString(options.tags),
            immutabilityPolicyExpiry: (_f = options.immutabilityPolicy) === null || _f === void 0 ? void 0 : _f.expiriesOn,
            immutabilityPolicyMode: (_g = options.immutabilityPolicy) === null || _g === void 0 ? void 0 : _g.policyMode,
            legalHold: options.legalHold,
            encryptionScope: options.encryptionScope,
            copySourceTags: options.copySourceTags,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Sets the tier on a blob. The operation is allowed on a page blob in a premium
       * storage account and on a block blob in a blob storage account (locally redundant
       * storage only). A premium page blob's tier determines the allowed size, IOPS,
       * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive
       * storage type. This operation does not update the blob's ETag.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
       *
       * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.
       * @param options - Optional options to the Blob Set Tier operation.
       */
      async setAccessTier(tier2, options = {}) {
        return tracingClient.withSpan("BlobClient-setAccessTier", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.blobContext.setTier(toAccessTier(tier2), {
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            rehydratePriority: options.rehydratePriority,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      async downloadToBuffer(param1, param2, param3, param4 = {}) {
        var _a4;
        let buffer2;
        let offset = 0;
        let count = 0;
        let options = param4;
        if (param1 instanceof Buffer) {
          buffer2 = param1;
          offset = param2 || 0;
          count = typeof param3 === "number" ? param3 : 0;
        } else {
          offset = typeof param1 === "number" ? param1 : 0;
          count = typeof param2 === "number" ? param2 : 0;
          options = param3 || {};
        }
        let blockSize = (_a4 = options.blockSize) !== null && _a4 !== void 0 ? _a4 : 0;
        if (blockSize < 0) {
          throw new RangeError("blockSize option must be >= 0");
        }
        if (blockSize === 0) {
          blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
        }
        if (offset < 0) {
          throw new RangeError("offset option must be >= 0");
        }
        if (count && count <= 0) {
          throw new RangeError("count option must be greater than 0");
        }
        if (!options.conditions) {
          options.conditions = {};
        }
        return tracingClient.withSpan("BlobClient-downloadToBuffer", options, async (updatedOptions) => {
          if (!count) {
            const response = await this.getProperties(Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));
            count = response.contentLength - offset;
            if (count < 0) {
              throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);
            }
          }
          if (!buffer2) {
            try {
              buffer2 = Buffer.alloc(count);
            } catch (error) {
              throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the "downloadToBuffer" method or try using other methods like "download" or "downloadToFile".	 ${error.message}`);
            }
          }
          if (buffer2.length < count) {
            throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);
          }
          let transferProgress = 0;
          const batch = new Batch(options.concurrency);
          for (let off = offset; off < offset + count; off = off + blockSize) {
            batch.addOperation(async () => {
              let chunkEnd = offset + count;
              if (off + blockSize < chunkEnd) {
                chunkEnd = off + blockSize;
              }
              const response = await this.download(off, chunkEnd - off, {
                abortSignal: options.abortSignal,
                conditions: options.conditions,
                maxRetryRequests: options.maxRetryRequestsPerBlock,
                customerProvidedKey: options.customerProvidedKey,
                tracingOptions: updatedOptions.tracingOptions
              });
              const stream = response.readableStreamBody;
              await streamToBuffer(stream, buffer2, off - offset, chunkEnd - offset);
              transferProgress += chunkEnd - off;
              if (options.onProgress) {
                options.onProgress({ loadedBytes: transferProgress });
              }
            });
          }
          await batch.do();
          return buffer2;
        });
      }
      /**
       * ONLY AVAILABLE IN NODE.JS RUNTIME.
       *
       * Downloads an Azure Blob to a local file.
       * Fails if the the given file path already exits.
       * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
       *
       * @param filePath -
       * @param offset - From which position of the block blob to download.
       * @param count - How much data to be downloaded. Will download to the end when passing undefined.
       * @param options - Options to Blob download options.
       * @returns The response data for blob download operation,
       *                                                 but with readableStreamBody set to undefined since its
       *                                                 content is already read and written into a local file
       *                                                 at the specified path.
       */
      async downloadToFile(filePath, offset = 0, count, options = {}) {
        return tracingClient.withSpan("BlobClient-downloadToFile", options, async (updatedOptions) => {
          const response = await this.download(offset, count, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));
          if (response.readableStreamBody) {
            await readStreamToLocalFile(response.readableStreamBody, filePath);
          }
          response.blobDownloadStream = void 0;
          return response;
        });
      }
      getBlobAndContainerNamesFromUrl() {
        let containerName;
        let blobName;
        try {
          const parsedUrl = new URL(this.url);
          if (parsedUrl.host.split(".")[1] === "blob") {
            const pathComponents = parsedUrl.pathname.match("/([^/]*)(/(.*))?");
            containerName = pathComponents[1];
            blobName = pathComponents[3];
          } else if (isIpEndpointStyle(parsedUrl)) {
            const pathComponents = parsedUrl.pathname.match("/([^/]*)/([^/]*)(/(.*))?");
            containerName = pathComponents[2];
            blobName = pathComponents[4];
          } else {
            const pathComponents = parsedUrl.pathname.match("/([^/]*)(/(.*))?");
            containerName = pathComponents[1];
            blobName = pathComponents[3];
          }
          containerName = decodeURIComponent(containerName);
          blobName = decodeURIComponent(blobName);
          blobName = blobName.replace(/\\/g, "/");
          if (!containerName) {
            throw new Error("Provided containerName is invalid.");
          }
          return { blobName, containerName };
        } catch (error) {
          throw new Error("Unable to extract blobName and containerName with provided information.");
        }
      }
      /**
       * Asynchronously copies a blob to a destination within the storage account.
       * In version 2012-02-12 and later, the source for a Copy Blob operation can be
       * a committed blob in any Azure storage account.
       * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
       * an Azure file in any Azure storage account.
       * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
       * operation to copy from another storage account.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
       *
       * @param copySource - url to the source Azure Blob/File.
       * @param options - Optional options to the Blob Start Copy From URL operation.
       */
      async startCopyFromURL(copySource2, options = {}) {
        return tracingClient.withSpan("BlobClient-startCopyFromURL", options, async (updatedOptions) => {
          var _a4, _b2, _c2;
          options.conditions = options.conditions || {};
          options.sourceConditions = options.sourceConditions || {};
          return assertResponse(await this.blobContext.startCopyFromURL(copySource2, {
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            metadata: options.metadata,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            sourceModifiedAccessConditions: {
              sourceIfMatch: options.sourceConditions.ifMatch,
              sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
              sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
              sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,
              sourceIfTags: options.sourceConditions.tagConditions
            },
            immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
            immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
            legalHold: options.legalHold,
            rehydratePriority: options.rehydratePriority,
            tier: toAccessTier(options.tier),
            blobTagsString: toBlobTagsString(options.tags),
            sealBlob: options.sealBlob,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Only available for BlobClient constructed with a shared key credential.
       *
       * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties
       * and parameters passed in. The SAS is signed by the shared key credential of the client.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
       *
       * @param options - Optional parameters.
       * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      generateSasUrl(options) {
        return new Promise((resolve2) => {
          if (!(this.credential instanceof StorageSharedKeyCredential)) {
            throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
          }
          const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).toString();
          resolve2(appendToURLQuery(this.url, sas));
        });
      }
      /**
       * Only available for BlobClient constructed with a shared key credential.
       *
       * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on
       * the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
       *
       * @param options - Optional parameters.
       * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      generateSasStringToSign(options) {
        if (!(this.credential instanceof StorageSharedKeyCredential)) {
          throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
        }
        return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).stringToSign;
      }
      /**
       *
       * Generates a Blob Service Shared Access Signature (SAS) URI based on
       * the client properties and parameters passed in. The SAS is signed by the input user delegation key.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
       *
       * @param options - Optional parameters.
       * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`
       * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      generateUserDelegationSasUrl(options, userDelegationKey) {
        return new Promise((resolve2) => {
          const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).toString();
          resolve2(appendToURLQuery(this.url, sas));
        });
      }
      /**
       * Only available for BlobClient constructed with a shared key credential.
       *
       * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on
       * the client properties and parameters passed in. The SAS is signed by the input user delegation key.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
       *
       * @param options - Optional parameters.
       * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`
       * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      generateUserDelegationSasStringToSign(options, userDelegationKey) {
        return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).stringToSign;
      }
      /**
       * Delete the immutablility policy on the blob.
       *
       * @param options - Optional options to delete immutability policy on the blob.
       */
      async deleteImmutabilityPolicy(options = {}) {
        return tracingClient.withSpan("BlobClient-deleteImmutabilityPolicy", options, async (updatedOptions) => {
          return assertResponse(await this.blobContext.deleteImmutabilityPolicy({
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Set immutability policy on the blob.
       *
       * @param options - Optional options to set immutability policy on the blob.
       */
      async setImmutabilityPolicy(immutabilityPolicy, options = {}) {
        return tracingClient.withSpan("BlobClient-setImmutabilityPolicy", options, async (updatedOptions) => {
          return assertResponse(await this.blobContext.setImmutabilityPolicy({
            immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,
            immutabilityPolicyMode: immutabilityPolicy.policyMode,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Set legal hold on the blob.
       *
       * @param options - Optional options to set legal hold on the blob.
       */
      async setLegalHold(legalHoldEnabled, options = {}) {
        return tracingClient.withSpan("BlobClient-setLegalHold", options, async (updatedOptions) => {
          return assertResponse(await this.blobContext.setLegalHold(legalHoldEnabled, {
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * The Get Account Information operation returns the sku name and account kind
       * for the specified account.
       * The Get Account Information operation is available on service versions beginning
       * with version 2018-03-28.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
       *
       * @param options - Options to the Service Get Account Info operation.
       * @returns Response data for the Service Get Account Info operation.
       */
      async getAccountInfo(options = {}) {
        return tracingClient.withSpan("BlobClient-getAccountInfo", options, async (updatedOptions) => {
          return assertResponse(await this.blobContext.getAccountInfo({
            abortSignal: options.abortSignal,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
    };
    AppendBlobClient = class _AppendBlobClient extends BlobClient {
      static {
        __name(this, "AppendBlobClient");
      }
      constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
        let pipeline;
        let url2;
        options = options || {};
        if (isPipelineLike(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          options = blobNameOrOptions;
          pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          url2 = urlOrConnectionString;
          pipeline = newPipeline(new AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
          const containerName = credentialOrPipelineOrContainerName;
          const blobName = blobNameOrOptions;
          const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
          if (extractedCreds.kind === "AccountConnString") {
            if (isNode) {
              const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
              if (!options.proxyOptions) {
                options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
              }
              pipeline = newPipeline(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
            pipeline = newPipeline(new AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }
        super(url2, pipeline);
        this.appendBlobContext = this.storageClientContext.appendBlob;
      }
      /**
       * Creates a new AppendBlobClient object identical to the source but with the
       * specified snapshot timestamp.
       * Provide "" will remove the snapshot and return a Client to the base blob.
       *
       * @param snapshot - The snapshot timestamp.
       * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.
       */
      withSnapshot(snapshot2) {
        return new _AppendBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
      }
      /**
       * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
       * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
       *
       * @param options - Options to the Append Block Create operation.
       *
       *
       * Example usage:
       *
       * ```js
       * const appendBlobClient = containerClient.getAppendBlobClient("<blob name>");
       * await appendBlobClient.create();
       * ```
       */
      async create(options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("AppendBlobClient-create", options, async (updatedOptions) => {
          var _a4, _b2, _c2;
          return assertResponse(await this.appendBlobContext.create(0, {
            abortSignal: options.abortSignal,
            blobHttpHeaders: options.blobHTTPHeaders,
            leaseAccessConditions: options.conditions,
            metadata: options.metadata,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
            immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
            legalHold: options.legalHold,
            blobTagsString: toBlobTagsString(options.tags),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
       * If the blob with the same name already exists, the content of the existing blob will remain unchanged.
       * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
       *
       * @param options -
       */
      async createIfNotExists(options = {}) {
        const conditions = { ifNoneMatch: ETagAny };
        return tracingClient.withSpan("AppendBlobClient-createIfNotExists", options, async (updatedOptions) => {
          var _a4, _b2;
          try {
            const res = assertResponse(await this.create(Object.assign(Object.assign({}, updatedOptions), { conditions })));
            return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
          } catch (e3) {
            if (((_a4 = e3.details) === null || _a4 === void 0 ? void 0 : _a4.errorCode) === "BlobAlreadyExists") {
              return Object.assign(Object.assign({ succeeded: false }, (_b2 = e3.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e3.response });
            }
            throw e3;
          }
        });
      }
      /**
       * Seals the append blob, making it read only.
       *
       * @param options -
       */
      async seal(options = {}) {
        options.conditions = options.conditions || {};
        return tracingClient.withSpan("AppendBlobClient-seal", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.appendBlobContext.seal({
            abortSignal: options.abortSignal,
            appendPositionAccessConditions: options.conditions,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Commits a new block of data to the end of the existing append blob.
       * @see https://docs.microsoft.com/rest/api/storageservices/append-block
       *
       * @param body - Data to be appended.
       * @param contentLength - Length of the body in bytes.
       * @param options - Options to the Append Block operation.
       *
       *
       * Example usage:
       *
       * ```js
       * const content = "Hello World!";
       *
       * // Create a new append blob and append data to the blob.
       * const newAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
       * await newAppendBlobClient.create();
       * await newAppendBlobClient.appendBlock(content, content.length);
       *
       * // Append data to an existing append blob.
       * const existingAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
       * await existingAppendBlobClient.appendBlock(content, content.length);
       * ```
       */
      async appendBlock(body2, contentLength2, options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("AppendBlobClient-appendBlock", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.appendBlobContext.appendBlock(contentLength2, body2, {
            abortSignal: options.abortSignal,
            appendPositionAccessConditions: options.conditions,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            requestOptions: {
              onUploadProgress: options.onProgress
            },
            transactionalContentMD5: options.transactionalContentMD5,
            transactionalContentCrc64: options.transactionalContentCrc64,
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * The Append Block operation commits a new block of data to the end of an existing append blob
       * where the contents are read from a source url.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url
       *
       * @param sourceURL -
       *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can
       *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
       *                 must either be public or must be authenticated via a shared access signature. If the source blob is
       *                 public, no authentication is required to perform the operation.
       * @param sourceOffset - Offset in source to be appended
       * @param count - Number of bytes to be appended as a block
       * @param options -
       */
      async appendBlockFromURL(sourceURL, sourceOffset, count, options = {}) {
        options.conditions = options.conditions || {};
        options.sourceConditions = options.sourceConditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("AppendBlobClient-appendBlockFromURL", options, async (updatedOptions) => {
          var _a4, _b2, _c2, _d2, _e2;
          return assertResponse(await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {
            abortSignal: options.abortSignal,
            sourceRange: rangeToString({ offset: sourceOffset, count }),
            sourceContentMD5: options.sourceContentMD5,
            sourceContentCrc64: options.sourceContentCrc64,
            leaseAccessConditions: options.conditions,
            appendPositionAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            sourceModifiedAccessConditions: {
              sourceIfMatch: (_b2 = options.sourceConditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch,
              sourceIfModifiedSince: (_c2 = options.sourceConditions) === null || _c2 === void 0 ? void 0 : _c2.ifModifiedSince,
              sourceIfNoneMatch: (_d2 = options.sourceConditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch,
              sourceIfUnmodifiedSince: (_e2 = options.sourceConditions) === null || _e2 === void 0 ? void 0 : _e2.ifUnmodifiedSince
            },
            copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
    };
    BlockBlobClient = class _BlockBlobClient extends BlobClient {
      static {
        __name(this, "BlockBlobClient");
      }
      constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
        let pipeline;
        let url2;
        options = options || {};
        if (isPipelineLike(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          options = blobNameOrOptions;
          pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          url2 = urlOrConnectionString;
          if (blobNameOrOptions && typeof blobNameOrOptions !== "string") {
            options = blobNameOrOptions;
          }
          pipeline = newPipeline(new AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
          const containerName = credentialOrPipelineOrContainerName;
          const blobName = blobNameOrOptions;
          const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
          if (extractedCreds.kind === "AccountConnString") {
            if (isNode) {
              const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
              if (!options.proxyOptions) {
                options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
              }
              pipeline = newPipeline(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
            pipeline = newPipeline(new AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }
        super(url2, pipeline);
        this.blockBlobContext = this.storageClientContext.blockBlob;
        this._blobContext = this.storageClientContext.blob;
      }
      /**
       * Creates a new BlockBlobClient object identical to the source but with the
       * specified snapshot timestamp.
       * Provide "" will remove the snapshot and return a URL to the base blob.
       *
       * @param snapshot - The snapshot timestamp.
       * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.
       */
      withSnapshot(snapshot2) {
        return new _BlockBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
      }
      /**
       * ONLY AVAILABLE IN NODE.JS RUNTIME.
       *
       * Quick query for a JSON or CSV formatted blob.
       *
       * Example usage (Node.js):
       *
       * ```js
       * // Query and convert a blob to a string
       * const queryBlockBlobResponse = await blockBlobClient.query("select * from BlobStorage");
       * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();
       * console.log("Query blob content:", downloaded);
       *
       * async function streamToBuffer(readableStream) {
       *   return new Promise((resolve, reject) => {
       *     const chunks = [];
       *     readableStream.on("data", (data) => {
       *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));
       *     });
       *     readableStream.on("end", () => {
       *       resolve(Buffer.concat(chunks));
       *     });
       *     readableStream.on("error", reject);
       *   });
       * }
       * ```
       *
       * @param query -
       * @param options -
       */
      async query(query, options = {}) {
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        if (!isNode) {
          throw new Error("This operation currently is only supported in Node.js.");
        }
        return tracingClient.withSpan("BlockBlobClient-query", options, async (updatedOptions) => {
          var _a4;
          const response = assertResponse(await this._blobContext.query({
            abortSignal: options.abortSignal,
            queryRequest: {
              queryType: "SQL",
              expression: query,
              inputSerialization: toQuerySerialization(options.inputTextConfiguration),
              outputSerialization: toQuerySerialization(options.outputTextConfiguration)
            },
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            cpkInfo: options.customerProvidedKey,
            tracingOptions: updatedOptions.tracingOptions
          }));
          return new BlobQueryResponse(response, {
            abortSignal: options.abortSignal,
            onProgress: options.onProgress,
            onError: options.onError
          });
        });
      }
      /**
       * Creates a new block blob, or updates the content of an existing block blob.
       * Updating an existing block blob overwrites any existing metadata on the blob.
       * Partial updates are not supported; the content of the existing blob is
       * overwritten with the new content. To perform a partial update of a block blob's,
       * use {@link stageBlock} and {@link commitBlockList}.
       *
       * This is a non-parallel uploading method, please use {@link uploadFile},
       * {@link uploadStream} or {@link uploadBrowserData} for better performance
       * with concurrency uploading.
       *
       * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
       *
       * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
       *                               which returns a new Readable stream whose offset is from data source beginning.
       * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
       *                               string including non non-Base64/Hex-encoded characters.
       * @param options - Options to the Block Blob Upload operation.
       * @returns Response data for the Block Blob Upload operation.
       *
       * Example usage:
       *
       * ```js
       * const content = "Hello world!";
       * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
       * ```
       */
      async upload(body2, contentLength2, options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlockBlobClient-upload", options, async (updatedOptions) => {
          var _a4, _b2, _c2;
          return assertResponse(await this.blockBlobContext.upload(contentLength2, body2, {
            abortSignal: options.abortSignal,
            blobHttpHeaders: options.blobHTTPHeaders,
            leaseAccessConditions: options.conditions,
            metadata: options.metadata,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            requestOptions: {
              onUploadProgress: options.onProgress
            },
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
            immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
            legalHold: options.legalHold,
            tier: toAccessTier(options.tier),
            blobTagsString: toBlobTagsString(options.tags),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Creates a new Block Blob where the contents of the blob are read from a given URL.
       * This API is supported beginning with the 2020-04-08 version. Partial updates
       * are not supported with Put Blob from URL; the content of an existing blob is overwritten with
       * the content of the new blob.  To perform partial updates to a block blob’s contents using a
       * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.
       *
       * @param sourceURL - Specifies the URL of the blob. The value
       *                           may be a URL of up to 2 KB in length that specifies a blob.
       *                           The value should be URL-encoded as it would appear
       *                           in a request URI. The source blob must either be public
       *                           or must be authenticated via a shared access signature.
       *                           If the source blob is public, no authentication is required
       *                           to perform the operation. Here are some examples of source object URLs:
       *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
       *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
       * @param options - Optional parameters.
       */
      async syncUploadFromURL(sourceURL, options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlockBlobClient-syncUploadFromURL", options, async (updatedOptions) => {
          var _a4, _b2, _c2, _d2, _e2, _f;
          return assertResponse(await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign({}, options), { blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }), sourceModifiedAccessConditions: {
            sourceIfMatch: (_b2 = options.sourceConditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch,
            sourceIfModifiedSince: (_c2 = options.sourceConditions) === null || _c2 === void 0 ? void 0 : _c2.ifModifiedSince,
            sourceIfNoneMatch: (_d2 = options.sourceConditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch,
            sourceIfUnmodifiedSince: (_e2 = options.sourceConditions) === null || _e2 === void 0 ? void 0 : _e2.ifUnmodifiedSince,
            sourceIfTags: (_f = options.sourceConditions) === null || _f === void 0 ? void 0 : _f.tagConditions
          }, cpkInfo: options.customerProvidedKey, copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization), tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags), copySourceTags: options.copySourceTags, tracingOptions: updatedOptions.tracingOptions })));
        });
      }
      /**
       * Uploads the specified block to the block blob's "staging area" to be later
       * committed by a call to commitBlockList.
       * @see https://docs.microsoft.com/rest/api/storageservices/put-block
       *
       * @param blockId - A 64-byte value that is base64-encoded
       * @param body - Data to upload to the staging area.
       * @param contentLength - Number of bytes to upload.
       * @param options - Options to the Block Blob Stage Block operation.
       * @returns Response data for the Block Blob Stage Block operation.
       */
      async stageBlock(blockId2, body2, contentLength2, options = {}) {
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlockBlobClient-stageBlock", options, async (updatedOptions) => {
          return assertResponse(await this.blockBlobContext.stageBlock(blockId2, contentLength2, body2, {
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            requestOptions: {
              onUploadProgress: options.onProgress
            },
            transactionalContentMD5: options.transactionalContentMD5,
            transactionalContentCrc64: options.transactionalContentCrc64,
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * The Stage Block From URL operation creates a new block to be committed as part
       * of a blob where the contents are read from a URL.
       * This API is available starting in version 2018-03-28.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
       *
       * @param blockId - A 64-byte value that is base64-encoded
       * @param sourceURL - Specifies the URL of the blob. The value
       *                           may be a URL of up to 2 KB in length that specifies a blob.
       *                           The value should be URL-encoded as it would appear
       *                           in a request URI. The source blob must either be public
       *                           or must be authenticated via a shared access signature.
       *                           If the source blob is public, no authentication is required
       *                           to perform the operation. Here are some examples of source object URLs:
       *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
       *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
       * @param offset - From which position of the blob to download, greater than or equal to 0
       * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
       * @param options - Options to the Block Blob Stage Block From URL operation.
       * @returns Response data for the Block Blob Stage Block From URL operation.
       */
      async stageBlockFromURL(blockId2, sourceURL, offset = 0, count, options = {}) {
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlockBlobClient-stageBlockFromURL", options, async (updatedOptions) => {
          return assertResponse(await this.blockBlobContext.stageBlockFromURL(blockId2, 0, sourceURL, {
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            sourceContentMD5: options.sourceContentMD5,
            sourceContentCrc64: options.sourceContentCrc64,
            sourceRange: offset === 0 && !count ? void 0 : rangeToString({ offset, count }),
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Writes a blob by specifying the list of block IDs that make up the blob.
       * In order to be written as part of a blob, a block must have been successfully written
       * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to
       * update a blob by uploading only those blocks that have changed, then committing the new and existing
       * blocks together. Any blocks not specified in the block list and permanently deleted.
       * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list
       *
       * @param blocks -  Array of 64-byte value that is base64-encoded
       * @param options - Options to the Block Blob Commit Block List operation.
       * @returns Response data for the Block Blob Commit Block List operation.
       */
      async commitBlockList(blocks2, options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("BlockBlobClient-commitBlockList", options, async (updatedOptions) => {
          var _a4, _b2, _c2;
          return assertResponse(await this.blockBlobContext.commitBlockList({ latest: blocks2 }, {
            abortSignal: options.abortSignal,
            blobHttpHeaders: options.blobHTTPHeaders,
            leaseAccessConditions: options.conditions,
            metadata: options.metadata,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
            immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
            legalHold: options.legalHold,
            tier: toAccessTier(options.tier),
            blobTagsString: toBlobTagsString(options.tags),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Returns the list of blocks that have been uploaded as part of a block blob
       * using the specified block list filter.
       * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list
       *
       * @param listType - Specifies whether to return the list of committed blocks,
       *                                        the list of uncommitted blocks, or both lists together.
       * @param options - Options to the Block Blob Get Block List operation.
       * @returns Response data for the Block Blob Get Block List operation.
       */
      async getBlockList(listType2, options = {}) {
        return tracingClient.withSpan("BlockBlobClient-getBlockList", options, async (updatedOptions) => {
          var _a4;
          const res = assertResponse(await this.blockBlobContext.getBlockList(listType2, {
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          }));
          if (!res.committedBlocks) {
            res.committedBlocks = [];
          }
          if (!res.uncommittedBlocks) {
            res.uncommittedBlocks = [];
          }
          return res;
        });
      }
      // High level functions
      /**
       * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.
       *
       * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
       * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
       * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
       * to commit the block list.
       *
       * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
       * `blobContentType`, enabling the browser to provide
       * functionality based on file type.
       *
       * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView
       * @param options -
       */
      async uploadData(data, options = {}) {
        return tracingClient.withSpan("BlockBlobClient-uploadData", options, async (updatedOptions) => {
          if (isNode) {
            let buffer2;
            if (data instanceof Buffer) {
              buffer2 = data;
            } else if (data instanceof ArrayBuffer) {
              buffer2 = Buffer.from(data);
            } else {
              data = data;
              buffer2 = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
            }
            return this.uploadSeekableInternal((offset, size) => buffer2.slice(offset, offset + size), buffer2.byteLength, updatedOptions);
          } else {
            const browserBlob = new Blob([data]);
            return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);
          }
        });
      }
      /**
       * ONLY AVAILABLE IN BROWSERS.
       *
       * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.
       *
       * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
       * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call
       * {@link commitBlockList} to commit the block list.
       *
       * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
       * `blobContentType`, enabling the browser to provide
       * functionality based on file type.
       *
       * @deprecated Use {@link uploadData} instead.
       *
       * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView
       * @param options - Options to upload browser data.
       * @returns Response data for the Blob Upload operation.
       */
      async uploadBrowserData(browserData, options = {}) {
        return tracingClient.withSpan("BlockBlobClient-uploadBrowserData", options, async (updatedOptions) => {
          const browserBlob = new Blob([browserData]);
          return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);
        });
      }
      /**
       *
       * Uploads data to block blob. Requires a bodyFactory as the data source,
       * which need to return a {@link HttpRequestBody} object with the offset and size provided.
       *
       * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
       * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
       * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
       * to commit the block list.
       *
       * @param bodyFactory -
       * @param size - size of the data to upload.
       * @param options - Options to Upload to Block Blob operation.
       * @returns Response data for the Blob Upload operation.
       */
      async uploadSeekableInternal(bodyFactory, size, options = {}) {
        var _a4, _b2;
        let blockSize = (_a4 = options.blockSize) !== null && _a4 !== void 0 ? _a4 : 0;
        if (blockSize < 0 || blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {
          throw new RangeError(`blockSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`);
        }
        const maxSingleShotSize = (_b2 = options.maxSingleShotSize) !== null && _b2 !== void 0 ? _b2 : BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;
        if (maxSingleShotSize < 0 || maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {
          throw new RangeError(`maxSingleShotSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`);
        }
        if (blockSize === 0) {
          if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {
            throw new RangeError(`${size} is too larger to upload to a block blob.`);
          }
          if (size > maxSingleShotSize) {
            blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);
            if (blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {
              blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
            }
          }
        }
        if (!options.blobHTTPHeaders) {
          options.blobHTTPHeaders = {};
        }
        if (!options.conditions) {
          options.conditions = {};
        }
        return tracingClient.withSpan("BlockBlobClient-uploadSeekableInternal", options, async (updatedOptions) => {
          if (size <= maxSingleShotSize) {
            return assertResponse(await this.upload(bodyFactory(0, size), size, updatedOptions));
          }
          const numBlocks = Math.floor((size - 1) / blockSize) + 1;
          if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {
            throw new RangeError(`The buffer's size is too big or the BlockSize is too small;the number of blocks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`);
          }
          const blockList = [];
          const blockIDPrefix = randomUUID();
          let transferProgress = 0;
          const batch = new Batch(options.concurrency);
          for (let i3 = 0; i3 < numBlocks; i3++) {
            batch.addOperation(async () => {
              const blockID = generateBlockID(blockIDPrefix, i3);
              const start = blockSize * i3;
              const end = i3 === numBlocks - 1 ? size : start + blockSize;
              const contentLength2 = end - start;
              blockList.push(blockID);
              await this.stageBlock(blockID, bodyFactory(start, contentLength2), contentLength2, {
                abortSignal: options.abortSignal,
                conditions: options.conditions,
                encryptionScope: options.encryptionScope,
                tracingOptions: updatedOptions.tracingOptions
              });
              transferProgress += contentLength2;
              if (options.onProgress) {
                options.onProgress({
                  loadedBytes: transferProgress
                });
              }
            });
          }
          await batch.do();
          return this.commitBlockList(blockList, updatedOptions);
        });
      }
      /**
       * ONLY AVAILABLE IN NODE.JS RUNTIME.
       *
       * Uploads a local file in blocks to a block blob.
       *
       * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
       * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList
       * to commit the block list.
       *
       * @param filePath - Full path of local file
       * @param options - Options to Upload to Block Blob operation.
       * @returns Response data for the Blob Upload operation.
       */
      async uploadFile(filePath, options = {}) {
        return tracingClient.withSpan("BlockBlobClient-uploadFile", options, async (updatedOptions) => {
          const size = (await fsStat(filePath)).size;
          return this.uploadSeekableInternal((offset, count) => {
            return () => fsCreateReadStream(filePath, {
              autoClose: true,
              end: count ? offset + count - 1 : Infinity,
              start: offset
            });
          }, size, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));
        });
      }
      /**
       * ONLY AVAILABLE IN NODE.JS RUNTIME.
       *
       * Uploads a Node.js Readable stream into block blob.
       *
       * PERFORMANCE IMPROVEMENT TIPS:
       * * Input stream highWaterMark is better to set a same value with bufferSize
       *    parameter, which will avoid Buffer.concat() operations.
       *
       * @param stream - Node.js Readable stream
       * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB
       * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,
       *                                 positive correlation with max uploading concurrency. Default value is 5
       * @param options - Options to Upload Stream to Block Blob operation.
       * @returns Response data for the Blob Upload operation.
       */
      async uploadStream(stream, bufferSize = DEFAULT_BLOCK_BUFFER_SIZE_BYTES, maxConcurrency = 5, options = {}) {
        if (!options.blobHTTPHeaders) {
          options.blobHTTPHeaders = {};
        }
        if (!options.conditions) {
          options.conditions = {};
        }
        return tracingClient.withSpan("BlockBlobClient-uploadStream", options, async (updatedOptions) => {
          let blockNum = 0;
          const blockIDPrefix = randomUUID();
          let transferProgress = 0;
          const blockList = [];
          const scheduler = new BufferScheduler(
            stream,
            bufferSize,
            maxConcurrency,
            async (body2, length) => {
              const blockID = generateBlockID(blockIDPrefix, blockNum);
              blockList.push(blockID);
              blockNum++;
              await this.stageBlock(blockID, body2, length, {
                customerProvidedKey: options.customerProvidedKey,
                conditions: options.conditions,
                encryptionScope: options.encryptionScope,
                tracingOptions: updatedOptions.tracingOptions
              });
              transferProgress += length;
              if (options.onProgress) {
                options.onProgress({ loadedBytes: transferProgress });
              }
            },
            // concurrency should set a smaller value than maxConcurrency, which is helpful to
            // reduce the possibility when a outgoing handler waits for stream data, in
            // this situation, outgoing handlers are blocked.
            // Outgoing queue shouldn't be empty.
            Math.ceil(maxConcurrency / 4 * 3)
          );
          await scheduler.do();
          return assertResponse(await this.commitBlockList(blockList, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions })));
        });
      }
    };
    PageBlobClient = class _PageBlobClient extends BlobClient {
      static {
        __name(this, "PageBlobClient");
      }
      constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
        let pipeline;
        let url2;
        options = options || {};
        if (isPipelineLike(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          options = blobNameOrOptions;
          pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          url2 = urlOrConnectionString;
          pipeline = newPipeline(new AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
          const containerName = credentialOrPipelineOrContainerName;
          const blobName = blobNameOrOptions;
          const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
          if (extractedCreds.kind === "AccountConnString") {
            if (isNode) {
              const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
              if (!options.proxyOptions) {
                options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
              }
              pipeline = newPipeline(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
            pipeline = newPipeline(new AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }
        super(url2, pipeline);
        this.pageBlobContext = this.storageClientContext.pageBlob;
      }
      /**
       * Creates a new PageBlobClient object identical to the source but with the
       * specified snapshot timestamp.
       * Provide "" will remove the snapshot and return a Client to the base blob.
       *
       * @param snapshot - The snapshot timestamp.
       * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.
       */
      withSnapshot(snapshot2) {
        return new _PageBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
      }
      /**
       * Creates a page blob of the specified length. Call uploadPages to upload data
       * data to a page blob.
       * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
       *
       * @param size - size of the page blob.
       * @param options - Options to the Page Blob Create operation.
       * @returns Response data for the Page Blob Create operation.
       */
      async create(size, options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("PageBlobClient-create", options, async (updatedOptions) => {
          var _a4, _b2, _c2;
          return assertResponse(await this.pageBlobContext.create(0, size, {
            abortSignal: options.abortSignal,
            blobHttpHeaders: options.blobHTTPHeaders,
            blobSequenceNumber: options.blobSequenceNumber,
            leaseAccessConditions: options.conditions,
            metadata: options.metadata,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
            immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
            legalHold: options.legalHold,
            tier: toAccessTier(options.tier),
            blobTagsString: toBlobTagsString(options.tags),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Creates a page blob of the specified length. Call uploadPages to upload data
       * data to a page blob. If the blob with the same name already exists, the content
       * of the existing blob will remain unchanged.
       * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
       *
       * @param size - size of the page blob.
       * @param options -
       */
      async createIfNotExists(size, options = {}) {
        return tracingClient.withSpan("PageBlobClient-createIfNotExists", options, async (updatedOptions) => {
          var _a4, _b2;
          try {
            const conditions = { ifNoneMatch: ETagAny };
            const res = assertResponse(await this.create(size, Object.assign(Object.assign({}, options), { conditions, tracingOptions: updatedOptions.tracingOptions })));
            return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
          } catch (e3) {
            if (((_a4 = e3.details) === null || _a4 === void 0 ? void 0 : _a4.errorCode) === "BlobAlreadyExists") {
              return Object.assign(Object.assign({ succeeded: false }, (_b2 = e3.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e3.response });
            }
            throw e3;
          }
        });
      }
      /**
       * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.
       * @see https://docs.microsoft.com/rest/api/storageservices/put-page
       *
       * @param body - Data to upload
       * @param offset - Offset of destination page blob
       * @param count - Content length of the body, also number of bytes to be uploaded
       * @param options - Options to the Page Blob Upload Pages operation.
       * @returns Response data for the Page Blob Upload Pages operation.
       */
      async uploadPages(body2, offset, count, options = {}) {
        options.conditions = options.conditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("PageBlobClient-uploadPages", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.pageBlobContext.uploadPages(count, body2, {
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            requestOptions: {
              onUploadProgress: options.onProgress
            },
            range: rangeToString({ offset, count }),
            sequenceNumberAccessConditions: options.conditions,
            transactionalContentMD5: options.transactionalContentMD5,
            transactionalContentCrc64: options.transactionalContentCrc64,
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * The Upload Pages operation writes a range of pages to a page blob where the
       * contents are read from a URL.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
       *
       * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication
       * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob
       * @param destOffset - Offset of destination page blob
       * @param count - Number of bytes to be uploaded from source page blob
       * @param options -
       */
      async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {}) {
        options.conditions = options.conditions || {};
        options.sourceConditions = options.sourceConditions || {};
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        return tracingClient.withSpan("PageBlobClient-uploadPagesFromURL", options, async (updatedOptions) => {
          var _a4, _b2, _c2, _d2, _e2;
          return assertResponse(await this.pageBlobContext.uploadPagesFromURL(sourceURL, rangeToString({ offset: sourceOffset, count }), 0, rangeToString({ offset: destOffset, count }), {
            abortSignal: options.abortSignal,
            sourceContentMD5: options.sourceContentMD5,
            sourceContentCrc64: options.sourceContentCrc64,
            leaseAccessConditions: options.conditions,
            sequenceNumberAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            sourceModifiedAccessConditions: {
              sourceIfMatch: (_b2 = options.sourceConditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch,
              sourceIfModifiedSince: (_c2 = options.sourceConditions) === null || _c2 === void 0 ? void 0 : _c2.ifModifiedSince,
              sourceIfNoneMatch: (_d2 = options.sourceConditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch,
              sourceIfUnmodifiedSince: (_e2 = options.sourceConditions) === null || _e2 === void 0 ? void 0 : _e2.ifUnmodifiedSince
            },
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Frees the specified pages from the page blob.
       * @see https://docs.microsoft.com/rest/api/storageservices/put-page
       *
       * @param offset - Starting byte position of the pages to clear.
       * @param count - Number of bytes to clear.
       * @param options - Options to the Page Blob Clear Pages operation.
       * @returns Response data for the Page Blob Clear Pages operation.
       */
      async clearPages(offset = 0, count, options = {}) {
        options.conditions = options.conditions || {};
        return tracingClient.withSpan("PageBlobClient-clearPages", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.pageBlobContext.clearPages(0, {
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            range: rangeToString({ offset, count }),
            sequenceNumberAccessConditions: options.conditions,
            cpkInfo: options.customerProvidedKey,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Returns the list of valid page ranges for a page blob or snapshot of a page blob.
       * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
       *
       * @param offset - Starting byte position of the page ranges.
       * @param count - Number of bytes to get.
       * @param options - Options to the Page Blob Get Ranges operation.
       * @returns Response data for the Page Blob Get Ranges operation.
       */
      async getPageRanges(offset = 0, count, options = {}) {
        options.conditions = options.conditions || {};
        return tracingClient.withSpan("PageBlobClient-getPageRanges", options, async (updatedOptions) => {
          var _a4;
          const response = assertResponse(await this.pageBlobContext.getPageRanges({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            range: rangeToString({ offset, count }),
            tracingOptions: updatedOptions.tracingOptions
          }));
          return rangeResponseFromModel(response);
        });
      }
      /**
       * getPageRangesSegment returns a single segment of page ranges starting from the
       * specified Marker. Use an empty Marker to start enumeration from the beginning.
       * After getting a segment, process it, and then call getPageRangesSegment again
       * (passing the the previously-returned Marker) to get the next segment.
       * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
       *
       * @param offset - Starting byte position of the page ranges.
       * @param count - Number of bytes to get.
       * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
       * @param options - Options to PageBlob Get Page Ranges Segment operation.
       */
      async listPageRangesSegment(offset = 0, count, marker2, options = {}) {
        return tracingClient.withSpan("PageBlobClient-getPageRangesSegment", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.pageBlobContext.getPageRanges({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            range: rangeToString({ offset, count }),
            marker: marker2,
            maxPageSize: options.maxPageSize,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}
       *
       * @param offset - Starting byte position of the page ranges.
       * @param count - Number of bytes to get.
       * @param marker - A string value that identifies the portion of
       *                          the get of page ranges to be returned with the next getting operation. The
       *                          operation returns the ContinuationToken value within the response body if the
       *                          getting operation did not return all page ranges remaining within the current page.
       *                          The ContinuationToken value can be used as the value for
       *                          the marker parameter in a subsequent call to request the next page of get
       *                          items. The marker value is opaque to the client.
       * @param options - Options to List Page Ranges operation.
       */
      listPageRangeItemSegments() {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPageRangeItemSegments_1(offset = 0, count, marker2, options = {}) {
          let getPageRangeItemSegmentsResponse;
          if (!!marker2 || marker2 === void 0) {
            do {
              getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesSegment(offset, count, marker2, options));
              marker2 = getPageRangeItemSegmentsResponse.continuationToken;
              yield yield __await(yield __await(getPageRangeItemSegmentsResponse));
            } while (marker2);
          }
        }, "listPageRangeItemSegments_1"));
      }
      /**
       * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
       *
       * @param offset - Starting byte position of the page ranges.
       * @param count - Number of bytes to get.
       * @param options - Options to List Page Ranges operation.
       */
      listPageRangeItems() {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPageRangeItems_1(offset = 0, count, options = {}) {
          var _a4, e_1, _b2, _c2;
          let marker2;
          try {
            for (var _d2 = true, _e2 = __asyncValues(this.listPageRangeItemSegments(offset, count, marker2, options)), _f; _f = yield __await(_e2.next()), _a4 = _f.done, !_a4; _d2 = true) {
              _c2 = _f.value;
              _d2 = false;
              const getPageRangesSegment = _c2;
              yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (!_d2 && !_a4 && (_b2 = _e2.return)) yield __await(_b2.call(_e2));
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }, "listPageRangeItems_1"));
      }
      /**
       * Returns an async iterable iterator to list of page ranges for a page blob.
       * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
       *
       *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.
       *
       * Example using `for await` syntax:
       *
       * ```js
       * // Get the pageBlobClient before you run these snippets,
       * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
       * let i = 1;
       * for await (const pageRange of pageBlobClient.listPageRanges()) {
       *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
       * }
       * ```
       *
       * Example using `iter.next()`:
       *
       * ```js
       * let i = 1;
       * let iter = pageBlobClient.listPageRanges();
       * let pageRangeItem = await iter.next();
       * while (!pageRangeItem.done) {
       *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
       *   pageRangeItem = await iter.next();
       * }
       * ```
       *
       * Example using `byPage()`:
       *
       * ```js
       * // passing optional maxPageSize in the page settings
       * let i = 1;
       * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {
       *   for (const pageRange of response) {
       *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
       *   }
       * }
       * ```
       *
       * Example using paging with a marker:
       *
       * ```js
       * let i = 1;
       * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });
       * let response = (await iterator.next()).value;
       *
       * // Prints 2 page ranges
       * for (const pageRange of response) {
       *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
       * }
       *
       * // Gets next marker
       * let marker = response.continuationToken;
       *
       * // Passing next marker as continuationToken
       *
       * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });
       * response = (await iterator.next()).value;
       *
       * // Prints 10 page ranges
       * for (const blob of response) {
       *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
       * }
       * ```
       * @param offset - Starting byte position of the page ranges.
       * @param count - Number of bytes to get.
       * @param options - Options to the Page Blob Get Ranges operation.
       * @returns An asyncIterableIterator that supports paging.
       */
      listPageRanges(offset = 0, count, options = {}) {
        options.conditions = options.conditions || {};
        const iter = this.listPageRangeItems(offset, count, options);
        return {
          /**
           * The next method, part of the iteration protocol
           */
          next() {
            return iter.next();
          },
          /**
           * The connection to the async iterator, part of the iteration protocol
           */
          [Symbol.asyncIterator]() {
            return this;
          },
          /**
           * Return an AsyncIterableIterator that works a page at a time
           */
          byPage: /* @__PURE__ */ __name((settings2 = {}) => {
            return this.listPageRangeItemSegments(offset, count, settings2.continuationToken, Object.assign({ maxPageSize: settings2.maxPageSize }, options));
          }, "byPage")
        };
      }
      /**
       * Gets the collection of page ranges that differ between a specified snapshot and this page blob.
       * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
       *
       * @param offset - Starting byte position of the page blob
       * @param count - Number of bytes to get ranges diff.
       * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
       * @param options - Options to the Page Blob Get Page Ranges Diff operation.
       * @returns Response data for the Page Blob Get Page Range Diff operation.
       */
      async getPageRangesDiff(offset, count, prevSnapshot, options = {}) {
        options.conditions = options.conditions || {};
        return tracingClient.withSpan("PageBlobClient-getPageRangesDiff", options, async (updatedOptions) => {
          var _a4;
          const result = assertResponse(await this.pageBlobContext.getPageRangesDiff({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            prevsnapshot: prevSnapshot,
            range: rangeToString({ offset, count }),
            tracingOptions: updatedOptions.tracingOptions
          }));
          return rangeResponseFromModel(result);
        });
      }
      /**
       * getPageRangesDiffSegment returns a single segment of page ranges starting from the
       * specified Marker for difference between previous snapshot and the target page blob.
       * Use an empty Marker to start enumeration from the beginning.
       * After getting a segment, process it, and then call getPageRangesDiffSegment again
       * (passing the the previously-returned Marker) to get the next segment.
       * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
       *
       * @param offset - Starting byte position of the page ranges.
       * @param count - Number of bytes to get.
       * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
       * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.
       * @param options - Options to the Page Blob Get Page Ranges Diff operation.
       */
      async listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker2, options = {}) {
        return tracingClient.withSpan("PageBlobClient-getPageRangesDiffSegment", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.pageBlobContext.getPageRangesDiff({
            abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,
            leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), { ifTags: (_a4 = options === null || options === void 0 ? void 0 : options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            prevsnapshot: prevSnapshotOrUrl,
            range: rangeToString({
              offset,
              count
            }),
            marker: marker2,
            maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}
       *
       *
       * @param offset - Starting byte position of the page ranges.
       * @param count - Number of bytes to get.
       * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
       * @param marker - A string value that identifies the portion of
       *                          the get of page ranges to be returned with the next getting operation. The
       *                          operation returns the ContinuationToken value within the response body if the
       *                          getting operation did not return all page ranges remaining within the current page.
       *                          The ContinuationToken value can be used as the value for
       *                          the marker parameter in a subsequent call to request the next page of get
       *                          items. The marker value is opaque to the client.
       * @param options - Options to the Page Blob Get Page Ranges Diff operation.
       */
      listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker2, options) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPageRangeDiffItemSegments_1() {
          let getPageRangeItemSegmentsResponse;
          if (!!marker2 || marker2 === void 0) {
            do {
              getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker2, options));
              marker2 = getPageRangeItemSegmentsResponse.continuationToken;
              yield yield __await(yield __await(getPageRangeItemSegmentsResponse));
            } while (marker2);
          }
        }, "listPageRangeDiffItemSegments_1"));
      }
      /**
       * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
       *
       * @param offset - Starting byte position of the page ranges.
       * @param count - Number of bytes to get.
       * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
       * @param options - Options to the Page Blob Get Page Ranges Diff operation.
       */
      listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPageRangeDiffItems_1() {
          var _a4, e_2, _b2, _c2;
          let marker2;
          try {
            for (var _d2 = true, _e2 = __asyncValues(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker2, options)), _f; _f = yield __await(_e2.next()), _a4 = _f.done, !_a4; _d2 = true) {
              _c2 = _f.value;
              _d2 = false;
              const getPageRangesSegment = _c2;
              yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (!_d2 && !_a4 && (_b2 = _e2.return)) yield __await(_b2.call(_e2));
            } finally {
              if (e_2) throw e_2.error;
            }
          }
        }, "listPageRangeDiffItems_1"));
      }
      /**
       * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
       * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
       *
       *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
       *
       * Example using `for await` syntax:
       *
       * ```js
       * // Get the pageBlobClient before you run these snippets,
       * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
       * let i = 1;
       * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {
       *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
       * }
       * ```
       *
       * Example using `iter.next()`:
       *
       * ```js
       * let i = 1;
       * let iter = pageBlobClient.listPageRangesDiff();
       * let pageRangeItem = await iter.next();
       * while (!pageRangeItem.done) {
       *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
       *   pageRangeItem = await iter.next();
       * }
       * ```
       *
       * Example using `byPage()`:
       *
       * ```js
       * // passing optional maxPageSize in the page settings
       * let i = 1;
       * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {
       *   for (const pageRange of response) {
       *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
       *   }
       * }
       * ```
       *
       * Example using paging with a marker:
       *
       * ```js
       * let i = 1;
       * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });
       * let response = (await iterator.next()).value;
       *
       * // Prints 2 page ranges
       * for (const pageRange of response) {
       *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
       * }
       *
       * // Gets next marker
       * let marker = response.continuationToken;
       *
       * // Passing next marker as continuationToken
       *
       * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });
       * response = (await iterator.next()).value;
       *
       * // Prints 10 page ranges
       * for (const blob of response) {
       *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
       * }
       * ```
       * @param offset - Starting byte position of the page ranges.
       * @param count - Number of bytes to get.
       * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
       * @param options - Options to the Page Blob Get Ranges operation.
       * @returns An asyncIterableIterator that supports paging.
       */
      listPageRangesDiff(offset, count, prevSnapshot, options = {}) {
        options.conditions = options.conditions || {};
        const iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));
        return {
          /**
           * The next method, part of the iteration protocol
           */
          next() {
            return iter.next();
          },
          /**
           * The connection to the async iterator, part of the iteration protocol
           */
          [Symbol.asyncIterator]() {
            return this;
          },
          /**
           * Return an AsyncIterableIterator that works a page at a time
           */
          byPage: /* @__PURE__ */ __name((settings2 = {}) => {
            return this.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings2.continuationToken, Object.assign({ maxPageSize: settings2.maxPageSize }, options));
          }, "byPage")
        };
      }
      /**
       * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.
       * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
       *
       * @param offset - Starting byte position of the page blob
       * @param count - Number of bytes to get ranges diff.
       * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.
       * @param options - Options to the Page Blob Get Page Ranges Diff operation.
       * @returns Response data for the Page Blob Get Page Range Diff operation.
       */
      async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl2, options = {}) {
        options.conditions = options.conditions || {};
        return tracingClient.withSpan("PageBlobClient-GetPageRangesDiffForManagedDisks", options, async (updatedOptions) => {
          var _a4;
          const response = assertResponse(await this.pageBlobContext.getPageRangesDiff({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            prevSnapshotUrl: prevSnapshotUrl2,
            range: rangeToString({ offset, count }),
            tracingOptions: updatedOptions.tracingOptions
          }));
          return rangeResponseFromModel(response);
        });
      }
      /**
       * Resizes the page blob to the specified size (which must be a multiple of 512).
       * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
       *
       * @param size - Target size
       * @param options - Options to the Page Blob Resize operation.
       * @returns Response data for the Page Blob Resize operation.
       */
      async resize(size, options = {}) {
        options.conditions = options.conditions || {};
        return tracingClient.withSpan("PageBlobClient-resize", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.pageBlobContext.resize(size, {
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Sets a page blob's sequence number.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
       *
       * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.
       * @param sequenceNumber - Required if sequenceNumberAction is max or update
       * @param options - Options to the Page Blob Update Sequence Number operation.
       * @returns Response data for the Page Blob Update Sequence Number operation.
       */
      async updateSequenceNumber(sequenceNumberAction2, sequenceNumber, options = {}) {
        options.conditions = options.conditions || {};
        return tracingClient.withSpan("PageBlobClient-updateSequenceNumber", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction2, {
            abortSignal: options.abortSignal,
            blobSequenceNumber: sequenceNumber,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.
       * The snapshot is copied such that only the differential changes between the previously
       * copied snapshot are transferred to the destination.
       * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.
       * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob
       * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
       *
       * @param copySource - Specifies the name of the source page blob snapshot. For example,
       *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
       * @param options - Options to the Page Blob Copy Incremental operation.
       * @returns Response data for the Page Blob Copy Incremental operation.
       */
      async startCopyIncremental(copySource2, options = {}) {
        return tracingClient.withSpan("PageBlobClient-startCopyIncremental", options, async (updatedOptions) => {
          var _a4;
          return assertResponse(await this.pageBlobContext.copyIncremental(copySource2, {
            abortSignal: options.abortSignal,
            modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a4 = options.conditions) === null || _a4 === void 0 ? void 0 : _a4.tagConditions }),
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js
async function getBodyAsText(batchResponse) {
  let buffer2 = Buffer.alloc(BATCH_MAX_PAYLOAD_IN_BYTES);
  const responseLength = await streamToBuffer2(batchResponse.readableStreamBody, buffer2);
  buffer2 = buffer2.slice(0, responseLength);
  return buffer2.toString();
}
function utf8ByteLength(str) {
  return Buffer.byteLength(str);
}
var init_BatchUtils = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js"() {
    "use strict";
    init_utils_node();
    init_constants2();
    __name(getBodyAsText, "getBodyAsText");
    __name(utf8ByteLength, "utf8ByteLength");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js
var HTTP_HEADER_DELIMITER, SPACE_DELIMITER, NOT_FOUND, BatchResponseParser;
var init_BatchResponseParser = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js"() {
    "use strict";
    init_esm6();
    init_esm9();
    init_constants2();
    init_BatchUtils();
    init_log4();
    HTTP_HEADER_DELIMITER = ": ";
    SPACE_DELIMITER = " ";
    NOT_FOUND = -1;
    BatchResponseParser = class {
      static {
        __name(this, "BatchResponseParser");
      }
      constructor(batchResponse, subRequests) {
        if (!batchResponse || !batchResponse.contentType) {
          throw new RangeError("batchResponse is malformed or doesn't contain valid content-type.");
        }
        if (!subRequests || subRequests.size === 0) {
          throw new RangeError("Invalid state: subRequests is not provided or size is 0.");
        }
        this.batchResponse = batchResponse;
        this.subRequests = subRequests;
        this.responseBatchBoundary = this.batchResponse.contentType.split("=")[1];
        this.perResponsePrefix = `--${this.responseBatchBoundary}${HTTP_LINE_ENDING}`;
        this.batchResponseEnding = `--${this.responseBatchBoundary}--`;
      }
      // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response
      async parseBatchResponse() {
        if (this.batchResponse._response.status !== HTTPURLConnection.HTTP_ACCEPTED) {
          throw new Error(`Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`);
        }
        const responseBodyAsText = await getBodyAsText(this.batchResponse);
        const subResponses = responseBodyAsText.split(this.batchResponseEnding)[0].split(this.perResponsePrefix).slice(1);
        const subResponseCount = subResponses.length;
        if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) {
          throw new Error("Invalid state: sub responses' count is not equal to sub requests' count.");
        }
        const deserializedSubResponses = new Array(subResponseCount);
        let subResponsesSucceededCount = 0;
        let subResponsesFailedCount = 0;
        for (let index2 = 0; index2 < subResponseCount; index2++) {
          const subResponse = subResponses[index2];
          const deserializedSubResponse = {};
          deserializedSubResponse.headers = toHttpHeadersLike(createHttpHeaders());
          const responseLines = subResponse.split(`${HTTP_LINE_ENDING}`);
          let subRespHeaderStartFound = false;
          let subRespHeaderEndFound = false;
          let subRespFailed = false;
          let contentId = NOT_FOUND;
          for (const responseLine of responseLines) {
            if (!subRespHeaderStartFound) {
              if (responseLine.startsWith(HeaderConstants.CONTENT_ID)) {
                contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);
              }
              if (responseLine.startsWith(HTTP_VERSION_1_1)) {
                subRespHeaderStartFound = true;
                const tokens = responseLine.split(SPACE_DELIMITER);
                deserializedSubResponse.status = parseInt(tokens[1]);
                deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);
              }
              continue;
            }
            if (responseLine.trim() === "") {
              if (!subRespHeaderEndFound) {
                subRespHeaderEndFound = true;
              }
              continue;
            }
            if (!subRespHeaderEndFound) {
              if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {
                throw new Error(`Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`);
              }
              const tokens = responseLine.split(HTTP_HEADER_DELIMITER);
              deserializedSubResponse.headers.set(tokens[0], tokens[1]);
              if (tokens[0] === HeaderConstants.X_MS_ERROR_CODE) {
                deserializedSubResponse.errorCode = tokens[1];
                subRespFailed = true;
              }
            } else {
              if (!deserializedSubResponse.bodyAsText) {
                deserializedSubResponse.bodyAsText = "";
              }
              deserializedSubResponse.bodyAsText += responseLine;
            }
          }
          if (contentId !== NOT_FOUND && Number.isInteger(contentId) && contentId >= 0 && contentId < this.subRequests.size && deserializedSubResponses[contentId] === void 0) {
            deserializedSubResponse._request = this.subRequests.get(contentId);
            deserializedSubResponses[contentId] = deserializedSubResponse;
          } else {
            logger4.error(`subResponses[${index2}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`);
          }
          if (subRespFailed) {
            subResponsesFailedCount++;
          } else {
            subResponsesSucceededCount++;
          }
        }
        return {
          subResponses: deserializedSubResponses,
          subResponsesSucceededCount,
          subResponsesFailedCount
        };
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js
var MutexLockStatus, Mutex;
var init_Mutex = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js"() {
    "use strict";
    (function(MutexLockStatus2) {
      MutexLockStatus2[MutexLockStatus2["LOCKED"] = 0] = "LOCKED";
      MutexLockStatus2[MutexLockStatus2["UNLOCKED"] = 1] = "UNLOCKED";
    })(MutexLockStatus || (MutexLockStatus = {}));
    Mutex = class {
      static {
        __name(this, "Mutex");
      }
      /**
       * Lock for a specific key. If the lock has been acquired by another customer, then
       * will wait until getting the lock.
       *
       * @param key - lock key
       */
      static async lock(key) {
        return new Promise((resolve2) => {
          if (this.keys[key] === void 0 || this.keys[key] === MutexLockStatus.UNLOCKED) {
            this.keys[key] = MutexLockStatus.LOCKED;
            resolve2();
          } else {
            this.onUnlockEvent(key, () => {
              this.keys[key] = MutexLockStatus.LOCKED;
              resolve2();
            });
          }
        });
      }
      /**
       * Unlock a key.
       *
       * @param key -
       */
      static async unlock(key) {
        return new Promise((resolve2) => {
          if (this.keys[key] === MutexLockStatus.LOCKED) {
            this.emitUnlockEvent(key);
          }
          delete this.keys[key];
          resolve2();
        });
      }
      static onUnlockEvent(key, handler) {
        if (this.listeners[key] === void 0) {
          this.listeners[key] = [handler];
        } else {
          this.listeners[key].push(handler);
        }
      }
      static emitUnlockEvent(key) {
        if (this.listeners[key] !== void 0 && this.listeners[key].length > 0) {
          const handler = this.listeners[key].shift();
          setImmediate(() => {
            handler.call(this);
          });
        }
      }
    };
    Mutex.keys = {};
    Mutex.listeners = {};
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js
function batchRequestAssemblePolicy(batchRequest) {
  return {
    name: "batchRequestAssemblePolicy",
    async sendRequest(request3) {
      batchRequest.appendSubRequestToBody(request3);
      return {
        request: request3,
        status: 200,
        headers: createHttpHeaders()
      };
    }
  };
}
function batchHeaderFilterPolicy() {
  return {
    name: "batchHeaderFilterPolicy",
    async sendRequest(request3, next2) {
      let xMsHeaderName = "";
      for (const [name2] of request3.headers) {
        if (iEqual(name2, HeaderConstants.X_MS_VERSION)) {
          xMsHeaderName = name2;
        }
      }
      if (xMsHeaderName !== "") {
        request3.headers.delete(xMsHeaderName);
      }
      return next2(request3);
    }
  };
}
var BlobBatch, InnerBatchRequest;
var init_BlobBatch = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js"() {
    "use strict";
    init_esm3();
    init_esm7();
    init_esm6();
    init_esm3();
    init_AnonymousCredential();
    init_Clients();
    init_Mutex();
    init_Pipeline();
    init_utils_common();
    init_esm10();
    init_constants2();
    init_StorageSharedKeyCredential();
    init_tracing();
    init_esm8();
    init_StorageSharedKeyCredentialPolicyV2();
    BlobBatch = class {
      static {
        __name(this, "BlobBatch");
      }
      constructor() {
        this.batch = "batch";
        this.batchRequest = new InnerBatchRequest();
      }
      /**
       * Get the value of Content-Type for a batch request.
       * The value must be multipart/mixed with a batch boundary.
       * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252
       */
      getMultiPartContentType() {
        return this.batchRequest.getMultipartContentType();
      }
      /**
       * Get assembled HTTP request body for sub requests.
       */
      getHttpRequestBody() {
        return this.batchRequest.getHttpRequestBody();
      }
      /**
       * Get sub requests that are added into the batch request.
       */
      getSubRequests() {
        return this.batchRequest.getSubRequests();
      }
      async addSubRequestInternal(subRequest, assembleSubRequestFunc) {
        await Mutex.lock(this.batch);
        try {
          this.batchRequest.preAddSubRequest(subRequest);
          await assembleSubRequestFunc();
          this.batchRequest.postAddSubRequest(subRequest);
        } finally {
          await Mutex.unlock(this.batch);
        }
      }
      setBatchType(batchType) {
        if (!this.batchType) {
          this.batchType = batchType;
        }
        if (this.batchType !== batchType) {
          throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);
        }
      }
      async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {
        let url2;
        let credential;
        if (typeof urlOrBlobClient === "string" && (isNode && credentialOrOptions instanceof StorageSharedKeyCredential || credentialOrOptions instanceof AnonymousCredential || isTokenCredential(credentialOrOptions))) {
          url2 = urlOrBlobClient;
          credential = credentialOrOptions;
        } else if (urlOrBlobClient instanceof BlobClient) {
          url2 = urlOrBlobClient.url;
          credential = urlOrBlobClient.credential;
          options = credentialOrOptions;
        } else {
          throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
        }
        if (!options) {
          options = {};
        }
        return tracingClient.withSpan("BatchDeleteRequest-addSubRequest", options, async (updatedOptions) => {
          this.setBatchType("delete");
          await this.addSubRequestInternal({
            url: url2,
            credential
          }, async () => {
            await new BlobClient(url2, this.batchRequest.createPipeline(credential)).delete(updatedOptions);
          });
        });
      }
      async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {
        let url2;
        let credential;
        let tier2;
        if (typeof urlOrBlobClient === "string" && (isNode && credentialOrTier instanceof StorageSharedKeyCredential || credentialOrTier instanceof AnonymousCredential || isTokenCredential(credentialOrTier))) {
          url2 = urlOrBlobClient;
          credential = credentialOrTier;
          tier2 = tierOrOptions;
        } else if (urlOrBlobClient instanceof BlobClient) {
          url2 = urlOrBlobClient.url;
          credential = urlOrBlobClient.credential;
          tier2 = credentialOrTier;
          options = tierOrOptions;
        } else {
          throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
        }
        if (!options) {
          options = {};
        }
        return tracingClient.withSpan("BatchSetTierRequest-addSubRequest", options, async (updatedOptions) => {
          this.setBatchType("setAccessTier");
          await this.addSubRequestInternal({
            url: url2,
            credential
          }, async () => {
            await new BlobClient(url2, this.batchRequest.createPipeline(credential)).setAccessTier(tier2, updatedOptions);
          });
        });
      }
    };
    InnerBatchRequest = class {
      static {
        __name(this, "InnerBatchRequest");
      }
      constructor() {
        this.operationCount = 0;
        this.body = "";
        const tempGuid = randomUUID();
        this.boundary = `batch_${tempGuid}`;
        this.subRequestPrefix = `--${this.boundary}${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TYPE}: application/http${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;
        this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;
        this.batchRequestEnding = `--${this.boundary}--`;
        this.subRequests = /* @__PURE__ */ new Map();
      }
      /**
       * Create pipeline to assemble sub requests. The idea here is to use existing
       * credential and serialization/deserialization components, with additional policies to
       * filter unnecessary headers, assemble sub requests into request's body
       * and intercept request from going to wire.
       * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
       */
      createPipeline(credential) {
        const corePipeline = createEmptyPipeline();
        corePipeline.addPolicy(serializationPolicy({
          stringifyXML,
          serializerOptions: {
            xml: {
              xmlCharKey: "#"
            }
          }
        }), { phase: "Serialize" });
        corePipeline.addPolicy(batchHeaderFilterPolicy());
        corePipeline.addPolicy(batchRequestAssemblePolicy(this), { afterPhase: "Sign" });
        if (isTokenCredential(credential)) {
          corePipeline.addPolicy(bearerTokenAuthenticationPolicy({
            credential,
            scopes: StorageOAuthScopes,
            challengeCallbacks: { authorizeRequestOnChallenge: authorizeRequestOnTenantChallenge }
          }), { phase: "Sign" });
        } else if (credential instanceof StorageSharedKeyCredential) {
          corePipeline.addPolicy(storageSharedKeyCredentialPolicy({
            accountName: credential.accountName,
            accountKey: credential.accountKey
          }), { phase: "Sign" });
        }
        const pipeline = new Pipeline([]);
        pipeline._credential = credential;
        pipeline._corePipeline = corePipeline;
        return pipeline;
      }
      appendSubRequestToBody(request3) {
        this.body += [
          this.subRequestPrefix,
          // sub request constant prefix
          `${HeaderConstants.CONTENT_ID}: ${this.operationCount}`,
          // sub request's content ID
          "",
          // empty line after sub request's content ID
          `${request3.method.toString()} ${getURLPathAndQuery(request3.url)} ${HTTP_VERSION_1_1}${HTTP_LINE_ENDING}`
          // sub request start line with method
        ].join(HTTP_LINE_ENDING);
        for (const [name2, value] of request3.headers) {
          this.body += `${name2}: ${value}${HTTP_LINE_ENDING}`;
        }
        this.body += HTTP_LINE_ENDING;
      }
      preAddSubRequest(subRequest) {
        if (this.operationCount >= BATCH_MAX_REQUEST) {
          throw new RangeError(`Cannot exceed ${BATCH_MAX_REQUEST} sub requests in a single batch`);
        }
        const path14 = getURLPath(subRequest.url);
        if (!path14 || path14 === "") {
          throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);
        }
      }
      postAddSubRequest(subRequest) {
        this.subRequests.set(this.operationCount, subRequest);
        this.operationCount++;
      }
      // Return the http request body with assembling the ending line to the sub request body.
      getHttpRequestBody() {
        return `${this.body}${this.batchRequestEnding}${HTTP_LINE_ENDING}`;
      }
      getMultipartContentType() {
        return this.multipartContentType;
      }
      getSubRequests() {
        return this.subRequests;
      }
    };
    __name(batchRequestAssemblePolicy, "batchRequestAssemblePolicy");
    __name(batchHeaderFilterPolicy, "batchHeaderFilterPolicy");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js
var BlobBatchClient;
var init_BlobBatchClient = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js"() {
    "use strict";
    init_BatchResponseParser();
    init_BatchUtils();
    init_BlobBatch();
    init_tracing();
    init_AnonymousCredential();
    init_StorageContextClient();
    init_Pipeline();
    init_utils_common();
    BlobBatchClient = class {
      static {
        __name(this, "BlobBatchClient");
      }
      constructor(url2, credentialOrPipeline, options) {
        let pipeline;
        if (isPipelineLike(credentialOrPipeline)) {
          pipeline = credentialOrPipeline;
        } else if (!credentialOrPipeline) {
          pipeline = newPipeline(new AnonymousCredential(), options);
        } else {
          pipeline = newPipeline(credentialOrPipeline, options);
        }
        const storageClientContext = new StorageContextClient(url2, getCoreClientOptions(pipeline));
        const path14 = getURLPath(url2);
        if (path14 && path14 !== "/") {
          this.serviceOrContainerContext = storageClientContext.container;
        } else {
          this.serviceOrContainerContext = storageClientContext.service;
        }
      }
      /**
       * Creates a {@link BlobBatch}.
       * A BlobBatch represents an aggregated set of operations on blobs.
       */
      createBatch() {
        return new BlobBatch();
      }
      async deleteBlobs(urlsOrBlobClients, credentialOrOptions, options) {
        const batch = new BlobBatch();
        for (const urlOrBlobClient of urlsOrBlobClients) {
          if (typeof urlOrBlobClient === "string") {
            await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);
          } else {
            await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);
          }
        }
        return this.submitBatch(batch);
      }
      async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, options) {
        const batch = new BlobBatch();
        for (const urlOrBlobClient of urlsOrBlobClients) {
          if (typeof urlOrBlobClient === "string") {
            await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);
          } else {
            await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);
          }
        }
        return this.submitBatch(batch);
      }
      /**
       * Submit batch request which consists of multiple subrequests.
       *
       * Get `blobBatchClient` and other details before running the snippets.
       * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`
       *
       * Example usage:
       *
       * ```js
       * let batchRequest = new BlobBatch();
       * await batchRequest.deleteBlob(urlInString0, credential0);
       * await batchRequest.deleteBlob(urlInString1, credential1, {
       *  deleteSnapshots: "include"
       * });
       * const batchResp = await blobBatchClient.submitBatch(batchRequest);
       * console.log(batchResp.subResponsesSucceededCount);
       * ```
       *
       * Example using a lease:
       *
       * ```js
       * let batchRequest = new BlobBatch();
       * await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
       * await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
       *  conditions: { leaseId: leaseId }
       * });
       * const batchResp = await blobBatchClient.submitBatch(batchRequest);
       * console.log(batchResp.subResponsesSucceededCount);
       * ```
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
       *
       * @param batchRequest - A set of Delete or SetTier operations.
       * @param options -
       */
      async submitBatch(batchRequest, options = {}) {
        if (!batchRequest || batchRequest.getSubRequests().size === 0) {
          throw new RangeError("Batch request should contain one or more sub requests.");
        }
        return tracingClient.withSpan("BlobBatchClient-submitBatch", options, async (updatedOptions) => {
          const batchRequestBody = batchRequest.getHttpRequestBody();
          const rawBatchResponse = assertResponse(await this.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign({}, updatedOptions)));
          const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());
          const responseSummary = await batchResponseParser.parseBatchResponse();
          const res = {
            _response: rawBatchResponse._response,
            contentType: rawBatchResponse.contentType,
            errorCode: rawBatchResponse.errorCode,
            requestId: rawBatchResponse.requestId,
            clientRequestId: rawBatchResponse.clientRequestId,
            version: rawBatchResponse.version,
            subResponses: responseSummary.subResponses,
            subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,
            subResponsesFailedCount: responseSummary.subResponsesFailedCount
          };
          return res;
        });
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js
var ContainerClient;
var init_ContainerClient = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js"() {
    "use strict";
    init_tslib_es6();
    init_esm6();
    init_esm3();
    init_esm7();
    init_AnonymousCredential();
    init_StorageSharedKeyCredential();
    init_Pipeline();
    init_StorageClient();
    init_tracing();
    init_utils_common();
    init_BlobSASSignatureValues();
    init_BlobLeaseClient();
    init_Clients();
    init_BlobBatchClient();
    ContainerClient = class extends StorageClient2 {
      static {
        __name(this, "ContainerClient");
      }
      /**
       * The name of the container.
       */
      get containerName() {
        return this._containerName;
      }
      constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, options) {
        let pipeline;
        let url2;
        options = options || {};
        if (isPipelineLike(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          pipeline = credentialOrPipelineOrContainerName;
        } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
          url2 = urlOrConnectionString;
          pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
          url2 = urlOrConnectionString;
          pipeline = newPipeline(new AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string") {
          const containerName = credentialOrPipelineOrContainerName;
          const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
          if (extractedCreds.kind === "AccountConnString") {
            if (isNode) {
              const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
              url2 = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName));
              if (!options.proxyOptions) {
                options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
              }
              pipeline = newPipeline(sharedKeyCredential, options);
            } else {
              throw new Error("Account connection string is only supported in Node.js environment");
            }
          } else if (extractedCreds.kind === "SASConnString") {
            url2 = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)) + "?" + extractedCreds.accountSas;
            pipeline = newPipeline(new AnonymousCredential(), options);
          } else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
          }
        } else {
          throw new Error("Expecting non-empty strings for containerName parameter");
        }
        super(url2, pipeline);
        this._containerName = this.getContainerNameFromUrl();
        this.containerContext = this.storageClientContext.container;
      }
      /**
       * Creates a new container under the specified account. If the container with
       * the same name already exists, the operation fails.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
       * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
       *
       * @param options - Options to Container Create operation.
       *
       *
       * Example usage:
       *
       * ```js
       * const containerClient = blobServiceClient.getContainerClient("<container name>");
       * const createContainerResponse = await containerClient.create();
       * console.log("Container was created successfully", createContainerResponse.requestId);
       * ```
       */
      async create(options = {}) {
        return tracingClient.withSpan("ContainerClient-create", options, async (updatedOptions) => {
          return assertResponse(await this.containerContext.create(updatedOptions));
        });
      }
      /**
       * Creates a new container under the specified account. If the container with
       * the same name already exists, it is not changed.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
       * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
       *
       * @param options -
       */
      async createIfNotExists(options = {}) {
        return tracingClient.withSpan("ContainerClient-createIfNotExists", options, async (updatedOptions) => {
          var _a4, _b2;
          try {
            const res = await this.create(updatedOptions);
            return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
          } catch (e3) {
            if (((_a4 = e3.details) === null || _a4 === void 0 ? void 0 : _a4.errorCode) === "ContainerAlreadyExists") {
              return Object.assign(Object.assign({ succeeded: false }, (_b2 = e3.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e3.response });
            } else {
              throw e3;
            }
          }
        });
      }
      /**
       * Returns true if the Azure container resource represented by this client exists; false otherwise.
       *
       * NOTE: use this function with care since an existing container might be deleted by other clients or
       * applications. Vice versa new containers with the same name might be added by other clients or
       * applications after this function completes.
       *
       * @param options -
       */
      async exists(options = {}) {
        return tracingClient.withSpan("ContainerClient-exists", options, async (updatedOptions) => {
          try {
            await this.getProperties({
              abortSignal: options.abortSignal,
              tracingOptions: updatedOptions.tracingOptions
            });
            return true;
          } catch (e3) {
            if (e3.statusCode === 404) {
              return false;
            }
            throw e3;
          }
        });
      }
      /**
       * Creates a {@link BlobClient}
       *
       * @param blobName - A blob name
       * @returns A new BlobClient object for the given blob name.
       */
      getBlobClient(blobName) {
        return new BlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
      }
      /**
       * Creates an {@link AppendBlobClient}
       *
       * @param blobName - An append blob name
       */
      getAppendBlobClient(blobName) {
        return new AppendBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
      }
      /**
       * Creates a {@link BlockBlobClient}
       *
       * @param blobName - A block blob name
       *
       *
       * Example usage:
       *
       * ```js
       * const content = "Hello world!";
       *
       * const blockBlobClient = containerClient.getBlockBlobClient("<blob name>");
       * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
       * ```
       */
      getBlockBlobClient(blobName) {
        return new BlockBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
      }
      /**
       * Creates a {@link PageBlobClient}
       *
       * @param blobName - A page blob name
       */
      getPageBlobClient(blobName) {
        return new PageBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
      }
      /**
       * Returns all user-defined metadata and system properties for the specified
       * container. The data returned does not include the container's list of blobs.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties
       *
       * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
       * they originally contained uppercase characters. This differs from the metadata keys returned by
       * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which
       * will retain their original casing.
       *
       * @param options - Options to Container Get Properties operation.
       */
      async getProperties(options = {}) {
        if (!options.conditions) {
          options.conditions = {};
        }
        return tracingClient.withSpan("ContainerClient-getProperties", options, async (updatedOptions) => {
          return assertResponse(await this.containerContext.getProperties(Object.assign(Object.assign({ abortSignal: options.abortSignal }, options.conditions), { tracingOptions: updatedOptions.tracingOptions })));
        });
      }
      /**
       * Marks the specified container for deletion. The container and any blobs
       * contained within it are later deleted during garbage collection.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
       *
       * @param options - Options to Container Delete operation.
       */
      async delete(options = {}) {
        if (!options.conditions) {
          options.conditions = {};
        }
        return tracingClient.withSpan("ContainerClient-delete", options, async (updatedOptions) => {
          return assertResponse(await this.containerContext.delete({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: options.conditions,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Marks the specified container for deletion if it exists. The container and any blobs
       * contained within it are later deleted during garbage collection.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
       *
       * @param options - Options to Container Delete operation.
       */
      async deleteIfExists(options = {}) {
        return tracingClient.withSpan("ContainerClient-deleteIfExists", options, async (updatedOptions) => {
          var _a4, _b2;
          try {
            const res = await this.delete(updatedOptions);
            return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
          } catch (e3) {
            if (((_a4 = e3.details) === null || _a4 === void 0 ? void 0 : _a4.errorCode) === "ContainerNotFound") {
              return Object.assign(Object.assign({ succeeded: false }, (_b2 = e3.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e3.response });
            }
            throw e3;
          }
        });
      }
      /**
       * Sets one or more user-defined name-value pairs for the specified container.
       *
       * If no option provided, or no metadata defined in the parameter, the container
       * metadata will be removed.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
       *
       * @param metadata - Replace existing metadata with this value.
       *                            If no value provided the existing metadata will be removed.
       * @param options - Options to Container Set Metadata operation.
       */
      async setMetadata(metadata3, options = {}) {
        if (!options.conditions) {
          options.conditions = {};
        }
        if (options.conditions.ifUnmodifiedSince) {
          throw new RangeError("the IfUnmodifiedSince must have their default values because they are ignored by the blob service");
        }
        return tracingClient.withSpan("ContainerClient-setMetadata", options, async (updatedOptions) => {
          return assertResponse(await this.containerContext.setMetadata({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            metadata: metadata3,
            modifiedAccessConditions: options.conditions,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Gets the permissions for the specified container. The permissions indicate
       * whether container data may be accessed publicly.
       *
       * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.
       * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl
       *
       * @param options - Options to Container Get Access Policy operation.
       */
      async getAccessPolicy(options = {}) {
        if (!options.conditions) {
          options.conditions = {};
        }
        return tracingClient.withSpan("ContainerClient-getAccessPolicy", options, async (updatedOptions) => {
          const response = assertResponse(await this.containerContext.getAccessPolicy({
            abortSignal: options.abortSignal,
            leaseAccessConditions: options.conditions,
            tracingOptions: updatedOptions.tracingOptions
          }));
          const res = {
            _response: response._response,
            blobPublicAccess: response.blobPublicAccess,
            date: response.date,
            etag: response.etag,
            errorCode: response.errorCode,
            lastModified: response.lastModified,
            requestId: response.requestId,
            clientRequestId: response.clientRequestId,
            signedIdentifiers: [],
            version: response.version
          };
          for (const identifier of response) {
            let accessPolicy = void 0;
            if (identifier.accessPolicy) {
              accessPolicy = {
                permissions: identifier.accessPolicy.permissions
              };
              if (identifier.accessPolicy.expiresOn) {
                accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);
              }
              if (identifier.accessPolicy.startsOn) {
                accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);
              }
            }
            res.signedIdentifiers.push({
              accessPolicy,
              id: identifier.id
            });
          }
          return res;
        });
      }
      /**
       * Sets the permissions for the specified container. The permissions indicate
       * whether blobs in a container may be accessed publicly.
       *
       * When you set permissions for a container, the existing permissions are replaced.
       * If no access or containerAcl provided, the existing container ACL will be
       * removed.
       *
       * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.
       * During this interval, a shared access signature that is associated with the stored access policy will
       * fail with status code 403 (Forbidden), until the access policy becomes active.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl
       *
       * @param access - The level of public access to data in the container.
       * @param containerAcl - Array of elements each having a unique Id and details of the access policy.
       * @param options - Options to Container Set Access Policy operation.
       */
      async setAccessPolicy(access2, containerAcl2, options = {}) {
        options.conditions = options.conditions || {};
        return tracingClient.withSpan("ContainerClient-setAccessPolicy", options, async (updatedOptions) => {
          const acl = [];
          for (const identifier of containerAcl2 || []) {
            acl.push({
              accessPolicy: {
                expiresOn: identifier.accessPolicy.expiresOn ? truncatedISO8061Date(identifier.accessPolicy.expiresOn) : "",
                permissions: identifier.accessPolicy.permissions,
                startsOn: identifier.accessPolicy.startsOn ? truncatedISO8061Date(identifier.accessPolicy.startsOn) : ""
              },
              id: identifier.id
            });
          }
          return assertResponse(await this.containerContext.setAccessPolicy({
            abortSignal: options.abortSignal,
            access: access2,
            containerAcl: acl,
            leaseAccessConditions: options.conditions,
            modifiedAccessConditions: options.conditions,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Get a {@link BlobLeaseClient} that manages leases on the container.
       *
       * @param proposeLeaseId - Initial proposed lease Id.
       * @returns A new BlobLeaseClient object for managing leases on the container.
       */
      getBlobLeaseClient(proposeLeaseId) {
        return new BlobLeaseClient(this, proposeLeaseId);
      }
      /**
       * Creates a new block blob, or updates the content of an existing block blob.
       *
       * Updating an existing block blob overwrites any existing metadata on the blob.
       * Partial updates are not supported; the content of the existing blob is
       * overwritten with the new content. To perform a partial update of a block blob's,
       * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.
       *
       * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},
       * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better
       * performance with concurrency uploading.
       *
       * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
       *
       * @param blobName - Name of the block blob to create or update.
       * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
       *                               which returns a new Readable stream whose offset is from data source beginning.
       * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
       *                               string including non non-Base64/Hex-encoded characters.
       * @param options - Options to configure the Block Blob Upload operation.
       * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.
       */
      async uploadBlockBlob(blobName, body2, contentLength2, options = {}) {
        return tracingClient.withSpan("ContainerClient-uploadBlockBlob", options, async (updatedOptions) => {
          const blockBlobClient = this.getBlockBlobClient(blobName);
          const response = await blockBlobClient.upload(body2, contentLength2, updatedOptions);
          return {
            blockBlobClient,
            response
          };
        });
      }
      /**
       * Marks the specified blob or snapshot for deletion. The blob is later deleted
       * during garbage collection. Note that in order to delete a blob, you must delete
       * all of its snapshots. You can delete both at the same time with the Delete
       * Blob operation.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
       *
       * @param blobName -
       * @param options - Options to Blob Delete operation.
       * @returns Block blob deletion response data.
       */
      async deleteBlob(blobName, options = {}) {
        return tracingClient.withSpan("ContainerClient-deleteBlob", options, async (updatedOptions) => {
          let blobClient = this.getBlobClient(blobName);
          if (options.versionId) {
            blobClient = blobClient.withVersion(options.versionId);
          }
          return blobClient.delete(updatedOptions);
        });
      }
      /**
       * listBlobFlatSegment returns a single segment of blobs starting from the
       * specified Marker. Use an empty Marker to start enumeration from the beginning.
       * After getting a segment, process it, and then call listBlobsFlatSegment again
       * (passing the the previously-returned Marker) to get the next segment.
       * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
       *
       * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
       * @param options - Options to Container List Blob Flat Segment operation.
       */
      async listBlobFlatSegment(marker2, options = {}) {
        return tracingClient.withSpan("ContainerClient-listBlobFlatSegment", options, async (updatedOptions) => {
          const response = assertResponse(await this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({ marker: marker2 }, options), { tracingOptions: updatedOptions.tracingOptions })));
          const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: ConvertInternalResponseOfListBlobFlat(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {
            const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: BlobNameToString(blobItemInternal.name), tags: toTags(blobItemInternal.blobTags), objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInternal.objectReplicationMetadata) });
            return blobItem;
          }) }) });
          return wrappedResponse;
        });
      }
      /**
       * listBlobHierarchySegment returns a single segment of blobs starting from
       * the specified Marker. Use an empty Marker to start enumeration from the
       * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment
       * again (passing the the previously-returned Marker) to get the next segment.
       * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
       *
       * @param delimiter - The character or string used to define the virtual hierarchy
       * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
       * @param options - Options to Container List Blob Hierarchy Segment operation.
       */
      async listBlobHierarchySegment(delimiter2, marker2, options = {}) {
        return tracingClient.withSpan("ContainerClient-listBlobHierarchySegment", options, async (updatedOptions) => {
          var _a4;
          const response = assertResponse(await this.containerContext.listBlobHierarchySegment(delimiter2, Object.assign(Object.assign({ marker: marker2 }, options), { tracingOptions: updatedOptions.tracingOptions })));
          const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: ConvertInternalResponseOfListBlobHierarchy(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {
            const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: BlobNameToString(blobItemInternal.name), tags: toTags(blobItemInternal.blobTags), objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInternal.objectReplicationMetadata) });
            return blobItem;
          }), blobPrefixes: (_a4 = response.segment.blobPrefixes) === null || _a4 === void 0 ? void 0 : _a4.map((blobPrefixInternal) => {
            const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });
            return blobPrefix;
          }) }) });
          return wrappedResponse;
        });
      }
      /**
       * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse
       *
       * @param marker - A string value that identifies the portion of
       *                          the list of blobs to be returned with the next listing operation. The
       *                          operation returns the ContinuationToken value within the response body if the
       *                          listing operation did not return all blobs remaining to be listed
       *                          with the current page. The ContinuationToken value can be used as the value for
       *                          the marker parameter in a subsequent call to request the next page of list
       *                          items. The marker value is opaque to the client.
       * @param options - Options to list blobs operation.
       */
      listSegments(marker_1) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listSegments_1(marker2, options = {}) {
          let listBlobsFlatSegmentResponse;
          if (!!marker2 || marker2 === void 0) {
            do {
              listBlobsFlatSegmentResponse = yield __await(this.listBlobFlatSegment(marker2, options));
              marker2 = listBlobsFlatSegmentResponse.continuationToken;
              yield yield __await(yield __await(listBlobsFlatSegmentResponse));
            } while (marker2);
          }
        }, "listSegments_1"));
      }
      /**
       * Returns an AsyncIterableIterator of {@link BlobItem} objects
       *
       * @param options - Options to list blobs operation.
       */
      listItems() {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listItems_1(options = {}) {
          var _a4, e_1, _b2, _c2;
          let marker2;
          try {
            for (var _d2 = true, _e2 = __asyncValues(this.listSegments(marker2, options)), _f; _f = yield __await(_e2.next()), _a4 = _f.done, !_a4; _d2 = true) {
              _c2 = _f.value;
              _d2 = false;
              const listBlobsFlatSegmentResponse = _c2;
              yield __await(yield* __asyncDelegator(__asyncValues(listBlobsFlatSegmentResponse.segment.blobItems)));
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (!_d2 && !_a4 && (_b2 = _e2.return)) yield __await(_b2.call(_e2));
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }, "listItems_1"));
      }
      /**
       * Returns an async iterable iterator to list all the blobs
       * under the specified account.
       *
       * .byPage() returns an async iterable iterator to list the blobs in pages.
       *
       * Example using `for await` syntax:
       *
       * ```js
       * // Get the containerClient before you run these snippets,
       * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>");`
       * let i = 1;
       * for await (const blob of containerClient.listBlobsFlat()) {
       *   console.log(`Blob ${i++}: ${blob.name}`);
       * }
       * ```
       *
       * Example using `iter.next()`:
       *
       * ```js
       * let i = 1;
       * let iter = containerClient.listBlobsFlat();
       * let blobItem = await iter.next();
       * while (!blobItem.done) {
       *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
       *   blobItem = await iter.next();
       * }
       * ```
       *
       * Example using `byPage()`:
       *
       * ```js
       * // passing optional maxPageSize in the page settings
       * let i = 1;
       * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {
       *   for (const blob of response.segment.blobItems) {
       *     console.log(`Blob ${i++}: ${blob.name}`);
       *   }
       * }
       * ```
       *
       * Example using paging with a marker:
       *
       * ```js
       * let i = 1;
       * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });
       * let response = (await iterator.next()).value;
       *
       * // Prints 2 blob names
       * for (const blob of response.segment.blobItems) {
       *   console.log(`Blob ${i++}: ${blob.name}`);
       * }
       *
       * // Gets next marker
       * let marker = response.continuationToken;
       *
       * // Passing next marker as continuationToken
       *
       * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });
       * response = (await iterator.next()).value;
       *
       * // Prints 10 blob names
       * for (const blob of response.segment.blobItems) {
       *   console.log(`Blob ${i++}: ${blob.name}`);
       * }
       * ```
       *
       * @param options - Options to list blobs.
       * @returns An asyncIterableIterator that supports paging.
       */
      listBlobsFlat(options = {}) {
        const include2 = [];
        if (options.includeCopy) {
          include2.push("copy");
        }
        if (options.includeDeleted) {
          include2.push("deleted");
        }
        if (options.includeMetadata) {
          include2.push("metadata");
        }
        if (options.includeSnapshots) {
          include2.push("snapshots");
        }
        if (options.includeVersions) {
          include2.push("versions");
        }
        if (options.includeUncommitedBlobs) {
          include2.push("uncommittedblobs");
        }
        if (options.includeTags) {
          include2.push("tags");
        }
        if (options.includeDeletedWithVersions) {
          include2.push("deletedwithversions");
        }
        if (options.includeImmutabilityPolicy) {
          include2.push("immutabilitypolicy");
        }
        if (options.includeLegalHold) {
          include2.push("legalhold");
        }
        if (options.prefix === "") {
          options.prefix = void 0;
        }
        const updatedOptions = Object.assign(Object.assign({}, options), include2.length > 0 ? { include: include2 } : {});
        const iter = this.listItems(updatedOptions);
        return {
          /**
           * The next method, part of the iteration protocol
           */
          next() {
            return iter.next();
          },
          /**
           * The connection to the async iterator, part of the iteration protocol
           */
          [Symbol.asyncIterator]() {
            return this;
          },
          /**
           * Return an AsyncIterableIterator that works a page at a time
           */
          byPage: /* @__PURE__ */ __name((settings2 = {}) => {
            return this.listSegments(settings2.continuationToken, Object.assign({ maxPageSize: settings2.maxPageSize }, updatedOptions));
          }, "byPage")
        };
      }
      /**
       * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse
       *
       * @param delimiter - The character or string used to define the virtual hierarchy
       * @param marker - A string value that identifies the portion of
       *                          the list of blobs to be returned with the next listing operation. The
       *                          operation returns the ContinuationToken value within the response body if the
       *                          listing operation did not return all blobs remaining to be listed
       *                          with the current page. The ContinuationToken value can be used as the value for
       *                          the marker parameter in a subsequent call to request the next page of list
       *                          items. The marker value is opaque to the client.
       * @param options - Options to list blobs operation.
       */
      listHierarchySegments(delimiter_1, marker_1) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listHierarchySegments_1(delimiter2, marker2, options = {}) {
          let listBlobsHierarchySegmentResponse;
          if (!!marker2 || marker2 === void 0) {
            do {
              listBlobsHierarchySegmentResponse = yield __await(this.listBlobHierarchySegment(delimiter2, marker2, options));
              marker2 = listBlobsHierarchySegmentResponse.continuationToken;
              yield yield __await(yield __await(listBlobsHierarchySegmentResponse));
            } while (marker2);
          }
        }, "listHierarchySegments_1"));
      }
      /**
       * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.
       *
       * @param delimiter - The character or string used to define the virtual hierarchy
       * @param options - Options to list blobs operation.
       */
      listItemsByHierarchy(delimiter_1) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listItemsByHierarchy_1(delimiter2, options = {}) {
          var _a4, e_2, _b2, _c2;
          let marker2;
          try {
            for (var _d2 = true, _e2 = __asyncValues(this.listHierarchySegments(delimiter2, marker2, options)), _f; _f = yield __await(_e2.next()), _a4 = _f.done, !_a4; _d2 = true) {
              _c2 = _f.value;
              _d2 = false;
              const listBlobsHierarchySegmentResponse = _c2;
              const segment = listBlobsHierarchySegmentResponse.segment;
              if (segment.blobPrefixes) {
                for (const prefix2 of segment.blobPrefixes) {
                  yield yield __await(Object.assign({ kind: "prefix" }, prefix2));
                }
              }
              for (const blob of segment.blobItems) {
                yield yield __await(Object.assign({ kind: "blob" }, blob));
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (!_d2 && !_a4 && (_b2 = _e2.return)) yield __await(_b2.call(_e2));
            } finally {
              if (e_2) throw e_2.error;
            }
          }
        }, "listItemsByHierarchy_1"));
      }
      /**
       * Returns an async iterable iterator to list all the blobs by hierarchy.
       * under the specified account.
       *
       * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.
       *
       * Example using `for await` syntax:
       *
       * ```js
       * for await (const item of containerClient.listBlobsByHierarchy("/")) {
       *   if (item.kind === "prefix") {
       *     console.log(`\tBlobPrefix: ${item.name}`);
       *   } else {
       *     console.log(`\tBlobItem: name - ${item.name}`);
       *   }
       * }
       * ```
       *
       * Example using `iter.next()`:
       *
       * ```js
       * let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/" });
       * let entity = await iter.next();
       * while (!entity.done) {
       *   let item = entity.value;
       *   if (item.kind === "prefix") {
       *     console.log(`\tBlobPrefix: ${item.name}`);
       *   } else {
       *     console.log(`\tBlobItem: name - ${item.name}`);
       *   }
       *   entity = await iter.next();
       * }
       * ```
       *
       * Example using `byPage()`:
       *
       * ```js
       * console.log("Listing blobs by hierarchy by page");
       * for await (const response of containerClient.listBlobsByHierarchy("/").byPage()) {
       *   const segment = response.segment;
       *   if (segment.blobPrefixes) {
       *     for (const prefix of segment.blobPrefixes) {
       *       console.log(`\tBlobPrefix: ${prefix.name}`);
       *     }
       *   }
       *   for (const blob of response.segment.blobItems) {
       *     console.log(`\tBlobItem: name - ${blob.name}`);
       *   }
       * }
       * ```
       *
       * Example using paging with a max page size:
       *
       * ```js
       * console.log("Listing blobs by hierarchy by page, specifying a prefix and a max page size");
       *
       * let i = 1;
       * for await (const response of containerClient
       *   .listBlobsByHierarchy("/", { prefix: "prefix2/sub1/" })
       *   .byPage({ maxPageSize: 2 })) {
       *   console.log(`Page ${i++}`);
       *   const segment = response.segment;
       *
       *   if (segment.blobPrefixes) {
       *     for (const prefix of segment.blobPrefixes) {
       *       console.log(`\tBlobPrefix: ${prefix.name}`);
       *     }
       *   }
       *
       *   for (const blob of response.segment.blobItems) {
       *     console.log(`\tBlobItem: name - ${blob.name}`);
       *   }
       * }
       * ```
       *
       * @param delimiter - The character or string used to define the virtual hierarchy
       * @param options - Options to list blobs operation.
       */
      listBlobsByHierarchy(delimiter2, options = {}) {
        if (delimiter2 === "") {
          throw new RangeError("delimiter should contain one or more characters");
        }
        const include2 = [];
        if (options.includeCopy) {
          include2.push("copy");
        }
        if (options.includeDeleted) {
          include2.push("deleted");
        }
        if (options.includeMetadata) {
          include2.push("metadata");
        }
        if (options.includeSnapshots) {
          include2.push("snapshots");
        }
        if (options.includeVersions) {
          include2.push("versions");
        }
        if (options.includeUncommitedBlobs) {
          include2.push("uncommittedblobs");
        }
        if (options.includeTags) {
          include2.push("tags");
        }
        if (options.includeDeletedWithVersions) {
          include2.push("deletedwithversions");
        }
        if (options.includeImmutabilityPolicy) {
          include2.push("immutabilitypolicy");
        }
        if (options.includeLegalHold) {
          include2.push("legalhold");
        }
        if (options.prefix === "") {
          options.prefix = void 0;
        }
        const updatedOptions = Object.assign(Object.assign({}, options), include2.length > 0 ? { include: include2 } : {});
        const iter = this.listItemsByHierarchy(delimiter2, updatedOptions);
        return {
          /**
           * The next method, part of the iteration protocol
           */
          async next() {
            return iter.next();
          },
          /**
           * The connection to the async iterator, part of the iteration protocol
           */
          [Symbol.asyncIterator]() {
            return this;
          },
          /**
           * Return an AsyncIterableIterator that works a page at a time
           */
          byPage: /* @__PURE__ */ __name((settings2 = {}) => {
            return this.listHierarchySegments(delimiter2, settings2.continuationToken, Object.assign({ maxPageSize: settings2.maxPageSize }, updatedOptions));
          }, "byPage")
        };
      }
      /**
       * The Filter Blobs operation enables callers to list blobs in the container whose tags
       * match a given search expression.
       *
       * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
       *                                        The given expression must evaluate to true for a blob to be returned in the results.
       *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
       *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
       * @param marker - A string value that identifies the portion of
       *                          the list of blobs to be returned with the next listing operation. The
       *                          operation returns the continuationToken value within the response body if the
       *                          listing operation did not return all blobs remaining to be listed
       *                          with the current page. The continuationToken value can be used as the value for
       *                          the marker parameter in a subsequent call to request the next page of list
       *                          items. The marker value is opaque to the client.
       * @param options - Options to find blobs by tags.
       */
      async findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options = {}) {
        return tracingClient.withSpan("ContainerClient-findBlobsByTagsSegment", options, async (updatedOptions) => {
          const response = assertResponse(await this.containerContext.filterBlobs({
            abortSignal: options.abortSignal,
            where: tagFilterSqlExpression,
            marker: marker2,
            maxPageSize: options.maxPageSize,
            tracingOptions: updatedOptions.tracingOptions
          }));
          const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {
            var _a4;
            let tagValue = "";
            if (((_a4 = blob.tags) === null || _a4 === void 0 ? void 0 : _a4.blobTagSet.length) === 1) {
              tagValue = blob.tags.blobTagSet[0].value;
            }
            return Object.assign(Object.assign({}, blob), { tags: toTags(blob.tags), tagValue });
          }) });
          return wrappedResponse;
        });
      }
      /**
       * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.
       *
       * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
       *                                         The given expression must evaluate to true for a blob to be returned in the results.
       *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
       *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
       * @param marker - A string value that identifies the portion of
       *                          the list of blobs to be returned with the next listing operation. The
       *                          operation returns the continuationToken value within the response body if the
       *                          listing operation did not return all blobs remaining to be listed
       *                          with the current page. The continuationToken value can be used as the value for
       *                          the marker parameter in a subsequent call to request the next page of list
       *                          items. The marker value is opaque to the client.
       * @param options - Options to find blobs by tags.
       */
      findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker2, options = {}) {
          let response;
          if (!!marker2 || marker2 === void 0) {
            do {
              response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options));
              response.blobs = response.blobs || [];
              marker2 = response.continuationToken;
              yield yield __await(response);
            } while (marker2);
          }
        }, "findBlobsByTagsSegments_1"));
      }
      /**
       * Returns an AsyncIterableIterator for blobs.
       *
       * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
       *                                         The given expression must evaluate to true for a blob to be returned in the results.
       *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
       *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
       * @param options - Options to findBlobsByTagsItems.
       */
      findBlobsByTagsItems(tagFilterSqlExpression_1) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {
          var _a4, e_3, _b2, _c2;
          let marker2;
          try {
            for (var _d2 = true, _e2 = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker2, options)), _f; _f = yield __await(_e2.next()), _a4 = _f.done, !_a4; _d2 = true) {
              _c2 = _f.value;
              _d2 = false;
              const segment = _c2;
              yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (!_d2 && !_a4 && (_b2 = _e2.return)) yield __await(_b2.call(_e2));
            } finally {
              if (e_3) throw e_3.error;
            }
          }
        }, "findBlobsByTagsItems_1"));
      }
      /**
       * Returns an async iterable iterator to find all blobs with specified tag
       * under the specified container.
       *
       * .byPage() returns an async iterable iterator to list the blobs in pages.
       *
       * Example using `for await` syntax:
       *
       * ```js
       * let i = 1;
       * for await (const blob of containerClient.findBlobsByTags("tagkey='tagvalue'")) {
       *   console.log(`Blob ${i++}: ${blob.name}`);
       * }
       * ```
       *
       * Example using `iter.next()`:
       *
       * ```js
       * let i = 1;
       * const iter = containerClient.findBlobsByTags("tagkey='tagvalue'");
       * let blobItem = await iter.next();
       * while (!blobItem.done) {
       *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
       *   blobItem = await iter.next();
       * }
       * ```
       *
       * Example using `byPage()`:
       *
       * ```js
       * // passing optional maxPageSize in the page settings
       * let i = 1;
       * for await (const response of containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
       *   if (response.blobs) {
       *     for (const blob of response.blobs) {
       *       console.log(`Blob ${i++}: ${blob.name}`);
       *     }
       *   }
       * }
       * ```
       *
       * Example using paging with a marker:
       *
       * ```js
       * let i = 1;
       * let iterator = containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
       * let response = (await iterator.next()).value;
       *
       * // Prints 2 blob names
       * if (response.blobs) {
       *   for (const blob of response.blobs) {
       *     console.log(`Blob ${i++}: ${blob.name}`);
       *   }
       * }
       *
       * // Gets next marker
       * let marker = response.continuationToken;
       * // Passing next marker as continuationToken
       * iterator = containerClient
       *   .findBlobsByTags("tagkey='tagvalue'")
       *   .byPage({ continuationToken: marker, maxPageSize: 10 });
       * response = (await iterator.next()).value;
       *
       * // Prints blob names
       * if (response.blobs) {
       *   for (const blob of response.blobs) {
       *      console.log(`Blob ${i++}: ${blob.name}`);
       *   }
       * }
       * ```
       *
       * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
       *                                         The given expression must evaluate to true for a blob to be returned in the results.
       *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
       *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
       * @param options - Options to find blobs by tags.
       */
      findBlobsByTags(tagFilterSqlExpression, options = {}) {
        const listSegmentOptions = Object.assign({}, options);
        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
        return {
          /**
           * The next method, part of the iteration protocol
           */
          next() {
            return iter.next();
          },
          /**
           * The connection to the async iterator, part of the iteration protocol
           */
          [Symbol.asyncIterator]() {
            return this;
          },
          /**
           * Return an AsyncIterableIterator that works a page at a time
           */
          byPage: /* @__PURE__ */ __name((settings2 = {}) => {
            return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings2.continuationToken, Object.assign({ maxPageSize: settings2.maxPageSize }, listSegmentOptions));
          }, "byPage")
        };
      }
      /**
       * The Get Account Information operation returns the sku name and account kind
       * for the specified account.
       * The Get Account Information operation is available on service versions beginning
       * with version 2018-03-28.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
       *
       * @param options - Options to the Service Get Account Info operation.
       * @returns Response data for the Service Get Account Info operation.
       */
      async getAccountInfo(options = {}) {
        return tracingClient.withSpan("ContainerClient-getAccountInfo", options, async (updatedOptions) => {
          return assertResponse(await this.containerContext.getAccountInfo({
            abortSignal: options.abortSignal,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      getContainerNameFromUrl() {
        let containerName;
        try {
          const parsedUrl = new URL(this.url);
          if (parsedUrl.hostname.split(".")[1] === "blob") {
            containerName = parsedUrl.pathname.split("/")[1];
          } else if (isIpEndpointStyle(parsedUrl)) {
            containerName = parsedUrl.pathname.split("/")[2];
          } else {
            containerName = parsedUrl.pathname.split("/")[1];
          }
          containerName = decodeURIComponent(containerName);
          if (!containerName) {
            throw new Error("Provided containerName is invalid.");
          }
          return containerName;
        } catch (error) {
          throw new Error("Unable to extract containerName with provided information.");
        }
      }
      /**
       * Only available for ContainerClient constructed with a shared key credential.
       *
       * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties
       * and parameters passed in. The SAS is signed by the shared key credential of the client.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
       *
       * @param options - Optional parameters.
       * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      generateSasUrl(options) {
        return new Promise((resolve2) => {
          if (!(this.credential instanceof StorageSharedKeyCredential)) {
            throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
          }
          const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName }, options), this.credential).toString();
          resolve2(appendToURLQuery(this.url, sas));
        });
      }
      /**
       * Only available for ContainerClient constructed with a shared key credential.
       *
       * Generates string to sign for a Blob Container Service Shared Access Signature (SAS) URI
       * based on the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
       *
       * @param options - Optional parameters.
       * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      generateSasStringToSign(options) {
        if (!(this.credential instanceof StorageSharedKeyCredential)) {
          throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
        }
        return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName }, options), this.credential).stringToSign;
      }
      /**
       * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties
       * and parameters passed in. The SAS is signed by the input user delegation key.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
       *
       * @param options - Optional parameters.
       * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`
       * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      generateUserDelegationSasUrl(options, userDelegationKey) {
        return new Promise((resolve2) => {
          const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName }, options), userDelegationKey, this.accountName).toString();
          resolve2(appendToURLQuery(this.url, sas));
        });
      }
      /**
       * Generates string to sign for a Blob Container Service Shared Access Signature (SAS) URI
       * based on the client properties and parameters passed in. The SAS is signed by the input user delegation key.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
       *
       * @param options - Optional parameters.
       * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`
       * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      generateUserDelegationSasStringToSign(options, userDelegationKey) {
        return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName }, options), userDelegationKey, this.accountName).stringToSign;
      }
      /**
       * Creates a BlobBatchClient object to conduct batch operations.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
       *
       * @returns A new BlobBatchClient object for this container.
       */
      getBlobBatchClient() {
        return new BlobBatchClient(this.url, this.pipeline);
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js
var AccountSASPermissions;
var init_AccountSASPermissions = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js"() {
    "use strict";
    AccountSASPermissions = class _AccountSASPermissions {
      static {
        __name(this, "AccountSASPermissions");
      }
      constructor() {
        this.read = false;
        this.write = false;
        this.delete = false;
        this.deleteVersion = false;
        this.list = false;
        this.add = false;
        this.create = false;
        this.update = false;
        this.process = false;
        this.tag = false;
        this.filter = false;
        this.setImmutabilityPolicy = false;
        this.permanentDelete = false;
      }
      /**
       * Parse initializes the AccountSASPermissions fields from a string.
       *
       * @param permissions -
       */
      static parse(permissions) {
        const accountSASPermissions = new _AccountSASPermissions();
        for (const c3 of permissions) {
          switch (c3) {
            case "r":
              accountSASPermissions.read = true;
              break;
            case "w":
              accountSASPermissions.write = true;
              break;
            case "d":
              accountSASPermissions.delete = true;
              break;
            case "x":
              accountSASPermissions.deleteVersion = true;
              break;
            case "l":
              accountSASPermissions.list = true;
              break;
            case "a":
              accountSASPermissions.add = true;
              break;
            case "c":
              accountSASPermissions.create = true;
              break;
            case "u":
              accountSASPermissions.update = true;
              break;
            case "p":
              accountSASPermissions.process = true;
              break;
            case "t":
              accountSASPermissions.tag = true;
              break;
            case "f":
              accountSASPermissions.filter = true;
              break;
            case "i":
              accountSASPermissions.setImmutabilityPolicy = true;
              break;
            case "y":
              accountSASPermissions.permanentDelete = true;
              break;
            default:
              throw new RangeError(`Invalid permission character: ${c3}`);
          }
        }
        return accountSASPermissions;
      }
      /**
       * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it
       * and boolean values for them.
       *
       * @param permissionLike -
       */
      static from(permissionLike) {
        const accountSASPermissions = new _AccountSASPermissions();
        if (permissionLike.read) {
          accountSASPermissions.read = true;
        }
        if (permissionLike.write) {
          accountSASPermissions.write = true;
        }
        if (permissionLike.delete) {
          accountSASPermissions.delete = true;
        }
        if (permissionLike.deleteVersion) {
          accountSASPermissions.deleteVersion = true;
        }
        if (permissionLike.filter) {
          accountSASPermissions.filter = true;
        }
        if (permissionLike.tag) {
          accountSASPermissions.tag = true;
        }
        if (permissionLike.list) {
          accountSASPermissions.list = true;
        }
        if (permissionLike.add) {
          accountSASPermissions.add = true;
        }
        if (permissionLike.create) {
          accountSASPermissions.create = true;
        }
        if (permissionLike.update) {
          accountSASPermissions.update = true;
        }
        if (permissionLike.process) {
          accountSASPermissions.process = true;
        }
        if (permissionLike.setImmutabilityPolicy) {
          accountSASPermissions.setImmutabilityPolicy = true;
        }
        if (permissionLike.permanentDelete) {
          accountSASPermissions.permanentDelete = true;
        }
        return accountSASPermissions;
      }
      /**
       * Produces the SAS permissions string for an Azure Storage account.
       * Call this method to set AccountSASSignatureValues Permissions field.
       *
       * Using this method will guarantee the resource types are in
       * an order accepted by the service.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
       *
       */
      toString() {
        const permissions = [];
        if (this.read) {
          permissions.push("r");
        }
        if (this.write) {
          permissions.push("w");
        }
        if (this.delete) {
          permissions.push("d");
        }
        if (this.deleteVersion) {
          permissions.push("x");
        }
        if (this.filter) {
          permissions.push("f");
        }
        if (this.tag) {
          permissions.push("t");
        }
        if (this.list) {
          permissions.push("l");
        }
        if (this.add) {
          permissions.push("a");
        }
        if (this.create) {
          permissions.push("c");
        }
        if (this.update) {
          permissions.push("u");
        }
        if (this.process) {
          permissions.push("p");
        }
        if (this.setImmutabilityPolicy) {
          permissions.push("i");
        }
        if (this.permanentDelete) {
          permissions.push("y");
        }
        return permissions.join("");
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js
var AccountSASResourceTypes;
var init_AccountSASResourceTypes = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js"() {
    "use strict";
    AccountSASResourceTypes = class _AccountSASResourceTypes {
      static {
        __name(this, "AccountSASResourceTypes");
      }
      constructor() {
        this.service = false;
        this.container = false;
        this.object = false;
      }
      /**
       * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an
       * Error if it encounters a character that does not correspond to a valid resource type.
       *
       * @param resourceTypes -
       */
      static parse(resourceTypes) {
        const accountSASResourceTypes = new _AccountSASResourceTypes();
        for (const c3 of resourceTypes) {
          switch (c3) {
            case "s":
              accountSASResourceTypes.service = true;
              break;
            case "c":
              accountSASResourceTypes.container = true;
              break;
            case "o":
              accountSASResourceTypes.object = true;
              break;
            default:
              throw new RangeError(`Invalid resource type: ${c3}`);
          }
        }
        return accountSASResourceTypes;
      }
      /**
       * Converts the given resource types to a string.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
       *
       */
      toString() {
        const resourceTypes = [];
        if (this.service) {
          resourceTypes.push("s");
        }
        if (this.container) {
          resourceTypes.push("c");
        }
        if (this.object) {
          resourceTypes.push("o");
        }
        return resourceTypes.join("");
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js
var AccountSASServices;
var init_AccountSASServices = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js"() {
    "use strict";
    AccountSASServices = class _AccountSASServices {
      static {
        __name(this, "AccountSASServices");
      }
      constructor() {
        this.blob = false;
        this.file = false;
        this.queue = false;
        this.table = false;
      }
      /**
       * Creates an {@link AccountSASServices} from the specified services string. This method will throw an
       * Error if it encounters a character that does not correspond to a valid service.
       *
       * @param services -
       */
      static parse(services) {
        const accountSASServices = new _AccountSASServices();
        for (const c3 of services) {
          switch (c3) {
            case "b":
              accountSASServices.blob = true;
              break;
            case "f":
              accountSASServices.file = true;
              break;
            case "q":
              accountSASServices.queue = true;
              break;
            case "t":
              accountSASServices.table = true;
              break;
            default:
              throw new RangeError(`Invalid service character: ${c3}`);
          }
        }
        return accountSASServices;
      }
      /**
       * Converts the given services to a string.
       *
       */
      toString() {
        const services = [];
        if (this.blob) {
          services.push("b");
        }
        if (this.table) {
          services.push("t");
        }
        if (this.queue) {
          services.push("q");
        }
        if (this.file) {
          services.push("f");
        }
        return services.join("");
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js
function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {
  return generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential).sasQueryParameters;
}
function generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential) {
  const version3 = accountSASSignatureValues.version ? accountSASSignatureValues.version : SERVICE_VERSION;
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.setImmutabilityPolicy && version3 < "2020-08-04") {
    throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version3 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when provided 'x' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.permanentDelete && version3 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when provided 'y' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version3 < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 't' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version3 < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 'f' permission.");
  }
  if (accountSASSignatureValues.encryptionScope && version3 < "2020-12-06") {
    throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
  }
  const parsedPermissions = AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());
  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();
  const parsedResourceTypes = AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();
  let stringToSign;
  if (version3 >= "2020-12-06") {
    stringToSign = [
      sharedKeyCredential.accountName,
      parsedPermissions,
      parsedServices,
      parsedResourceTypes,
      accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : "",
      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),
      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : "",
      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "",
      version3,
      accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : "",
      ""
      // Account SAS requires an additional newline character
    ].join("\n");
  } else {
    stringToSign = [
      sharedKeyCredential.accountName,
      parsedPermissions,
      parsedServices,
      parsedResourceTypes,
      accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : "",
      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),
      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : "",
      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "",
      version3,
      ""
      // Account SAS requires an additional newline character
    ].join("\n");
  }
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(version3, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, accountSASSignatureValues.encryptionScope),
    stringToSign
  };
}
var init_AccountSASSignatureValues = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js"() {
    "use strict";
    init_AccountSASPermissions();
    init_AccountSASResourceTypes();
    init_AccountSASServices();
    init_SasIPRange();
    init_SASQueryParameters();
    init_constants2();
    init_utils_common();
    __name(generateAccountSASQueryParameters, "generateAccountSASQueryParameters");
    __name(generateAccountSASQueryParametersInternal, "generateAccountSASQueryParametersInternal");
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js
var BlobServiceClient;
var init_BlobServiceClient = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js"() {
    "use strict";
    init_tslib_es6();
    init_esm7();
    init_esm6();
    init_esm3();
    init_Pipeline();
    init_ContainerClient();
    init_utils_common();
    init_StorageSharedKeyCredential();
    init_AnonymousCredential();
    init_utils_common();
    init_tracing();
    init_BlobBatchClient();
    init_StorageClient();
    init_AccountSASPermissions();
    init_AccountSASSignatureValues();
    init_AccountSASServices();
    BlobServiceClient = class _BlobServiceClient extends StorageClient2 {
      static {
        __name(this, "BlobServiceClient");
      }
      /**
       *
       * Creates an instance of BlobServiceClient from connection string.
       *
       * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.
       *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
       *                                  Account connection string example -
       *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
       *                                  SAS connection string example -
       *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
       * @param options - Optional. Options to configure the HTTP pipeline.
       */
      static fromConnectionString(connectionString, options) {
        options = options || {};
        const extractedCreds = extractConnectionStringParts(connectionString);
        if (extractedCreds.kind === "AccountConnString") {
          if (isNode) {
            const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
            if (!options.proxyOptions) {
              options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
            }
            const pipeline = newPipeline(sharedKeyCredential, options);
            return new _BlobServiceClient(extractedCreds.url, pipeline);
          } else {
            throw new Error("Account connection string is only supported in Node.js environment");
          }
        } else if (extractedCreds.kind === "SASConnString") {
          const pipeline = newPipeline(new AnonymousCredential(), options);
          return new _BlobServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, pipeline);
        } else {
          throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        }
      }
      constructor(url2, credentialOrPipeline, options) {
        let pipeline;
        if (isPipelineLike(credentialOrPipeline)) {
          pipeline = credentialOrPipeline;
        } else if (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential || credentialOrPipeline instanceof AnonymousCredential || isTokenCredential(credentialOrPipeline)) {
          pipeline = newPipeline(credentialOrPipeline, options);
        } else {
          pipeline = newPipeline(new AnonymousCredential(), options);
        }
        super(url2, pipeline);
        this.serviceContext = this.storageClientContext.service;
      }
      /**
       * Creates a {@link ContainerClient} object
       *
       * @param containerName - A container name
       * @returns A new ContainerClient object for the given container name.
       *
       * Example usage:
       *
       * ```js
       * const containerClient = blobServiceClient.getContainerClient("<container name>");
       * ```
       */
      getContainerClient(containerName) {
        return new ContainerClient(appendToURLPath(this.url, encodeURIComponent(containerName)), this.pipeline);
      }
      /**
       * Create a Blob container. @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
       *
       * @param containerName - Name of the container to create.
       * @param options - Options to configure Container Create operation.
       * @returns Container creation response and the corresponding container client.
       */
      async createContainer(containerName, options = {}) {
        return tracingClient.withSpan("BlobServiceClient-createContainer", options, async (updatedOptions) => {
          const containerClient = this.getContainerClient(containerName);
          const containerCreateResponse = await containerClient.create(updatedOptions);
          return {
            containerClient,
            containerCreateResponse
          };
        });
      }
      /**
       * Deletes a Blob container.
       *
       * @param containerName - Name of the container to delete.
       * @param options - Options to configure Container Delete operation.
       * @returns Container deletion response.
       */
      async deleteContainer(containerName, options = {}) {
        return tracingClient.withSpan("BlobServiceClient-deleteContainer", options, async (updatedOptions) => {
          const containerClient = this.getContainerClient(containerName);
          return containerClient.delete(updatedOptions);
        });
      }
      /**
       * Restore a previously deleted Blob container.
       * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.
       *
       * @param deletedContainerName - Name of the previously deleted container.
       * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.
       * @param options - Options to configure Container Restore operation.
       * @returns Container deletion response.
       */
      async undeleteContainer(deletedContainerName2, deletedContainerVersion2, options = {}) {
        return tracingClient.withSpan("BlobServiceClient-undeleteContainer", options, async (updatedOptions) => {
          const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName2);
          const containerContext = containerClient["storageClientContext"].container;
          const containerUndeleteResponse = assertResponse(await containerContext.restore({
            deletedContainerName: deletedContainerName2,
            deletedContainerVersion: deletedContainerVersion2,
            tracingOptions: updatedOptions.tracingOptions
          }));
          return { containerClient, containerUndeleteResponse };
        });
      }
      /**
       * Rename an existing Blob Container.
       *
       * @param sourceContainerName - The name of the source container.
       * @param destinationContainerName - The new name of the container.
       * @param options - Options to configure Container Rename operation.
       */
      /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */
      // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.
      async renameContainer(sourceContainerName2, destinationContainerName, options = {}) {
        return tracingClient.withSpan("BlobServiceClient-renameContainer", options, async (updatedOptions) => {
          var _a4;
          const containerClient = this.getContainerClient(destinationContainerName);
          const containerContext = containerClient["storageClientContext"].container;
          const containerRenameResponse = assertResponse(await containerContext.rename(sourceContainerName2, Object.assign(Object.assign({}, updatedOptions), { sourceLeaseId: (_a4 = options.sourceCondition) === null || _a4 === void 0 ? void 0 : _a4.leaseId })));
          return { containerClient, containerRenameResponse };
        });
      }
      /**
       * Gets the properties of a storage account’s Blob service, including properties
       * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
       *
       * @param options - Options to the Service Get Properties operation.
       * @returns Response data for the Service Get Properties operation.
       */
      async getProperties(options = {}) {
        return tracingClient.withSpan("BlobServiceClient-getProperties", options, async (updatedOptions) => {
          return assertResponse(await this.serviceContext.getProperties({
            abortSignal: options.abortSignal,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Sets properties for a storage account’s Blob service endpoint, including properties
       * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties
       *
       * @param properties -
       * @param options - Options to the Service Set Properties operation.
       * @returns Response data for the Service Set Properties operation.
       */
      async setProperties(properties, options = {}) {
        return tracingClient.withSpan("BlobServiceClient-setProperties", options, async (updatedOptions) => {
          return assertResponse(await this.serviceContext.setProperties(properties, {
            abortSignal: options.abortSignal,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Retrieves statistics related to replication for the Blob service. It is only
       * available on the secondary location endpoint when read-access geo-redundant
       * replication is enabled for the storage account.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
       *
       * @param options - Options to the Service Get Statistics operation.
       * @returns Response data for the Service Get Statistics operation.
       */
      async getStatistics(options = {}) {
        return tracingClient.withSpan("BlobServiceClient-getStatistics", options, async (updatedOptions) => {
          return assertResponse(await this.serviceContext.getStatistics({
            abortSignal: options.abortSignal,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * The Get Account Information operation returns the sku name and account kind
       * for the specified account.
       * The Get Account Information operation is available on service versions beginning
       * with version 2018-03-28.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
       *
       * @param options - Options to the Service Get Account Info operation.
       * @returns Response data for the Service Get Account Info operation.
       */
      async getAccountInfo(options = {}) {
        return tracingClient.withSpan("BlobServiceClient-getAccountInfo", options, async (updatedOptions) => {
          return assertResponse(await this.serviceContext.getAccountInfo({
            abortSignal: options.abortSignal,
            tracingOptions: updatedOptions.tracingOptions
          }));
        });
      }
      /**
       * Returns a list of the containers under the specified account.
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2
       *
       * @param marker - A string value that identifies the portion of
       *                        the list of containers to be returned with the next listing operation. The
       *                        operation returns the continuationToken value within the response body if the
       *                        listing operation did not return all containers remaining to be listed
       *                        with the current page. The continuationToken value can be used as the value for
       *                        the marker parameter in a subsequent call to request the next page of list
       *                        items. The marker value is opaque to the client.
       * @param options - Options to the Service List Container Segment operation.
       * @returns Response data for the Service List Container Segment operation.
       */
      async listContainersSegment(marker2, options = {}) {
        return tracingClient.withSpan("BlobServiceClient-listContainersSegment", options, async (updatedOptions) => {
          return assertResponse(await this.serviceContext.listContainersSegment(Object.assign(Object.assign({ abortSignal: options.abortSignal, marker: marker2 }, options), { include: typeof options.include === "string" ? [options.include] : options.include, tracingOptions: updatedOptions.tracingOptions })));
        });
      }
      /**
       * The Filter Blobs operation enables callers to list blobs across all containers whose tags
       * match a given search expression. Filter blobs searches across all containers within a
       * storage account but can be scoped within the expression to a single container.
       *
       * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
       *                                        The given expression must evaluate to true for a blob to be returned in the results.
       *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
       *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
       * @param marker - A string value that identifies the portion of
       *                          the list of blobs to be returned with the next listing operation. The
       *                          operation returns the continuationToken value within the response body if the
       *                          listing operation did not return all blobs remaining to be listed
       *                          with the current page. The continuationToken value can be used as the value for
       *                          the marker parameter in a subsequent call to request the next page of list
       *                          items. The marker value is opaque to the client.
       * @param options - Options to find blobs by tags.
       */
      async findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options = {}) {
        return tracingClient.withSpan("BlobServiceClient-findBlobsByTagsSegment", options, async (updatedOptions) => {
          const response = assertResponse(await this.serviceContext.filterBlobs({
            abortSignal: options.abortSignal,
            where: tagFilterSqlExpression,
            marker: marker2,
            maxPageSize: options.maxPageSize,
            tracingOptions: updatedOptions.tracingOptions
          }));
          const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {
            var _a4;
            let tagValue = "";
            if (((_a4 = blob.tags) === null || _a4 === void 0 ? void 0 : _a4.blobTagSet.length) === 1) {
              tagValue = blob.tags.blobTagSet[0].value;
            }
            return Object.assign(Object.assign({}, blob), { tags: toTags(blob.tags), tagValue });
          }) });
          return wrappedResponse;
        });
      }
      /**
       * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.
       *
       * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
       *                                         The given expression must evaluate to true for a blob to be returned in the results.
       *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
       *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
       * @param marker - A string value that identifies the portion of
       *                          the list of blobs to be returned with the next listing operation. The
       *                          operation returns the continuationToken value within the response body if the
       *                          listing operation did not return all blobs remaining to be listed
       *                          with the current page. The continuationToken value can be used as the value for
       *                          the marker parameter in a subsequent call to request the next page of list
       *                          items. The marker value is opaque to the client.
       * @param options - Options to find blobs by tags.
       */
      findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker2, options = {}) {
          let response;
          if (!!marker2 || marker2 === void 0) {
            do {
              response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options));
              response.blobs = response.blobs || [];
              marker2 = response.continuationToken;
              yield yield __await(response);
            } while (marker2);
          }
        }, "findBlobsByTagsSegments_1"));
      }
      /**
       * Returns an AsyncIterableIterator for blobs.
       *
       * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
       *                                         The given expression must evaluate to true for a blob to be returned in the results.
       *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
       *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
       * @param options - Options to findBlobsByTagsItems.
       */
      findBlobsByTagsItems(tagFilterSqlExpression_1) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {
          var _a4, e_1, _b2, _c2;
          let marker2;
          try {
            for (var _d2 = true, _e2 = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker2, options)), _f; _f = yield __await(_e2.next()), _a4 = _f.done, !_a4; _d2 = true) {
              _c2 = _f.value;
              _d2 = false;
              const segment = _c2;
              yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (!_d2 && !_a4 && (_b2 = _e2.return)) yield __await(_b2.call(_e2));
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }, "findBlobsByTagsItems_1"));
      }
      /**
       * Returns an async iterable iterator to find all blobs with specified tag
       * under the specified account.
       *
       * .byPage() returns an async iterable iterator to list the blobs in pages.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
       *
       * Example using `for await` syntax:
       *
       * ```js
       * let i = 1;
       * for await (const blob of blobServiceClient.findBlobsByTags("tagkey='tagvalue'")) {
       *   console.log(`Blob ${i++}: ${container.name}`);
       * }
       * ```
       *
       * Example using `iter.next()`:
       *
       * ```js
       * let i = 1;
       * const iter = blobServiceClient.findBlobsByTags("tagkey='tagvalue'");
       * let blobItem = await iter.next();
       * while (!blobItem.done) {
       *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
       *   blobItem = await iter.next();
       * }
       * ```
       *
       * Example using `byPage()`:
       *
       * ```js
       * // passing optional maxPageSize in the page settings
       * let i = 1;
       * for await (const response of blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
       *   if (response.blobs) {
       *     for (const blob of response.blobs) {
       *       console.log(`Blob ${i++}: ${blob.name}`);
       *     }
       *   }
       * }
       * ```
       *
       * Example using paging with a marker:
       *
       * ```js
       * let i = 1;
       * let iterator = blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
       * let response = (await iterator.next()).value;
       *
       * // Prints 2 blob names
       * if (response.blobs) {
       *   for (const blob of response.blobs) {
       *     console.log(`Blob ${i++}: ${blob.name}`);
       *   }
       * }
       *
       * // Gets next marker
       * let marker = response.continuationToken;
       * // Passing next marker as continuationToken
       * iterator = blobServiceClient
       *   .findBlobsByTags("tagkey='tagvalue'")
       *   .byPage({ continuationToken: marker, maxPageSize: 10 });
       * response = (await iterator.next()).value;
       *
       * // Prints blob names
       * if (response.blobs) {
       *   for (const blob of response.blobs) {
       *      console.log(`Blob ${i++}: ${blob.name}`);
       *   }
       * }
       * ```
       *
       * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
       *                                         The given expression must evaluate to true for a blob to be returned in the results.
       *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
       *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
       * @param options - Options to find blobs by tags.
       */
      findBlobsByTags(tagFilterSqlExpression, options = {}) {
        const listSegmentOptions = Object.assign({}, options);
        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
        return {
          /**
           * The next method, part of the iteration protocol
           */
          next() {
            return iter.next();
          },
          /**
           * The connection to the async iterator, part of the iteration protocol
           */
          [Symbol.asyncIterator]() {
            return this;
          },
          /**
           * Return an AsyncIterableIterator that works a page at a time
           */
          byPage: /* @__PURE__ */ __name((settings2 = {}) => {
            return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings2.continuationToken, Object.assign({ maxPageSize: settings2.maxPageSize }, listSegmentOptions));
          }, "byPage")
        };
      }
      /**
       * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses
       *
       * @param marker - A string value that identifies the portion of
       *                        the list of containers to be returned with the next listing operation. The
       *                        operation returns the continuationToken value within the response body if the
       *                        listing operation did not return all containers remaining to be listed
       *                        with the current page. The continuationToken value can be used as the value for
       *                        the marker parameter in a subsequent call to request the next page of list
       *                        items. The marker value is opaque to the client.
       * @param options - Options to list containers operation.
       */
      listSegments(marker_1) {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listSegments_1(marker2, options = {}) {
          let listContainersSegmentResponse;
          if (!!marker2 || marker2 === void 0) {
            do {
              listContainersSegmentResponse = yield __await(this.listContainersSegment(marker2, options));
              listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [];
              marker2 = listContainersSegmentResponse.continuationToken;
              yield yield __await(yield __await(listContainersSegmentResponse));
            } while (marker2);
          }
        }, "listSegments_1"));
      }
      /**
       * Returns an AsyncIterableIterator for Container Items
       *
       * @param options - Options to list containers operation.
       */
      listItems() {
        return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listItems_1(options = {}) {
          var _a4, e_2, _b2, _c2;
          let marker2;
          try {
            for (var _d2 = true, _e2 = __asyncValues(this.listSegments(marker2, options)), _f; _f = yield __await(_e2.next()), _a4 = _f.done, !_a4; _d2 = true) {
              _c2 = _f.value;
              _d2 = false;
              const segment = _c2;
              yield __await(yield* __asyncDelegator(__asyncValues(segment.containerItems)));
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (!_d2 && !_a4 && (_b2 = _e2.return)) yield __await(_b2.call(_e2));
            } finally {
              if (e_2) throw e_2.error;
            }
          }
        }, "listItems_1"));
      }
      /**
       * Returns an async iterable iterator to list all the containers
       * under the specified account.
       *
       * .byPage() returns an async iterable iterator to list the containers in pages.
       *
       * Example using `for await` syntax:
       *
       * ```js
       * let i = 1;
       * for await (const container of blobServiceClient.listContainers()) {
       *   console.log(`Container ${i++}: ${container.name}`);
       * }
       * ```
       *
       * Example using `iter.next()`:
       *
       * ```js
       * let i = 1;
       * const iter = blobServiceClient.listContainers();
       * let containerItem = await iter.next();
       * while (!containerItem.done) {
       *   console.log(`Container ${i++}: ${containerItem.value.name}`);
       *   containerItem = await iter.next();
       * }
       * ```
       *
       * Example using `byPage()`:
       *
       * ```js
       * // passing optional maxPageSize in the page settings
       * let i = 1;
       * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {
       *   if (response.containerItems) {
       *     for (const container of response.containerItems) {
       *       console.log(`Container ${i++}: ${container.name}`);
       *     }
       *   }
       * }
       * ```
       *
       * Example using paging with a marker:
       *
       * ```js
       * let i = 1;
       * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });
       * let response = (await iterator.next()).value;
       *
       * // Prints 2 container names
       * if (response.containerItems) {
       *   for (const container of response.containerItems) {
       *     console.log(`Container ${i++}: ${container.name}`);
       *   }
       * }
       *
       * // Gets next marker
       * let marker = response.continuationToken;
       * // Passing next marker as continuationToken
       * iterator = blobServiceClient
       *   .listContainers()
       *   .byPage({ continuationToken: marker, maxPageSize: 10 });
       * response = (await iterator.next()).value;
       *
       * // Prints 10 container names
       * if (response.containerItems) {
       *   for (const container of response.containerItems) {
       *      console.log(`Container ${i++}: ${container.name}`);
       *   }
       * }
       * ```
       *
       * @param options - Options to list containers.
       * @returns An asyncIterableIterator that supports paging.
       */
      listContainers(options = {}) {
        if (options.prefix === "") {
          options.prefix = void 0;
        }
        const include2 = [];
        if (options.includeDeleted) {
          include2.push("deleted");
        }
        if (options.includeMetadata) {
          include2.push("metadata");
        }
        if (options.includeSystem) {
          include2.push("system");
        }
        const listSegmentOptions = Object.assign(Object.assign({}, options), include2.length > 0 ? { include: include2 } : {});
        const iter = this.listItems(listSegmentOptions);
        return {
          /**
           * The next method, part of the iteration protocol
           */
          next() {
            return iter.next();
          },
          /**
           * The connection to the async iterator, part of the iteration protocol
           */
          [Symbol.asyncIterator]() {
            return this;
          },
          /**
           * Return an AsyncIterableIterator that works a page at a time
           */
          byPage: /* @__PURE__ */ __name((settings2 = {}) => {
            return this.listSegments(settings2.continuationToken, Object.assign({ maxPageSize: settings2.maxPageSize }, listSegmentOptions));
          }, "byPage")
        };
      }
      /**
       * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).
       *
       * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
       * bearer token authentication.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
       *
       * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time
       * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time
       */
      async getUserDelegationKey(startsOn, expiresOn2, options = {}) {
        return tracingClient.withSpan("BlobServiceClient-getUserDelegationKey", options, async (updatedOptions) => {
          const response = assertResponse(await this.serviceContext.getUserDelegationKey({
            startsOn: truncatedISO8061Date(startsOn, false),
            expiresOn: truncatedISO8061Date(expiresOn2, false)
          }, {
            abortSignal: options.abortSignal,
            tracingOptions: updatedOptions.tracingOptions
          }));
          const userDelegationKey = {
            signedObjectId: response.signedObjectId,
            signedTenantId: response.signedTenantId,
            signedStartsOn: new Date(response.signedStartsOn),
            signedExpiresOn: new Date(response.signedExpiresOn),
            signedService: response.signedService,
            signedVersion: response.signedVersion,
            value: response.value
          };
          const res = Object.assign({ _response: response._response, requestId: response.requestId, clientRequestId: response.clientRequestId, version: response.version, date: response.date, errorCode: response.errorCode }, userDelegationKey);
          return res;
        });
      }
      /**
       * Creates a BlobBatchClient object to conduct batch operations.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
       *
       * @returns A new BlobBatchClient object for this service.
       */
      getBlobBatchClient() {
        return new BlobBatchClient(this.url, this.pipeline);
      }
      /**
       * Only available for BlobServiceClient constructed with a shared key credential.
       *
       * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties
       * and parameters passed in. The SAS is signed by the shared key credential of the client.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas
       *
       * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
       * @param permissions - Specifies the list of permissions to be associated with the SAS.
       * @param resourceTypes - Specifies the resource types associated with the shared access signature.
       * @param options - Optional parameters.
       * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      generateAccountSasUrl(expiresOn2, permissions = AccountSASPermissions.parse("r"), resourceTypes = "sco", options = {}) {
        if (!(this.credential instanceof StorageSharedKeyCredential)) {
          throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
        }
        if (expiresOn2 === void 0) {
          const now = /* @__PURE__ */ new Date();
          expiresOn2 = new Date(now.getTime() + 3600 * 1e3);
        }
        const sas = generateAccountSASQueryParameters(Object.assign({
          permissions,
          expiresOn: expiresOn2,
          resourceTypes,
          services: AccountSASServices.parse("b").toString()
        }, options), this.credential).toString();
        return appendToURLQuery(this.url, sas);
      }
      /**
       * Only available for BlobServiceClient constructed with a shared key credential.
       *
       * Generates string to sign for a Blob account Shared Access Signature (SAS) URI based on
       * the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.
       *
       * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas
       *
       * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
       * @param permissions - Specifies the list of permissions to be associated with the SAS.
       * @param resourceTypes - Specifies the resource types associated with the shared access signature.
       * @param options - Optional parameters.
       * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
       */
      generateSasStringToSign(expiresOn2, permissions = AccountSASPermissions.parse("r"), resourceTypes = "sco", options = {}) {
        if (!(this.credential instanceof StorageSharedKeyCredential)) {
          throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
        }
        if (expiresOn2 === void 0) {
          const now = /* @__PURE__ */ new Date();
          expiresOn2 = new Date(now.getTime() + 3600 * 1e3);
        }
        return generateAccountSASQueryParametersInternal(Object.assign({
          permissions,
          expiresOn: expiresOn2,
          resourceTypes,
          services: AccountSASServices.parse("b").toString()
        }, options), this.credential).stringToSign;
      }
    };
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js
var init_BatchResponse = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js"() {
    "use strict";
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js
var KnownEncryptionAlgorithmType2;
var init_generatedModels = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js"() {
    "use strict";
    (function(KnownEncryptionAlgorithmType3) {
      KnownEncryptionAlgorithmType3["AES256"] = "AES256";
    })(KnownEncryptionAlgorithmType2 || (KnownEncryptionAlgorithmType2 = {}));
  }
});

// node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.js
var src_exports2 = {};
__export(src_exports2, {
  AccountSASPermissions: () => AccountSASPermissions,
  AccountSASResourceTypes: () => AccountSASResourceTypes,
  AccountSASServices: () => AccountSASServices,
  AnonymousCredential: () => AnonymousCredential,
  AnonymousCredentialPolicy: () => AnonymousCredentialPolicy,
  AppendBlobClient: () => AppendBlobClient,
  BaseRequestPolicy: () => BaseRequestPolicy,
  BlobBatch: () => BlobBatch,
  BlobBatchClient: () => BlobBatchClient,
  BlobClient: () => BlobClient,
  BlobLeaseClient: () => BlobLeaseClient,
  BlobSASPermissions: () => BlobSASPermissions,
  BlobServiceClient: () => BlobServiceClient,
  BlockBlobClient: () => BlockBlobClient,
  BlockBlobTier: () => BlockBlobTier,
  ContainerClient: () => ContainerClient,
  ContainerSASPermissions: () => ContainerSASPermissions,
  Credential: () => Credential,
  CredentialPolicy: () => CredentialPolicy,
  KnownEncryptionAlgorithmType: () => KnownEncryptionAlgorithmType2,
  PageBlobClient: () => PageBlobClient,
  Pipeline: () => Pipeline,
  PremiumPageBlobTier: () => PremiumPageBlobTier,
  RestError: () => RestError,
  SASProtocol: () => SASProtocol,
  SASQueryParameters: () => SASQueryParameters,
  StorageBlobAudience: () => StorageBlobAudience,
  StorageBrowserPolicy: () => StorageBrowserPolicy,
  StorageBrowserPolicyFactory: () => StorageBrowserPolicyFactory,
  StorageOAuthScopes: () => StorageOAuthScopes,
  StorageRetryPolicy: () => StorageRetryPolicy,
  StorageRetryPolicyFactory: () => StorageRetryPolicyFactory,
  StorageRetryPolicyType: () => StorageRetryPolicyType,
  StorageSharedKeyCredential: () => StorageSharedKeyCredential,
  StorageSharedKeyCredentialPolicy: () => StorageSharedKeyCredentialPolicy,
  generateAccountSASQueryParameters: () => generateAccountSASQueryParameters,
  generateBlobSASQueryParameters: () => generateBlobSASQueryParameters,
  getBlobServiceAccountAudience: () => getBlobServiceAccountAudience,
  isPipelineLike: () => isPipelineLike,
  logger: () => logger4,
  newPipeline: () => newPipeline
});
var init_src4 = __esm({
  "node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.js"() {
    "use strict";
    init_esm6();
    init_BlobServiceClient();
    init_Clients();
    init_ContainerClient();
    init_BlobLeaseClient();
    init_AccountSASPermissions();
    init_AccountSASResourceTypes();
    init_AccountSASServices();
    init_AccountSASSignatureValues();
    init_BlobBatch();
    init_BlobBatchClient();
    init_BatchResponse();
    init_BlobSASPermissions();
    init_BlobSASSignatureValues();
    init_StorageBrowserPolicyFactory();
    init_ContainerSASPermissions();
    init_AnonymousCredential();
    init_Credential();
    init_StorageSharedKeyCredential();
    init_models2();
    init_Pipeline();
    init_RequestPolicy();
    init_AnonymousCredentialPolicy();
    init_CredentialPolicy();
    init_StorageRetryPolicyFactory();
    init_StorageSharedKeyCredentialPolicy();
    init_SASQueryParameters();
    init_generatedModels();
    init_log4();
  }
});

// node_modules/@actions/cache/lib/internal/shared/errors.js
var require_errors2 = __commonJS({
  "node_modules/@actions/cache/lib/internal/shared/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UsageError = exports2.NetworkError = exports2.GHESNotSupportedError = exports2.CacheNotFoundError = exports2.InvalidResponseError = exports2.FilesNotFoundError = void 0;
    var FilesNotFoundError = class extends Error {
      static {
        __name(this, "FilesNotFoundError");
      }
      constructor(files = []) {
        let message = "No files were found to upload";
        if (files.length > 0) {
          message += `: ${files.join(", ")}`;
        }
        super(message);
        this.files = files;
        this.name = "FilesNotFoundError";
      }
    };
    exports2.FilesNotFoundError = FilesNotFoundError;
    var InvalidResponseError = class extends Error {
      static {
        __name(this, "InvalidResponseError");
      }
      constructor(message) {
        super(message);
        this.name = "InvalidResponseError";
      }
    };
    exports2.InvalidResponseError = InvalidResponseError;
    var CacheNotFoundError = class extends Error {
      static {
        __name(this, "CacheNotFoundError");
      }
      constructor(message = "Cache not found") {
        super(message);
        this.name = "CacheNotFoundError";
      }
    };
    exports2.CacheNotFoundError = CacheNotFoundError;
    var GHESNotSupportedError = class extends Error {
      static {
        __name(this, "GHESNotSupportedError");
      }
      constructor(message = "@actions/cache v4.1.4+, actions/cache/save@v4+ and actions/cache/restore@v4+ are not currently supported on GHES.") {
        super(message);
        this.name = "GHESNotSupportedError";
      }
    };
    exports2.GHESNotSupportedError = GHESNotSupportedError;
    var NetworkError = class extends Error {
      static {
        __name(this, "NetworkError");
      }
      constructor(code) {
        const message = `Unable to make request: ${code}
If you are using self-hosted runners, please make sure your runner has access to all GitHub endpoints: https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners#communication-between-self-hosted-runners-and-github`;
        super(message);
        this.code = code;
        this.name = "NetworkError";
      }
    };
    exports2.NetworkError = NetworkError;
    NetworkError.isNetworkErrorCode = (code) => {
      if (!code)
        return false;
      return [
        "ECONNRESET",
        "ENOTFOUND",
        "ETIMEDOUT",
        "ECONNREFUSED",
        "EHOSTUNREACH"
      ].includes(code);
    };
    var UsageError = class extends Error {
      static {
        __name(this, "UsageError");
      }
      constructor() {
        const message = `Cache storage quota has been hit. Unable to upload any new cache entries. Usage is recalculated every 6-12 hours.
More info on storage limits: https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions#calculating-minute-and-storage-spending`;
        super(message);
        this.name = "UsageError";
      }
    };
    exports2.UsageError = UsageError;
    UsageError.isUsageErrorMessage = (msg) => {
      if (!msg)
        return false;
      return msg.includes("insufficient usage");
    };
  }
});

// node_modules/@actions/cache/lib/internal/uploadUtils.js
var require_uploadUtils = __commonJS({
  "node_modules/@actions/cache/lib/internal/uploadUtils.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uploadCacheArchiveSDK = exports2.UploadProgress = void 0;
    var core2 = __importStar(require_core());
    var storage_blob_1 = (init_src4(), __toCommonJS(src_exports2));
    var errors_1 = require_errors2();
    var UploadProgress = class {
      static {
        __name(this, "UploadProgress");
      }
      constructor(contentLength2) {
        this.contentLength = contentLength2;
        this.sentBytes = 0;
        this.displayedComplete = false;
        this.startTime = Date.now();
      }
      /**
       * Sets the number of bytes sent
       *
       * @param sentBytes the number of bytes sent
       */
      setSentBytes(sentBytes) {
        this.sentBytes = sentBytes;
      }
      /**
       * Returns the total number of bytes transferred.
       */
      getTransferredBytes() {
        return this.sentBytes;
      }
      /**
       * Returns true if the upload is complete.
       */
      isDone() {
        return this.getTransferredBytes() === this.contentLength;
      }
      /**
       * Prints the current upload stats. Once the upload completes, this will print one
       * last line and then stop.
       */
      display() {
        if (this.displayedComplete) {
          return;
        }
        const transferredBytes = this.sentBytes;
        const percentage = (100 * (transferredBytes / this.contentLength)).toFixed(1);
        const elapsedTime = Date.now() - this.startTime;
        const uploadSpeed = (transferredBytes / (1024 * 1024) / (elapsedTime / 1e3)).toFixed(1);
        core2.info(`Sent ${transferredBytes} of ${this.contentLength} (${percentage}%), ${uploadSpeed} MBs/sec`);
        if (this.isDone()) {
          this.displayedComplete = true;
        }
      }
      /**
       * Returns a function used to handle TransferProgressEvents.
       */
      onProgress() {
        return (progress) => {
          this.setSentBytes(progress.loadedBytes);
        };
      }
      /**
       * Starts the timer that displays the stats.
       *
       * @param delayInMs the delay between each write
       */
      startDisplayTimer(delayInMs = 1e3) {
        const displayCallback = /* @__PURE__ */ __name(() => {
          this.display();
          if (!this.isDone()) {
            this.timeoutHandle = setTimeout(displayCallback, delayInMs);
          }
        }, "displayCallback");
        this.timeoutHandle = setTimeout(displayCallback, delayInMs);
      }
      /**
       * Stops the timer that displays the stats. As this typically indicates the upload
       * is complete, this will display one last line, unless the last line has already
       * been written.
       */
      stopDisplayTimer() {
        if (this.timeoutHandle) {
          clearTimeout(this.timeoutHandle);
          this.timeoutHandle = void 0;
        }
        this.display();
      }
    };
    exports2.UploadProgress = UploadProgress;
    function uploadCacheArchiveSDK(signedUploadURL, archivePath, options) {
      var _a4;
      return __awaiter6(this, void 0, void 0, function* () {
        const blobClient = new storage_blob_1.BlobClient(signedUploadURL);
        const blockBlobClient = blobClient.getBlockBlobClient();
        const uploadProgress = new UploadProgress((_a4 = options === null || options === void 0 ? void 0 : options.archiveSizeBytes) !== null && _a4 !== void 0 ? _a4 : 0);
        const uploadOptions = {
          blockSize: options === null || options === void 0 ? void 0 : options.uploadChunkSize,
          concurrency: options === null || options === void 0 ? void 0 : options.uploadConcurrency,
          maxSingleShotSize: 128 * 1024 * 1024,
          onProgress: uploadProgress.onProgress()
        };
        try {
          uploadProgress.startDisplayTimer();
          core2.debug(`BlobClient: ${blobClient.name}:${blobClient.accountName}:${blobClient.containerName}`);
          const response = yield blockBlobClient.uploadFile(archivePath, uploadOptions);
          if (response._response.status >= 400) {
            throw new errors_1.InvalidResponseError(`uploadCacheArchiveSDK: upload failed with status code ${response._response.status}`);
          }
          return response;
        } catch (error) {
          core2.warning(`uploadCacheArchiveSDK: internal error uploading cache archive: ${error.message}`);
          throw error;
        } finally {
          uploadProgress.stopDisplayTimer();
        }
      });
    }
    __name(uploadCacheArchiveSDK, "uploadCacheArchiveSDK");
    exports2.uploadCacheArchiveSDK = uploadCacheArchiveSDK;
  }
});

// node_modules/@actions/cache/lib/internal/requestUtils.js
var require_requestUtils = __commonJS({
  "node_modules/@actions/cache/lib/internal/requestUtils.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retryHttpClientResponse = exports2.retryTypedResponse = exports2.retry = exports2.isRetryableStatusCode = exports2.isServerErrorStatusCode = exports2.isSuccessStatusCode = void 0;
    var core2 = __importStar(require_core());
    var http_client_1 = require_lib();
    var constants_1 = require_constants7();
    function isSuccessStatusCode(statusCode) {
      if (!statusCode) {
        return false;
      }
      return statusCode >= 200 && statusCode < 300;
    }
    __name(isSuccessStatusCode, "isSuccessStatusCode");
    exports2.isSuccessStatusCode = isSuccessStatusCode;
    function isServerErrorStatusCode(statusCode) {
      if (!statusCode) {
        return true;
      }
      return statusCode >= 500;
    }
    __name(isServerErrorStatusCode, "isServerErrorStatusCode");
    exports2.isServerErrorStatusCode = isServerErrorStatusCode;
    function isRetryableStatusCode(statusCode) {
      if (!statusCode) {
        return false;
      }
      const retryableStatusCodes = [
        http_client_1.HttpCodes.BadGateway,
        http_client_1.HttpCodes.ServiceUnavailable,
        http_client_1.HttpCodes.GatewayTimeout
      ];
      return retryableStatusCodes.includes(statusCode);
    }
    __name(isRetryableStatusCode, "isRetryableStatusCode");
    exports2.isRetryableStatusCode = isRetryableStatusCode;
    function sleep(milliseconds) {
      return __awaiter6(this, void 0, void 0, function* () {
        return new Promise((resolve2) => setTimeout(resolve2, milliseconds));
      });
    }
    __name(sleep, "sleep");
    function retry(name2, method, getStatusCode, maxAttempts = constants_1.DefaultRetryAttempts, delay5 = constants_1.DefaultRetryDelay, onError = void 0) {
      return __awaiter6(this, void 0, void 0, function* () {
        let errorMessage = "";
        let attempt = 1;
        while (attempt <= maxAttempts) {
          let response = void 0;
          let statusCode = void 0;
          let isRetryable = false;
          try {
            response = yield method();
          } catch (error) {
            if (onError) {
              response = onError(error);
            }
            isRetryable = true;
            errorMessage = error.message;
          }
          if (response) {
            statusCode = getStatusCode(response);
            if (!isServerErrorStatusCode(statusCode)) {
              return response;
            }
          }
          if (statusCode) {
            isRetryable = isRetryableStatusCode(statusCode);
            errorMessage = `Cache service responded with ${statusCode}`;
          }
          core2.debug(`${name2} - Attempt ${attempt} of ${maxAttempts} failed with error: ${errorMessage}`);
          if (!isRetryable) {
            core2.debug(`${name2} - Error is not retryable`);
            break;
          }
          yield sleep(delay5);
          attempt++;
        }
        throw Error(`${name2} failed: ${errorMessage}`);
      });
    }
    __name(retry, "retry");
    exports2.retry = retry;
    function retryTypedResponse(name2, method, maxAttempts = constants_1.DefaultRetryAttempts, delay5 = constants_1.DefaultRetryDelay) {
      return __awaiter6(this, void 0, void 0, function* () {
        return yield retry(
          name2,
          method,
          (response) => response.statusCode,
          maxAttempts,
          delay5,
          // If the error object contains the statusCode property, extract it and return
          // an TypedResponse<T> so it can be processed by the retry logic.
          (error) => {
            if (error instanceof http_client_1.HttpClientError) {
              return {
                statusCode: error.statusCode,
                result: null,
                headers: {},
                error
              };
            } else {
              return void 0;
            }
          }
        );
      });
    }
    __name(retryTypedResponse, "retryTypedResponse");
    exports2.retryTypedResponse = retryTypedResponse;
    function retryHttpClientResponse(name2, method, maxAttempts = constants_1.DefaultRetryAttempts, delay5 = constants_1.DefaultRetryDelay) {
      return __awaiter6(this, void 0, void 0, function* () {
        return yield retry(name2, method, (response) => response.message.statusCode, maxAttempts, delay5);
      });
    }
    __name(retryHttpClientResponse, "retryHttpClientResponse");
    exports2.retryHttpClientResponse = retryHttpClientResponse;
  }
});

// node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js
function abortSignal(signal) {
  if (signal.aborted) {
    return;
  }
  if (signal.onabort) {
    signal.onabort.call(signal);
  }
  const listeners = listenersMap.get(signal);
  if (listeners) {
    listeners.slice().forEach((listener) => {
      listener.call(signal, { type: "abort" });
    });
  }
  abortedMap.set(signal, true);
}
var listenersMap, abortedMap, AbortSignal2;
var init_AbortSignal = __esm({
  "node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js"() {
    "use strict";
    listenersMap = /* @__PURE__ */ new WeakMap();
    abortedMap = /* @__PURE__ */ new WeakMap();
    AbortSignal2 = class _AbortSignal {
      static {
        __name(this, "AbortSignal");
      }
      constructor() {
        this.onabort = null;
        listenersMap.set(this, []);
        abortedMap.set(this, false);
      }
      /**
       * Status of whether aborted or not.
       *
       * @readonly
       */
      get aborted() {
        if (!abortedMap.has(this)) {
          throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        }
        return abortedMap.get(this);
      }
      /**
       * Creates a new AbortSignal instance that will never be aborted.
       *
       * @readonly
       */
      static get none() {
        return new _AbortSignal();
      }
      /**
       * Added new "abort" event listener, only support "abort" event.
       *
       * @param _type - Only support "abort" event
       * @param listener - The listener to be added
       */
      addEventListener(_type, listener) {
        if (!listenersMap.has(this)) {
          throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        }
        const listeners = listenersMap.get(this);
        listeners.push(listener);
      }
      /**
       * Remove "abort" event listener, only support "abort" event.
       *
       * @param _type - Only support "abort" event
       * @param listener - The listener to be removed
       */
      removeEventListener(_type, listener) {
        if (!listenersMap.has(this)) {
          throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        }
        const listeners = listenersMap.get(this);
        const index2 = listeners.indexOf(listener);
        if (index2 > -1) {
          listeners.splice(index2, 1);
        }
      }
      /**
       * Dispatches a synthetic event to the AbortSignal.
       */
      dispatchEvent(_event) {
        throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
      }
    };
    __name(abortSignal, "abortSignal");
  }
});

// node_modules/@azure/abort-controller/dist-esm/src/AbortController.js
var AbortError4, AbortController2;
var init_AbortController = __esm({
  "node_modules/@azure/abort-controller/dist-esm/src/AbortController.js"() {
    "use strict";
    init_AbortSignal();
    AbortError4 = class extends Error {
      static {
        __name(this, "AbortError");
      }
      constructor(message) {
        super(message);
        this.name = "AbortError";
      }
    };
    AbortController2 = class {
      static {
        __name(this, "AbortController");
      }
      // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
      constructor(parentSignals) {
        this._signal = new AbortSignal2();
        if (!parentSignals) {
          return;
        }
        if (!Array.isArray(parentSignals)) {
          parentSignals = arguments;
        }
        for (const parentSignal of parentSignals) {
          if (parentSignal.aborted) {
            this.abort();
          } else {
            parentSignal.addEventListener("abort", () => {
              this.abort();
            });
          }
        }
      }
      /**
       * The AbortSignal associated with this controller that will signal aborted
       * when the abort method is called on this controller.
       *
       * @readonly
       */
      get signal() {
        return this._signal;
      }
      /**
       * Signal that any operations passed this controller's associated abort signal
       * to cancel any remaining work and throw an `AbortError`.
       */
      abort() {
        abortSignal(this._signal);
      }
      /**
       * Creates a new AbortSignal instance that will abort after the provided ms.
       * @param ms - Elapsed time in milliseconds to trigger an abort.
       */
      static timeout(ms2) {
        const signal = new AbortSignal2();
        const timer = setTimeout(abortSignal, ms2, signal);
        if (typeof timer.unref === "function") {
          timer.unref();
        }
        return signal;
      }
    };
  }
});

// node_modules/@azure/abort-controller/dist-esm/src/index.js
var src_exports3 = {};
__export(src_exports3, {
  AbortController: () => AbortController2,
  AbortError: () => AbortError4,
  AbortSignal: () => AbortSignal2
});
var init_src5 = __esm({
  "node_modules/@azure/abort-controller/dist-esm/src/index.js"() {
    "use strict";
    init_AbortController();
    init_AbortSignal();
  }
});

// node_modules/@actions/cache/lib/internal/downloadUtils.js
var require_downloadUtils = __commonJS({
  "node_modules/@actions/cache/lib/internal/downloadUtils.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.downloadCacheStorageSDK = exports2.downloadCacheHttpClientConcurrent = exports2.downloadCacheHttpClient = exports2.DownloadProgress = void 0;
    var core2 = __importStar(require_core());
    var http_client_1 = require_lib();
    var storage_blob_1 = (init_src4(), __toCommonJS(src_exports2));
    var buffer2 = __importStar(__require("buffer"));
    var fs4 = __importStar(__require("fs"));
    var stream = __importStar(__require("stream"));
    var util3 = __importStar(__require("util"));
    var utils = __importStar(require_cacheUtils());
    var constants_1 = require_constants7();
    var requestUtils_1 = require_requestUtils();
    var abort_controller_1 = (init_src5(), __toCommonJS(src_exports3));
    function pipeResponseToStream(response, output) {
      return __awaiter6(this, void 0, void 0, function* () {
        const pipeline = util3.promisify(stream.pipeline);
        yield pipeline(response.message, output);
      });
    }
    __name(pipeResponseToStream, "pipeResponseToStream");
    var DownloadProgress = class {
      static {
        __name(this, "DownloadProgress");
      }
      constructor(contentLength2) {
        this.contentLength = contentLength2;
        this.segmentIndex = 0;
        this.segmentSize = 0;
        this.segmentOffset = 0;
        this.receivedBytes = 0;
        this.displayedComplete = false;
        this.startTime = Date.now();
      }
      /**
       * Progress to the next segment. Only call this method when the previous segment
       * is complete.
       *
       * @param segmentSize the length of the next segment
       */
      nextSegment(segmentSize) {
        this.segmentOffset = this.segmentOffset + this.segmentSize;
        this.segmentIndex = this.segmentIndex + 1;
        this.segmentSize = segmentSize;
        this.receivedBytes = 0;
        core2.debug(`Downloading segment at offset ${this.segmentOffset} with length ${this.segmentSize}...`);
      }
      /**
       * Sets the number of bytes received for the current segment.
       *
       * @param receivedBytes the number of bytes received
       */
      setReceivedBytes(receivedBytes) {
        this.receivedBytes = receivedBytes;
      }
      /**
       * Returns the total number of bytes transferred.
       */
      getTransferredBytes() {
        return this.segmentOffset + this.receivedBytes;
      }
      /**
       * Returns true if the download is complete.
       */
      isDone() {
        return this.getTransferredBytes() === this.contentLength;
      }
      /**
       * Prints the current download stats. Once the download completes, this will print one
       * last line and then stop.
       */
      display() {
        if (this.displayedComplete) {
          return;
        }
        const transferredBytes = this.segmentOffset + this.receivedBytes;
        const percentage = (100 * (transferredBytes / this.contentLength)).toFixed(1);
        const elapsedTime = Date.now() - this.startTime;
        const downloadSpeed = (transferredBytes / (1024 * 1024) / (elapsedTime / 1e3)).toFixed(1);
        core2.info(`Received ${transferredBytes} of ${this.contentLength} (${percentage}%), ${downloadSpeed} MBs/sec`);
        if (this.isDone()) {
          this.displayedComplete = true;
        }
      }
      /**
       * Returns a function used to handle TransferProgressEvents.
       */
      onProgress() {
        return (progress) => {
          this.setReceivedBytes(progress.loadedBytes);
        };
      }
      /**
       * Starts the timer that displays the stats.
       *
       * @param delayInMs the delay between each write
       */
      startDisplayTimer(delayInMs = 1e3) {
        const displayCallback = /* @__PURE__ */ __name(() => {
          this.display();
          if (!this.isDone()) {
            this.timeoutHandle = setTimeout(displayCallback, delayInMs);
          }
        }, "displayCallback");
        this.timeoutHandle = setTimeout(displayCallback, delayInMs);
      }
      /**
       * Stops the timer that displays the stats. As this typically indicates the download
       * is complete, this will display one last line, unless the last line has already
       * been written.
       */
      stopDisplayTimer() {
        if (this.timeoutHandle) {
          clearTimeout(this.timeoutHandle);
          this.timeoutHandle = void 0;
        }
        this.display();
      }
    };
    exports2.DownloadProgress = DownloadProgress;
    function downloadCacheHttpClient(archiveLocation, archivePath) {
      return __awaiter6(this, void 0, void 0, function* () {
        const writeStream = fs4.createWriteStream(archivePath);
        const httpClient = new http_client_1.HttpClient("actions/cache");
        const downloadResponse = yield (0, requestUtils_1.retryHttpClientResponse)("downloadCache", () => __awaiter6(this, void 0, void 0, function* () {
          return httpClient.get(archiveLocation);
        }));
        downloadResponse.message.socket.setTimeout(constants_1.SocketTimeout, () => {
          downloadResponse.message.destroy();
          core2.debug(`Aborting download, socket timed out after ${constants_1.SocketTimeout} ms`);
        });
        yield pipeResponseToStream(downloadResponse, writeStream);
        const contentLengthHeader = downloadResponse.message.headers["content-length"];
        if (contentLengthHeader) {
          const expectedLength = parseInt(contentLengthHeader);
          const actualLength = utils.getArchiveFileSizeInBytes(archivePath);
          if (actualLength !== expectedLength) {
            throw new Error(`Incomplete download. Expected file size: ${expectedLength}, actual file size: ${actualLength}`);
          }
        } else {
          core2.debug("Unable to validate download, no Content-Length header");
        }
      });
    }
    __name(downloadCacheHttpClient, "downloadCacheHttpClient");
    exports2.downloadCacheHttpClient = downloadCacheHttpClient;
    function downloadCacheHttpClientConcurrent(archiveLocation, archivePath, options) {
      var _a4;
      return __awaiter6(this, void 0, void 0, function* () {
        const archiveDescriptor = yield fs4.promises.open(archivePath, "w");
        const httpClient = new http_client_1.HttpClient("actions/cache", void 0, {
          socketTimeout: options.timeoutInMs,
          keepAlive: true
        });
        try {
          const res = yield (0, requestUtils_1.retryHttpClientResponse)("downloadCacheMetadata", () => __awaiter6(this, void 0, void 0, function* () {
            return yield httpClient.request("HEAD", archiveLocation, null, {});
          }));
          const lengthHeader = res.message.headers["content-length"];
          if (lengthHeader === void 0 || lengthHeader === null) {
            throw new Error("Content-Length not found on blob response");
          }
          const length = parseInt(lengthHeader);
          if (Number.isNaN(length)) {
            throw new Error(`Could not interpret Content-Length: ${length}`);
          }
          const downloads = [];
          const blockSize = 4 * 1024 * 1024;
          for (let offset = 0; offset < length; offset += blockSize) {
            const count = Math.min(blockSize, length - offset);
            downloads.push({
              offset,
              promiseGetter: /* @__PURE__ */ __name(() => __awaiter6(this, void 0, void 0, function* () {
                return yield downloadSegmentRetry(httpClient, archiveLocation, offset, count);
              }), "promiseGetter")
            });
          }
          downloads.reverse();
          let actives = 0;
          let bytesDownloaded = 0;
          const progress = new DownloadProgress(length);
          progress.startDisplayTimer();
          const progressFn = progress.onProgress();
          const activeDownloads = [];
          let nextDownload;
          const waitAndWrite = /* @__PURE__ */ __name(() => __awaiter6(this, void 0, void 0, function* () {
            const segment = yield Promise.race(Object.values(activeDownloads));
            yield archiveDescriptor.write(segment.buffer, 0, segment.count, segment.offset);
            actives--;
            delete activeDownloads[segment.offset];
            bytesDownloaded += segment.count;
            progressFn({ loadedBytes: bytesDownloaded });
          }), "waitAndWrite");
          while (nextDownload = downloads.pop()) {
            activeDownloads[nextDownload.offset] = nextDownload.promiseGetter();
            actives++;
            if (actives >= ((_a4 = options.downloadConcurrency) !== null && _a4 !== void 0 ? _a4 : 10)) {
              yield waitAndWrite();
            }
          }
          while (actives > 0) {
            yield waitAndWrite();
          }
        } finally {
          httpClient.dispose();
          yield archiveDescriptor.close();
        }
      });
    }
    __name(downloadCacheHttpClientConcurrent, "downloadCacheHttpClientConcurrent");
    exports2.downloadCacheHttpClientConcurrent = downloadCacheHttpClientConcurrent;
    function downloadSegmentRetry(httpClient, archiveLocation, offset, count) {
      return __awaiter6(this, void 0, void 0, function* () {
        const retries = 5;
        let failures = 0;
        while (true) {
          try {
            const timeout = 3e4;
            const result = yield promiseWithTimeout(timeout, downloadSegment(httpClient, archiveLocation, offset, count));
            if (typeof result === "string") {
              throw new Error("downloadSegmentRetry failed due to timeout");
            }
            return result;
          } catch (err) {
            if (failures >= retries) {
              throw err;
            }
            failures++;
          }
        }
      });
    }
    __name(downloadSegmentRetry, "downloadSegmentRetry");
    function downloadSegment(httpClient, archiveLocation, offset, count) {
      return __awaiter6(this, void 0, void 0, function* () {
        const partRes = yield (0, requestUtils_1.retryHttpClientResponse)("downloadCachePart", () => __awaiter6(this, void 0, void 0, function* () {
          return yield httpClient.get(archiveLocation, {
            Range: `bytes=${offset}-${offset + count - 1}`
          });
        }));
        if (!partRes.readBodyBuffer) {
          throw new Error("Expected HttpClientResponse to implement readBodyBuffer");
        }
        return {
          offset,
          count,
          buffer: yield partRes.readBodyBuffer()
        };
      });
    }
    __name(downloadSegment, "downloadSegment");
    function downloadCacheStorageSDK(archiveLocation, archivePath, options) {
      var _a4;
      return __awaiter6(this, void 0, void 0, function* () {
        const client = new storage_blob_1.BlockBlobClient(archiveLocation, void 0, {
          retryOptions: {
            // Override the timeout used when downloading each 4 MB chunk
            // The default is 2 min / MB, which is way too slow
            tryTimeoutInMs: options.timeoutInMs
          }
        });
        const properties = yield client.getProperties();
        const contentLength2 = (_a4 = properties.contentLength) !== null && _a4 !== void 0 ? _a4 : -1;
        if (contentLength2 < 0) {
          core2.debug("Unable to determine content length, downloading file with http-client...");
          yield downloadCacheHttpClient(archiveLocation, archivePath);
        } else {
          const maxSegmentSize = Math.min(134217728, buffer2.constants.MAX_LENGTH);
          const downloadProgress = new DownloadProgress(contentLength2);
          const fd = fs4.openSync(archivePath, "w");
          try {
            downloadProgress.startDisplayTimer();
            const controller = new abort_controller_1.AbortController();
            const abortSignal2 = controller.signal;
            while (!downloadProgress.isDone()) {
              const segmentStart = downloadProgress.segmentOffset + downloadProgress.segmentSize;
              const segmentSize = Math.min(maxSegmentSize, contentLength2 - segmentStart);
              downloadProgress.nextSegment(segmentSize);
              const result = yield promiseWithTimeout(options.segmentTimeoutInMs || 36e5, client.downloadToBuffer(segmentStart, segmentSize, {
                abortSignal: abortSignal2,
                concurrency: options.downloadConcurrency,
                onProgress: downloadProgress.onProgress()
              }));
              if (result === "timeout") {
                controller.abort();
                throw new Error("Aborting cache download as the download time exceeded the timeout.");
              } else if (Buffer.isBuffer(result)) {
                fs4.writeFileSync(fd, result);
              }
            }
          } finally {
            downloadProgress.stopDisplayTimer();
            fs4.closeSync(fd);
          }
        }
      });
    }
    __name(downloadCacheStorageSDK, "downloadCacheStorageSDK");
    exports2.downloadCacheStorageSDK = downloadCacheStorageSDK;
    var promiseWithTimeout = /* @__PURE__ */ __name((timeoutMs, promise) => __awaiter6(void 0, void 0, void 0, function* () {
      let timeoutHandle;
      const timeoutPromise = new Promise((resolve2) => {
        timeoutHandle = setTimeout(() => resolve2("timeout"), timeoutMs);
      });
      return Promise.race([promise, timeoutPromise]).then((result) => {
        clearTimeout(timeoutHandle);
        return result;
      });
    }), "promiseWithTimeout");
  }
});

// node_modules/@actions/cache/lib/options.js
var require_options = __commonJS({
  "node_modules/@actions/cache/lib/options.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDownloadOptions = exports2.getUploadOptions = void 0;
    var core2 = __importStar(require_core());
    function getUploadOptions(copy2) {
      const result = {
        useAzureSdk: false,
        uploadConcurrency: 4,
        uploadChunkSize: 32 * 1024 * 1024
      };
      if (copy2) {
        if (typeof copy2.useAzureSdk === "boolean") {
          result.useAzureSdk = copy2.useAzureSdk;
        }
        if (typeof copy2.uploadConcurrency === "number") {
          result.uploadConcurrency = copy2.uploadConcurrency;
        }
        if (typeof copy2.uploadChunkSize === "number") {
          result.uploadChunkSize = copy2.uploadChunkSize;
        }
      }
      result.uploadConcurrency = !isNaN(Number(process.env["CACHE_UPLOAD_CONCURRENCY"])) ? Math.min(32, Number(process.env["CACHE_UPLOAD_CONCURRENCY"])) : result.uploadConcurrency;
      result.uploadChunkSize = !isNaN(Number(process.env["CACHE_UPLOAD_CHUNK_SIZE"])) ? Math.min(128 * 1024 * 1024, Number(process.env["CACHE_UPLOAD_CHUNK_SIZE"]) * 1024 * 1024) : result.uploadChunkSize;
      core2.debug(`Use Azure SDK: ${result.useAzureSdk}`);
      core2.debug(`Upload concurrency: ${result.uploadConcurrency}`);
      core2.debug(`Upload chunk size: ${result.uploadChunkSize}`);
      return result;
    }
    __name(getUploadOptions, "getUploadOptions");
    exports2.getUploadOptions = getUploadOptions;
    function getDownloadOptions(copy2) {
      const result = {
        useAzureSdk: false,
        concurrentBlobDownloads: true,
        downloadConcurrency: 8,
        timeoutInMs: 3e4,
        segmentTimeoutInMs: 6e5,
        lookupOnly: false
      };
      if (copy2) {
        if (typeof copy2.useAzureSdk === "boolean") {
          result.useAzureSdk = copy2.useAzureSdk;
        }
        if (typeof copy2.concurrentBlobDownloads === "boolean") {
          result.concurrentBlobDownloads = copy2.concurrentBlobDownloads;
        }
        if (typeof copy2.downloadConcurrency === "number") {
          result.downloadConcurrency = copy2.downloadConcurrency;
        }
        if (typeof copy2.timeoutInMs === "number") {
          result.timeoutInMs = copy2.timeoutInMs;
        }
        if (typeof copy2.segmentTimeoutInMs === "number") {
          result.segmentTimeoutInMs = copy2.segmentTimeoutInMs;
        }
        if (typeof copy2.lookupOnly === "boolean") {
          result.lookupOnly = copy2.lookupOnly;
        }
      }
      const segmentDownloadTimeoutMins = process.env["SEGMENT_DOWNLOAD_TIMEOUT_MINS"];
      if (segmentDownloadTimeoutMins && !isNaN(Number(segmentDownloadTimeoutMins)) && isFinite(Number(segmentDownloadTimeoutMins))) {
        result.segmentTimeoutInMs = Number(segmentDownloadTimeoutMins) * 60 * 1e3;
      }
      core2.debug(`Use Azure SDK: ${result.useAzureSdk}`);
      core2.debug(`Download concurrency: ${result.downloadConcurrency}`);
      core2.debug(`Request timeout (ms): ${result.timeoutInMs}`);
      core2.debug(`Cache segment download timeout mins env var: ${process.env["SEGMENT_DOWNLOAD_TIMEOUT_MINS"]}`);
      core2.debug(`Segment download timeout (ms): ${result.segmentTimeoutInMs}`);
      core2.debug(`Lookup only: ${result.lookupOnly}`);
      return result;
    }
    __name(getDownloadOptions, "getDownloadOptions");
    exports2.getDownloadOptions = getDownloadOptions;
  }
});

// node_modules/@actions/cache/lib/internal/config.js
var require_config = __commonJS({
  "node_modules/@actions/cache/lib/internal/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCacheServiceURL = exports2.getCacheServiceVersion = exports2.isGhes = void 0;
    function isGhes() {
      const ghUrl = new URL(process.env["GITHUB_SERVER_URL"] || "https://github.com");
      const hostname = ghUrl.hostname.trimEnd().toUpperCase();
      const isGitHubHost = hostname === "GITHUB.COM";
      const isGheHost = hostname.endsWith(".GHE.COM");
      const isLocalHost = hostname.endsWith(".LOCALHOST");
      return !isGitHubHost && !isGheHost && !isLocalHost;
    }
    __name(isGhes, "isGhes");
    exports2.isGhes = isGhes;
    function getCacheServiceVersion() {
      if (isGhes())
        return "v1";
      return process.env["ACTIONS_CACHE_SERVICE_V2"] ? "v2" : "v1";
    }
    __name(getCacheServiceVersion, "getCacheServiceVersion");
    exports2.getCacheServiceVersion = getCacheServiceVersion;
    function getCacheServiceURL() {
      const version3 = getCacheServiceVersion();
      switch (version3) {
        case "v1":
          return process.env["ACTIONS_CACHE_URL"] || process.env["ACTIONS_RESULTS_URL"] || "";
        case "v2":
          return process.env["ACTIONS_RESULTS_URL"] || "";
        default:
          throw new Error(`Unsupported cache service version: ${version3}`);
      }
    }
    __name(getCacheServiceURL, "getCacheServiceURL");
    exports2.getCacheServiceURL = getCacheServiceURL;
  }
});

// node_modules/@actions/cache/package.json
var require_package = __commonJS({
  "node_modules/@actions/cache/package.json"(exports2, module) {
    module.exports = {
      name: "@actions/cache",
      version: "4.0.2",
      preview: true,
      description: "Actions cache lib",
      keywords: [
        "github",
        "actions",
        "cache"
      ],
      homepage: "https://github.com/actions/toolkit/tree/main/packages/cache",
      license: "MIT",
      main: "lib/cache.js",
      types: "lib/cache.d.ts",
      directories: {
        lib: "lib",
        test: "__tests__"
      },
      files: [
        "lib",
        "!.DS_Store"
      ],
      publishConfig: {
        access: "public"
      },
      repository: {
        type: "git",
        url: "git+https://github.com/actions/toolkit.git",
        directory: "packages/cache"
      },
      scripts: {
        "audit-moderate": "npm install && npm audit --json --audit-level=moderate > audit.json",
        test: 'echo "Error: run tests from root" && exit 1',
        tsc: "tsc"
      },
      bugs: {
        url: "https://github.com/actions/toolkit/issues"
      },
      dependencies: {
        "@actions/core": "^1.11.1",
        "@actions/exec": "^1.0.1",
        "@actions/glob": "^0.1.0",
        "@actions/http-client": "^2.1.1",
        "@actions/io": "^1.0.1",
        "@azure/abort-controller": "^1.1.0",
        "@azure/ms-rest-js": "^2.6.0",
        "@azure/storage-blob": "^12.13.0",
        "@protobuf-ts/plugin": "^2.9.4",
        semver: "^6.3.1"
      },
      devDependencies: {
        "@types/semver": "^6.0.0",
        typescript: "^5.2.2"
      }
    };
  }
});

// node_modules/@actions/cache/lib/internal/shared/user-agent.js
var require_user_agent = __commonJS({
  "node_modules/@actions/cache/lib/internal/shared/user-agent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUserAgentString = void 0;
    var packageJson = require_package();
    function getUserAgentString2() {
      return `@actions/cache-${packageJson.version}`;
    }
    __name(getUserAgentString2, "getUserAgentString");
    exports2.getUserAgentString = getUserAgentString2;
  }
});

// node_modules/@actions/cache/lib/internal/cacheHttpClient.js
var require_cacheHttpClient = __commonJS({
  "node_modules/@actions/cache/lib/internal/cacheHttpClient.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.saveCache = exports2.reserveCache = exports2.downloadCache = exports2.getCacheEntry = void 0;
    var core2 = __importStar(require_core());
    var http_client_1 = require_lib();
    var auth_1 = require_auth();
    var fs4 = __importStar(__require("fs"));
    var url_1 = __require("url");
    var utils = __importStar(require_cacheUtils());
    var uploadUtils_1 = require_uploadUtils();
    var downloadUtils_1 = require_downloadUtils();
    var options_1 = require_options();
    var requestUtils_1 = require_requestUtils();
    var config_1 = require_config();
    var user_agent_1 = require_user_agent();
    function getCacheApiUrl(resource) {
      const baseUrl = (0, config_1.getCacheServiceURL)();
      if (!baseUrl) {
        throw new Error("Cache Service Url not found, unable to restore cache.");
      }
      const url2 = `${baseUrl}_apis/artifactcache/${resource}`;
      core2.debug(`Resource Url: ${url2}`);
      return url2;
    }
    __name(getCacheApiUrl, "getCacheApiUrl");
    function createAcceptHeader(type2, apiVersion) {
      return `${type2};api-version=${apiVersion}`;
    }
    __name(createAcceptHeader, "createAcceptHeader");
    function getRequestOptions() {
      const requestOptions = {
        headers: {
          Accept: createAcceptHeader("application/json", "6.0-preview.1")
        }
      };
      return requestOptions;
    }
    __name(getRequestOptions, "getRequestOptions");
    function createHttpClient() {
      const token = process.env["ACTIONS_RUNTIME_TOKEN"] || "";
      const bearerCredentialHandler = new auth_1.BearerCredentialHandler(token);
      return new http_client_1.HttpClient((0, user_agent_1.getUserAgentString)(), [bearerCredentialHandler], getRequestOptions());
    }
    __name(createHttpClient, "createHttpClient");
    function getCacheEntry(keys, paths, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        const httpClient = createHttpClient();
        const version3 = utils.getCacheVersion(paths, options === null || options === void 0 ? void 0 : options.compressionMethod, options === null || options === void 0 ? void 0 : options.enableCrossOsArchive);
        const resource = `cache?keys=${encodeURIComponent(keys.join(","))}&version=${version3}`;
        const response = yield (0, requestUtils_1.retryTypedResponse)("getCacheEntry", () => __awaiter6(this, void 0, void 0, function* () {
          return httpClient.getJson(getCacheApiUrl(resource));
        }));
        if (response.statusCode === 204) {
          if (core2.isDebug()) {
            yield printCachesListForDiagnostics(keys[0], httpClient, version3);
          }
          return null;
        }
        if (!(0, requestUtils_1.isSuccessStatusCode)(response.statusCode)) {
          throw new Error(`Cache service responded with ${response.statusCode}`);
        }
        const cacheResult = response.result;
        const cacheDownloadUrl = cacheResult === null || cacheResult === void 0 ? void 0 : cacheResult.archiveLocation;
        if (!cacheDownloadUrl) {
          throw new Error("Cache not found.");
        }
        core2.setSecret(cacheDownloadUrl);
        core2.debug(`Cache Result:`);
        core2.debug(JSON.stringify(cacheResult));
        return cacheResult;
      });
    }
    __name(getCacheEntry, "getCacheEntry");
    exports2.getCacheEntry = getCacheEntry;
    function printCachesListForDiagnostics(key, httpClient, version3) {
      return __awaiter6(this, void 0, void 0, function* () {
        const resource = `caches?key=${encodeURIComponent(key)}`;
        const response = yield (0, requestUtils_1.retryTypedResponse)("listCache", () => __awaiter6(this, void 0, void 0, function* () {
          return httpClient.getJson(getCacheApiUrl(resource));
        }));
        if (response.statusCode === 200) {
          const cacheListResult = response.result;
          const totalCount = cacheListResult === null || cacheListResult === void 0 ? void 0 : cacheListResult.totalCount;
          if (totalCount && totalCount > 0) {
            core2.debug(`No matching cache found for cache key '${key}', version '${version3} and scope ${process.env["GITHUB_REF"]}. There exist one or more cache(s) with similar key but they have different version or scope. See more info on cache matching here: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key 
Other caches with similar key:`);
            for (const cacheEntry of (cacheListResult === null || cacheListResult === void 0 ? void 0 : cacheListResult.artifactCaches) || []) {
              core2.debug(`Cache Key: ${cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.cacheKey}, Cache Version: ${cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.cacheVersion}, Cache Scope: ${cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.scope}, Cache Created: ${cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.creationTime}`);
            }
          }
        }
      });
    }
    __name(printCachesListForDiagnostics, "printCachesListForDiagnostics");
    function downloadCache(archiveLocation, archivePath, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        const archiveUrl = new url_1.URL(archiveLocation);
        const downloadOptions = (0, options_1.getDownloadOptions)(options);
        if (archiveUrl.hostname.endsWith(".blob.core.windows.net")) {
          if (downloadOptions.useAzureSdk) {
            yield (0, downloadUtils_1.downloadCacheStorageSDK)(archiveLocation, archivePath, downloadOptions);
          } else if (downloadOptions.concurrentBlobDownloads) {
            yield (0, downloadUtils_1.downloadCacheHttpClientConcurrent)(archiveLocation, archivePath, downloadOptions);
          } else {
            yield (0, downloadUtils_1.downloadCacheHttpClient)(archiveLocation, archivePath);
          }
        } else {
          yield (0, downloadUtils_1.downloadCacheHttpClient)(archiveLocation, archivePath);
        }
      });
    }
    __name(downloadCache, "downloadCache");
    exports2.downloadCache = downloadCache;
    function reserveCache(key, paths, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        const httpClient = createHttpClient();
        const version3 = utils.getCacheVersion(paths, options === null || options === void 0 ? void 0 : options.compressionMethod, options === null || options === void 0 ? void 0 : options.enableCrossOsArchive);
        const reserveCacheRequest = {
          key,
          version: version3,
          cacheSize: options === null || options === void 0 ? void 0 : options.cacheSize
        };
        const response = yield (0, requestUtils_1.retryTypedResponse)("reserveCache", () => __awaiter6(this, void 0, void 0, function* () {
          return httpClient.postJson(getCacheApiUrl("caches"), reserveCacheRequest);
        }));
        return response;
      });
    }
    __name(reserveCache, "reserveCache");
    exports2.reserveCache = reserveCache;
    function getContentRange(start, end) {
      return `bytes ${start}-${end}/*`;
    }
    __name(getContentRange, "getContentRange");
    function uploadChunk(httpClient, resourceUrl, openStream, start, end) {
      return __awaiter6(this, void 0, void 0, function* () {
        core2.debug(`Uploading chunk of size ${end - start + 1} bytes at offset ${start} with content range: ${getContentRange(start, end)}`);
        const additionalHeaders = {
          "Content-Type": "application/octet-stream",
          "Content-Range": getContentRange(start, end)
        };
        const uploadChunkResponse = yield (0, requestUtils_1.retryHttpClientResponse)(`uploadChunk (start: ${start}, end: ${end})`, () => __awaiter6(this, void 0, void 0, function* () {
          return httpClient.sendStream("PATCH", resourceUrl, openStream(), additionalHeaders);
        }));
        if (!(0, requestUtils_1.isSuccessStatusCode)(uploadChunkResponse.message.statusCode)) {
          throw new Error(`Cache service responded with ${uploadChunkResponse.message.statusCode} during upload chunk.`);
        }
      });
    }
    __name(uploadChunk, "uploadChunk");
    function uploadFile(httpClient, cacheId, archivePath, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        const fileSize = utils.getArchiveFileSizeInBytes(archivePath);
        const resourceUrl = getCacheApiUrl(`caches/${cacheId.toString()}`);
        const fd = fs4.openSync(archivePath, "r");
        const uploadOptions = (0, options_1.getUploadOptions)(options);
        const concurrency = utils.assertDefined("uploadConcurrency", uploadOptions.uploadConcurrency);
        const maxChunkSize = utils.assertDefined("uploadChunkSize", uploadOptions.uploadChunkSize);
        const parallelUploads = [...new Array(concurrency).keys()];
        core2.debug("Awaiting all uploads");
        let offset = 0;
        try {
          yield Promise.all(parallelUploads.map(() => __awaiter6(this, void 0, void 0, function* () {
            while (offset < fileSize) {
              const chunkSize = Math.min(fileSize - offset, maxChunkSize);
              const start = offset;
              const end = offset + chunkSize - 1;
              offset += maxChunkSize;
              yield uploadChunk(httpClient, resourceUrl, () => fs4.createReadStream(archivePath, {
                fd,
                start,
                end,
                autoClose: false
              }).on("error", (error) => {
                throw new Error(`Cache upload failed because file read failed with ${error.message}`);
              }), start, end);
            }
          })));
        } finally {
          fs4.closeSync(fd);
        }
        return;
      });
    }
    __name(uploadFile, "uploadFile");
    function commitCache(httpClient, cacheId, filesize) {
      return __awaiter6(this, void 0, void 0, function* () {
        const commitCacheRequest = { size: filesize };
        return yield (0, requestUtils_1.retryTypedResponse)("commitCache", () => __awaiter6(this, void 0, void 0, function* () {
          return httpClient.postJson(getCacheApiUrl(`caches/${cacheId.toString()}`), commitCacheRequest);
        }));
      });
    }
    __name(commitCache, "commitCache");
    function saveCache3(cacheId, archivePath, signedUploadURL, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        const uploadOptions = (0, options_1.getUploadOptions)(options);
        if (uploadOptions.useAzureSdk) {
          if (!signedUploadURL) {
            throw new Error("Azure Storage SDK can only be used when a signed URL is provided.");
          }
          yield (0, uploadUtils_1.uploadCacheArchiveSDK)(signedUploadURL, archivePath, options);
        } else {
          const httpClient = createHttpClient();
          core2.debug("Upload cache");
          yield uploadFile(httpClient, cacheId, archivePath, options);
          core2.debug("Commiting cache");
          const cacheSize = utils.getArchiveFileSizeInBytes(archivePath);
          core2.info(`Cache Size: ~${Math.round(cacheSize / (1024 * 1024))} MB (${cacheSize} B)`);
          const commitCacheResponse = yield commitCache(httpClient, cacheId, cacheSize);
          if (!(0, requestUtils_1.isSuccessStatusCode)(commitCacheResponse.statusCode)) {
            throw new Error(`Cache service responded with ${commitCacheResponse.statusCode} during commit cache.`);
          }
          core2.info("Cache saved successfully");
        }
      });
    }
    __name(saveCache3, "saveCache");
    exports2.saveCache = saveCache3;
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js
function typeofJsonValue(value) {
  let t3 = typeof value;
  if (t3 == "object") {
    if (Array.isArray(value))
      return "array";
    if (value === null)
      return "null";
  }
  return t3;
}
function isJsonObject(value) {
  return value !== null && typeof value == "object" && !Array.isArray(value);
}
var init_json_typings = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js"() {
    "use strict";
    __name(typeofJsonValue, "typeofJsonValue");
    __name(isJsonObject, "isJsonObject");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/base64.js
function base64decode(base64Str) {
  let es2 = base64Str.length * 3 / 4;
  if (base64Str[base64Str.length - 2] == "=")
    es2 -= 2;
  else if (base64Str[base64Str.length - 1] == "=")
    es2 -= 1;
  let bytes = new Uint8Array(es2), bytePos = 0, groupPos = 0, b3, p3 = 0;
  for (let i3 = 0; i3 < base64Str.length; i3++) {
    b3 = decTable[base64Str.charCodeAt(i3)];
    if (b3 === void 0) {
      switch (base64Str[i3]) {
        case "=":
          groupPos = 0;
        // reset state when padding found
        case "\n":
        case "\r":
        case "	":
        case " ":
          continue;
        // skip white-space, and padding
        default:
          throw Error(`invalid base64 string.`);
      }
    }
    switch (groupPos) {
      case 0:
        p3 = b3;
        groupPos = 1;
        break;
      case 1:
        bytes[bytePos++] = p3 << 2 | (b3 & 48) >> 4;
        p3 = b3;
        groupPos = 2;
        break;
      case 2:
        bytes[bytePos++] = (p3 & 15) << 4 | (b3 & 60) >> 2;
        p3 = b3;
        groupPos = 3;
        break;
      case 3:
        bytes[bytePos++] = (p3 & 3) << 6 | b3;
        groupPos = 0;
        break;
    }
  }
  if (groupPos == 1)
    throw Error(`invalid base64 string.`);
  return bytes.subarray(0, bytePos);
}
function base64encode2(bytes) {
  let base64 = "", groupPos = 0, b3, p3 = 0;
  for (let i3 = 0; i3 < bytes.length; i3++) {
    b3 = bytes[i3];
    switch (groupPos) {
      case 0:
        base64 += encTable[b3 >> 2];
        p3 = (b3 & 3) << 4;
        groupPos = 1;
        break;
      case 1:
        base64 += encTable[p3 | b3 >> 4];
        p3 = (b3 & 15) << 2;
        groupPos = 2;
        break;
      case 2:
        base64 += encTable[p3 | b3 >> 6];
        base64 += encTable[b3 & 63];
        groupPos = 0;
        break;
    }
  }
  if (groupPos) {
    base64 += encTable[p3];
    base64 += "=";
    if (groupPos == 1)
      base64 += "=";
  }
  return base64;
}
var encTable, decTable;
var init_base642 = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/base64.js"() {
    "use strict";
    encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    decTable = [];
    for (let i3 = 0; i3 < encTable.length; i3++)
      decTable[encTable[i3].charCodeAt(0)] = i3;
    decTable["-".charCodeAt(0)] = encTable.indexOf("+");
    decTable["_".charCodeAt(0)] = encTable.indexOf("/");
    __name(base64decode, "base64decode");
    __name(base64encode2, "base64encode");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/protobufjs-utf8.js
function utf8read(bytes) {
  if (bytes.length < 1)
    return "";
  let pos = 0, parts = [], chunk = [], i3 = 0, t3;
  let len = bytes.length;
  while (pos < len) {
    t3 = bytes[pos++];
    if (t3 < 128)
      chunk[i3++] = t3;
    else if (t3 > 191 && t3 < 224)
      chunk[i3++] = (t3 & 31) << 6 | bytes[pos++] & 63;
    else if (t3 > 239 && t3 < 365) {
      t3 = ((t3 & 7) << 18 | (bytes[pos++] & 63) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63) - 65536;
      chunk[i3++] = 55296 + (t3 >> 10);
      chunk[i3++] = 56320 + (t3 & 1023);
    } else
      chunk[i3++] = (t3 & 15) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63;
    if (i3 > 8191) {
      parts.push(fromCharCodes(chunk));
      i3 = 0;
    }
  }
  if (parts.length) {
    if (i3)
      parts.push(fromCharCodes(chunk.slice(0, i3)));
    return parts.join("");
  }
  return fromCharCodes(chunk.slice(0, i3));
}
var fromCharCodes;
var init_protobufjs_utf8 = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/protobufjs-utf8.js"() {
    "use strict";
    fromCharCodes = /* @__PURE__ */ __name((chunk) => String.fromCharCode.apply(String, chunk), "fromCharCodes");
    __name(utf8read, "utf8read");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js
function mergeBinaryOptions(a3, b3) {
  return Object.assign(Object.assign({}, a3), b3);
}
var UnknownFieldHandler, WireType;
var init_binary_format_contract = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js"() {
    "use strict";
    (function(UnknownFieldHandler2) {
      UnknownFieldHandler2.symbol = Symbol.for("protobuf-ts/unknown");
      UnknownFieldHandler2.onRead = (typeName, message, fieldNo, wireType, data) => {
        let container = is2(message) ? message[UnknownFieldHandler2.symbol] : message[UnknownFieldHandler2.symbol] = [];
        container.push({ no: fieldNo, wireType, data });
      };
      UnknownFieldHandler2.onWrite = (typeName, message, writer) => {
        for (let { no: no2, wireType, data } of UnknownFieldHandler2.list(message))
          writer.tag(no2, wireType).raw(data);
      };
      UnknownFieldHandler2.list = (message, fieldNo) => {
        if (is2(message)) {
          let all = message[UnknownFieldHandler2.symbol];
          return fieldNo ? all.filter((uf) => uf.no == fieldNo) : all;
        }
        return [];
      };
      UnknownFieldHandler2.last = (message, fieldNo) => UnknownFieldHandler2.list(message, fieldNo).slice(-1)[0];
      const is2 = /* @__PURE__ */ __name((message) => message && Array.isArray(message[UnknownFieldHandler2.symbol]), "is");
    })(UnknownFieldHandler || (UnknownFieldHandler = {}));
    __name(mergeBinaryOptions, "mergeBinaryOptions");
    (function(WireType2) {
      WireType2[WireType2["Varint"] = 0] = "Varint";
      WireType2[WireType2["Bit64"] = 1] = "Bit64";
      WireType2[WireType2["LengthDelimited"] = 2] = "LengthDelimited";
      WireType2[WireType2["StartGroup"] = 3] = "StartGroup";
      WireType2[WireType2["EndGroup"] = 4] = "EndGroup";
      WireType2[WireType2["Bit32"] = 5] = "Bit32";
    })(WireType || (WireType = {}));
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js
function varint64read() {
  let lowBits = 0;
  let highBits = 0;
  for (let shift = 0; shift < 28; shift += 7) {
    let b3 = this.buf[this.pos++];
    lowBits |= (b3 & 127) << shift;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
  }
  let middleByte = this.buf[this.pos++];
  lowBits |= (middleByte & 15) << 28;
  highBits = (middleByte & 112) >> 4;
  if ((middleByte & 128) == 0) {
    this.assertBounds();
    return [lowBits, highBits];
  }
  for (let shift = 3; shift <= 31; shift += 7) {
    let b3 = this.buf[this.pos++];
    highBits |= (b3 & 127) << shift;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
  }
  throw new Error("invalid varint");
}
function varint64write(lo2, hi2, bytes) {
  for (let i3 = 0; i3 < 28; i3 = i3 + 7) {
    const shift = lo2 >>> i3;
    const hasNext = !(shift >>> 7 == 0 && hi2 == 0);
    const byte = (hasNext ? shift | 128 : shift) & 255;
    bytes.push(byte);
    if (!hasNext) {
      return;
    }
  }
  const splitBits = lo2 >>> 28 & 15 | (hi2 & 7) << 4;
  const hasMoreBits = !(hi2 >> 3 == 0);
  bytes.push((hasMoreBits ? splitBits | 128 : splitBits) & 255);
  if (!hasMoreBits) {
    return;
  }
  for (let i3 = 3; i3 < 31; i3 = i3 + 7) {
    const shift = hi2 >>> i3;
    const hasNext = !(shift >>> 7 == 0);
    const byte = (hasNext ? shift | 128 : shift) & 255;
    bytes.push(byte);
    if (!hasNext) {
      return;
    }
  }
  bytes.push(hi2 >>> 31 & 1);
}
function int64fromString(dec) {
  let minus = dec[0] == "-";
  if (minus)
    dec = dec.slice(1);
  const base = 1e6;
  let lowBits = 0;
  let highBits = 0;
  function add1e6digit(begin, end) {
    const digit1e6 = Number(dec.slice(begin, end));
    highBits *= base;
    lowBits = lowBits * base + digit1e6;
    if (lowBits >= TWO_PWR_32_DBL) {
      highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);
      lowBits = lowBits % TWO_PWR_32_DBL;
    }
  }
  __name(add1e6digit, "add1e6digit");
  add1e6digit(-24, -18);
  add1e6digit(-18, -12);
  add1e6digit(-12, -6);
  add1e6digit(-6);
  return [minus, lowBits, highBits];
}
function int64toString(bitsLow, bitsHigh) {
  if (bitsHigh >>> 0 <= 2097151) {
    return "" + (TWO_PWR_32_DBL * bitsHigh + (bitsLow >>> 0));
  }
  let low = bitsLow & 16777215;
  let mid = (bitsLow >>> 24 | bitsHigh << 8) >>> 0 & 16777215;
  let high = bitsHigh >> 16 & 65535;
  let digitA = low + mid * 6777216 + high * 6710656;
  let digitB = mid + high * 8147497;
  let digitC = high * 2;
  let base = 1e7;
  if (digitA >= base) {
    digitB += Math.floor(digitA / base);
    digitA %= base;
  }
  if (digitB >= base) {
    digitC += Math.floor(digitB / base);
    digitB %= base;
  }
  function decimalFrom1e7(digit1e7, needLeadingZeros) {
    let partial = digit1e7 ? String(digit1e7) : "";
    if (needLeadingZeros) {
      return "0000000".slice(partial.length) + partial;
    }
    return partial;
  }
  __name(decimalFrom1e7, "decimalFrom1e7");
  return decimalFrom1e7(
    digitC,
    /*needLeadingZeros=*/
    0
  ) + decimalFrom1e7(
    digitB,
    /*needLeadingZeros=*/
    digitC
  ) + // If the final 1e7 digit didn't need leading zeros, we would have
  // returned via the trivial code path at the top.
  decimalFrom1e7(
    digitA,
    /*needLeadingZeros=*/
    1
  );
}
function varint32write(value, bytes) {
  if (value >= 0) {
    while (value > 127) {
      bytes.push(value & 127 | 128);
      value = value >>> 7;
    }
    bytes.push(value);
  } else {
    for (let i3 = 0; i3 < 9; i3++) {
      bytes.push(value & 127 | 128);
      value = value >> 7;
    }
    bytes.push(1);
  }
}
function varint32read() {
  let b3 = this.buf[this.pos++];
  let result = b3 & 127;
  if ((b3 & 128) == 0) {
    this.assertBounds();
    return result;
  }
  b3 = this.buf[this.pos++];
  result |= (b3 & 127) << 7;
  if ((b3 & 128) == 0) {
    this.assertBounds();
    return result;
  }
  b3 = this.buf[this.pos++];
  result |= (b3 & 127) << 14;
  if ((b3 & 128) == 0) {
    this.assertBounds();
    return result;
  }
  b3 = this.buf[this.pos++];
  result |= (b3 & 127) << 21;
  if ((b3 & 128) == 0) {
    this.assertBounds();
    return result;
  }
  b3 = this.buf[this.pos++];
  result |= (b3 & 15) << 28;
  for (let readBytes = 5; (b3 & 128) !== 0 && readBytes < 10; readBytes++)
    b3 = this.buf[this.pos++];
  if ((b3 & 128) != 0)
    throw new Error("invalid varint");
  this.assertBounds();
  return result >>> 0;
}
var TWO_PWR_32_DBL;
var init_goog_varint = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js"() {
    "use strict";
    __name(varint64read, "varint64read");
    __name(varint64write, "varint64write");
    TWO_PWR_32_DBL = (1 << 16) * (1 << 16);
    __name(int64fromString, "int64fromString");
    __name(int64toString, "int64toString");
    __name(varint32write, "varint32write");
    __name(varint32read, "varint32read");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js
function detectBi() {
  const dv = new DataView(new ArrayBuffer(8));
  const ok = globalThis.BigInt !== void 0 && typeof dv.getBigInt64 === "function" && typeof dv.getBigUint64 === "function" && typeof dv.setBigInt64 === "function" && typeof dv.setBigUint64 === "function";
  BI = ok ? {
    MIN: BigInt("-9223372036854775808"),
    MAX: BigInt("9223372036854775807"),
    UMIN: BigInt("0"),
    UMAX: BigInt("18446744073709551615"),
    C: BigInt,
    V: dv
  } : void 0;
}
function assertBi(bi2) {
  if (!bi2)
    throw new Error("BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support");
}
var BI, RE_DECIMAL_STR, TWO_PWR_32_DBL2, HALF_2_PWR_32, SharedPbLong, PbULong, PbLong;
var init_pb_long = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js"() {
    "use strict";
    init_goog_varint();
    __name(detectBi, "detectBi");
    detectBi();
    __name(assertBi, "assertBi");
    RE_DECIMAL_STR = /^-?[0-9]+$/;
    TWO_PWR_32_DBL2 = 4294967296;
    HALF_2_PWR_32 = 2147483648;
    SharedPbLong = class {
      static {
        __name(this, "SharedPbLong");
      }
      /**
       * Create a new instance with the given bits.
       */
      constructor(lo2, hi2) {
        this.lo = lo2 | 0;
        this.hi = hi2 | 0;
      }
      /**
       * Is this instance equal to 0?
       */
      isZero() {
        return this.lo == 0 && this.hi == 0;
      }
      /**
       * Convert to a native number.
       */
      toNumber() {
        let result = this.hi * TWO_PWR_32_DBL2 + (this.lo >>> 0);
        if (!Number.isSafeInteger(result))
          throw new Error("cannot convert to safe number");
        return result;
      }
    };
    PbULong = class _PbULong extends SharedPbLong {
      static {
        __name(this, "PbULong");
      }
      /**
       * Create instance from a `string`, `number` or `bigint`.
       */
      static from(value) {
        if (BI)
          switch (typeof value) {
            case "string":
              if (value == "0")
                return this.ZERO;
              if (value == "")
                throw new Error("string is no integer");
              value = BI.C(value);
            case "number":
              if (value === 0)
                return this.ZERO;
              value = BI.C(value);
            case "bigint":
              if (!value)
                return this.ZERO;
              if (value < BI.UMIN)
                throw new Error("signed value for ulong");
              if (value > BI.UMAX)
                throw new Error("ulong too large");
              BI.V.setBigUint64(0, value, true);
              return new _PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));
          }
        else
          switch (typeof value) {
            case "string":
              if (value == "0")
                return this.ZERO;
              value = value.trim();
              if (!RE_DECIMAL_STR.test(value))
                throw new Error("string is no integer");
              let [minus, lo2, hi2] = int64fromString(value);
              if (minus)
                throw new Error("signed value for ulong");
              return new _PbULong(lo2, hi2);
            case "number":
              if (value == 0)
                return this.ZERO;
              if (!Number.isSafeInteger(value))
                throw new Error("number is no integer");
              if (value < 0)
                throw new Error("signed value for ulong");
              return new _PbULong(value, value / TWO_PWR_32_DBL2);
          }
        throw new Error("unknown value " + typeof value);
      }
      /**
       * Convert to decimal string.
       */
      toString() {
        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);
      }
      /**
       * Convert to native bigint.
       */
      toBigInt() {
        assertBi(BI);
        BI.V.setInt32(0, this.lo, true);
        BI.V.setInt32(4, this.hi, true);
        return BI.V.getBigUint64(0, true);
      }
    };
    PbULong.ZERO = new PbULong(0, 0);
    PbLong = class _PbLong extends SharedPbLong {
      static {
        __name(this, "PbLong");
      }
      /**
       * Create instance from a `string`, `number` or `bigint`.
       */
      static from(value) {
        if (BI)
          switch (typeof value) {
            case "string":
              if (value == "0")
                return this.ZERO;
              if (value == "")
                throw new Error("string is no integer");
              value = BI.C(value);
            case "number":
              if (value === 0)
                return this.ZERO;
              value = BI.C(value);
            case "bigint":
              if (!value)
                return this.ZERO;
              if (value < BI.MIN)
                throw new Error("signed long too small");
              if (value > BI.MAX)
                throw new Error("signed long too large");
              BI.V.setBigInt64(0, value, true);
              return new _PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));
          }
        else
          switch (typeof value) {
            case "string":
              if (value == "0")
                return this.ZERO;
              value = value.trim();
              if (!RE_DECIMAL_STR.test(value))
                throw new Error("string is no integer");
              let [minus, lo2, hi2] = int64fromString(value);
              if (minus) {
                if (hi2 > HALF_2_PWR_32 || hi2 == HALF_2_PWR_32 && lo2 != 0)
                  throw new Error("signed long too small");
              } else if (hi2 >= HALF_2_PWR_32)
                throw new Error("signed long too large");
              let pbl = new _PbLong(lo2, hi2);
              return minus ? pbl.negate() : pbl;
            case "number":
              if (value == 0)
                return this.ZERO;
              if (!Number.isSafeInteger(value))
                throw new Error("number is no integer");
              return value > 0 ? new _PbLong(value, value / TWO_PWR_32_DBL2) : new _PbLong(-value, -value / TWO_PWR_32_DBL2).negate();
          }
        throw new Error("unknown value " + typeof value);
      }
      /**
       * Do we have a minus sign?
       */
      isNegative() {
        return (this.hi & HALF_2_PWR_32) !== 0;
      }
      /**
       * Negate two's complement.
       * Invert all the bits and add one to the result.
       */
      negate() {
        let hi2 = ~this.hi, lo2 = this.lo;
        if (lo2)
          lo2 = ~lo2 + 1;
        else
          hi2 += 1;
        return new _PbLong(lo2, hi2);
      }
      /**
       * Convert to decimal string.
       */
      toString() {
        if (BI)
          return this.toBigInt().toString();
        if (this.isNegative()) {
          let n3 = this.negate();
          return "-" + int64toString(n3.lo, n3.hi);
        }
        return int64toString(this.lo, this.hi);
      }
      /**
       * Convert to native bigint.
       */
      toBigInt() {
        assertBi(BI);
        BI.V.setInt32(0, this.lo, true);
        BI.V.setInt32(4, this.hi, true);
        return BI.V.getBigInt64(0, true);
      }
    };
    PbLong.ZERO = new PbLong(0, 0);
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js
function binaryReadOptions(options) {
  return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;
}
var defaultsRead, BinaryReader;
var init_binary_reader = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js"() {
    "use strict";
    init_binary_format_contract();
    init_pb_long();
    init_goog_varint();
    defaultsRead = {
      readUnknownField: true,
      readerFactory: /* @__PURE__ */ __name((bytes) => new BinaryReader(bytes), "readerFactory")
    };
    __name(binaryReadOptions, "binaryReadOptions");
    BinaryReader = class {
      static {
        __name(this, "BinaryReader");
      }
      constructor(buf, textDecoder) {
        this.varint64 = varint64read;
        this.uint32 = varint32read;
        this.buf = buf;
        this.len = buf.length;
        this.pos = 0;
        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder("utf-8", {
          fatal: true,
          ignoreBOM: true
        });
      }
      /**
       * Reads a tag - field number and wire type.
       */
      tag() {
        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
        if (fieldNo <= 0 || wireType < 0 || wireType > 5)
          throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
        return [fieldNo, wireType];
      }
      /**
       * Skip one element on the wire and return the skipped data.
       * Supports WireType.StartGroup since v2.0.0-alpha.23.
       */
      skip(wireType) {
        let start = this.pos;
        switch (wireType) {
          case WireType.Varint:
            while (this.buf[this.pos++] & 128) {
            }
            break;
          case WireType.Bit64:
            this.pos += 4;
          case WireType.Bit32:
            this.pos += 4;
            break;
          case WireType.LengthDelimited:
            let len = this.uint32();
            this.pos += len;
            break;
          case WireType.StartGroup:
            let t3;
            while ((t3 = this.tag()[1]) !== WireType.EndGroup) {
              this.skip(t3);
            }
            break;
          default:
            throw new Error("cant skip wire type " + wireType);
        }
        this.assertBounds();
        return this.buf.subarray(start, this.pos);
      }
      /**
       * Throws error if position in byte array is out of range.
       */
      assertBounds() {
        if (this.pos > this.len)
          throw new RangeError("premature EOF");
      }
      /**
       * Read a `int32` field, a signed 32 bit varint.
       */
      int32() {
        return this.uint32() | 0;
      }
      /**
       * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
       */
      sint32() {
        let zze = this.uint32();
        return zze >>> 1 ^ -(zze & 1);
      }
      /**
       * Read a `int64` field, a signed 64-bit varint.
       */
      int64() {
        return new PbLong(...this.varint64());
      }
      /**
       * Read a `uint64` field, an unsigned 64-bit varint.
       */
      uint64() {
        return new PbULong(...this.varint64());
      }
      /**
       * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
       */
      sint64() {
        let [lo2, hi2] = this.varint64();
        let s3 = -(lo2 & 1);
        lo2 = (lo2 >>> 1 | (hi2 & 1) << 31) ^ s3;
        hi2 = hi2 >>> 1 ^ s3;
        return new PbLong(lo2, hi2);
      }
      /**
       * Read a `bool` field, a variant.
       */
      bool() {
        let [lo2, hi2] = this.varint64();
        return lo2 !== 0 || hi2 !== 0;
      }
      /**
       * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
       */
      fixed32() {
        return this.view.getUint32((this.pos += 4) - 4, true);
      }
      /**
       * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
       */
      sfixed32() {
        return this.view.getInt32((this.pos += 4) - 4, true);
      }
      /**
       * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
       */
      fixed64() {
        return new PbULong(this.sfixed32(), this.sfixed32());
      }
      /**
       * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
       */
      sfixed64() {
        return new PbLong(this.sfixed32(), this.sfixed32());
      }
      /**
       * Read a `float` field, 32-bit floating point number.
       */
      float() {
        return this.view.getFloat32((this.pos += 4) - 4, true);
      }
      /**
       * Read a `double` field, a 64-bit floating point number.
       */
      double() {
        return this.view.getFloat64((this.pos += 8) - 8, true);
      }
      /**
       * Read a `bytes` field, length-delimited arbitrary data.
       */
      bytes() {
        let len = this.uint32();
        let start = this.pos;
        this.pos += len;
        this.assertBounds();
        return this.buf.subarray(start, start + len);
      }
      /**
       * Read a `string` field, length-delimited data converted to UTF-8 text.
       */
      string() {
        return this.textDecoder.decode(this.bytes());
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/assert.js
function assert(condition, msg) {
  if (!condition) {
    throw new Error(msg);
  }
}
function assertNever(value, msg) {
  throw new Error(msg !== null && msg !== void 0 ? msg : "Unexpected object: " + value);
}
function assertInt32(arg) {
  if (typeof arg !== "number")
    throw new Error("invalid int 32: " + typeof arg);
  if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
    throw new Error("invalid int 32: " + arg);
}
function assertUInt32(arg) {
  if (typeof arg !== "number")
    throw new Error("invalid uint 32: " + typeof arg);
  if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
    throw new Error("invalid uint 32: " + arg);
}
function assertFloat32(arg) {
  if (typeof arg !== "number")
    throw new Error("invalid float 32: " + typeof arg);
  if (!Number.isFinite(arg))
    return;
  if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)
    throw new Error("invalid float 32: " + arg);
}
var FLOAT32_MAX, FLOAT32_MIN, UINT32_MAX, INT32_MAX, INT32_MIN;
var init_assert = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/assert.js"() {
    "use strict";
    __name(assert, "assert");
    __name(assertNever, "assertNever");
    FLOAT32_MAX = 34028234663852886e22;
    FLOAT32_MIN = -34028234663852886e22;
    UINT32_MAX = 4294967295;
    INT32_MAX = 2147483647;
    INT32_MIN = -2147483648;
    __name(assertInt32, "assertInt32");
    __name(assertUInt32, "assertUInt32");
    __name(assertFloat32, "assertFloat32");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js
function binaryWriteOptions(options) {
  return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;
}
var defaultsWrite, BinaryWriter;
var init_binary_writer = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js"() {
    "use strict";
    init_pb_long();
    init_goog_varint();
    init_assert();
    defaultsWrite = {
      writeUnknownFields: true,
      writerFactory: /* @__PURE__ */ __name(() => new BinaryWriter(), "writerFactory")
    };
    __name(binaryWriteOptions, "binaryWriteOptions");
    BinaryWriter = class {
      static {
        __name(this, "BinaryWriter");
      }
      constructor(textEncoder) {
        this.stack = [];
        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
        this.chunks = [];
        this.buf = [];
      }
      /**
       * Return all bytes written and reset this writer.
       */
      finish() {
        this.chunks.push(new Uint8Array(this.buf));
        let len = 0;
        for (let i3 = 0; i3 < this.chunks.length; i3++)
          len += this.chunks[i3].length;
        let bytes = new Uint8Array(len);
        let offset = 0;
        for (let i3 = 0; i3 < this.chunks.length; i3++) {
          bytes.set(this.chunks[i3], offset);
          offset += this.chunks[i3].length;
        }
        this.chunks = [];
        return bytes;
      }
      /**
       * Start a new fork for length-delimited data like a message
       * or a packed repeated field.
       *
       * Must be joined later with `join()`.
       */
      fork() {
        this.stack.push({ chunks: this.chunks, buf: this.buf });
        this.chunks = [];
        this.buf = [];
        return this;
      }
      /**
       * Join the last fork. Write its length and bytes, then
       * return to the previous state.
       */
      join() {
        let chunk = this.finish();
        let prev = this.stack.pop();
        if (!prev)
          throw new Error("invalid state, fork stack empty");
        this.chunks = prev.chunks;
        this.buf = prev.buf;
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
      }
      /**
       * Writes a tag (field number and wire type).
       *
       * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
       *
       * Generated code should compute the tag ahead of time and call `uint32()`.
       */
      tag(fieldNo, type2) {
        return this.uint32((fieldNo << 3 | type2) >>> 0);
      }
      /**
       * Write a chunk of raw bytes.
       */
      raw(chunk) {
        if (this.buf.length) {
          this.chunks.push(new Uint8Array(this.buf));
          this.buf = [];
        }
        this.chunks.push(chunk);
        return this;
      }
      /**
       * Write a `uint32` value, an unsigned 32 bit varint.
       */
      uint32(value) {
        assertUInt32(value);
        while (value > 127) {
          this.buf.push(value & 127 | 128);
          value = value >>> 7;
        }
        this.buf.push(value);
        return this;
      }
      /**
       * Write a `int32` value, a signed 32 bit varint.
       */
      int32(value) {
        assertInt32(value);
        varint32write(value, this.buf);
        return this;
      }
      /**
       * Write a `bool` value, a variant.
       */
      bool(value) {
        this.buf.push(value ? 1 : 0);
        return this;
      }
      /**
       * Write a `bytes` value, length-delimited arbitrary data.
       */
      bytes(value) {
        this.uint32(value.byteLength);
        return this.raw(value);
      }
      /**
       * Write a `string` value, length-delimited data converted to UTF-8 text.
       */
      string(value) {
        let chunk = this.textEncoder.encode(value);
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
      }
      /**
       * Write a `float` value, 32-bit floating point number.
       */
      float(value) {
        assertFloat32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setFloat32(0, value, true);
        return this.raw(chunk);
      }
      /**
       * Write a `double` value, a 64-bit floating point number.
       */
      double(value) {
        let chunk = new Uint8Array(8);
        new DataView(chunk.buffer).setFloat64(0, value, true);
        return this.raw(chunk);
      }
      /**
       * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
       */
      fixed32(value) {
        assertUInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setUint32(0, value, true);
        return this.raw(chunk);
      }
      /**
       * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
       */
      sfixed32(value) {
        assertInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setInt32(0, value, true);
        return this.raw(chunk);
      }
      /**
       * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
       */
      sint32(value) {
        assertInt32(value);
        value = (value << 1 ^ value >> 31) >>> 0;
        varint32write(value, this.buf);
        return this;
      }
      /**
       * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
       */
      sfixed64(value) {
        let chunk = new Uint8Array(8);
        let view = new DataView(chunk.buffer);
        let long = PbLong.from(value);
        view.setInt32(0, long.lo, true);
        view.setInt32(4, long.hi, true);
        return this.raw(chunk);
      }
      /**
       * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
       */
      fixed64(value) {
        let chunk = new Uint8Array(8);
        let view = new DataView(chunk.buffer);
        let long = PbULong.from(value);
        view.setInt32(0, long.lo, true);
        view.setInt32(4, long.hi, true);
        return this.raw(chunk);
      }
      /**
       * Write a `int64` value, a signed 64-bit varint.
       */
      int64(value) {
        let long = PbLong.from(value);
        varint64write(long.lo, long.hi, this.buf);
        return this;
      }
      /**
       * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
       */
      sint64(value) {
        let long = PbLong.from(value), sign = long.hi >> 31, lo2 = long.lo << 1 ^ sign, hi2 = (long.hi << 1 | long.lo >>> 31) ^ sign;
        varint64write(lo2, hi2, this.buf);
        return this;
      }
      /**
       * Write a `uint64` value, an unsigned 64-bit varint.
       */
      uint64(value) {
        let long = PbULong.from(value);
        varint64write(long.lo, long.hi, this.buf);
        return this;
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js
function jsonReadOptions(options) {
  return options ? Object.assign(Object.assign({}, defaultsRead2), options) : defaultsRead2;
}
function jsonWriteOptions(options) {
  return options ? Object.assign(Object.assign({}, defaultsWrite2), options) : defaultsWrite2;
}
function mergeJsonOptions(a3, b3) {
  var _a4, _b2;
  let c3 = Object.assign(Object.assign({}, a3), b3);
  c3.typeRegistry = [...(_a4 = a3 === null || a3 === void 0 ? void 0 : a3.typeRegistry) !== null && _a4 !== void 0 ? _a4 : [], ...(_b2 = b3 === null || b3 === void 0 ? void 0 : b3.typeRegistry) !== null && _b2 !== void 0 ? _b2 : []];
  return c3;
}
var defaultsWrite2, defaultsRead2;
var init_json_format_contract = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js"() {
    "use strict";
    defaultsWrite2 = {
      emitDefaultValues: false,
      enumAsInteger: false,
      useProtoFieldName: false,
      prettySpaces: 0
    };
    defaultsRead2 = {
      ignoreUnknownFields: false
    };
    __name(jsonReadOptions, "jsonReadOptions");
    __name(jsonWriteOptions, "jsonWriteOptions");
    __name(mergeJsonOptions, "mergeJsonOptions");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js
var MESSAGE_TYPE;
var init_message_type_contract = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js"() {
    "use strict";
    MESSAGE_TYPE = Symbol.for("protobuf-ts/message-type");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js
function lowerCamelCase(snakeCase2) {
  let capNext = false;
  const sb = [];
  for (let i3 = 0; i3 < snakeCase2.length; i3++) {
    let next2 = snakeCase2.charAt(i3);
    if (next2 == "_") {
      capNext = true;
    } else if (/\d/.test(next2)) {
      sb.push(next2);
      capNext = true;
    } else if (capNext) {
      sb.push(next2.toUpperCase());
      capNext = false;
    } else if (i3 == 0) {
      sb.push(next2.toLowerCase());
    } else {
      sb.push(next2);
    }
  }
  return sb.join("");
}
var init_lower_camel_case = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js"() {
    "use strict";
    __name(lowerCamelCase, "lowerCamelCase");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js
function normalizeFieldInfo(field) {
  var _a4, _b2, _c2, _d2;
  field.localName = (_a4 = field.localName) !== null && _a4 !== void 0 ? _a4 : lowerCamelCase(field.name);
  field.jsonName = (_b2 = field.jsonName) !== null && _b2 !== void 0 ? _b2 : lowerCamelCase(field.name);
  field.repeat = (_c2 = field.repeat) !== null && _c2 !== void 0 ? _c2 : RepeatType.NO;
  field.opt = (_d2 = field.opt) !== null && _d2 !== void 0 ? _d2 : field.repeat ? false : field.oneof ? false : field.kind == "message";
  return field;
}
function readFieldOptions(messageType, fieldName, extensionName, extensionType) {
  var _a4;
  const options = (_a4 = messageType.fields.find((m3, i3) => m3.localName == fieldName || i3 == fieldName)) === null || _a4 === void 0 ? void 0 : _a4.options;
  return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : void 0;
}
function readFieldOption(messageType, fieldName, extensionName, extensionType) {
  var _a4;
  const options = (_a4 = messageType.fields.find((m3, i3) => m3.localName == fieldName || i3 == fieldName)) === null || _a4 === void 0 ? void 0 : _a4.options;
  if (!options) {
    return void 0;
  }
  const optionVal = options[extensionName];
  if (optionVal === void 0) {
    return optionVal;
  }
  return extensionType ? extensionType.fromJson(optionVal) : optionVal;
}
function readMessageOption(messageType, extensionName, extensionType) {
  const options = messageType.options;
  const optionVal = options[extensionName];
  if (optionVal === void 0) {
    return optionVal;
  }
  return extensionType ? extensionType.fromJson(optionVal) : optionVal;
}
var ScalarType, LongType, RepeatType;
var init_reflection_info = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js"() {
    "use strict";
    init_lower_camel_case();
    (function(ScalarType2) {
      ScalarType2[ScalarType2["DOUBLE"] = 1] = "DOUBLE";
      ScalarType2[ScalarType2["FLOAT"] = 2] = "FLOAT";
      ScalarType2[ScalarType2["INT64"] = 3] = "INT64";
      ScalarType2[ScalarType2["UINT64"] = 4] = "UINT64";
      ScalarType2[ScalarType2["INT32"] = 5] = "INT32";
      ScalarType2[ScalarType2["FIXED64"] = 6] = "FIXED64";
      ScalarType2[ScalarType2["FIXED32"] = 7] = "FIXED32";
      ScalarType2[ScalarType2["BOOL"] = 8] = "BOOL";
      ScalarType2[ScalarType2["STRING"] = 9] = "STRING";
      ScalarType2[ScalarType2["BYTES"] = 12] = "BYTES";
      ScalarType2[ScalarType2["UINT32"] = 13] = "UINT32";
      ScalarType2[ScalarType2["SFIXED32"] = 15] = "SFIXED32";
      ScalarType2[ScalarType2["SFIXED64"] = 16] = "SFIXED64";
      ScalarType2[ScalarType2["SINT32"] = 17] = "SINT32";
      ScalarType2[ScalarType2["SINT64"] = 18] = "SINT64";
    })(ScalarType || (ScalarType = {}));
    (function(LongType2) {
      LongType2[LongType2["BIGINT"] = 0] = "BIGINT";
      LongType2[LongType2["STRING"] = 1] = "STRING";
      LongType2[LongType2["NUMBER"] = 2] = "NUMBER";
    })(LongType || (LongType = {}));
    (function(RepeatType2) {
      RepeatType2[RepeatType2["NO"] = 0] = "NO";
      RepeatType2[RepeatType2["PACKED"] = 1] = "PACKED";
      RepeatType2[RepeatType2["UNPACKED"] = 2] = "UNPACKED";
    })(RepeatType || (RepeatType = {}));
    __name(normalizeFieldInfo, "normalizeFieldInfo");
    __name(readFieldOptions, "readFieldOptions");
    __name(readFieldOption, "readFieldOption");
    __name(readMessageOption, "readMessageOption");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/oneof.js
function isOneofGroup(any) {
  if (typeof any != "object" || any === null || !any.hasOwnProperty("oneofKind")) {
    return false;
  }
  switch (typeof any.oneofKind) {
    case "string":
      if (any[any.oneofKind] === void 0)
        return false;
      return Object.keys(any).length == 2;
    case "undefined":
      return Object.keys(any).length == 1;
    default:
      return false;
  }
}
function getOneofValue(oneof, kind) {
  return oneof[kind];
}
function setOneofValue(oneof, kind, value) {
  if (oneof.oneofKind !== void 0) {
    delete oneof[oneof.oneofKind];
  }
  oneof.oneofKind = kind;
  if (value !== void 0) {
    oneof[kind] = value;
  }
}
function clearOneofValue(oneof) {
  if (oneof.oneofKind !== void 0) {
    delete oneof[oneof.oneofKind];
  }
  oneof.oneofKind = void 0;
}
function getSelectedOneofValue(oneof) {
  if (oneof.oneofKind === void 0) {
    return void 0;
  }
  return oneof[oneof.oneofKind];
}
var init_oneof = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/oneof.js"() {
    "use strict";
    __name(isOneofGroup, "isOneofGroup");
    __name(getOneofValue, "getOneofValue");
    __name(setOneofValue, "setOneofValue");
    __name(clearOneofValue, "clearOneofValue");
    __name(getSelectedOneofValue, "getSelectedOneofValue");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js
var ReflectionTypeCheck;
var init_reflection_type_check = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js"() {
    "use strict";
    init_reflection_info();
    init_oneof();
    ReflectionTypeCheck = class {
      static {
        __name(this, "ReflectionTypeCheck");
      }
      constructor(info3) {
        var _a4;
        this.fields = (_a4 = info3.fields) !== null && _a4 !== void 0 ? _a4 : [];
      }
      prepare() {
        if (this.data)
          return;
        const req = [], known = [], oneofs = [];
        for (let field of this.fields) {
          if (field.oneof) {
            if (!oneofs.includes(field.oneof)) {
              oneofs.push(field.oneof);
              req.push(field.oneof);
              known.push(field.oneof);
            }
          } else {
            known.push(field.localName);
            switch (field.kind) {
              case "scalar":
              case "enum":
                if (!field.opt || field.repeat)
                  req.push(field.localName);
                break;
              case "message":
                if (field.repeat)
                  req.push(field.localName);
                break;
              case "map":
                req.push(field.localName);
                break;
            }
          }
        }
        this.data = { req, known, oneofs: Object.values(oneofs) };
      }
      /**
       * Is the argument a valid message as specified by the
       * reflection information?
       *
       * Checks all field types recursively. The `depth`
       * specifies how deep into the structure the check will be.
       *
       * With a depth of 0, only the presence of fields
       * is checked.
       *
       * With a depth of 1 or more, the field types are checked.
       *
       * With a depth of 2 or more, the members of map, repeated
       * and message fields are checked.
       *
       * Message fields will be checked recursively with depth - 1.
       *
       * The number of map entries / repeated values being checked
       * is < depth.
       */
      is(message, depth, allowExcessProperties = false) {
        if (depth < 0)
          return true;
        if (message === null || message === void 0 || typeof message != "object")
          return false;
        this.prepare();
        let keys = Object.keys(message), data = this.data;
        if (keys.length < data.req.length || data.req.some((n3) => !keys.includes(n3)))
          return false;
        if (!allowExcessProperties) {
          if (keys.some((k3) => !data.known.includes(k3)))
            return false;
        }
        if (depth < 1) {
          return true;
        }
        for (const name2 of data.oneofs) {
          const group2 = message[name2];
          if (!isOneofGroup(group2))
            return false;
          if (group2.oneofKind === void 0)
            continue;
          const field = this.fields.find((f3) => f3.localName === group2.oneofKind);
          if (!field)
            return false;
          if (!this.field(group2[group2.oneofKind], field, allowExcessProperties, depth))
            return false;
        }
        for (const field of this.fields) {
          if (field.oneof !== void 0)
            continue;
          if (!this.field(message[field.localName], field, allowExcessProperties, depth))
            return false;
        }
        return true;
      }
      field(arg, field, allowExcessProperties, depth) {
        let repeated = field.repeat;
        switch (field.kind) {
          case "scalar":
            if (arg === void 0)
              return field.opt;
            if (repeated)
              return this.scalars(arg, field.T, depth, field.L);
            return this.scalar(arg, field.T, field.L);
          case "enum":
            if (arg === void 0)
              return field.opt;
            if (repeated)
              return this.scalars(arg, ScalarType.INT32, depth);
            return this.scalar(arg, ScalarType.INT32);
          case "message":
            if (arg === void 0)
              return true;
            if (repeated)
              return this.messages(arg, field.T(), allowExcessProperties, depth);
            return this.message(arg, field.T(), allowExcessProperties, depth);
          case "map":
            if (typeof arg != "object" || arg === null)
              return false;
            if (depth < 2)
              return true;
            if (!this.mapKeys(arg, field.K, depth))
              return false;
            switch (field.V.kind) {
              case "scalar":
                return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);
              case "enum":
                return this.scalars(Object.values(arg), ScalarType.INT32, depth);
              case "message":
                return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);
            }
            break;
        }
        return true;
      }
      message(arg, type2, allowExcessProperties, depth) {
        if (allowExcessProperties) {
          return type2.isAssignable(arg, depth);
        }
        return type2.is(arg, depth);
      }
      messages(arg, type2, allowExcessProperties, depth) {
        if (!Array.isArray(arg))
          return false;
        if (depth < 2)
          return true;
        if (allowExcessProperties) {
          for (let i3 = 0; i3 < arg.length && i3 < depth; i3++)
            if (!type2.isAssignable(arg[i3], depth - 1))
              return false;
        } else {
          for (let i3 = 0; i3 < arg.length && i3 < depth; i3++)
            if (!type2.is(arg[i3], depth - 1))
              return false;
        }
        return true;
      }
      scalar(arg, type2, longType) {
        let argType = typeof arg;
        switch (type2) {
          case ScalarType.UINT64:
          case ScalarType.FIXED64:
          case ScalarType.INT64:
          case ScalarType.SFIXED64:
          case ScalarType.SINT64:
            switch (longType) {
              case LongType.BIGINT:
                return argType == "bigint";
              case LongType.NUMBER:
                return argType == "number" && !isNaN(arg);
              default:
                return argType == "string";
            }
          case ScalarType.BOOL:
            return argType == "boolean";
          case ScalarType.STRING:
            return argType == "string";
          case ScalarType.BYTES:
            return arg instanceof Uint8Array;
          case ScalarType.DOUBLE:
          case ScalarType.FLOAT:
            return argType == "number" && !isNaN(arg);
          default:
            return argType == "number" && Number.isInteger(arg);
        }
      }
      scalars(arg, type2, depth, longType) {
        if (!Array.isArray(arg))
          return false;
        if (depth < 2)
          return true;
        if (Array.isArray(arg)) {
          for (let i3 = 0; i3 < arg.length && i3 < depth; i3++)
            if (!this.scalar(arg[i3], type2, longType))
              return false;
        }
        return true;
      }
      mapKeys(map, type2, depth) {
        let keys = Object.keys(map);
        switch (type2) {
          case ScalarType.INT32:
          case ScalarType.FIXED32:
          case ScalarType.SFIXED32:
          case ScalarType.SINT32:
          case ScalarType.UINT32:
            return this.scalars(keys.slice(0, depth).map((k3) => parseInt(k3)), type2, depth);
          case ScalarType.BOOL:
            return this.scalars(keys.slice(0, depth).map((k3) => k3 == "true" ? true : k3 == "false" ? false : k3), type2, depth);
          default:
            return this.scalars(keys, type2, depth, LongType.STRING);
        }
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js
function reflectionLongConvert(long, type2) {
  switch (type2) {
    case LongType.BIGINT:
      return long.toBigInt();
    case LongType.NUMBER:
      return long.toNumber();
    default:
      return long.toString();
  }
}
var init_reflection_long_convert = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js"() {
    "use strict";
    init_reflection_info();
    __name(reflectionLongConvert, "reflectionLongConvert");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js
var ReflectionJsonReader;
var init_reflection_json_reader = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js"() {
    "use strict";
    init_json_typings();
    init_base642();
    init_reflection_info();
    init_pb_long();
    init_assert();
    init_reflection_long_convert();
    ReflectionJsonReader = class {
      static {
        __name(this, "ReflectionJsonReader");
      }
      constructor(info3) {
        this.info = info3;
      }
      prepare() {
        var _a4;
        if (this.fMap === void 0) {
          this.fMap = {};
          const fieldsInput = (_a4 = this.info.fields) !== null && _a4 !== void 0 ? _a4 : [];
          for (const field of fieldsInput) {
            this.fMap[field.name] = field;
            this.fMap[field.jsonName] = field;
            this.fMap[field.localName] = field;
          }
        }
      }
      // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.
      assert(condition, fieldName, jsonValue) {
        if (!condition) {
          let what = typeofJsonValue(jsonValue);
          if (what == "number" || what == "boolean")
            what = jsonValue.toString();
          throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);
        }
      }
      /**
       * Reads a message from canonical JSON format into the target message.
       *
       * Repeated fields are appended. Map entries are added, overwriting
       * existing keys.
       *
       * If a message field is already present, it will be merged with the
       * new data.
       */
      read(input, message, options) {
        this.prepare();
        const oneofsHandled = [];
        for (const [jsonKey, jsonValue] of Object.entries(input)) {
          const field = this.fMap[jsonKey];
          if (!field) {
            if (!options.ignoreUnknownFields)
              throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);
            continue;
          }
          const localName = field.localName;
          let target;
          if (field.oneof) {
            if (jsonValue === null && (field.kind !== "enum" || field.T()[0] !== "google.protobuf.NullValue")) {
              continue;
            }
            if (oneofsHandled.includes(field.oneof))
              throw new Error(`Multiple members of the oneof group "${field.oneof}" of ${this.info.typeName} are present in JSON.`);
            oneofsHandled.push(field.oneof);
            target = message[field.oneof] = {
              oneofKind: localName
            };
          } else {
            target = message;
          }
          if (field.kind == "map") {
            if (jsonValue === null) {
              continue;
            }
            this.assert(isJsonObject(jsonValue), field.name, jsonValue);
            const fieldObj = target[localName];
            for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {
              this.assert(jsonObjValue !== null, field.name + " map value", null);
              let val;
              switch (field.V.kind) {
                case "message":
                  val = field.V.T().internalJsonRead(jsonObjValue, options);
                  break;
                case "enum":
                  val = this.enum(field.V.T(), jsonObjValue, field.name, options.ignoreUnknownFields);
                  if (val === false)
                    continue;
                  break;
                case "scalar":
                  val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);
                  break;
              }
              this.assert(val !== void 0, field.name + " map value", jsonObjValue);
              let key = jsonObjKey;
              if (field.K == ScalarType.BOOL)
                key = key == "true" ? true : key == "false" ? false : key;
              key = this.scalar(key, field.K, LongType.STRING, field.name).toString();
              fieldObj[key] = val;
            }
          } else if (field.repeat) {
            if (jsonValue === null)
              continue;
            this.assert(Array.isArray(jsonValue), field.name, jsonValue);
            const fieldArr = target[localName];
            for (const jsonItem of jsonValue) {
              this.assert(jsonItem !== null, field.name, null);
              let val;
              switch (field.kind) {
                case "message":
                  val = field.T().internalJsonRead(jsonItem, options);
                  break;
                case "enum":
                  val = this.enum(field.T(), jsonItem, field.name, options.ignoreUnknownFields);
                  if (val === false)
                    continue;
                  break;
                case "scalar":
                  val = this.scalar(jsonItem, field.T, field.L, field.name);
                  break;
              }
              this.assert(val !== void 0, field.name, jsonValue);
              fieldArr.push(val);
            }
          } else {
            switch (field.kind) {
              case "message":
                if (jsonValue === null && field.T().typeName != "google.protobuf.Value") {
                  this.assert(field.oneof === void 0, field.name + " (oneof member)", null);
                  continue;
                }
                target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);
                break;
              case "enum":
                if (jsonValue === null)
                  continue;
                let val = this.enum(field.T(), jsonValue, field.name, options.ignoreUnknownFields);
                if (val === false)
                  continue;
                target[localName] = val;
                break;
              case "scalar":
                if (jsonValue === null)
                  continue;
                target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);
                break;
            }
          }
        }
      }
      /**
       * Returns `false` for unrecognized string representations.
       *
       * google.protobuf.NullValue accepts only JSON `null` (or the old `"NULL_VALUE"`).
       */
      enum(type2, json, fieldName, ignoreUnknownFields) {
        if (type2[0] == "google.protobuf.NullValue")
          assert(json === null || json === "NULL_VALUE", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type2[0]} only accepts null.`);
        if (json === null)
          return 0;
        switch (typeof json) {
          case "number":
            assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);
            return json;
          case "string":
            let localEnumName = json;
            if (type2[2] && json.substring(0, type2[2].length) === type2[2])
              localEnumName = json.substring(type2[2].length);
            let enumNumber = type2[1][localEnumName];
            if (typeof enumNumber === "undefined" && ignoreUnknownFields) {
              return false;
            }
            assert(typeof enumNumber == "number", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type2[0]} has no value for "${json}".`);
            return enumNumber;
        }
        assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}".`);
      }
      scalar(json, type2, longType, fieldName) {
        let e3;
        try {
          switch (type2) {
            // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
            // Either numbers or strings are accepted. Exponent notation is also accepted.
            case ScalarType.DOUBLE:
            case ScalarType.FLOAT:
              if (json === null)
                return 0;
              if (json === "NaN")
                return Number.NaN;
              if (json === "Infinity")
                return Number.POSITIVE_INFINITY;
              if (json === "-Infinity")
                return Number.NEGATIVE_INFINITY;
              if (json === "") {
                e3 = "empty string";
                break;
              }
              if (typeof json == "string" && json.trim().length !== json.length) {
                e3 = "extra whitespace";
                break;
              }
              if (typeof json != "string" && typeof json != "number") {
                break;
              }
              let float = Number(json);
              if (Number.isNaN(float)) {
                e3 = "not a number";
                break;
              }
              if (!Number.isFinite(float)) {
                e3 = "too large or small";
                break;
              }
              if (type2 == ScalarType.FLOAT)
                assertFloat32(float);
              return float;
            // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
            case ScalarType.INT32:
            case ScalarType.FIXED32:
            case ScalarType.SFIXED32:
            case ScalarType.SINT32:
            case ScalarType.UINT32:
              if (json === null)
                return 0;
              let int32;
              if (typeof json == "number")
                int32 = json;
              else if (json === "")
                e3 = "empty string";
              else if (typeof json == "string") {
                if (json.trim().length !== json.length)
                  e3 = "extra whitespace";
                else
                  int32 = Number(json);
              }
              if (int32 === void 0)
                break;
              if (type2 == ScalarType.UINT32)
                assertUInt32(int32);
              else
                assertInt32(int32);
              return int32;
            // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.
            case ScalarType.INT64:
            case ScalarType.SFIXED64:
            case ScalarType.SINT64:
              if (json === null)
                return reflectionLongConvert(PbLong.ZERO, longType);
              if (typeof json != "number" && typeof json != "string")
                break;
              return reflectionLongConvert(PbLong.from(json), longType);
            case ScalarType.FIXED64:
            case ScalarType.UINT64:
              if (json === null)
                return reflectionLongConvert(PbULong.ZERO, longType);
              if (typeof json != "number" && typeof json != "string")
                break;
              return reflectionLongConvert(PbULong.from(json), longType);
            // bool:
            case ScalarType.BOOL:
              if (json === null)
                return false;
              if (typeof json !== "boolean")
                break;
              return json;
            // string:
            case ScalarType.STRING:
              if (json === null)
                return "";
              if (typeof json !== "string") {
                e3 = "extra whitespace";
                break;
              }
              try {
                encodeURIComponent(json);
              } catch (e4) {
                e4 = "invalid UTF8";
                break;
              }
              return json;
            // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
            // Either standard or URL-safe base64 encoding with/without paddings are accepted.
            case ScalarType.BYTES:
              if (json === null || json === "")
                return new Uint8Array(0);
              if (typeof json !== "string")
                break;
              return base64decode(json);
          }
        } catch (error) {
          e3 = error.message;
        }
        this.assert(false, fieldName + (e3 ? " - " + e3 : ""), json);
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js
var ReflectionJsonWriter;
var init_reflection_json_writer = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js"() {
    "use strict";
    init_base642();
    init_pb_long();
    init_reflection_info();
    init_assert();
    ReflectionJsonWriter = class {
      static {
        __name(this, "ReflectionJsonWriter");
      }
      constructor(info3) {
        var _a4;
        this.fields = (_a4 = info3.fields) !== null && _a4 !== void 0 ? _a4 : [];
      }
      /**
       * Converts the message to a JSON object, based on the field descriptors.
       */
      write(message, options) {
        const json = {}, source = message;
        for (const field of this.fields) {
          if (!field.oneof) {
            let jsonValue2 = this.field(field, source[field.localName], options);
            if (jsonValue2 !== void 0)
              json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue2;
            continue;
          }
          const group2 = source[field.oneof];
          if (group2.oneofKind !== field.localName)
            continue;
          const opt = field.kind == "scalar" || field.kind == "enum" ? Object.assign(Object.assign({}, options), { emitDefaultValues: true }) : options;
          let jsonValue = this.field(field, group2[field.localName], opt);
          assert(jsonValue !== void 0);
          json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;
        }
        return json;
      }
      field(field, value, options) {
        let jsonValue = void 0;
        if (field.kind == "map") {
          assert(typeof value == "object" && value !== null);
          const jsonObj = {};
          switch (field.V.kind) {
            case "scalar":
              for (const [entryKey, entryValue] of Object.entries(value)) {
                const val = this.scalar(field.V.T, entryValue, field.name, false, true);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
            case "message":
              const messageType = field.V.T();
              for (const [entryKey, entryValue] of Object.entries(value)) {
                const val = this.message(messageType, entryValue, field.name, options);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
            case "enum":
              const enumInfo = field.V.T();
              for (const [entryKey, entryValue] of Object.entries(value)) {
                assert(entryValue === void 0 || typeof entryValue == "number");
                const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
          }
          if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)
            jsonValue = jsonObj;
        } else if (field.repeat) {
          assert(Array.isArray(value));
          const jsonArr = [];
          switch (field.kind) {
            case "scalar":
              for (let i3 = 0; i3 < value.length; i3++) {
                const val = this.scalar(field.T, value[i3], field.name, field.opt, true);
                assert(val !== void 0);
                jsonArr.push(val);
              }
              break;
            case "enum":
              const enumInfo = field.T();
              for (let i3 = 0; i3 < value.length; i3++) {
                assert(value[i3] === void 0 || typeof value[i3] == "number");
                const val = this.enum(enumInfo, value[i3], field.name, field.opt, true, options.enumAsInteger);
                assert(val !== void 0);
                jsonArr.push(val);
              }
              break;
            case "message":
              const messageType = field.T();
              for (let i3 = 0; i3 < value.length; i3++) {
                const val = this.message(messageType, value[i3], field.name, options);
                assert(val !== void 0);
                jsonArr.push(val);
              }
              break;
          }
          if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)
            jsonValue = jsonArr;
        } else {
          switch (field.kind) {
            case "scalar":
              jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);
              break;
            case "enum":
              jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);
              break;
            case "message":
              jsonValue = this.message(field.T(), value, field.name, options);
              break;
          }
        }
        return jsonValue;
      }
      /**
       * Returns `null` as the default for google.protobuf.NullValue.
       */
      enum(type2, value, fieldName, optional, emitDefaultValues, enumAsInteger) {
        if (type2[0] == "google.protobuf.NullValue")
          return !emitDefaultValues && !optional ? void 0 : null;
        if (value === void 0) {
          assert(optional);
          return void 0;
        }
        if (value === 0 && !emitDefaultValues && !optional)
          return void 0;
        assert(typeof value == "number");
        assert(Number.isInteger(value));
        if (enumAsInteger || !type2[1].hasOwnProperty(value))
          return value;
        if (type2[2])
          return type2[2] + type2[1][value];
        return type2[1][value];
      }
      message(type2, value, fieldName, options) {
        if (value === void 0)
          return options.emitDefaultValues ? null : void 0;
        return type2.internalJsonWrite(value, options);
      }
      scalar(type2, value, fieldName, optional, emitDefaultValues) {
        if (value === void 0) {
          assert(optional);
          return void 0;
        }
        const ed = emitDefaultValues || optional;
        switch (type2) {
          // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
          case ScalarType.INT32:
          case ScalarType.SFIXED32:
          case ScalarType.SINT32:
            if (value === 0)
              return ed ? 0 : void 0;
            assertInt32(value);
            return value;
          case ScalarType.FIXED32:
          case ScalarType.UINT32:
            if (value === 0)
              return ed ? 0 : void 0;
            assertUInt32(value);
            return value;
          // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
          // Either numbers or strings are accepted. Exponent notation is also accepted.
          case ScalarType.FLOAT:
            assertFloat32(value);
          case ScalarType.DOUBLE:
            if (value === 0)
              return ed ? 0 : void 0;
            assert(typeof value == "number");
            if (Number.isNaN(value))
              return "NaN";
            if (value === Number.POSITIVE_INFINITY)
              return "Infinity";
            if (value === Number.NEGATIVE_INFINITY)
              return "-Infinity";
            return value;
          // string:
          case ScalarType.STRING:
            if (value === "")
              return ed ? "" : void 0;
            assert(typeof value == "string");
            return value;
          // bool:
          case ScalarType.BOOL:
            if (value === false)
              return ed ? false : void 0;
            assert(typeof value == "boolean");
            return value;
          // JSON value will be a decimal string. Either numbers or strings are accepted.
          case ScalarType.UINT64:
          case ScalarType.FIXED64:
            assert(typeof value == "number" || typeof value == "string" || typeof value == "bigint");
            let ulong = PbULong.from(value);
            if (ulong.isZero() && !ed)
              return void 0;
            return ulong.toString();
          // JSON value will be a decimal string. Either numbers or strings are accepted.
          case ScalarType.INT64:
          case ScalarType.SFIXED64:
          case ScalarType.SINT64:
            assert(typeof value == "number" || typeof value == "string" || typeof value == "bigint");
            let long = PbLong.from(value);
            if (long.isZero() && !ed)
              return void 0;
            return long.toString();
          // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
          // Either standard or URL-safe base64 encoding with/without paddings are accepted.
          case ScalarType.BYTES:
            assert(value instanceof Uint8Array);
            if (!value.byteLength)
              return ed ? "" : void 0;
            return base64encode2(value);
        }
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js
function reflectionScalarDefault(type2, longType = LongType.STRING) {
  switch (type2) {
    case ScalarType.BOOL:
      return false;
    case ScalarType.UINT64:
    case ScalarType.FIXED64:
      return reflectionLongConvert(PbULong.ZERO, longType);
    case ScalarType.INT64:
    case ScalarType.SFIXED64:
    case ScalarType.SINT64:
      return reflectionLongConvert(PbLong.ZERO, longType);
    case ScalarType.DOUBLE:
    case ScalarType.FLOAT:
      return 0;
    case ScalarType.BYTES:
      return new Uint8Array(0);
    case ScalarType.STRING:
      return "";
    default:
      return 0;
  }
}
var init_reflection_scalar_default = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js"() {
    "use strict";
    init_reflection_info();
    init_reflection_long_convert();
    init_pb_long();
    __name(reflectionScalarDefault, "reflectionScalarDefault");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js
var ReflectionBinaryReader;
var init_reflection_binary_reader = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js"() {
    "use strict";
    init_binary_format_contract();
    init_reflection_info();
    init_reflection_long_convert();
    init_reflection_scalar_default();
    ReflectionBinaryReader = class {
      static {
        __name(this, "ReflectionBinaryReader");
      }
      constructor(info3) {
        this.info = info3;
      }
      prepare() {
        var _a4;
        if (!this.fieldNoToField) {
          const fieldsInput = (_a4 = this.info.fields) !== null && _a4 !== void 0 ? _a4 : [];
          this.fieldNoToField = new Map(fieldsInput.map((field) => [field.no, field]));
        }
      }
      /**
       * Reads a message from binary format into the target message.
       *
       * Repeated fields are appended. Map entries are added, overwriting
       * existing keys.
       *
       * If a message field is already present, it will be merged with the
       * new data.
       */
      read(reader, message, options, length) {
        this.prepare();
        const end = length === void 0 ? reader.len : reader.pos + length;
        while (reader.pos < end) {
          const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);
          if (!field) {
            let u3 = options.readUnknownField;
            if (u3 == "throw")
              throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);
            let d3 = reader.skip(wireType);
            if (u3 !== false)
              (u3 === true ? UnknownFieldHandler.onRead : u3)(this.info.typeName, message, fieldNo, wireType, d3);
            continue;
          }
          let target = message, repeated = field.repeat, localName = field.localName;
          if (field.oneof) {
            target = target[field.oneof];
            if (target.oneofKind !== localName)
              target = message[field.oneof] = {
                oneofKind: localName
              };
          }
          switch (field.kind) {
            case "scalar":
            case "enum":
              let T3 = field.kind == "enum" ? ScalarType.INT32 : field.T;
              let L2 = field.kind == "scalar" ? field.L : void 0;
              if (repeated) {
                let arr = target[localName];
                if (wireType == WireType.LengthDelimited && T3 != ScalarType.STRING && T3 != ScalarType.BYTES) {
                  let e3 = reader.uint32() + reader.pos;
                  while (reader.pos < e3)
                    arr.push(this.scalar(reader, T3, L2));
                } else
                  arr.push(this.scalar(reader, T3, L2));
              } else
                target[localName] = this.scalar(reader, T3, L2);
              break;
            case "message":
              if (repeated) {
                let arr = target[localName];
                let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);
                arr.push(msg);
              } else
                target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);
              break;
            case "map":
              let [mapKey, mapVal] = this.mapEntry(field, reader, options);
              target[localName][mapKey] = mapVal;
              break;
          }
        }
      }
      /**
       * Read a map field, expecting key field = 1, value field = 2
       */
      mapEntry(field, reader, options) {
        let length = reader.uint32();
        let end = reader.pos + length;
        let key = void 0;
        let val = void 0;
        while (reader.pos < end) {
          let [fieldNo, wireType] = reader.tag();
          switch (fieldNo) {
            case 1:
              if (field.K == ScalarType.BOOL)
                key = reader.bool().toString();
              else
                key = this.scalar(reader, field.K, LongType.STRING);
              break;
            case 2:
              switch (field.V.kind) {
                case "scalar":
                  val = this.scalar(reader, field.V.T, field.V.L);
                  break;
                case "enum":
                  val = reader.int32();
                  break;
                case "message":
                  val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);
                  break;
              }
              break;
            default:
              throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);
          }
        }
        if (key === void 0) {
          let keyRaw = reflectionScalarDefault(field.K);
          key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;
        }
        if (val === void 0)
          switch (field.V.kind) {
            case "scalar":
              val = reflectionScalarDefault(field.V.T, field.V.L);
              break;
            case "enum":
              val = 0;
              break;
            case "message":
              val = field.V.T().create();
              break;
          }
        return [key, val];
      }
      scalar(reader, type2, longType) {
        switch (type2) {
          case ScalarType.INT32:
            return reader.int32();
          case ScalarType.STRING:
            return reader.string();
          case ScalarType.BOOL:
            return reader.bool();
          case ScalarType.DOUBLE:
            return reader.double();
          case ScalarType.FLOAT:
            return reader.float();
          case ScalarType.INT64:
            return reflectionLongConvert(reader.int64(), longType);
          case ScalarType.UINT64:
            return reflectionLongConvert(reader.uint64(), longType);
          case ScalarType.FIXED64:
            return reflectionLongConvert(reader.fixed64(), longType);
          case ScalarType.FIXED32:
            return reader.fixed32();
          case ScalarType.BYTES:
            return reader.bytes();
          case ScalarType.UINT32:
            return reader.uint32();
          case ScalarType.SFIXED32:
            return reader.sfixed32();
          case ScalarType.SFIXED64:
            return reflectionLongConvert(reader.sfixed64(), longType);
          case ScalarType.SINT32:
            return reader.sint32();
          case ScalarType.SINT64:
            return reflectionLongConvert(reader.sint64(), longType);
        }
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js
var ReflectionBinaryWriter;
var init_reflection_binary_writer = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js"() {
    "use strict";
    init_binary_format_contract();
    init_reflection_info();
    init_assert();
    init_pb_long();
    ReflectionBinaryWriter = class {
      static {
        __name(this, "ReflectionBinaryWriter");
      }
      constructor(info3) {
        this.info = info3;
      }
      prepare() {
        if (!this.fields) {
          const fieldsInput = this.info.fields ? this.info.fields.concat() : [];
          this.fields = fieldsInput.sort((a3, b3) => a3.no - b3.no);
        }
      }
      /**
       * Writes the message to binary format.
       */
      write(message, writer, options) {
        this.prepare();
        for (const field of this.fields) {
          let value, emitDefault, repeated = field.repeat, localName = field.localName;
          if (field.oneof) {
            const group2 = message[field.oneof];
            if (group2.oneofKind !== localName)
              continue;
            value = group2[localName];
            emitDefault = true;
          } else {
            value = message[localName];
            emitDefault = false;
          }
          switch (field.kind) {
            case "scalar":
            case "enum":
              let T3 = field.kind == "enum" ? ScalarType.INT32 : field.T;
              if (repeated) {
                assert(Array.isArray(value));
                if (repeated == RepeatType.PACKED)
                  this.packed(writer, T3, field.no, value);
                else
                  for (const item of value)
                    this.scalar(writer, T3, field.no, item, true);
              } else if (value === void 0)
                assert(field.opt);
              else
                this.scalar(writer, T3, field.no, value, emitDefault || field.opt);
              break;
            case "message":
              if (repeated) {
                assert(Array.isArray(value));
                for (const item of value)
                  this.message(writer, options, field.T(), field.no, item);
              } else {
                this.message(writer, options, field.T(), field.no, value);
              }
              break;
            case "map":
              assert(typeof value == "object" && value !== null);
              for (const [key, val] of Object.entries(value))
                this.mapEntry(writer, options, field, key, val);
              break;
          }
        }
        let u3 = options.writeUnknownFields;
        if (u3 !== false)
          (u3 === true ? UnknownFieldHandler.onWrite : u3)(this.info.typeName, message, writer);
      }
      mapEntry(writer, options, field, key, value) {
        writer.tag(field.no, WireType.LengthDelimited);
        writer.fork();
        let keyValue = key;
        switch (field.K) {
          case ScalarType.INT32:
          case ScalarType.FIXED32:
          case ScalarType.UINT32:
          case ScalarType.SFIXED32:
          case ScalarType.SINT32:
            keyValue = Number.parseInt(key);
            break;
          case ScalarType.BOOL:
            assert(key == "true" || key == "false");
            keyValue = key == "true";
            break;
        }
        this.scalar(writer, field.K, 1, keyValue, true);
        switch (field.V.kind) {
          case "scalar":
            this.scalar(writer, field.V.T, 2, value, true);
            break;
          case "enum":
            this.scalar(writer, ScalarType.INT32, 2, value, true);
            break;
          case "message":
            this.message(writer, options, field.V.T(), 2, value);
            break;
        }
        writer.join();
      }
      message(writer, options, handler, fieldNo, value) {
        if (value === void 0)
          return;
        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);
        writer.join();
      }
      /**
       * Write a single scalar value.
       */
      scalar(writer, type2, fieldNo, value, emitDefault) {
        let [wireType, method, isDefault] = this.scalarInfo(type2, value);
        if (!isDefault || emitDefault) {
          writer.tag(fieldNo, wireType);
          writer[method](value);
        }
      }
      /**
       * Write an array of scalar values in packed format.
       */
      packed(writer, type2, fieldNo, value) {
        if (!value.length)
          return;
        assert(type2 !== ScalarType.BYTES && type2 !== ScalarType.STRING);
        writer.tag(fieldNo, WireType.LengthDelimited);
        writer.fork();
        let [, method] = this.scalarInfo(type2);
        for (let i3 = 0; i3 < value.length; i3++)
          writer[method](value[i3]);
        writer.join();
      }
      /**
       * Get information for writing a scalar value.
       *
       * Returns tuple:
       * [0]: appropriate WireType
       * [1]: name of the appropriate method of IBinaryWriter
       * [2]: whether the given value is a default value
       *
       * If argument `value` is omitted, [2] is always false.
       */
      scalarInfo(type2, value) {
        let t3 = WireType.Varint;
        let m3;
        let i3 = value === void 0;
        let d3 = value === 0;
        switch (type2) {
          case ScalarType.INT32:
            m3 = "int32";
            break;
          case ScalarType.STRING:
            d3 = i3 || !value.length;
            t3 = WireType.LengthDelimited;
            m3 = "string";
            break;
          case ScalarType.BOOL:
            d3 = value === false;
            m3 = "bool";
            break;
          case ScalarType.UINT32:
            m3 = "uint32";
            break;
          case ScalarType.DOUBLE:
            t3 = WireType.Bit64;
            m3 = "double";
            break;
          case ScalarType.FLOAT:
            t3 = WireType.Bit32;
            m3 = "float";
            break;
          case ScalarType.INT64:
            d3 = i3 || PbLong.from(value).isZero();
            m3 = "int64";
            break;
          case ScalarType.UINT64:
            d3 = i3 || PbULong.from(value).isZero();
            m3 = "uint64";
            break;
          case ScalarType.FIXED64:
            d3 = i3 || PbULong.from(value).isZero();
            t3 = WireType.Bit64;
            m3 = "fixed64";
            break;
          case ScalarType.BYTES:
            d3 = i3 || !value.byteLength;
            t3 = WireType.LengthDelimited;
            m3 = "bytes";
            break;
          case ScalarType.FIXED32:
            t3 = WireType.Bit32;
            m3 = "fixed32";
            break;
          case ScalarType.SFIXED32:
            t3 = WireType.Bit32;
            m3 = "sfixed32";
            break;
          case ScalarType.SFIXED64:
            d3 = i3 || PbLong.from(value).isZero();
            t3 = WireType.Bit64;
            m3 = "sfixed64";
            break;
          case ScalarType.SINT32:
            m3 = "sint32";
            break;
          case ScalarType.SINT64:
            d3 = i3 || PbLong.from(value).isZero();
            m3 = "sint64";
            break;
        }
        return [t3, m3, i3 || d3];
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js
function reflectionCreate(type2) {
  const msg = type2.messagePrototype ? Object.create(type2.messagePrototype) : Object.defineProperty({}, MESSAGE_TYPE, { value: type2 });
  for (let field of type2.fields) {
    let name2 = field.localName;
    if (field.opt)
      continue;
    if (field.oneof)
      msg[field.oneof] = { oneofKind: void 0 };
    else if (field.repeat)
      msg[name2] = [];
    else
      switch (field.kind) {
        case "scalar":
          msg[name2] = reflectionScalarDefault(field.T, field.L);
          break;
        case "enum":
          msg[name2] = 0;
          break;
        case "map":
          msg[name2] = {};
          break;
      }
  }
  return msg;
}
var init_reflection_create = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js"() {
    "use strict";
    init_reflection_scalar_default();
    init_message_type_contract();
    __name(reflectionCreate, "reflectionCreate");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js
function reflectionMergePartial(info3, target, source) {
  let fieldValue, input = source, output;
  for (let field of info3.fields) {
    let name2 = field.localName;
    if (field.oneof) {
      const group2 = input[field.oneof];
      if ((group2 === null || group2 === void 0 ? void 0 : group2.oneofKind) == void 0) {
        continue;
      }
      fieldValue = group2[name2];
      output = target[field.oneof];
      output.oneofKind = group2.oneofKind;
      if (fieldValue == void 0) {
        delete output[name2];
        continue;
      }
    } else {
      fieldValue = input[name2];
      output = target;
      if (fieldValue == void 0) {
        continue;
      }
    }
    if (field.repeat)
      output[name2].length = fieldValue.length;
    switch (field.kind) {
      case "scalar":
      case "enum":
        if (field.repeat)
          for (let i3 = 0; i3 < fieldValue.length; i3++)
            output[name2][i3] = fieldValue[i3];
        else
          output[name2] = fieldValue;
        break;
      case "message":
        let T3 = field.T();
        if (field.repeat)
          for (let i3 = 0; i3 < fieldValue.length; i3++)
            output[name2][i3] = T3.create(fieldValue[i3]);
        else if (output[name2] === void 0)
          output[name2] = T3.create(fieldValue);
        else
          T3.mergePartial(output[name2], fieldValue);
        break;
      case "map":
        switch (field.V.kind) {
          case "scalar":
          case "enum":
            Object.assign(output[name2], fieldValue);
            break;
          case "message":
            let T4 = field.V.T();
            for (let k3 of Object.keys(fieldValue))
              output[name2][k3] = T4.create(fieldValue[k3]);
            break;
        }
        break;
    }
  }
}
var init_reflection_merge_partial = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js"() {
    "use strict";
    __name(reflectionMergePartial, "reflectionMergePartial");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js
function reflectionEquals(info3, a3, b3) {
  if (a3 === b3)
    return true;
  if (!a3 || !b3)
    return false;
  for (let field of info3.fields) {
    let localName = field.localName;
    let val_a = field.oneof ? a3[field.oneof][localName] : a3[localName];
    let val_b = field.oneof ? b3[field.oneof][localName] : b3[localName];
    switch (field.kind) {
      case "enum":
      case "scalar":
        let t3 = field.kind == "enum" ? ScalarType.INT32 : field.T;
        if (!(field.repeat ? repeatedPrimitiveEq(t3, val_a, val_b) : primitiveEq(t3, val_a, val_b)))
          return false;
        break;
      case "map":
        if (!(field.V.kind == "message" ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b)) : repeatedPrimitiveEq(field.V.kind == "enum" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))
          return false;
        break;
      case "message":
        let T3 = field.T();
        if (!(field.repeat ? repeatedMsgEq(T3, val_a, val_b) : T3.equals(val_a, val_b)))
          return false;
        break;
    }
  }
  return true;
}
function primitiveEq(type2, a3, b3) {
  if (a3 === b3)
    return true;
  if (type2 !== ScalarType.BYTES)
    return false;
  let ba2 = a3;
  let bb = b3;
  if (ba2.length !== bb.length)
    return false;
  for (let i3 = 0; i3 < ba2.length; i3++)
    if (ba2[i3] != bb[i3])
      return false;
  return true;
}
function repeatedPrimitiveEq(type2, a3, b3) {
  if (a3.length !== b3.length)
    return false;
  for (let i3 = 0; i3 < a3.length; i3++)
    if (!primitiveEq(type2, a3[i3], b3[i3]))
      return false;
  return true;
}
function repeatedMsgEq(type2, a3, b3) {
  if (a3.length !== b3.length)
    return false;
  for (let i3 = 0; i3 < a3.length; i3++)
    if (!type2.equals(a3[i3], b3[i3]))
      return false;
  return true;
}
var objectValues;
var init_reflection_equals = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js"() {
    "use strict";
    init_reflection_info();
    __name(reflectionEquals, "reflectionEquals");
    objectValues = Object.values;
    __name(primitiveEq, "primitiveEq");
    __name(repeatedPrimitiveEq, "repeatedPrimitiveEq");
    __name(repeatedMsgEq, "repeatedMsgEq");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/message-type.js
var baseDescriptors, MessageType;
var init_message_type = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/message-type.js"() {
    "use strict";
    init_message_type_contract();
    init_reflection_info();
    init_reflection_type_check();
    init_reflection_json_reader();
    init_reflection_json_writer();
    init_reflection_binary_reader();
    init_reflection_binary_writer();
    init_reflection_create();
    init_reflection_merge_partial();
    init_json_typings();
    init_json_format_contract();
    init_reflection_equals();
    init_binary_writer();
    init_binary_reader();
    baseDescriptors = Object.getOwnPropertyDescriptors(Object.getPrototypeOf({}));
    MessageType = class {
      static {
        __name(this, "MessageType");
      }
      constructor(name2, fields, options) {
        this.defaultCheckDepth = 16;
        this.typeName = name2;
        this.fields = fields.map(normalizeFieldInfo);
        this.options = options !== null && options !== void 0 ? options : {};
        this.messagePrototype = Object.create(null, Object.assign(Object.assign({}, baseDescriptors), { [MESSAGE_TYPE]: { value: this } }));
        this.refTypeCheck = new ReflectionTypeCheck(this);
        this.refJsonReader = new ReflectionJsonReader(this);
        this.refJsonWriter = new ReflectionJsonWriter(this);
        this.refBinReader = new ReflectionBinaryReader(this);
        this.refBinWriter = new ReflectionBinaryWriter(this);
      }
      create(value) {
        let message = reflectionCreate(this);
        if (value !== void 0) {
          reflectionMergePartial(this, message, value);
        }
        return message;
      }
      /**
       * Clone the message.
       *
       * Unknown fields are discarded.
       */
      clone(message) {
        let copy2 = this.create();
        reflectionMergePartial(this, copy2, message);
        return copy2;
      }
      /**
       * Determines whether two message of the same type have the same field values.
       * Checks for deep equality, traversing repeated fields, oneof groups, maps
       * and messages recursively.
       * Will also return true if both messages are `undefined`.
       */
      equals(a3, b3) {
        return reflectionEquals(this, a3, b3);
      }
      /**
       * Is the given value assignable to our message type
       * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?
       */
      is(arg, depth = this.defaultCheckDepth) {
        return this.refTypeCheck.is(arg, depth, false);
      }
      /**
       * Is the given value assignable to our message type,
       * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?
       */
      isAssignable(arg, depth = this.defaultCheckDepth) {
        return this.refTypeCheck.is(arg, depth, true);
      }
      /**
       * Copy partial data into the target message.
       */
      mergePartial(target, source) {
        reflectionMergePartial(this, target, source);
      }
      /**
       * Create a new message from binary format.
       */
      fromBinary(data, options) {
        let opt = binaryReadOptions(options);
        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);
      }
      /**
       * Read a new message from a JSON value.
       */
      fromJson(json, options) {
        return this.internalJsonRead(json, jsonReadOptions(options));
      }
      /**
       * Read a new message from a JSON string.
       * This is equivalent to `T.fromJson(JSON.parse(json))`.
       */
      fromJsonString(json, options) {
        let value = JSON.parse(json);
        return this.fromJson(value, options);
      }
      /**
       * Write the message to canonical JSON value.
       */
      toJson(message, options) {
        return this.internalJsonWrite(message, jsonWriteOptions(options));
      }
      /**
       * Convert the message to canonical JSON string.
       * This is equivalent to `JSON.stringify(T.toJson(t))`
       */
      toJsonString(message, options) {
        var _a4;
        let value = this.toJson(message, options);
        return JSON.stringify(value, null, (_a4 = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a4 !== void 0 ? _a4 : 0);
      }
      /**
       * Write the message to binary format.
       */
      toBinary(message, options) {
        let opt = binaryWriteOptions(options);
        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();
      }
      /**
       * This is an internal method. If you just want to read a message from
       * JSON, use `fromJson()` or `fromJsonString()`.
       *
       * Reads JSON value and merges the fields into the target
       * according to protobuf rules. If the target is omitted,
       * a new instance is created first.
       */
      internalJsonRead(json, options, target) {
        if (json !== null && typeof json == "object" && !Array.isArray(json)) {
          let message = target !== null && target !== void 0 ? target : this.create();
          this.refJsonReader.read(json, message, options);
          return message;
        }
        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);
      }
      /**
       * This is an internal method. If you just want to write a message
       * to JSON, use `toJson()` or `toJsonString().
       *
       * Writes JSON value and returns it.
       */
      internalJsonWrite(message, options) {
        return this.refJsonWriter.write(message, options);
      }
      /**
       * This is an internal method. If you just want to write a message
       * in binary format, use `toBinary()`.
       *
       * Serializes the message in binary format and appends it to the given
       * writer. Returns passed writer.
       */
      internalBinaryWrite(message, writer, options) {
        this.refBinWriter.write(message, writer, options);
        return writer;
      }
      /**
       * This is an internal method. If you just want to read a message from
       * binary data, use `fromBinary()`.
       *
       * Reads data from binary format and merges the fields into
       * the target according to protobuf rules. If the target is
       * omitted, a new instance is created first.
       */
      internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create();
        this.refBinReader.read(reader, message, options, length);
        return message;
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-contains-message-type.js
function containsMessageType(msg) {
  return msg[MESSAGE_TYPE] != null;
}
var init_reflection_contains_message_type = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/reflection-contains-message-type.js"() {
    "use strict";
    init_message_type_contract();
    __name(containsMessageType, "containsMessageType");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/enum-object.js
function isEnumObject(arg) {
  if (typeof arg != "object" || arg === null) {
    return false;
  }
  if (!arg.hasOwnProperty(0)) {
    return false;
  }
  for (let k3 of Object.keys(arg)) {
    let num = parseInt(k3);
    if (!Number.isNaN(num)) {
      let nam = arg[num];
      if (nam === void 0)
        return false;
      if (arg[nam] !== num)
        return false;
    } else {
      let num2 = arg[k3];
      if (num2 === void 0)
        return false;
      if (typeof num2 !== "number")
        return false;
      if (arg[num2] === void 0)
        return false;
    }
  }
  return true;
}
function listEnumValues(enumObject) {
  if (!isEnumObject(enumObject))
    throw new Error("not a typescript enum object");
  let values = [];
  for (let [name2, number] of Object.entries(enumObject))
    if (typeof number == "number")
      values.push({ name: name2, number });
  return values;
}
function listEnumNames(enumObject) {
  return listEnumValues(enumObject).map((val) => val.name);
}
function listEnumNumbers(enumObject) {
  return listEnumValues(enumObject).map((val) => val.number).filter((num, index2, arr) => arr.indexOf(num) == index2);
}
var init_enum_object = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/enum-object.js"() {
    "use strict";
    __name(isEnumObject, "isEnumObject");
    __name(listEnumValues, "listEnumValues");
    __name(listEnumNames, "listEnumNames");
    __name(listEnumNumbers, "listEnumNumbers");
  }
});

// node_modules/@protobuf-ts/runtime/build/es2015/index.js
var es2015_exports = {};
__export(es2015_exports, {
  BinaryReader: () => BinaryReader,
  BinaryWriter: () => BinaryWriter,
  LongType: () => LongType,
  MESSAGE_TYPE: () => MESSAGE_TYPE,
  MessageType: () => MessageType,
  PbLong: () => PbLong,
  PbULong: () => PbULong,
  ReflectionBinaryReader: () => ReflectionBinaryReader,
  ReflectionBinaryWriter: () => ReflectionBinaryWriter,
  ReflectionJsonReader: () => ReflectionJsonReader,
  ReflectionJsonWriter: () => ReflectionJsonWriter,
  ReflectionTypeCheck: () => ReflectionTypeCheck,
  RepeatType: () => RepeatType,
  ScalarType: () => ScalarType,
  UnknownFieldHandler: () => UnknownFieldHandler,
  WireType: () => WireType,
  assert: () => assert,
  assertFloat32: () => assertFloat32,
  assertInt32: () => assertInt32,
  assertNever: () => assertNever,
  assertUInt32: () => assertUInt32,
  base64decode: () => base64decode,
  base64encode: () => base64encode2,
  binaryReadOptions: () => binaryReadOptions,
  binaryWriteOptions: () => binaryWriteOptions,
  clearOneofValue: () => clearOneofValue,
  containsMessageType: () => containsMessageType,
  getOneofValue: () => getOneofValue,
  getSelectedOneofValue: () => getSelectedOneofValue,
  isEnumObject: () => isEnumObject,
  isJsonObject: () => isJsonObject,
  isOneofGroup: () => isOneofGroup,
  jsonReadOptions: () => jsonReadOptions,
  jsonWriteOptions: () => jsonWriteOptions,
  listEnumNames: () => listEnumNames,
  listEnumNumbers: () => listEnumNumbers,
  listEnumValues: () => listEnumValues,
  lowerCamelCase: () => lowerCamelCase,
  mergeBinaryOptions: () => mergeBinaryOptions,
  mergeJsonOptions: () => mergeJsonOptions,
  normalizeFieldInfo: () => normalizeFieldInfo,
  readFieldOption: () => readFieldOption,
  readFieldOptions: () => readFieldOptions,
  readMessageOption: () => readMessageOption,
  reflectionCreate: () => reflectionCreate,
  reflectionEquals: () => reflectionEquals,
  reflectionMergePartial: () => reflectionMergePartial,
  reflectionScalarDefault: () => reflectionScalarDefault,
  setOneofValue: () => setOneofValue,
  typeofJsonValue: () => typeofJsonValue,
  utf8read: () => utf8read
});
var init_es2015 = __esm({
  "node_modules/@protobuf-ts/runtime/build/es2015/index.js"() {
    "use strict";
    init_json_typings();
    init_base642();
    init_protobufjs_utf8();
    init_binary_format_contract();
    init_binary_reader();
    init_binary_writer();
    init_pb_long();
    init_json_format_contract();
    init_message_type_contract();
    init_message_type();
    init_reflection_info();
    init_reflection_type_check();
    init_reflection_create();
    init_reflection_scalar_default();
    init_reflection_merge_partial();
    init_reflection_equals();
    init_reflection_binary_reader();
    init_reflection_binary_writer();
    init_reflection_json_reader();
    init_reflection_json_writer();
    init_reflection_contains_message_type();
    init_oneof();
    init_enum_object();
    init_lower_camel_case();
    init_assert();
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/reflection-info.js
function normalizeMethodInfo(method, service) {
  var _a4, _b2, _c2;
  let m3 = method;
  m3.service = service;
  m3.localName = (_a4 = m3.localName) !== null && _a4 !== void 0 ? _a4 : lowerCamelCase(m3.name);
  m3.serverStreaming = !!m3.serverStreaming;
  m3.clientStreaming = !!m3.clientStreaming;
  m3.options = (_b2 = m3.options) !== null && _b2 !== void 0 ? _b2 : {};
  m3.idempotency = (_c2 = m3.idempotency) !== null && _c2 !== void 0 ? _c2 : void 0;
  return m3;
}
function readMethodOptions(service, methodName, extensionName, extensionType) {
  var _a4;
  const options = (_a4 = service.methods.find((m3, i3) => m3.localName === methodName || i3 === methodName)) === null || _a4 === void 0 ? void 0 : _a4.options;
  return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : void 0;
}
function readMethodOption(service, methodName, extensionName, extensionType) {
  var _a4;
  const options = (_a4 = service.methods.find((m3, i3) => m3.localName === methodName || i3 === methodName)) === null || _a4 === void 0 ? void 0 : _a4.options;
  if (!options) {
    return void 0;
  }
  const optionVal = options[extensionName];
  if (optionVal === void 0) {
    return optionVal;
  }
  return extensionType ? extensionType.fromJson(optionVal) : optionVal;
}
function readServiceOption(service, extensionName, extensionType) {
  const options = service.options;
  if (!options) {
    return void 0;
  }
  const optionVal = options[extensionName];
  if (optionVal === void 0) {
    return optionVal;
  }
  return extensionType ? extensionType.fromJson(optionVal) : optionVal;
}
var init_reflection_info2 = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/reflection-info.js"() {
    "use strict";
    init_es2015();
    __name(normalizeMethodInfo, "normalizeMethodInfo");
    __name(readMethodOptions, "readMethodOptions");
    __name(readMethodOption, "readMethodOption");
    __name(readServiceOption, "readServiceOption");
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js
var ServiceType;
var init_service_type = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js"() {
    "use strict";
    init_reflection_info2();
    ServiceType = class {
      static {
        __name(this, "ServiceType");
      }
      constructor(typeName, methods, options) {
        this.typeName = typeName;
        this.methods = methods.map((i3) => normalizeMethodInfo(i3, this));
        this.options = options !== null && options !== void 0 ? options : {};
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-error.js
var RpcError;
var init_rpc_error = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-error.js"() {
    "use strict";
    RpcError = class extends Error {
      static {
        __name(this, "RpcError");
      }
      constructor(message, code = "UNKNOWN", meta) {
        super(message);
        this.name = "RpcError";
        Object.setPrototypeOf(this, new.target.prototype);
        this.code = code;
        this.meta = meta !== null && meta !== void 0 ? meta : {};
      }
      toString() {
        const l3 = [this.name + ": " + this.message];
        if (this.code) {
          l3.push("");
          l3.push("Code: " + this.code);
        }
        if (this.serviceName && this.methodName) {
          l3.push("Method: " + this.serviceName + "/" + this.methodName);
        }
        let m3 = Object.entries(this.meta);
        if (m3.length) {
          l3.push("");
          l3.push("Meta:");
          for (let [k3, v3] of m3) {
            l3.push(`  ${k3}: ${v3}`);
          }
        }
        return l3.join("\n");
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-options.js
function mergeRpcOptions(defaults2, options) {
  if (!options)
    return defaults2;
  let o3 = {};
  copy(defaults2, o3);
  copy(options, o3);
  for (let key of Object.keys(options)) {
    let val = options[key];
    switch (key) {
      case "jsonOptions":
        o3.jsonOptions = mergeJsonOptions(defaults2.jsonOptions, o3.jsonOptions);
        break;
      case "binaryOptions":
        o3.binaryOptions = mergeBinaryOptions(defaults2.binaryOptions, o3.binaryOptions);
        break;
      case "meta":
        o3.meta = {};
        copy(defaults2.meta, o3.meta);
        copy(options.meta, o3.meta);
        break;
      case "interceptors":
        o3.interceptors = defaults2.interceptors ? defaults2.interceptors.concat(val) : val.concat();
        break;
    }
  }
  return o3;
}
function copy(a3, into) {
  if (!a3)
    return;
  let c3 = into;
  for (let [k3, v3] of Object.entries(a3)) {
    if (v3 instanceof Date)
      c3[k3] = new Date(v3.getTime());
    else if (Array.isArray(v3))
      c3[k3] = v3.concat();
    else
      c3[k3] = v3;
  }
}
var init_rpc_options = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-options.js"() {
    "use strict";
    init_es2015();
    __name(mergeRpcOptions, "mergeRpcOptions");
    __name(copy, "copy");
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/deferred.js
var DeferredState, Deferred;
var init_deferred = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/deferred.js"() {
    "use strict";
    (function(DeferredState2) {
      DeferredState2[DeferredState2["PENDING"] = 0] = "PENDING";
      DeferredState2[DeferredState2["REJECTED"] = 1] = "REJECTED";
      DeferredState2[DeferredState2["RESOLVED"] = 2] = "RESOLVED";
    })(DeferredState || (DeferredState = {}));
    Deferred = class {
      static {
        __name(this, "Deferred");
      }
      /**
       * @param preventUnhandledRejectionWarning - prevents the warning
       * "Unhandled Promise rejection" by adding a noop rejection handler.
       * Working with calls returned from the runtime-rpc package in an
       * async function usually means awaiting one call property after
       * the other. This means that the "status" is not being awaited when
       * an earlier await for the "headers" is rejected. This causes the
       * "unhandled promise reject" warning. A more correct behaviour for
       * calls might be to become aware whether at least one of the
       * promises is handled and swallow the rejection warning for the
       * others.
       */
      constructor(preventUnhandledRejectionWarning = true) {
        this._state = DeferredState.PENDING;
        this._promise = new Promise((resolve2, reject) => {
          this._resolve = resolve2;
          this._reject = reject;
        });
        if (preventUnhandledRejectionWarning) {
          this._promise.catch((_3) => {
          });
        }
      }
      /**
       * Get the current state of the promise.
       */
      get state() {
        return this._state;
      }
      /**
       * Get the deferred promise.
       */
      get promise() {
        return this._promise;
      }
      /**
       * Resolve the promise. Throws if the promise is already resolved or rejected.
       */
      resolve(value) {
        if (this.state !== DeferredState.PENDING)
          throw new Error(`cannot resolve ${DeferredState[this.state].toLowerCase()}`);
        this._resolve(value);
        this._state = DeferredState.RESOLVED;
      }
      /**
       * Reject the promise. Throws if the promise is already resolved or rejected.
       */
      reject(reason) {
        if (this.state !== DeferredState.PENDING)
          throw new Error(`cannot reject ${DeferredState[this.state].toLowerCase()}`);
        this._reject(reason);
        this._state = DeferredState.REJECTED;
      }
      /**
       * Resolve the promise. Ignore if not pending.
       */
      resolvePending(val) {
        if (this._state === DeferredState.PENDING)
          this.resolve(val);
      }
      /**
       * Reject the promise. Ignore if not pending.
       */
      rejectPending(reason) {
        if (this._state === DeferredState.PENDING)
          this.reject(reason);
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-output-stream.js
var RpcOutputStreamController;
var init_rpc_output_stream = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-output-stream.js"() {
    "use strict";
    init_deferred();
    init_es2015();
    RpcOutputStreamController = class {
      static {
        __name(this, "RpcOutputStreamController");
      }
      constructor() {
        this._lis = {
          nxt: [],
          msg: [],
          err: [],
          cmp: []
        };
        this._closed = false;
      }
      // --- RpcOutputStream callback API
      onNext(callback) {
        return this.addLis(callback, this._lis.nxt);
      }
      onMessage(callback) {
        return this.addLis(callback, this._lis.msg);
      }
      onError(callback) {
        return this.addLis(callback, this._lis.err);
      }
      onComplete(callback) {
        return this.addLis(callback, this._lis.cmp);
      }
      addLis(callback, list3) {
        list3.push(callback);
        return () => {
          let i3 = list3.indexOf(callback);
          if (i3 >= 0)
            list3.splice(i3, 1);
        };
      }
      // remove all listeners
      clearLis() {
        for (let l3 of Object.values(this._lis))
          l3.splice(0, l3.length);
      }
      // --- Controller API
      /**
       * Is this stream already closed by a completion or error?
       */
      get closed() {
        return this._closed !== false;
      }
      /**
       * Emit message, close with error, or close successfully, but only one
       * at a time.
       * Can be used to wrap a stream by using the other stream's `onNext`.
       */
      notifyNext(message, error, complete) {
        assert((message ? 1 : 0) + (error ? 1 : 0) + (complete ? 1 : 0) <= 1, "only one emission at a time");
        if (message)
          this.notifyMessage(message);
        if (error)
          this.notifyError(error);
        if (complete)
          this.notifyComplete();
      }
      /**
       * Emits a new message. Throws if stream is closed.
       *
       * Triggers onNext and onMessage callbacks.
       */
      notifyMessage(message) {
        assert(!this.closed, "stream is closed");
        this.pushIt({ value: message, done: false });
        this._lis.msg.forEach((l3) => l3(message));
        this._lis.nxt.forEach((l3) => l3(message, void 0, false));
      }
      /**
       * Closes the stream with an error. Throws if stream is closed.
       *
       * Triggers onNext and onError callbacks.
       */
      notifyError(error) {
        assert(!this.closed, "stream is closed");
        this._closed = error;
        this.pushIt(error);
        this._lis.err.forEach((l3) => l3(error));
        this._lis.nxt.forEach((l3) => l3(void 0, error, false));
        this.clearLis();
      }
      /**
       * Closes the stream successfully. Throws if stream is closed.
       *
       * Triggers onNext and onComplete callbacks.
       */
      notifyComplete() {
        assert(!this.closed, "stream is closed");
        this._closed = true;
        this.pushIt({ value: null, done: true });
        this._lis.cmp.forEach((l3) => l3());
        this._lis.nxt.forEach((l3) => l3(void 0, void 0, true));
        this.clearLis();
      }
      /**
       * Creates an async iterator (that can be used with `for await {...}`)
       * to consume the stream.
       *
       * Some things to note:
       * - If an error occurs, the `for await` will throw it.
       * - If an error occurred before the `for await` was started, `for await`
       *   will re-throw it.
       * - If the stream is already complete, the `for await` will be empty.
       * - If your `for await` consumes slower than the stream produces,
       *   for example because you are relaying messages in a slow operation,
       *   messages are queued.
       */
      [Symbol.asyncIterator]() {
        if (!this._itState) {
          this._itState = { q: [] };
        }
        if (this._closed === true)
          this.pushIt({ value: null, done: true });
        else if (this._closed !== false)
          this.pushIt(this._closed);
        return {
          next: /* @__PURE__ */ __name(() => {
            let state3 = this._itState;
            assert(state3, "bad state");
            assert(!state3.p, "iterator contract broken");
            let first = state3.q.shift();
            if (first)
              return "value" in first ? Promise.resolve(first) : Promise.reject(first);
            state3.p = new Deferred();
            return state3.p.promise;
          }, "next")
        };
      }
      // "push" a new iterator result.
      // this either resolves a pending promise, or enqueues the result.
      pushIt(result) {
        let state3 = this._itState;
        if (!state3)
          return;
        if (state3.p) {
          const p3 = state3.p;
          assert(p3.state == DeferredState.PENDING, "iterator contract broken");
          "value" in result ? p3.resolve(result) : p3.reject(result);
          delete state3.p;
        } else {
          state3.q.push(result);
        }
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/unary-call.js
var __awaiter, UnaryCall;
var init_unary_call = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/unary-call.js"() {
    "use strict";
    __awaiter = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    UnaryCall = class {
      static {
        __name(this, "UnaryCall");
      }
      constructor(method, requestHeaders, request3, headers, response, status, trailers) {
        this.method = method;
        this.requestHeaders = requestHeaders;
        this.request = request3;
        this.headers = headers;
        this.response = response;
        this.status = status;
        this.trailers = trailers;
      }
      /**
       * If you are only interested in the final outcome of this call,
       * you can await it to receive a `FinishedUnaryCall`.
       */
      then(onfulfilled, onrejected) {
        return this.promiseFinished().then((value) => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, (reason) => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));
      }
      promiseFinished() {
        return __awaiter(this, void 0, void 0, function* () {
          let [headers, response, status, trailers] = yield Promise.all([this.headers, this.response, this.status, this.trailers]);
          return {
            method: this.method,
            requestHeaders: this.requestHeaders,
            request: this.request,
            headers,
            response,
            status,
            trailers
          };
        });
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/server-streaming-call.js
var __awaiter2, ServerStreamingCall;
var init_server_streaming_call = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/server-streaming-call.js"() {
    "use strict";
    __awaiter2 = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    ServerStreamingCall = class {
      static {
        __name(this, "ServerStreamingCall");
      }
      constructor(method, requestHeaders, request3, headers, response, status, trailers) {
        this.method = method;
        this.requestHeaders = requestHeaders;
        this.request = request3;
        this.headers = headers;
        this.responses = response;
        this.status = status;
        this.trailers = trailers;
      }
      /**
       * Instead of awaiting the response status and trailers, you can
       * just as well await this call itself to receive the server outcome.
       * You should first setup some listeners to the `request` to
       * see the actual messages the server replied with.
       */
      then(onfulfilled, onrejected) {
        return this.promiseFinished().then((value) => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, (reason) => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));
      }
      promiseFinished() {
        return __awaiter2(this, void 0, void 0, function* () {
          let [headers, status, trailers] = yield Promise.all([this.headers, this.status, this.trailers]);
          return {
            method: this.method,
            requestHeaders: this.requestHeaders,
            request: this.request,
            headers,
            status,
            trailers
          };
        });
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/client-streaming-call.js
var __awaiter3, ClientStreamingCall;
var init_client_streaming_call = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/client-streaming-call.js"() {
    "use strict";
    __awaiter3 = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    ClientStreamingCall = class {
      static {
        __name(this, "ClientStreamingCall");
      }
      constructor(method, requestHeaders, request3, headers, response, status, trailers) {
        this.method = method;
        this.requestHeaders = requestHeaders;
        this.requests = request3;
        this.headers = headers;
        this.response = response;
        this.status = status;
        this.trailers = trailers;
      }
      /**
       * Instead of awaiting the response status and trailers, you can
       * just as well await this call itself to receive the server outcome.
       * Note that it may still be valid to send more request messages.
       */
      then(onfulfilled, onrejected) {
        return this.promiseFinished().then((value) => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, (reason) => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));
      }
      promiseFinished() {
        return __awaiter3(this, void 0, void 0, function* () {
          let [headers, response, status, trailers] = yield Promise.all([this.headers, this.response, this.status, this.trailers]);
          return {
            method: this.method,
            requestHeaders: this.requestHeaders,
            headers,
            response,
            status,
            trailers
          };
        });
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/duplex-streaming-call.js
var __awaiter4, DuplexStreamingCall;
var init_duplex_streaming_call = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/duplex-streaming-call.js"() {
    "use strict";
    __awaiter4 = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    DuplexStreamingCall = class {
      static {
        __name(this, "DuplexStreamingCall");
      }
      constructor(method, requestHeaders, request3, headers, response, status, trailers) {
        this.method = method;
        this.requestHeaders = requestHeaders;
        this.requests = request3;
        this.headers = headers;
        this.responses = response;
        this.status = status;
        this.trailers = trailers;
      }
      /**
       * Instead of awaiting the response status and trailers, you can
       * just as well await this call itself to receive the server outcome.
       * Note that it may still be valid to send more request messages.
       */
      then(onfulfilled, onrejected) {
        return this.promiseFinished().then((value) => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, (reason) => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));
      }
      promiseFinished() {
        return __awaiter4(this, void 0, void 0, function* () {
          let [headers, status, trailers] = yield Promise.all([this.headers, this.status, this.trailers]);
          return {
            method: this.method,
            requestHeaders: this.requestHeaders,
            headers,
            status,
            trailers
          };
        });
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/test-transport.js
function delay4(ms2, abort) {
  return (v3) => new Promise((resolve2, reject) => {
    if (abort === null || abort === void 0 ? void 0 : abort.aborted) {
      reject(new RpcError("user cancel", "CANCELLED"));
    } else {
      const id = setTimeout(() => resolve2(v3), ms2);
      if (abort) {
        abort.addEventListener("abort", (ev) => {
          clearTimeout(id);
          reject(new RpcError("user cancel", "CANCELLED"));
        });
      }
    }
  });
}
var __awaiter5, TestTransport, TestInputStream;
var init_test_transport = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/test-transport.js"() {
    "use strict";
    init_rpc_error();
    init_es2015();
    init_rpc_output_stream();
    init_rpc_options();
    init_unary_call();
    init_server_streaming_call();
    init_client_streaming_call();
    init_duplex_streaming_call();
    __awaiter5 = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    TestTransport = class _TestTransport {
      static {
        __name(this, "TestTransport");
      }
      /**
       * Initialize with mock data. Omitted fields have default value.
       */
      constructor(data) {
        this.suppressUncaughtRejections = true;
        this.headerDelay = 10;
        this.responseDelay = 50;
        this.betweenResponseDelay = 10;
        this.afterResponseDelay = 10;
        this.data = data !== null && data !== void 0 ? data : {};
      }
      /**
       * Sent message(s) during the last operation.
       */
      get sentMessages() {
        if (this.lastInput instanceof TestInputStream) {
          return this.lastInput.sent;
        } else if (typeof this.lastInput == "object") {
          return [this.lastInput.single];
        }
        return [];
      }
      /**
       * Sending message(s) completed?
       */
      get sendComplete() {
        if (this.lastInput instanceof TestInputStream) {
          return this.lastInput.completed;
        } else if (typeof this.lastInput == "object") {
          return true;
        }
        return false;
      }
      // Creates a promise for response headers from the mock data.
      promiseHeaders() {
        var _a4;
        const headers = (_a4 = this.data.headers) !== null && _a4 !== void 0 ? _a4 : _TestTransport.defaultHeaders;
        return headers instanceof RpcError ? Promise.reject(headers) : Promise.resolve(headers);
      }
      // Creates a promise for a single, valid, message from the mock data.
      promiseSingleResponse(method) {
        if (this.data.response instanceof RpcError) {
          return Promise.reject(this.data.response);
        }
        let r3;
        if (Array.isArray(this.data.response)) {
          assert(this.data.response.length > 0);
          r3 = this.data.response[0];
        } else if (this.data.response !== void 0) {
          r3 = this.data.response;
        } else {
          r3 = method.O.create();
        }
        assert(method.O.is(r3));
        return Promise.resolve(r3);
      }
      /**
       * Pushes response messages from the mock data to the output stream.
       * If an error response, status or trailers are mocked, the stream is
       * closed with the respective error.
       * Otherwise, stream is completed successfully.
       *
       * The returned promise resolves when the stream is closed. It should
       * not reject. If it does, code is broken.
       */
      streamResponses(method, stream, abort) {
        return __awaiter5(this, void 0, void 0, function* () {
          const messages = [];
          if (this.data.response === void 0) {
            messages.push(method.O.create());
          } else if (Array.isArray(this.data.response)) {
            for (let msg of this.data.response) {
              assert(method.O.is(msg));
              messages.push(msg);
            }
          } else if (!(this.data.response instanceof RpcError)) {
            assert(method.O.is(this.data.response));
            messages.push(this.data.response);
          }
          try {
            yield delay4(this.responseDelay, abort)(void 0);
          } catch (error) {
            stream.notifyError(error);
            return;
          }
          if (this.data.response instanceof RpcError) {
            stream.notifyError(this.data.response);
            return;
          }
          for (let msg of messages) {
            stream.notifyMessage(msg);
            try {
              yield delay4(this.betweenResponseDelay, abort)(void 0);
            } catch (error) {
              stream.notifyError(error);
              return;
            }
          }
          if (this.data.status instanceof RpcError) {
            stream.notifyError(this.data.status);
            return;
          }
          if (this.data.trailers instanceof RpcError) {
            stream.notifyError(this.data.trailers);
            return;
          }
          stream.notifyComplete();
        });
      }
      // Creates a promise for response status from the mock data.
      promiseStatus() {
        var _a4;
        const status = (_a4 = this.data.status) !== null && _a4 !== void 0 ? _a4 : _TestTransport.defaultStatus;
        return status instanceof RpcError ? Promise.reject(status) : Promise.resolve(status);
      }
      // Creates a promise for response trailers from the mock data.
      promiseTrailers() {
        var _a4;
        const trailers = (_a4 = this.data.trailers) !== null && _a4 !== void 0 ? _a4 : _TestTransport.defaultTrailers;
        return trailers instanceof RpcError ? Promise.reject(trailers) : Promise.resolve(trailers);
      }
      maybeSuppressUncaught(...promise) {
        if (this.suppressUncaughtRejections) {
          for (let p3 of promise) {
            p3.catch(() => {
            });
          }
        }
      }
      mergeOptions(options) {
        return mergeRpcOptions({}, options);
      }
      unary(method, input, options) {
        var _a4;
        const requestHeaders = (_a4 = options.meta) !== null && _a4 !== void 0 ? _a4 : {}, headersPromise = this.promiseHeaders().then(delay4(this.headerDelay, options.abort)), responsePromise = headersPromise.catch((_3) => {
        }).then(delay4(this.responseDelay, options.abort)).then((_3) => this.promiseSingleResponse(method)), statusPromise = responsePromise.catch((_3) => {
        }).then(delay4(this.afterResponseDelay, options.abort)).then((_3) => this.promiseStatus()), trailersPromise = responsePromise.catch((_3) => {
        }).then(delay4(this.afterResponseDelay, options.abort)).then((_3) => this.promiseTrailers());
        this.maybeSuppressUncaught(statusPromise, trailersPromise);
        this.lastInput = { single: input };
        return new UnaryCall(method, requestHeaders, input, headersPromise, responsePromise, statusPromise, trailersPromise);
      }
      serverStreaming(method, input, options) {
        var _a4;
        const requestHeaders = (_a4 = options.meta) !== null && _a4 !== void 0 ? _a4 : {}, headersPromise = this.promiseHeaders().then(delay4(this.headerDelay, options.abort)), outputStream = new RpcOutputStreamController(), responseStreamClosedPromise = headersPromise.then(delay4(this.responseDelay, options.abort)).catch(() => {
        }).then(() => this.streamResponses(method, outputStream, options.abort)).then(delay4(this.afterResponseDelay, options.abort)), statusPromise = responseStreamClosedPromise.then(() => this.promiseStatus()), trailersPromise = responseStreamClosedPromise.then(() => this.promiseTrailers());
        this.maybeSuppressUncaught(statusPromise, trailersPromise);
        this.lastInput = { single: input };
        return new ServerStreamingCall(method, requestHeaders, input, headersPromise, outputStream, statusPromise, trailersPromise);
      }
      clientStreaming(method, options) {
        var _a4;
        const requestHeaders = (_a4 = options.meta) !== null && _a4 !== void 0 ? _a4 : {}, headersPromise = this.promiseHeaders().then(delay4(this.headerDelay, options.abort)), responsePromise = headersPromise.catch((_3) => {
        }).then(delay4(this.responseDelay, options.abort)).then((_3) => this.promiseSingleResponse(method)), statusPromise = responsePromise.catch((_3) => {
        }).then(delay4(this.afterResponseDelay, options.abort)).then((_3) => this.promiseStatus()), trailersPromise = responsePromise.catch((_3) => {
        }).then(delay4(this.afterResponseDelay, options.abort)).then((_3) => this.promiseTrailers());
        this.maybeSuppressUncaught(statusPromise, trailersPromise);
        this.lastInput = new TestInputStream(this.data, options.abort);
        return new ClientStreamingCall(method, requestHeaders, this.lastInput, headersPromise, responsePromise, statusPromise, trailersPromise);
      }
      duplex(method, options) {
        var _a4;
        const requestHeaders = (_a4 = options.meta) !== null && _a4 !== void 0 ? _a4 : {}, headersPromise = this.promiseHeaders().then(delay4(this.headerDelay, options.abort)), outputStream = new RpcOutputStreamController(), responseStreamClosedPromise = headersPromise.then(delay4(this.responseDelay, options.abort)).catch(() => {
        }).then(() => this.streamResponses(method, outputStream, options.abort)).then(delay4(this.afterResponseDelay, options.abort)), statusPromise = responseStreamClosedPromise.then(() => this.promiseStatus()), trailersPromise = responseStreamClosedPromise.then(() => this.promiseTrailers());
        this.maybeSuppressUncaught(statusPromise, trailersPromise);
        this.lastInput = new TestInputStream(this.data, options.abort);
        return new DuplexStreamingCall(method, requestHeaders, this.lastInput, headersPromise, outputStream, statusPromise, trailersPromise);
      }
    };
    TestTransport.defaultHeaders = {
      responseHeader: "test"
    };
    TestTransport.defaultStatus = {
      code: "OK",
      detail: "all good"
    };
    TestTransport.defaultTrailers = {
      responseTrailer: "test"
    };
    __name(delay4, "delay");
    TestInputStream = class {
      static {
        __name(this, "TestInputStream");
      }
      constructor(data, abort) {
        this._completed = false;
        this._sent = [];
        this.data = data;
        this.abort = abort;
      }
      get sent() {
        return this._sent;
      }
      get completed() {
        return this._completed;
      }
      send(message) {
        if (this.data.inputMessage instanceof RpcError) {
          return Promise.reject(this.data.inputMessage);
        }
        const delayMs = this.data.inputMessage === void 0 ? 10 : this.data.inputMessage;
        return Promise.resolve(void 0).then(() => {
          this._sent.push(message);
        }).then(delay4(delayMs, this.abort));
      }
      complete() {
        if (this.data.inputComplete instanceof RpcError) {
          return Promise.reject(this.data.inputComplete);
        }
        const delayMs = this.data.inputComplete === void 0 ? 10 : this.data.inputComplete;
        return Promise.resolve(void 0).then(() => {
          this._completed = true;
        }).then(delay4(delayMs, this.abort));
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js
function stackIntercept(kind, transport, method, options, input) {
  var _a4, _b2, _c2, _d2;
  if (kind == "unary") {
    let tail = /* @__PURE__ */ __name((mtd, inp, opt) => transport.unary(mtd, inp, opt), "tail");
    for (const curr of ((_a4 = options.interceptors) !== null && _a4 !== void 0 ? _a4 : []).filter((i3) => i3.interceptUnary).reverse()) {
      const next2 = tail;
      tail = /* @__PURE__ */ __name((mtd, inp, opt) => curr.interceptUnary(next2, mtd, inp, opt), "tail");
    }
    return tail(method, input, options);
  }
  if (kind == "serverStreaming") {
    let tail = /* @__PURE__ */ __name((mtd, inp, opt) => transport.serverStreaming(mtd, inp, opt), "tail");
    for (const curr of ((_b2 = options.interceptors) !== null && _b2 !== void 0 ? _b2 : []).filter((i3) => i3.interceptServerStreaming).reverse()) {
      const next2 = tail;
      tail = /* @__PURE__ */ __name((mtd, inp, opt) => curr.interceptServerStreaming(next2, mtd, inp, opt), "tail");
    }
    return tail(method, input, options);
  }
  if (kind == "clientStreaming") {
    let tail = /* @__PURE__ */ __name((mtd, opt) => transport.clientStreaming(mtd, opt), "tail");
    for (const curr of ((_c2 = options.interceptors) !== null && _c2 !== void 0 ? _c2 : []).filter((i3) => i3.interceptClientStreaming).reverse()) {
      const next2 = tail;
      tail = /* @__PURE__ */ __name((mtd, opt) => curr.interceptClientStreaming(next2, mtd, opt), "tail");
    }
    return tail(method, options);
  }
  if (kind == "duplex") {
    let tail = /* @__PURE__ */ __name((mtd, opt) => transport.duplex(mtd, opt), "tail");
    for (const curr of ((_d2 = options.interceptors) !== null && _d2 !== void 0 ? _d2 : []).filter((i3) => i3.interceptDuplex).reverse()) {
      const next2 = tail;
      tail = /* @__PURE__ */ __name((mtd, opt) => curr.interceptDuplex(next2, mtd, opt), "tail");
    }
    return tail(method, options);
  }
  assertNever(kind);
}
function stackUnaryInterceptors(transport, method, input, options) {
  return stackIntercept("unary", transport, method, options, input);
}
function stackServerStreamingInterceptors(transport, method, input, options) {
  return stackIntercept("serverStreaming", transport, method, options, input);
}
function stackClientStreamingInterceptors(transport, method, options) {
  return stackIntercept("clientStreaming", transport, method, options);
}
function stackDuplexStreamingInterceptors(transport, method, options) {
  return stackIntercept("duplex", transport, method, options);
}
var init_rpc_interceptor = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js"() {
    "use strict";
    init_es2015();
    __name(stackIntercept, "stackIntercept");
    __name(stackUnaryInterceptors, "stackUnaryInterceptors");
    __name(stackServerStreamingInterceptors, "stackServerStreamingInterceptors");
    __name(stackClientStreamingInterceptors, "stackClientStreamingInterceptors");
    __name(stackDuplexStreamingInterceptors, "stackDuplexStreamingInterceptors");
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/server-call-context.js
var ServerCallContextController;
var init_server_call_context = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/server-call-context.js"() {
    "use strict";
    ServerCallContextController = class {
      static {
        __name(this, "ServerCallContextController");
      }
      constructor(method, headers, deadline, sendResponseHeadersFn, defaultStatus = { code: "OK", detail: "" }) {
        this._cancelled = false;
        this._listeners = [];
        this.method = method;
        this.headers = headers;
        this.deadline = deadline;
        this.trailers = {};
        this._sendRH = sendResponseHeadersFn;
        this.status = defaultStatus;
      }
      /**
       * Set the call cancelled.
       *
       * Invokes all callbacks registered with onCancel() and
       * sets `cancelled = true`.
       */
      notifyCancelled() {
        if (!this._cancelled) {
          this._cancelled = true;
          for (let l3 of this._listeners) {
            l3();
          }
        }
      }
      /**
       * Send response headers.
       */
      sendResponseHeaders(data) {
        this._sendRH(data);
      }
      /**
       * Is the call cancelled?
       *
       * When the client closes the connection before the server
       * is done, the call is cancelled.
       *
       * If you want to cancel a request on the server, throw a
       * RpcError with the CANCELLED status code.
       */
      get cancelled() {
        return this._cancelled;
      }
      /**
       * Add a callback for cancellation.
       */
      onCancel(callback) {
        const l3 = this._listeners;
        l3.push(callback);
        return () => {
          let i3 = l3.indexOf(callback);
          if (i3 >= 0)
            l3.splice(i3, 1);
        };
      }
    };
  }
});

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/index.js
var es2015_exports2 = {};
__export(es2015_exports2, {
  ClientStreamingCall: () => ClientStreamingCall,
  Deferred: () => Deferred,
  DeferredState: () => DeferredState,
  DuplexStreamingCall: () => DuplexStreamingCall,
  RpcError: () => RpcError,
  RpcOutputStreamController: () => RpcOutputStreamController,
  ServerCallContextController: () => ServerCallContextController,
  ServerStreamingCall: () => ServerStreamingCall,
  ServiceType: () => ServiceType,
  TestTransport: () => TestTransport,
  UnaryCall: () => UnaryCall,
  mergeRpcOptions: () => mergeRpcOptions,
  readMethodOption: () => readMethodOption,
  readMethodOptions: () => readMethodOptions,
  readServiceOption: () => readServiceOption,
  stackClientStreamingInterceptors: () => stackClientStreamingInterceptors,
  stackDuplexStreamingInterceptors: () => stackDuplexStreamingInterceptors,
  stackIntercept: () => stackIntercept,
  stackServerStreamingInterceptors: () => stackServerStreamingInterceptors,
  stackUnaryInterceptors: () => stackUnaryInterceptors
});
var init_es20152 = __esm({
  "node_modules/@protobuf-ts/runtime-rpc/build/es2015/index.js"() {
    "use strict";
    init_service_type();
    init_reflection_info2();
    init_rpc_error();
    init_rpc_options();
    init_rpc_output_stream();
    init_test_transport();
    init_deferred();
    init_duplex_streaming_call();
    init_client_streaming_call();
    init_server_streaming_call();
    init_unary_call();
    init_rpc_interceptor();
    init_server_call_context();
  }
});

// node_modules/@actions/cache/lib/generated/results/entities/v1/cachescope.js
var require_cachescope = __commonJS({
  "node_modules/@actions/cache/lib/generated/results/entities/v1/cachescope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CacheScope = void 0;
    var runtime_1 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_2 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_3 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_4 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_5 = (init_es2015(), __toCommonJS(es2015_exports));
    var CacheScope$Type = class extends runtime_5.MessageType {
      static {
        __name(this, "CacheScope$Type");
      }
      constructor() {
        super("github.actions.results.entities.v1.CacheScope", [
          {
            no: 1,
            name: "scope",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          },
          {
            no: 2,
            name: "permission",
            kind: "scalar",
            T: 3
            /*ScalarType.INT64*/
          }
        ]);
      }
      create(value) {
        const message = { scope: "", permission: "0" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== void 0)
          (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
      }
      internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
          let [fieldNo, wireType] = reader.tag();
          switch (fieldNo) {
            case /* string scope */
            1:
              message.scope = reader.string();
              break;
            case /* int64 permission */
            2:
              message.permission = reader.int64().toString();
              break;
            default:
              let u3 = options.readUnknownField;
              if (u3 === "throw")
                throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
              let d3 = reader.skip(wireType);
              if (u3 !== false)
                (u3 === true ? runtime_2.UnknownFieldHandler.onRead : u3)(this.typeName, message, fieldNo, wireType, d3);
          }
        }
        return message;
      }
      internalBinaryWrite(message, writer, options) {
        if (message.scope !== "")
          writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.scope);
        if (message.permission !== "0")
          writer.tag(2, runtime_1.WireType.Varint).int64(message.permission);
        let u3 = options.writeUnknownFields;
        if (u3 !== false)
          (u3 == true ? runtime_2.UnknownFieldHandler.onWrite : u3)(this.typeName, message, writer);
        return writer;
      }
    };
    exports2.CacheScope = new CacheScope$Type();
  }
});

// node_modules/@actions/cache/lib/generated/results/entities/v1/cachemetadata.js
var require_cachemetadata = __commonJS({
  "node_modules/@actions/cache/lib/generated/results/entities/v1/cachemetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CacheMetadata = void 0;
    var runtime_1 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_2 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_3 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_4 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_5 = (init_es2015(), __toCommonJS(es2015_exports));
    var cachescope_1 = require_cachescope();
    var CacheMetadata$Type = class extends runtime_5.MessageType {
      static {
        __name(this, "CacheMetadata$Type");
      }
      constructor() {
        super("github.actions.results.entities.v1.CacheMetadata", [
          {
            no: 1,
            name: "repository_id",
            kind: "scalar",
            T: 3
            /*ScalarType.INT64*/
          },
          { no: 2, name: "scope", kind: "message", repeat: 1, T: /* @__PURE__ */ __name(() => cachescope_1.CacheScope, "T") }
        ]);
      }
      create(value) {
        const message = { repositoryId: "0", scope: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== void 0)
          (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
      }
      internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
          let [fieldNo, wireType] = reader.tag();
          switch (fieldNo) {
            case /* int64 repository_id */
            1:
              message.repositoryId = reader.int64().toString();
              break;
            case /* repeated github.actions.results.entities.v1.CacheScope scope */
            2:
              message.scope.push(cachescope_1.CacheScope.internalBinaryRead(reader, reader.uint32(), options));
              break;
            default:
              let u3 = options.readUnknownField;
              if (u3 === "throw")
                throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
              let d3 = reader.skip(wireType);
              if (u3 !== false)
                (u3 === true ? runtime_2.UnknownFieldHandler.onRead : u3)(this.typeName, message, fieldNo, wireType, d3);
          }
        }
        return message;
      }
      internalBinaryWrite(message, writer, options) {
        if (message.repositoryId !== "0")
          writer.tag(1, runtime_1.WireType.Varint).int64(message.repositoryId);
        for (let i3 = 0; i3 < message.scope.length; i3++)
          cachescope_1.CacheScope.internalBinaryWrite(message.scope[i3], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u3 = options.writeUnknownFields;
        if (u3 !== false)
          (u3 == true ? runtime_2.UnknownFieldHandler.onWrite : u3)(this.typeName, message, writer);
        return writer;
      }
    };
    exports2.CacheMetadata = new CacheMetadata$Type();
  }
});

// node_modules/@actions/cache/lib/generated/results/api/v1/cache.js
var require_cache2 = __commonJS({
  "node_modules/@actions/cache/lib/generated/results/api/v1/cache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CacheService = exports2.GetCacheEntryDownloadURLResponse = exports2.GetCacheEntryDownloadURLRequest = exports2.FinalizeCacheEntryUploadResponse = exports2.FinalizeCacheEntryUploadRequest = exports2.CreateCacheEntryResponse = exports2.CreateCacheEntryRequest = void 0;
    var runtime_rpc_1 = (init_es20152(), __toCommonJS(es2015_exports2));
    var runtime_1 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_2 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_3 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_4 = (init_es2015(), __toCommonJS(es2015_exports));
    var runtime_5 = (init_es2015(), __toCommonJS(es2015_exports));
    var cachemetadata_1 = require_cachemetadata();
    var CreateCacheEntryRequest$Type = class extends runtime_5.MessageType {
      static {
        __name(this, "CreateCacheEntryRequest$Type");
      }
      constructor() {
        super("github.actions.results.api.v1.CreateCacheEntryRequest", [
          { no: 1, name: "metadata", kind: "message", T: /* @__PURE__ */ __name(() => cachemetadata_1.CacheMetadata, "T") },
          {
            no: 2,
            name: "key",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          },
          {
            no: 3,
            name: "version",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          }
        ]);
      }
      create(value) {
        const message = { key: "", version: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== void 0)
          (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
      }
      internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
          let [fieldNo, wireType] = reader.tag();
          switch (fieldNo) {
            case /* github.actions.results.entities.v1.CacheMetadata metadata */
            1:
              message.metadata = cachemetadata_1.CacheMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
              break;
            case /* string key */
            2:
              message.key = reader.string();
              break;
            case /* string version */
            3:
              message.version = reader.string();
              break;
            default:
              let u3 = options.readUnknownField;
              if (u3 === "throw")
                throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
              let d3 = reader.skip(wireType);
              if (u3 !== false)
                (u3 === true ? runtime_2.UnknownFieldHandler.onRead : u3)(this.typeName, message, fieldNo, wireType, d3);
          }
        }
        return message;
      }
      internalBinaryWrite(message, writer, options) {
        if (message.metadata)
          cachemetadata_1.CacheMetadata.internalBinaryWrite(message.metadata, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        if (message.key !== "")
          writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.key);
        if (message.version !== "")
          writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.version);
        let u3 = options.writeUnknownFields;
        if (u3 !== false)
          (u3 == true ? runtime_2.UnknownFieldHandler.onWrite : u3)(this.typeName, message, writer);
        return writer;
      }
    };
    exports2.CreateCacheEntryRequest = new CreateCacheEntryRequest$Type();
    var CreateCacheEntryResponse$Type = class extends runtime_5.MessageType {
      static {
        __name(this, "CreateCacheEntryResponse$Type");
      }
      constructor() {
        super("github.actions.results.api.v1.CreateCacheEntryResponse", [
          {
            no: 1,
            name: "ok",
            kind: "scalar",
            T: 8
            /*ScalarType.BOOL*/
          },
          {
            no: 2,
            name: "signed_upload_url",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          }
        ]);
      }
      create(value) {
        const message = { ok: false, signedUploadUrl: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== void 0)
          (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
      }
      internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
          let [fieldNo, wireType] = reader.tag();
          switch (fieldNo) {
            case /* bool ok */
            1:
              message.ok = reader.bool();
              break;
            case /* string signed_upload_url */
            2:
              message.signedUploadUrl = reader.string();
              break;
            default:
              let u3 = options.readUnknownField;
              if (u3 === "throw")
                throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
              let d3 = reader.skip(wireType);
              if (u3 !== false)
                (u3 === true ? runtime_2.UnknownFieldHandler.onRead : u3)(this.typeName, message, fieldNo, wireType, d3);
          }
        }
        return message;
      }
      internalBinaryWrite(message, writer, options) {
        if (message.ok !== false)
          writer.tag(1, runtime_1.WireType.Varint).bool(message.ok);
        if (message.signedUploadUrl !== "")
          writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.signedUploadUrl);
        let u3 = options.writeUnknownFields;
        if (u3 !== false)
          (u3 == true ? runtime_2.UnknownFieldHandler.onWrite : u3)(this.typeName, message, writer);
        return writer;
      }
    };
    exports2.CreateCacheEntryResponse = new CreateCacheEntryResponse$Type();
    var FinalizeCacheEntryUploadRequest$Type = class extends runtime_5.MessageType {
      static {
        __name(this, "FinalizeCacheEntryUploadRequest$Type");
      }
      constructor() {
        super("github.actions.results.api.v1.FinalizeCacheEntryUploadRequest", [
          { no: 1, name: "metadata", kind: "message", T: /* @__PURE__ */ __name(() => cachemetadata_1.CacheMetadata, "T") },
          {
            no: 2,
            name: "key",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          },
          {
            no: 3,
            name: "size_bytes",
            kind: "scalar",
            T: 3
            /*ScalarType.INT64*/
          },
          {
            no: 4,
            name: "version",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          }
        ]);
      }
      create(value) {
        const message = { key: "", sizeBytes: "0", version: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== void 0)
          (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
      }
      internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
          let [fieldNo, wireType] = reader.tag();
          switch (fieldNo) {
            case /* github.actions.results.entities.v1.CacheMetadata metadata */
            1:
              message.metadata = cachemetadata_1.CacheMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
              break;
            case /* string key */
            2:
              message.key = reader.string();
              break;
            case /* int64 size_bytes */
            3:
              message.sizeBytes = reader.int64().toString();
              break;
            case /* string version */
            4:
              message.version = reader.string();
              break;
            default:
              let u3 = options.readUnknownField;
              if (u3 === "throw")
                throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
              let d3 = reader.skip(wireType);
              if (u3 !== false)
                (u3 === true ? runtime_2.UnknownFieldHandler.onRead : u3)(this.typeName, message, fieldNo, wireType, d3);
          }
        }
        return message;
      }
      internalBinaryWrite(message, writer, options) {
        if (message.metadata)
          cachemetadata_1.CacheMetadata.internalBinaryWrite(message.metadata, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        if (message.key !== "")
          writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.key);
        if (message.sizeBytes !== "0")
          writer.tag(3, runtime_1.WireType.Varint).int64(message.sizeBytes);
        if (message.version !== "")
          writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.version);
        let u3 = options.writeUnknownFields;
        if (u3 !== false)
          (u3 == true ? runtime_2.UnknownFieldHandler.onWrite : u3)(this.typeName, message, writer);
        return writer;
      }
    };
    exports2.FinalizeCacheEntryUploadRequest = new FinalizeCacheEntryUploadRequest$Type();
    var FinalizeCacheEntryUploadResponse$Type = class extends runtime_5.MessageType {
      static {
        __name(this, "FinalizeCacheEntryUploadResponse$Type");
      }
      constructor() {
        super("github.actions.results.api.v1.FinalizeCacheEntryUploadResponse", [
          {
            no: 1,
            name: "ok",
            kind: "scalar",
            T: 8
            /*ScalarType.BOOL*/
          },
          {
            no: 2,
            name: "entry_id",
            kind: "scalar",
            T: 3
            /*ScalarType.INT64*/
          }
        ]);
      }
      create(value) {
        const message = { ok: false, entryId: "0" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== void 0)
          (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
      }
      internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
          let [fieldNo, wireType] = reader.tag();
          switch (fieldNo) {
            case /* bool ok */
            1:
              message.ok = reader.bool();
              break;
            case /* int64 entry_id */
            2:
              message.entryId = reader.int64().toString();
              break;
            default:
              let u3 = options.readUnknownField;
              if (u3 === "throw")
                throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
              let d3 = reader.skip(wireType);
              if (u3 !== false)
                (u3 === true ? runtime_2.UnknownFieldHandler.onRead : u3)(this.typeName, message, fieldNo, wireType, d3);
          }
        }
        return message;
      }
      internalBinaryWrite(message, writer, options) {
        if (message.ok !== false)
          writer.tag(1, runtime_1.WireType.Varint).bool(message.ok);
        if (message.entryId !== "0")
          writer.tag(2, runtime_1.WireType.Varint).int64(message.entryId);
        let u3 = options.writeUnknownFields;
        if (u3 !== false)
          (u3 == true ? runtime_2.UnknownFieldHandler.onWrite : u3)(this.typeName, message, writer);
        return writer;
      }
    };
    exports2.FinalizeCacheEntryUploadResponse = new FinalizeCacheEntryUploadResponse$Type();
    var GetCacheEntryDownloadURLRequest$Type = class extends runtime_5.MessageType {
      static {
        __name(this, "GetCacheEntryDownloadURLRequest$Type");
      }
      constructor() {
        super("github.actions.results.api.v1.GetCacheEntryDownloadURLRequest", [
          { no: 1, name: "metadata", kind: "message", T: /* @__PURE__ */ __name(() => cachemetadata_1.CacheMetadata, "T") },
          {
            no: 2,
            name: "key",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          },
          {
            no: 3,
            name: "restore_keys",
            kind: "scalar",
            repeat: 2,
            T: 9
            /*ScalarType.STRING*/
          },
          {
            no: 4,
            name: "version",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          }
        ]);
      }
      create(value) {
        const message = { key: "", restoreKeys: [], version: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== void 0)
          (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
      }
      internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
          let [fieldNo, wireType] = reader.tag();
          switch (fieldNo) {
            case /* github.actions.results.entities.v1.CacheMetadata metadata */
            1:
              message.metadata = cachemetadata_1.CacheMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
              break;
            case /* string key */
            2:
              message.key = reader.string();
              break;
            case /* repeated string restore_keys */
            3:
              message.restoreKeys.push(reader.string());
              break;
            case /* string version */
            4:
              message.version = reader.string();
              break;
            default:
              let u3 = options.readUnknownField;
              if (u3 === "throw")
                throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
              let d3 = reader.skip(wireType);
              if (u3 !== false)
                (u3 === true ? runtime_2.UnknownFieldHandler.onRead : u3)(this.typeName, message, fieldNo, wireType, d3);
          }
        }
        return message;
      }
      internalBinaryWrite(message, writer, options) {
        if (message.metadata)
          cachemetadata_1.CacheMetadata.internalBinaryWrite(message.metadata, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        if (message.key !== "")
          writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.key);
        for (let i3 = 0; i3 < message.restoreKeys.length; i3++)
          writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.restoreKeys[i3]);
        if (message.version !== "")
          writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.version);
        let u3 = options.writeUnknownFields;
        if (u3 !== false)
          (u3 == true ? runtime_2.UnknownFieldHandler.onWrite : u3)(this.typeName, message, writer);
        return writer;
      }
    };
    exports2.GetCacheEntryDownloadURLRequest = new GetCacheEntryDownloadURLRequest$Type();
    var GetCacheEntryDownloadURLResponse$Type = class extends runtime_5.MessageType {
      static {
        __name(this, "GetCacheEntryDownloadURLResponse$Type");
      }
      constructor() {
        super("github.actions.results.api.v1.GetCacheEntryDownloadURLResponse", [
          {
            no: 1,
            name: "ok",
            kind: "scalar",
            T: 8
            /*ScalarType.BOOL*/
          },
          {
            no: 2,
            name: "signed_download_url",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          },
          {
            no: 3,
            name: "matched_key",
            kind: "scalar",
            T: 9
            /*ScalarType.STRING*/
          }
        ]);
      }
      create(value) {
        const message = { ok: false, signedDownloadUrl: "", matchedKey: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== void 0)
          (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
      }
      internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
          let [fieldNo, wireType] = reader.tag();
          switch (fieldNo) {
            case /* bool ok */
            1:
              message.ok = reader.bool();
              break;
            case /* string signed_download_url */
            2:
              message.signedDownloadUrl = reader.string();
              break;
            case /* string matched_key */
            3:
              message.matchedKey = reader.string();
              break;
            default:
              let u3 = options.readUnknownField;
              if (u3 === "throw")
                throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
              let d3 = reader.skip(wireType);
              if (u3 !== false)
                (u3 === true ? runtime_2.UnknownFieldHandler.onRead : u3)(this.typeName, message, fieldNo, wireType, d3);
          }
        }
        return message;
      }
      internalBinaryWrite(message, writer, options) {
        if (message.ok !== false)
          writer.tag(1, runtime_1.WireType.Varint).bool(message.ok);
        if (message.signedDownloadUrl !== "")
          writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.signedDownloadUrl);
        if (message.matchedKey !== "")
          writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.matchedKey);
        let u3 = options.writeUnknownFields;
        if (u3 !== false)
          (u3 == true ? runtime_2.UnknownFieldHandler.onWrite : u3)(this.typeName, message, writer);
        return writer;
      }
    };
    exports2.GetCacheEntryDownloadURLResponse = new GetCacheEntryDownloadURLResponse$Type();
    exports2.CacheService = new runtime_rpc_1.ServiceType("github.actions.results.api.v1.CacheService", [
      { name: "CreateCacheEntry", options: {}, I: exports2.CreateCacheEntryRequest, O: exports2.CreateCacheEntryResponse },
      { name: "FinalizeCacheEntryUpload", options: {}, I: exports2.FinalizeCacheEntryUploadRequest, O: exports2.FinalizeCacheEntryUploadResponse },
      { name: "GetCacheEntryDownloadURL", options: {}, I: exports2.GetCacheEntryDownloadURLRequest, O: exports2.GetCacheEntryDownloadURLResponse }
    ]);
  }
});

// node_modules/@actions/cache/lib/generated/results/api/v1/cache.twirp-client.js
var require_cache_twirp_client = __commonJS({
  "node_modules/@actions/cache/lib/generated/results/api/v1/cache.twirp-client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CacheServiceClientProtobuf = exports2.CacheServiceClientJSON = void 0;
    var cache_1 = require_cache2();
    var CacheServiceClientJSON = class {
      static {
        __name(this, "CacheServiceClientJSON");
      }
      constructor(rpc) {
        this.rpc = rpc;
        this.CreateCacheEntry.bind(this);
        this.FinalizeCacheEntryUpload.bind(this);
        this.GetCacheEntryDownloadURL.bind(this);
      }
      CreateCacheEntry(request3) {
        const data = cache_1.CreateCacheEntryRequest.toJson(request3, {
          useProtoFieldName: true,
          emitDefaultValues: false
        });
        const promise = this.rpc.request("github.actions.results.api.v1.CacheService", "CreateCacheEntry", "application/json", data);
        return promise.then((data2) => cache_1.CreateCacheEntryResponse.fromJson(data2, {
          ignoreUnknownFields: true
        }));
      }
      FinalizeCacheEntryUpload(request3) {
        const data = cache_1.FinalizeCacheEntryUploadRequest.toJson(request3, {
          useProtoFieldName: true,
          emitDefaultValues: false
        });
        const promise = this.rpc.request("github.actions.results.api.v1.CacheService", "FinalizeCacheEntryUpload", "application/json", data);
        return promise.then((data2) => cache_1.FinalizeCacheEntryUploadResponse.fromJson(data2, {
          ignoreUnknownFields: true
        }));
      }
      GetCacheEntryDownloadURL(request3) {
        const data = cache_1.GetCacheEntryDownloadURLRequest.toJson(request3, {
          useProtoFieldName: true,
          emitDefaultValues: false
        });
        const promise = this.rpc.request("github.actions.results.api.v1.CacheService", "GetCacheEntryDownloadURL", "application/json", data);
        return promise.then((data2) => cache_1.GetCacheEntryDownloadURLResponse.fromJson(data2, {
          ignoreUnknownFields: true
        }));
      }
    };
    exports2.CacheServiceClientJSON = CacheServiceClientJSON;
    var CacheServiceClientProtobuf = class {
      static {
        __name(this, "CacheServiceClientProtobuf");
      }
      constructor(rpc) {
        this.rpc = rpc;
        this.CreateCacheEntry.bind(this);
        this.FinalizeCacheEntryUpload.bind(this);
        this.GetCacheEntryDownloadURL.bind(this);
      }
      CreateCacheEntry(request3) {
        const data = cache_1.CreateCacheEntryRequest.toBinary(request3);
        const promise = this.rpc.request("github.actions.results.api.v1.CacheService", "CreateCacheEntry", "application/protobuf", data);
        return promise.then((data2) => cache_1.CreateCacheEntryResponse.fromBinary(data2));
      }
      FinalizeCacheEntryUpload(request3) {
        const data = cache_1.FinalizeCacheEntryUploadRequest.toBinary(request3);
        const promise = this.rpc.request("github.actions.results.api.v1.CacheService", "FinalizeCacheEntryUpload", "application/protobuf", data);
        return promise.then((data2) => cache_1.FinalizeCacheEntryUploadResponse.fromBinary(data2));
      }
      GetCacheEntryDownloadURL(request3) {
        const data = cache_1.GetCacheEntryDownloadURLRequest.toBinary(request3);
        const promise = this.rpc.request("github.actions.results.api.v1.CacheService", "GetCacheEntryDownloadURL", "application/protobuf", data);
        return promise.then((data2) => cache_1.GetCacheEntryDownloadURLResponse.fromBinary(data2));
      }
    };
    exports2.CacheServiceClientProtobuf = CacheServiceClientProtobuf;
  }
});

// node_modules/@actions/cache/lib/internal/shared/cacheTwirpClient.js
var require_cacheTwirpClient = __commonJS({
  "node_modules/@actions/cache/lib/internal/shared/cacheTwirpClient.js"(exports2) {
    "use strict";
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.internalCacheTwirpClient = void 0;
    var core_1 = require_core();
    var user_agent_1 = require_user_agent();
    var errors_1 = require_errors2();
    var config_1 = require_config();
    var cacheUtils_1 = require_cacheUtils();
    var auth_1 = require_auth();
    var http_client_1 = require_lib();
    var cache_twirp_client_1 = require_cache_twirp_client();
    var CacheServiceClient = class {
      static {
        __name(this, "CacheServiceClient");
      }
      constructor(userAgent, maxAttempts, baseRetryIntervalMilliseconds, retryMultiplier) {
        this.maxAttempts = 5;
        this.baseRetryIntervalMilliseconds = 3e3;
        this.retryMultiplier = 1.5;
        const token = (0, cacheUtils_1.getRuntimeToken)();
        this.baseUrl = (0, config_1.getCacheServiceURL)();
        if (maxAttempts) {
          this.maxAttempts = maxAttempts;
        }
        if (baseRetryIntervalMilliseconds) {
          this.baseRetryIntervalMilliseconds = baseRetryIntervalMilliseconds;
        }
        if (retryMultiplier) {
          this.retryMultiplier = retryMultiplier;
        }
        this.httpClient = new http_client_1.HttpClient(userAgent, [
          new auth_1.BearerCredentialHandler(token)
        ]);
      }
      // This function satisfies the Rpc interface. It is compatible with the JSON
      // JSON generated client.
      request(service, method, contentType2, data) {
        return __awaiter6(this, void 0, void 0, function* () {
          const url2 = new URL(`/twirp/${service}/${method}`, this.baseUrl).href;
          (0, core_1.debug)(`[Request] ${method} ${url2}`);
          const headers = {
            "Content-Type": contentType2
          };
          try {
            const { body: body2 } = yield this.retryableRequest(() => __awaiter6(this, void 0, void 0, function* () {
              return this.httpClient.post(url2, JSON.stringify(data), headers);
            }));
            return body2;
          } catch (error) {
            throw new Error(`Failed to ${method}: ${error.message}`);
          }
        });
      }
      retryableRequest(operation) {
        return __awaiter6(this, void 0, void 0, function* () {
          let attempt = 0;
          let errorMessage = "";
          let rawBody = "";
          while (attempt < this.maxAttempts) {
            let isRetryable = false;
            try {
              const response = yield operation();
              const statusCode = response.message.statusCode;
              rawBody = yield response.readBody();
              (0, core_1.debug)(`[Response] - ${response.message.statusCode}`);
              (0, core_1.debug)(`Headers: ${JSON.stringify(response.message.headers, null, 2)}`);
              const body2 = JSON.parse(rawBody);
              (0, core_1.debug)(`Body: ${JSON.stringify(body2, null, 2)}`);
              if (this.isSuccessStatusCode(statusCode)) {
                return { response, body: body2 };
              }
              isRetryable = this.isRetryableHttpStatusCode(statusCode);
              errorMessage = `Failed request: (${statusCode}) ${response.message.statusMessage}`;
              if (body2.msg) {
                if (errors_1.UsageError.isUsageErrorMessage(body2.msg)) {
                  throw new errors_1.UsageError();
                }
                errorMessage = `${errorMessage}: ${body2.msg}`;
              }
            } catch (error) {
              if (error instanceof SyntaxError) {
                (0, core_1.debug)(`Raw Body: ${rawBody}`);
              }
              if (error instanceof errors_1.UsageError) {
                throw error;
              }
              if (errors_1.NetworkError.isNetworkErrorCode(error === null || error === void 0 ? void 0 : error.code)) {
                throw new errors_1.NetworkError(error === null || error === void 0 ? void 0 : error.code);
              }
              isRetryable = true;
              errorMessage = error.message;
            }
            if (!isRetryable) {
              throw new Error(`Received non-retryable error: ${errorMessage}`);
            }
            if (attempt + 1 === this.maxAttempts) {
              throw new Error(`Failed to make request after ${this.maxAttempts} attempts: ${errorMessage}`);
            }
            const retryTimeMilliseconds = this.getExponentialRetryTimeMilliseconds(attempt);
            (0, core_1.info)(`Attempt ${attempt + 1} of ${this.maxAttempts} failed with error: ${errorMessage}. Retrying request in ${retryTimeMilliseconds} ms...`);
            yield this.sleep(retryTimeMilliseconds);
            attempt++;
          }
          throw new Error(`Request failed`);
        });
      }
      isSuccessStatusCode(statusCode) {
        if (!statusCode)
          return false;
        return statusCode >= 200 && statusCode < 300;
      }
      isRetryableHttpStatusCode(statusCode) {
        if (!statusCode)
          return false;
        const retryableStatusCodes = [
          http_client_1.HttpCodes.BadGateway,
          http_client_1.HttpCodes.GatewayTimeout,
          http_client_1.HttpCodes.InternalServerError,
          http_client_1.HttpCodes.ServiceUnavailable,
          http_client_1.HttpCodes.TooManyRequests
        ];
        return retryableStatusCodes.includes(statusCode);
      }
      sleep(milliseconds) {
        return __awaiter6(this, void 0, void 0, function* () {
          return new Promise((resolve2) => setTimeout(resolve2, milliseconds));
        });
      }
      getExponentialRetryTimeMilliseconds(attempt) {
        if (attempt < 0) {
          throw new Error("attempt should be a positive integer");
        }
        if (attempt === 0) {
          return this.baseRetryIntervalMilliseconds;
        }
        const minTime = this.baseRetryIntervalMilliseconds * Math.pow(this.retryMultiplier, attempt);
        const maxTime = minTime * this.retryMultiplier;
        return Math.trunc(Math.random() * (maxTime - minTime) + minTime);
      }
    };
    function internalCacheTwirpClient(options) {
      const client = new CacheServiceClient((0, user_agent_1.getUserAgentString)(), options === null || options === void 0 ? void 0 : options.maxAttempts, options === null || options === void 0 ? void 0 : options.retryIntervalMs, options === null || options === void 0 ? void 0 : options.retryMultiplier);
      return new cache_twirp_client_1.CacheServiceClientJSON(client);
    }
    __name(internalCacheTwirpClient, "internalCacheTwirpClient");
    exports2.internalCacheTwirpClient = internalCacheTwirpClient;
  }
});

// node_modules/@actions/cache/lib/internal/tar.js
var require_tar = __commonJS({
  "node_modules/@actions/cache/lib/internal/tar.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createTar = exports2.extractTar = exports2.listTar = void 0;
    var exec_1 = require_exec();
    var io2 = __importStar(require_io());
    var fs_1 = __require("fs");
    var path14 = __importStar(__require("path"));
    var utils = __importStar(require_cacheUtils());
    var constants_1 = require_constants7();
    var IS_WINDOWS = process.platform === "win32";
    function getTarPath() {
      return __awaiter6(this, void 0, void 0, function* () {
        switch (process.platform) {
          case "win32": {
            const gnuTar = yield utils.getGnuTarPathOnWindows();
            const systemTar = constants_1.SystemTarPathOnWindows;
            if (gnuTar) {
              return { path: gnuTar, type: constants_1.ArchiveToolType.GNU };
            } else if ((0, fs_1.existsSync)(systemTar)) {
              return { path: systemTar, type: constants_1.ArchiveToolType.BSD };
            }
            break;
          }
          case "darwin": {
            const gnuTar = yield io2.which("gtar", false);
            if (gnuTar) {
              return { path: gnuTar, type: constants_1.ArchiveToolType.GNU };
            } else {
              return {
                path: yield io2.which("tar", true),
                type: constants_1.ArchiveToolType.BSD
              };
            }
          }
          default:
            break;
        }
        return {
          path: yield io2.which("tar", true),
          type: constants_1.ArchiveToolType.GNU
        };
      });
    }
    __name(getTarPath, "getTarPath");
    function getTarArgs(tarPath, compressionMethod, type2, archivePath = "") {
      return __awaiter6(this, void 0, void 0, function* () {
        const args = [`"${tarPath.path}"`];
        const cacheFileName = utils.getCacheFileName(compressionMethod);
        const tarFile = "cache.tar";
        const workingDirectory = getWorkingDirectory();
        const BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD && compressionMethod !== constants_1.CompressionMethod.Gzip && IS_WINDOWS;
        switch (type2) {
          case "create":
            args.push("--posix", "-cf", BSD_TAR_ZSTD ? tarFile : cacheFileName.replace(new RegExp(`\\${path14.sep}`, "g"), "/"), "--exclude", BSD_TAR_ZSTD ? tarFile : cacheFileName.replace(new RegExp(`\\${path14.sep}`, "g"), "/"), "-P", "-C", workingDirectory.replace(new RegExp(`\\${path14.sep}`, "g"), "/"), "--files-from", constants_1.ManifestFilename);
            break;
          case "extract":
            args.push("-xf", BSD_TAR_ZSTD ? tarFile : archivePath.replace(new RegExp(`\\${path14.sep}`, "g"), "/"), "-P", "-C", workingDirectory.replace(new RegExp(`\\${path14.sep}`, "g"), "/"));
            break;
          case "list":
            args.push("-tf", BSD_TAR_ZSTD ? tarFile : archivePath.replace(new RegExp(`\\${path14.sep}`, "g"), "/"), "-P");
            break;
        }
        if (tarPath.type === constants_1.ArchiveToolType.GNU) {
          switch (process.platform) {
            case "win32":
              args.push("--force-local");
              break;
            case "darwin":
              args.push("--delay-directory-restore");
              break;
          }
        }
        return args;
      });
    }
    __name(getTarArgs, "getTarArgs");
    function getCommands(compressionMethod, type2, archivePath = "") {
      return __awaiter6(this, void 0, void 0, function* () {
        let args;
        const tarPath = yield getTarPath();
        const tarArgs = yield getTarArgs(tarPath, compressionMethod, type2, archivePath);
        const compressionArgs = type2 !== "create" ? yield getDecompressionProgram(tarPath, compressionMethod, archivePath) : yield getCompressionProgram(tarPath, compressionMethod);
        const BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD && compressionMethod !== constants_1.CompressionMethod.Gzip && IS_WINDOWS;
        if (BSD_TAR_ZSTD && type2 !== "create") {
          args = [[...compressionArgs].join(" "), [...tarArgs].join(" ")];
        } else {
          args = [[...tarArgs].join(" "), [...compressionArgs].join(" ")];
        }
        if (BSD_TAR_ZSTD) {
          return args;
        }
        return [args.join(" ")];
      });
    }
    __name(getCommands, "getCommands");
    function getWorkingDirectory() {
      var _a4;
      return (_a4 = process.env["GITHUB_WORKSPACE"]) !== null && _a4 !== void 0 ? _a4 : process.cwd();
    }
    __name(getWorkingDirectory, "getWorkingDirectory");
    function getDecompressionProgram(tarPath, compressionMethod, archivePath) {
      return __awaiter6(this, void 0, void 0, function* () {
        const BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD && compressionMethod !== constants_1.CompressionMethod.Gzip && IS_WINDOWS;
        switch (compressionMethod) {
          case constants_1.CompressionMethod.Zstd:
            return BSD_TAR_ZSTD ? [
              "zstd -d --long=30 --force -o",
              constants_1.TarFilename,
              archivePath.replace(new RegExp(`\\${path14.sep}`, "g"), "/")
            ] : [
              "--use-compress-program",
              IS_WINDOWS ? '"zstd -d --long=30"' : "unzstd --long=30"
            ];
          case constants_1.CompressionMethod.ZstdWithoutLong:
            return BSD_TAR_ZSTD ? [
              "zstd -d --force -o",
              constants_1.TarFilename,
              archivePath.replace(new RegExp(`\\${path14.sep}`, "g"), "/")
            ] : ["--use-compress-program", IS_WINDOWS ? '"zstd -d"' : "unzstd"];
          default:
            return ["-z"];
        }
      });
    }
    __name(getDecompressionProgram, "getDecompressionProgram");
    function getCompressionProgram(tarPath, compressionMethod) {
      return __awaiter6(this, void 0, void 0, function* () {
        const cacheFileName = utils.getCacheFileName(compressionMethod);
        const BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD && compressionMethod !== constants_1.CompressionMethod.Gzip && IS_WINDOWS;
        switch (compressionMethod) {
          case constants_1.CompressionMethod.Zstd:
            return BSD_TAR_ZSTD ? [
              "zstd -T0 --long=30 --force -o",
              cacheFileName.replace(new RegExp(`\\${path14.sep}`, "g"), "/"),
              constants_1.TarFilename
            ] : [
              "--use-compress-program",
              IS_WINDOWS ? '"zstd -T0 --long=30"' : "zstdmt --long=30"
            ];
          case constants_1.CompressionMethod.ZstdWithoutLong:
            return BSD_TAR_ZSTD ? [
              "zstd -T0 --force -o",
              cacheFileName.replace(new RegExp(`\\${path14.sep}`, "g"), "/"),
              constants_1.TarFilename
            ] : ["--use-compress-program", IS_WINDOWS ? '"zstd -T0"' : "zstdmt"];
          default:
            return ["-z"];
        }
      });
    }
    __name(getCompressionProgram, "getCompressionProgram");
    function execCommands(commands, cwd) {
      return __awaiter6(this, void 0, void 0, function* () {
        for (const command of commands) {
          try {
            yield (0, exec_1.exec)(command, void 0, {
              cwd,
              env: Object.assign(Object.assign({}, process.env), { MSYS: "winsymlinks:nativestrict" })
            });
          } catch (error) {
            throw new Error(`${command.split(" ")[0]} failed with error: ${error === null || error === void 0 ? void 0 : error.message}`);
          }
        }
      });
    }
    __name(execCommands, "execCommands");
    function listTar(archivePath, compressionMethod) {
      return __awaiter6(this, void 0, void 0, function* () {
        const commands = yield getCommands(compressionMethod, "list", archivePath);
        yield execCommands(commands);
      });
    }
    __name(listTar, "listTar");
    exports2.listTar = listTar;
    function extractTar2(archivePath, compressionMethod) {
      return __awaiter6(this, void 0, void 0, function* () {
        const workingDirectory = getWorkingDirectory();
        yield io2.mkdirP(workingDirectory);
        const commands = yield getCommands(compressionMethod, "extract", archivePath);
        yield execCommands(commands);
      });
    }
    __name(extractTar2, "extractTar");
    exports2.extractTar = extractTar2;
    function createTar(archiveFolder, sourceDirectories, compressionMethod) {
      return __awaiter6(this, void 0, void 0, function* () {
        (0, fs_1.writeFileSync)(path14.join(archiveFolder, constants_1.ManifestFilename), sourceDirectories.join("\n"));
        const commands = yield getCommands(compressionMethod, "create");
        yield execCommands(commands, archiveFolder);
      });
    }
    __name(createTar, "createTar");
    exports2.createTar = createTar;
  }
});

// node_modules/@actions/cache/lib/cache.js
var require_cache3 = __commonJS({
  "node_modules/@actions/cache/lib/cache.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.saveCache = exports2.restoreCache = exports2.isFeatureAvailable = exports2.ReserveCacheError = exports2.ValidationError = void 0;
    var core2 = __importStar(require_core());
    var path14 = __importStar(__require("path"));
    var utils = __importStar(require_cacheUtils());
    var cacheHttpClient = __importStar(require_cacheHttpClient());
    var cacheTwirpClient = __importStar(require_cacheTwirpClient());
    var config_1 = require_config();
    var tar_1 = require_tar();
    var constants_1 = require_constants7();
    var ValidationError = class _ValidationError extends Error {
      static {
        __name(this, "ValidationError");
      }
      constructor(message) {
        super(message);
        this.name = "ValidationError";
        Object.setPrototypeOf(this, _ValidationError.prototype);
      }
    };
    exports2.ValidationError = ValidationError;
    var ReserveCacheError2 = class _ReserveCacheError extends Error {
      static {
        __name(this, "ReserveCacheError");
      }
      constructor(message) {
        super(message);
        this.name = "ReserveCacheError";
        Object.setPrototypeOf(this, _ReserveCacheError.prototype);
      }
    };
    exports2.ReserveCacheError = ReserveCacheError2;
    function checkPaths(paths) {
      if (!paths || paths.length === 0) {
        throw new ValidationError(`Path Validation Error: At least one directory or file path is required`);
      }
    }
    __name(checkPaths, "checkPaths");
    function checkKey(key) {
      if (key.length > 512) {
        throw new ValidationError(`Key Validation Error: ${key} cannot be larger than 512 characters.`);
      }
      const regex = /^[^,]*$/;
      if (!regex.test(key)) {
        throw new ValidationError(`Key Validation Error: ${key} cannot contain commas.`);
      }
    }
    __name(checkKey, "checkKey");
    function isFeatureAvailable() {
      return !!process.env["ACTIONS_CACHE_URL"];
    }
    __name(isFeatureAvailable, "isFeatureAvailable");
    exports2.isFeatureAvailable = isFeatureAvailable;
    function restoreCache3(paths, primaryKey, restoreKeys, options, enableCrossOsArchive = false) {
      return __awaiter6(this, void 0, void 0, function* () {
        const cacheServiceVersion = (0, config_1.getCacheServiceVersion)();
        core2.debug(`Cache service version: ${cacheServiceVersion}`);
        checkPaths(paths);
        switch (cacheServiceVersion) {
          case "v2":
            return yield restoreCacheV2(paths, primaryKey, restoreKeys, options, enableCrossOsArchive);
          case "v1":
          default:
            return yield restoreCacheV1(paths, primaryKey, restoreKeys, options, enableCrossOsArchive);
        }
      });
    }
    __name(restoreCache3, "restoreCache");
    exports2.restoreCache = restoreCache3;
    function restoreCacheV1(paths, primaryKey, restoreKeys, options, enableCrossOsArchive = false) {
      return __awaiter6(this, void 0, void 0, function* () {
        restoreKeys = restoreKeys || [];
        const keys = [primaryKey, ...restoreKeys];
        core2.debug("Resolved Keys:");
        core2.debug(JSON.stringify(keys));
        if (keys.length > 10) {
          throw new ValidationError(`Key Validation Error: Keys are limited to a maximum of 10.`);
        }
        for (const key of keys) {
          checkKey(key);
        }
        const compressionMethod = yield utils.getCompressionMethod();
        let archivePath = "";
        try {
          const cacheEntry = yield cacheHttpClient.getCacheEntry(keys, paths, {
            compressionMethod,
            enableCrossOsArchive
          });
          if (!(cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.archiveLocation)) {
            return void 0;
          }
          if (options === null || options === void 0 ? void 0 : options.lookupOnly) {
            core2.info("Lookup only - skipping download");
            return cacheEntry.cacheKey;
          }
          archivePath = path14.join(yield utils.createTempDirectory(), utils.getCacheFileName(compressionMethod));
          core2.debug(`Archive Path: ${archivePath}`);
          yield cacheHttpClient.downloadCache(cacheEntry.archiveLocation, archivePath, options);
          if (core2.isDebug()) {
            yield (0, tar_1.listTar)(archivePath, compressionMethod);
          }
          const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
          core2.info(`Cache Size: ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B)`);
          yield (0, tar_1.extractTar)(archivePath, compressionMethod);
          core2.info("Cache restored successfully");
          return cacheEntry.cacheKey;
        } catch (error) {
          const typedError = error;
          if (typedError.name === ValidationError.name) {
            throw error;
          } else {
            core2.warning(`Failed to restore: ${error.message}`);
          }
        } finally {
          try {
            yield utils.unlinkFile(archivePath);
          } catch (error) {
            core2.debug(`Failed to delete archive: ${error}`);
          }
        }
        return void 0;
      });
    }
    __name(restoreCacheV1, "restoreCacheV1");
    function restoreCacheV2(paths, primaryKey, restoreKeys, options, enableCrossOsArchive = false) {
      return __awaiter6(this, void 0, void 0, function* () {
        options = Object.assign(Object.assign({}, options), { useAzureSdk: true });
        restoreKeys = restoreKeys || [];
        const keys = [primaryKey, ...restoreKeys];
        core2.debug("Resolved Keys:");
        core2.debug(JSON.stringify(keys));
        if (keys.length > 10) {
          throw new ValidationError(`Key Validation Error: Keys are limited to a maximum of 10.`);
        }
        for (const key of keys) {
          checkKey(key);
        }
        let archivePath = "";
        try {
          const twirpClient = cacheTwirpClient.internalCacheTwirpClient();
          const compressionMethod = yield utils.getCompressionMethod();
          const request3 = {
            key: primaryKey,
            restoreKeys,
            version: utils.getCacheVersion(paths, compressionMethod, enableCrossOsArchive)
          };
          const response = yield twirpClient.GetCacheEntryDownloadURL(request3);
          if (!response.ok) {
            core2.debug(`Cache not found for keys: ${keys.join(", ")}`);
            return void 0;
          }
          core2.info(`Cache hit for: ${request3.key}`);
          if (options === null || options === void 0 ? void 0 : options.lookupOnly) {
            core2.info("Lookup only - skipping download");
            return response.matchedKey;
          }
          archivePath = path14.join(yield utils.createTempDirectory(), utils.getCacheFileName(compressionMethod));
          core2.debug(`Archive path: ${archivePath}`);
          core2.debug(`Starting download of archive to: ${archivePath}`);
          yield cacheHttpClient.downloadCache(response.signedDownloadUrl, archivePath, options);
          const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
          core2.info(`Cache Size: ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B)`);
          if (core2.isDebug()) {
            yield (0, tar_1.listTar)(archivePath, compressionMethod);
          }
          yield (0, tar_1.extractTar)(archivePath, compressionMethod);
          core2.info("Cache restored successfully");
          return response.matchedKey;
        } catch (error) {
          const typedError = error;
          if (typedError.name === ValidationError.name) {
            throw error;
          } else {
            core2.warning(`Failed to restore: ${error.message}`);
          }
        } finally {
          try {
            if (archivePath) {
              yield utils.unlinkFile(archivePath);
            }
          } catch (error) {
            core2.debug(`Failed to delete archive: ${error}`);
          }
        }
        return void 0;
      });
    }
    __name(restoreCacheV2, "restoreCacheV2");
    function saveCache3(paths, key, options, enableCrossOsArchive = false) {
      return __awaiter6(this, void 0, void 0, function* () {
        const cacheServiceVersion = (0, config_1.getCacheServiceVersion)();
        core2.debug(`Cache service version: ${cacheServiceVersion}`);
        checkPaths(paths);
        checkKey(key);
        switch (cacheServiceVersion) {
          case "v2":
            return yield saveCacheV2(paths, key, options, enableCrossOsArchive);
          case "v1":
          default:
            return yield saveCacheV1(paths, key, options, enableCrossOsArchive);
        }
      });
    }
    __name(saveCache3, "saveCache");
    exports2.saveCache = saveCache3;
    function saveCacheV1(paths, key, options, enableCrossOsArchive = false) {
      var _a4, _b2, _c2, _d2, _e2;
      return __awaiter6(this, void 0, void 0, function* () {
        const compressionMethod = yield utils.getCompressionMethod();
        let cacheId = -1;
        const cachePaths = yield utils.resolvePaths(paths);
        core2.debug("Cache Paths:");
        core2.debug(`${JSON.stringify(cachePaths)}`);
        if (cachePaths.length === 0) {
          throw new Error(`Path Validation Error: Path(s) specified in the action for caching do(es) not exist, hence no cache is being saved.`);
        }
        const archiveFolder = yield utils.createTempDirectory();
        const archivePath = path14.join(archiveFolder, utils.getCacheFileName(compressionMethod));
        core2.debug(`Archive Path: ${archivePath}`);
        try {
          yield (0, tar_1.createTar)(archiveFolder, cachePaths, compressionMethod);
          if (core2.isDebug()) {
            yield (0, tar_1.listTar)(archivePath, compressionMethod);
          }
          const fileSizeLimit = 10 * 1024 * 1024 * 1024;
          const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
          core2.debug(`File Size: ${archiveFileSize}`);
          if (archiveFileSize > fileSizeLimit && !(0, config_1.isGhes)()) {
            throw new Error(`Cache size of ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B) is over the 10GB limit, not saving cache.`);
          }
          core2.debug("Reserving Cache");
          const reserveCacheResponse = yield cacheHttpClient.reserveCache(key, paths, {
            compressionMethod,
            enableCrossOsArchive,
            cacheSize: archiveFileSize
          });
          if ((_a4 = reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.result) === null || _a4 === void 0 ? void 0 : _a4.cacheId) {
            cacheId = (_b2 = reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.result) === null || _b2 === void 0 ? void 0 : _b2.cacheId;
          } else if ((reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.statusCode) === 400) {
            throw new Error((_d2 = (_c2 = reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.error) === null || _c2 === void 0 ? void 0 : _c2.message) !== null && _d2 !== void 0 ? _d2 : `Cache size of ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B) is over the data cap limit, not saving cache.`);
          } else {
            throw new ReserveCacheError2(`Unable to reserve cache with key ${key}, another job may be creating this cache. More details: ${(_e2 = reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.error) === null || _e2 === void 0 ? void 0 : _e2.message}`);
          }
          core2.debug(`Saving Cache (ID: ${cacheId})`);
          yield cacheHttpClient.saveCache(cacheId, archivePath, "", options);
        } catch (error) {
          const typedError = error;
          if (typedError.name === ValidationError.name) {
            throw error;
          } else if (typedError.name === ReserveCacheError2.name) {
            core2.info(`Failed to save: ${typedError.message}`);
          } else {
            core2.warning(`Failed to save: ${typedError.message}`);
          }
        } finally {
          try {
            yield utils.unlinkFile(archivePath);
          } catch (error) {
            core2.debug(`Failed to delete archive: ${error}`);
          }
        }
        return cacheId;
      });
    }
    __name(saveCacheV1, "saveCacheV1");
    function saveCacheV2(paths, key, options, enableCrossOsArchive = false) {
      return __awaiter6(this, void 0, void 0, function* () {
        options = Object.assign(Object.assign({}, options), { uploadChunkSize: 64 * 1024 * 1024, uploadConcurrency: 8, useAzureSdk: true });
        const compressionMethod = yield utils.getCompressionMethod();
        const twirpClient = cacheTwirpClient.internalCacheTwirpClient();
        let cacheId = -1;
        const cachePaths = yield utils.resolvePaths(paths);
        core2.debug("Cache Paths:");
        core2.debug(`${JSON.stringify(cachePaths)}`);
        if (cachePaths.length === 0) {
          throw new Error(`Path Validation Error: Path(s) specified in the action for caching do(es) not exist, hence no cache is being saved.`);
        }
        const archiveFolder = yield utils.createTempDirectory();
        const archivePath = path14.join(archiveFolder, utils.getCacheFileName(compressionMethod));
        core2.debug(`Archive Path: ${archivePath}`);
        try {
          yield (0, tar_1.createTar)(archiveFolder, cachePaths, compressionMethod);
          if (core2.isDebug()) {
            yield (0, tar_1.listTar)(archivePath, compressionMethod);
          }
          const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
          core2.debug(`File Size: ${archiveFileSize}`);
          if (archiveFileSize > constants_1.CacheFileSizeLimit && !(0, config_1.isGhes)()) {
            throw new Error(`Cache size of ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B) is over the 10GB limit, not saving cache.`);
          }
          options.archiveSizeBytes = archiveFileSize;
          core2.debug("Reserving Cache");
          const version3 = utils.getCacheVersion(paths, compressionMethod, enableCrossOsArchive);
          const request3 = {
            key,
            version: version3
          };
          let signedUploadUrl;
          try {
            const response = yield twirpClient.CreateCacheEntry(request3);
            if (!response.ok) {
              throw new Error("Response was not ok");
            }
            signedUploadUrl = response.signedUploadUrl;
          } catch (error) {
            core2.debug(`Failed to reserve cache: ${error}`);
            throw new ReserveCacheError2(`Unable to reserve cache with key ${key}, another job may be creating this cache.`);
          }
          core2.debug(`Attempting to upload cache located at: ${archivePath}`);
          yield cacheHttpClient.saveCache(cacheId, archivePath, signedUploadUrl, options);
          const finalizeRequest = {
            key,
            version: version3,
            sizeBytes: `${archiveFileSize}`
          };
          const finalizeResponse = yield twirpClient.FinalizeCacheEntryUpload(finalizeRequest);
          core2.debug(`FinalizeCacheEntryUploadResponse: ${finalizeResponse.ok}`);
          if (!finalizeResponse.ok) {
            throw new Error(`Unable to finalize cache with key ${key}, another job may be finalizing this cache.`);
          }
          cacheId = parseInt(finalizeResponse.entryId);
        } catch (error) {
          const typedError = error;
          if (typedError.name === ValidationError.name) {
            throw error;
          } else if (typedError.name === ReserveCacheError2.name) {
            core2.info(`Failed to save: ${typedError.message}`);
          } else {
            core2.warning(`Failed to save: ${typedError.message}`);
          }
        } finally {
          try {
            yield utils.unlinkFile(archivePath);
          } catch (error) {
            core2.debug(`Failed to delete archive: ${error}`);
          }
        }
        return cacheId;
      });
    }
    __name(saveCacheV2, "saveCacheV2");
  }
});

// node_modules/@actions/glob/lib/internal-glob-options-helper.js
var require_internal_glob_options_helper2 = __commonJS({
  "node_modules/@actions/glob/lib/internal-glob-options-helper.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOptions = void 0;
    var core2 = __importStar(require_core());
    function getOptions(copy2) {
      const result = {
        followSymbolicLinks: true,
        implicitDescendants: true,
        matchDirectories: true,
        omitBrokenSymbolicLinks: true,
        excludeHiddenFiles: false
      };
      if (copy2) {
        if (typeof copy2.followSymbolicLinks === "boolean") {
          result.followSymbolicLinks = copy2.followSymbolicLinks;
          core2.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`);
        }
        if (typeof copy2.implicitDescendants === "boolean") {
          result.implicitDescendants = copy2.implicitDescendants;
          core2.debug(`implicitDescendants '${result.implicitDescendants}'`);
        }
        if (typeof copy2.matchDirectories === "boolean") {
          result.matchDirectories = copy2.matchDirectories;
          core2.debug(`matchDirectories '${result.matchDirectories}'`);
        }
        if (typeof copy2.omitBrokenSymbolicLinks === "boolean") {
          result.omitBrokenSymbolicLinks = copy2.omitBrokenSymbolicLinks;
          core2.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`);
        }
        if (typeof copy2.excludeHiddenFiles === "boolean") {
          result.excludeHiddenFiles = copy2.excludeHiddenFiles;
          core2.debug(`excludeHiddenFiles '${result.excludeHiddenFiles}'`);
        }
      }
      return result;
    }
    __name(getOptions, "getOptions");
    exports2.getOptions = getOptions;
  }
});

// node_modules/@actions/glob/lib/internal-path-helper.js
var require_internal_path_helper2 = __commonJS({
  "node_modules/@actions/glob/lib/internal-path-helper.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.safeTrimTrailingSeparator = exports2.normalizeSeparators = exports2.hasRoot = exports2.hasAbsoluteRoot = exports2.ensureAbsoluteRoot = exports2.dirname = void 0;
    var path14 = __importStar(__require("path"));
    var assert_1 = __importDefault(__require("assert"));
    var IS_WINDOWS = process.platform === "win32";
    function dirname(p3) {
      p3 = safeTrimTrailingSeparator(p3);
      if (IS_WINDOWS && /^\\\\[^\\]+(\\[^\\]+)?$/.test(p3)) {
        return p3;
      }
      let result = path14.dirname(p3);
      if (IS_WINDOWS && /^\\\\[^\\]+\\[^\\]+\\$/.test(result)) {
        result = safeTrimTrailingSeparator(result);
      }
      return result;
    }
    __name(dirname, "dirname");
    exports2.dirname = dirname;
    function ensureAbsoluteRoot(root, itemPath) {
      (0, assert_1.default)(root, `ensureAbsoluteRoot parameter 'root' must not be empty`);
      (0, assert_1.default)(itemPath, `ensureAbsoluteRoot parameter 'itemPath' must not be empty`);
      if (hasAbsoluteRoot(itemPath)) {
        return itemPath;
      }
      if (IS_WINDOWS) {
        if (itemPath.match(/^[A-Z]:[^\\/]|^[A-Z]:$/i)) {
          let cwd = process.cwd();
          (0, assert_1.default)(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
          if (itemPath[0].toUpperCase() === cwd[0].toUpperCase()) {
            if (itemPath.length === 2) {
              return `${itemPath[0]}:\\${cwd.substr(3)}`;
            } else {
              if (!cwd.endsWith("\\")) {
                cwd += "\\";
              }
              return `${itemPath[0]}:\\${cwd.substr(3)}${itemPath.substr(2)}`;
            }
          } else {
            return `${itemPath[0]}:\\${itemPath.substr(2)}`;
          }
        } else if (normalizeSeparators(itemPath).match(/^\\$|^\\[^\\]/)) {
          const cwd = process.cwd();
          (0, assert_1.default)(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
          return `${cwd[0]}:\\${itemPath.substr(1)}`;
        }
      }
      (0, assert_1.default)(hasAbsoluteRoot(root), `ensureAbsoluteRoot parameter 'root' must have an absolute root`);
      if (root.endsWith("/") || IS_WINDOWS && root.endsWith("\\")) {
      } else {
        root += path14.sep;
      }
      return root + itemPath;
    }
    __name(ensureAbsoluteRoot, "ensureAbsoluteRoot");
    exports2.ensureAbsoluteRoot = ensureAbsoluteRoot;
    function hasAbsoluteRoot(itemPath) {
      (0, assert_1.default)(itemPath, `hasAbsoluteRoot parameter 'itemPath' must not be empty`);
      itemPath = normalizeSeparators(itemPath);
      if (IS_WINDOWS) {
        return itemPath.startsWith("\\\\") || /^[A-Z]:\\/i.test(itemPath);
      }
      return itemPath.startsWith("/");
    }
    __name(hasAbsoluteRoot, "hasAbsoluteRoot");
    exports2.hasAbsoluteRoot = hasAbsoluteRoot;
    function hasRoot(itemPath) {
      (0, assert_1.default)(itemPath, `isRooted parameter 'itemPath' must not be empty`);
      itemPath = normalizeSeparators(itemPath);
      if (IS_WINDOWS) {
        return itemPath.startsWith("\\") || /^[A-Z]:/i.test(itemPath);
      }
      return itemPath.startsWith("/");
    }
    __name(hasRoot, "hasRoot");
    exports2.hasRoot = hasRoot;
    function normalizeSeparators(p3) {
      p3 = p3 || "";
      if (IS_WINDOWS) {
        p3 = p3.replace(/\//g, "\\");
        const isUnc = /^\\\\+[^\\]/.test(p3);
        return (isUnc ? "\\" : "") + p3.replace(/\\\\+/g, "\\");
      }
      return p3.replace(/\/\/+/g, "/");
    }
    __name(normalizeSeparators, "normalizeSeparators");
    exports2.normalizeSeparators = normalizeSeparators;
    function safeTrimTrailingSeparator(p3) {
      if (!p3) {
        return "";
      }
      p3 = normalizeSeparators(p3);
      if (!p3.endsWith(path14.sep)) {
        return p3;
      }
      if (p3 === path14.sep) {
        return p3;
      }
      if (IS_WINDOWS && /^[A-Z]:\\$/i.test(p3)) {
        return p3;
      }
      return p3.substr(0, p3.length - 1);
    }
    __name(safeTrimTrailingSeparator, "safeTrimTrailingSeparator");
    exports2.safeTrimTrailingSeparator = safeTrimTrailingSeparator;
  }
});

// node_modules/@actions/glob/lib/internal-match-kind.js
var require_internal_match_kind2 = __commonJS({
  "node_modules/@actions/glob/lib/internal-match-kind.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MatchKind = void 0;
    var MatchKind;
    (function(MatchKind2) {
      MatchKind2[MatchKind2["None"] = 0] = "None";
      MatchKind2[MatchKind2["Directory"] = 1] = "Directory";
      MatchKind2[MatchKind2["File"] = 2] = "File";
      MatchKind2[MatchKind2["All"] = 3] = "All";
    })(MatchKind || (exports2.MatchKind = MatchKind = {}));
  }
});

// node_modules/@actions/glob/lib/internal-pattern-helper.js
var require_internal_pattern_helper2 = __commonJS({
  "node_modules/@actions/glob/lib/internal-pattern-helper.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.partialMatch = exports2.match = exports2.getSearchPaths = void 0;
    var pathHelper = __importStar(require_internal_path_helper2());
    var internal_match_kind_1 = require_internal_match_kind2();
    var IS_WINDOWS = process.platform === "win32";
    function getSearchPaths(patterns) {
      patterns = patterns.filter((x3) => !x3.negate);
      const searchPathMap = {};
      for (const pattern of patterns) {
        const key = IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath;
        searchPathMap[key] = "candidate";
      }
      const result = [];
      for (const pattern of patterns) {
        const key = IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath;
        if (searchPathMap[key] === "included") {
          continue;
        }
        let foundAncestor = false;
        let tempKey = key;
        let parent = pathHelper.dirname(tempKey);
        while (parent !== tempKey) {
          if (searchPathMap[parent]) {
            foundAncestor = true;
            break;
          }
          tempKey = parent;
          parent = pathHelper.dirname(tempKey);
        }
        if (!foundAncestor) {
          result.push(pattern.searchPath);
          searchPathMap[key] = "included";
        }
      }
      return result;
    }
    __name(getSearchPaths, "getSearchPaths");
    exports2.getSearchPaths = getSearchPaths;
    function match3(patterns, itemPath) {
      let result = internal_match_kind_1.MatchKind.None;
      for (const pattern of patterns) {
        if (pattern.negate) {
          result &= ~pattern.match(itemPath);
        } else {
          result |= pattern.match(itemPath);
        }
      }
      return result;
    }
    __name(match3, "match");
    exports2.match = match3;
    function partialMatch(patterns, itemPath) {
      return patterns.some((x3) => !x3.negate && x3.partialMatch(itemPath));
    }
    __name(partialMatch, "partialMatch");
    exports2.partialMatch = partialMatch;
  }
});

// node_modules/@actions/glob/lib/internal-path.js
var require_internal_path2 = __commonJS({
  "node_modules/@actions/glob/lib/internal-path.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Path = void 0;
    var path14 = __importStar(__require("path"));
    var pathHelper = __importStar(require_internal_path_helper2());
    var assert_1 = __importDefault(__require("assert"));
    var IS_WINDOWS = process.platform === "win32";
    var Path = class {
      static {
        __name(this, "Path");
      }
      /**
       * Constructs a Path
       * @param itemPath Path or array of segments
       */
      constructor(itemPath) {
        this.segments = [];
        if (typeof itemPath === "string") {
          (0, assert_1.default)(itemPath, `Parameter 'itemPath' must not be empty`);
          itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
          if (!pathHelper.hasRoot(itemPath)) {
            this.segments = itemPath.split(path14.sep);
          } else {
            let remaining = itemPath;
            let dir = pathHelper.dirname(remaining);
            while (dir !== remaining) {
              const basename2 = path14.basename(remaining);
              this.segments.unshift(basename2);
              remaining = dir;
              dir = pathHelper.dirname(remaining);
            }
            this.segments.unshift(remaining);
          }
        } else {
          (0, assert_1.default)(itemPath.length > 0, `Parameter 'itemPath' must not be an empty array`);
          for (let i3 = 0; i3 < itemPath.length; i3++) {
            let segment = itemPath[i3];
            (0, assert_1.default)(segment, `Parameter 'itemPath' must not contain any empty segments`);
            segment = pathHelper.normalizeSeparators(itemPath[i3]);
            if (i3 === 0 && pathHelper.hasRoot(segment)) {
              segment = pathHelper.safeTrimTrailingSeparator(segment);
              (0, assert_1.default)(segment === pathHelper.dirname(segment), `Parameter 'itemPath' root segment contains information for multiple segments`);
              this.segments.push(segment);
            } else {
              (0, assert_1.default)(!segment.includes(path14.sep), `Parameter 'itemPath' contains unexpected path separators`);
              this.segments.push(segment);
            }
          }
        }
      }
      /**
       * Converts the path to it's string representation
       */
      toString() {
        let result = this.segments[0];
        let skipSlash = result.endsWith(path14.sep) || IS_WINDOWS && /^[A-Z]:$/i.test(result);
        for (let i3 = 1; i3 < this.segments.length; i3++) {
          if (skipSlash) {
            skipSlash = false;
          } else {
            result += path14.sep;
          }
          result += this.segments[i3];
        }
        return result;
      }
    };
    exports2.Path = Path;
  }
});

// node_modules/@actions/glob/lib/internal-pattern.js
var require_internal_pattern2 = __commonJS({
  "node_modules/@actions/glob/lib/internal-pattern.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Pattern = void 0;
    var os5 = __importStar(__require("os"));
    var path14 = __importStar(__require("path"));
    var pathHelper = __importStar(require_internal_path_helper2());
    var assert_1 = __importDefault(__require("assert"));
    var minimatch_1 = require_minimatch();
    var internal_match_kind_1 = require_internal_match_kind2();
    var internal_path_1 = require_internal_path2();
    var IS_WINDOWS = process.platform === "win32";
    var Pattern = class _Pattern {
      static {
        __name(this, "Pattern");
      }
      constructor(patternOrNegate, isImplicitPattern = false, segments, homedir) {
        this.negate = false;
        let pattern;
        if (typeof patternOrNegate === "string") {
          pattern = patternOrNegate.trim();
        } else {
          segments = segments || [];
          (0, assert_1.default)(segments.length, `Parameter 'segments' must not empty`);
          const root = _Pattern.getLiteral(segments[0]);
          (0, assert_1.default)(root && pathHelper.hasAbsoluteRoot(root), `Parameter 'segments' first element must be a root path`);
          pattern = new internal_path_1.Path(segments).toString().trim();
          if (patternOrNegate) {
            pattern = `!${pattern}`;
          }
        }
        while (pattern.startsWith("!")) {
          this.negate = !this.negate;
          pattern = pattern.substr(1).trim();
        }
        pattern = _Pattern.fixupPattern(pattern, homedir);
        this.segments = new internal_path_1.Path(pattern).segments;
        this.trailingSeparator = pathHelper.normalizeSeparators(pattern).endsWith(path14.sep);
        pattern = pathHelper.safeTrimTrailingSeparator(pattern);
        let foundGlob = false;
        const searchSegments = this.segments.map((x3) => _Pattern.getLiteral(x3)).filter((x3) => !foundGlob && !(foundGlob = x3 === ""));
        this.searchPath = new internal_path_1.Path(searchSegments).toString();
        this.rootRegExp = new RegExp(_Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? "i" : "");
        this.isImplicitPattern = isImplicitPattern;
        const minimatchOptions2 = {
          dot: true,
          nobrace: true,
          nocase: IS_WINDOWS,
          nocomment: true,
          noext: true,
          nonegate: true
        };
        pattern = IS_WINDOWS ? pattern.replace(/\\/g, "/") : pattern;
        this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions2);
      }
      /**
       * Matches the pattern against the specified path
       */
      match(itemPath) {
        if (this.segments[this.segments.length - 1] === "**") {
          itemPath = pathHelper.normalizeSeparators(itemPath);
          if (!itemPath.endsWith(path14.sep) && this.isImplicitPattern === false) {
            itemPath = `${itemPath}${path14.sep}`;
          }
        } else {
          itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        }
        if (this.minimatch.match(itemPath)) {
          return this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All;
        }
        return internal_match_kind_1.MatchKind.None;
      }
      /**
       * Indicates whether the pattern may match descendants of the specified path
       */
      partialMatch(itemPath) {
        itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        if (pathHelper.dirname(itemPath) === itemPath) {
          return this.rootRegExp.test(itemPath);
        }
        return this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\+/ : /\/+/), this.minimatch.set[0], true);
      }
      /**
       * Escapes glob patterns within a path
       */
      static globEscape(s3) {
        return (IS_WINDOWS ? s3 : s3.replace(/\\/g, "\\\\")).replace(/(\[)(?=[^/]+\])/g, "[[]").replace(/\?/g, "[?]").replace(/\*/g, "[*]");
      }
      /**
       * Normalizes slashes and ensures absolute root
       */
      static fixupPattern(pattern, homedir) {
        (0, assert_1.default)(pattern, "pattern cannot be empty");
        const literalSegments = new internal_path_1.Path(pattern).segments.map((x3) => _Pattern.getLiteral(x3));
        (0, assert_1.default)(literalSegments.every((x3, i3) => (x3 !== "." || i3 === 0) && x3 !== ".."), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`);
        (0, assert_1.default)(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`);
        pattern = pathHelper.normalizeSeparators(pattern);
        if (pattern === "." || pattern.startsWith(`.${path14.sep}`)) {
          pattern = _Pattern.globEscape(process.cwd()) + pattern.substr(1);
        } else if (pattern === "~" || pattern.startsWith(`~${path14.sep}`)) {
          homedir = homedir || os5.homedir();
          (0, assert_1.default)(homedir, "Unable to determine HOME directory");
          (0, assert_1.default)(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`);
          pattern = _Pattern.globEscape(homedir) + pattern.substr(1);
        } else if (IS_WINDOWS && (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\]/i))) {
          let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", pattern.substr(0, 2));
          if (pattern.length > 2 && !root.endsWith("\\")) {
            root += "\\";
          }
          pattern = _Pattern.globEscape(root) + pattern.substr(2);
        } else if (IS_WINDOWS && (pattern === "\\" || pattern.match(/^\\[^\\]/))) {
          let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", "\\");
          if (!root.endsWith("\\")) {
            root += "\\";
          }
          pattern = _Pattern.globEscape(root) + pattern.substr(1);
        } else {
          pattern = pathHelper.ensureAbsoluteRoot(_Pattern.globEscape(process.cwd()), pattern);
        }
        return pathHelper.normalizeSeparators(pattern);
      }
      /**
       * Attempts to unescape a pattern segment to create a literal path segment.
       * Otherwise returns empty string.
       */
      static getLiteral(segment) {
        let literal = "";
        for (let i3 = 0; i3 < segment.length; i3++) {
          const c3 = segment[i3];
          if (c3 === "\\" && !IS_WINDOWS && i3 + 1 < segment.length) {
            literal += segment[++i3];
            continue;
          } else if (c3 === "*" || c3 === "?") {
            return "";
          } else if (c3 === "[" && i3 + 1 < segment.length) {
            let set2 = "";
            let closed = -1;
            for (let i22 = i3 + 1; i22 < segment.length; i22++) {
              const c22 = segment[i22];
              if (c22 === "\\" && !IS_WINDOWS && i22 + 1 < segment.length) {
                set2 += segment[++i22];
                continue;
              } else if (c22 === "]") {
                closed = i22;
                break;
              } else {
                set2 += c22;
              }
            }
            if (closed >= 0) {
              if (set2.length > 1) {
                return "";
              }
              if (set2) {
                literal += set2;
                i3 = closed;
                continue;
              }
            }
          }
          literal += c3;
        }
        return literal;
      }
      /**
       * Escapes regexp special characters
       * https://javascript.info/regexp-escaping
       */
      static regExpEscape(s3) {
        return s3.replace(/[[\\^$.|?*+()]/g, "\\$&");
      }
    };
    exports2.Pattern = Pattern;
  }
});

// node_modules/@actions/glob/lib/internal-search-state.js
var require_internal_search_state2 = __commonJS({
  "node_modules/@actions/glob/lib/internal-search-state.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SearchState = void 0;
    var SearchState = class {
      static {
        __name(this, "SearchState");
      }
      constructor(path14, level) {
        this.path = path14;
        this.level = level;
      }
    };
    exports2.SearchState = SearchState;
  }
});

// node_modules/@actions/glob/lib/internal-globber.js
var require_internal_globber2 = __commonJS({
  "node_modules/@actions/glob/lib/internal-globber.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues2 = exports2 && exports2.__asyncValues || function(o3) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m3 = o3[Symbol.asyncIterator], i3;
      return m3 ? m3.call(o3) : (o3 = typeof __values === "function" ? __values(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
        return this;
      }, i3);
      function verb(n3) {
        i3[n3] = o3[n3] && function(v3) {
          return new Promise(function(resolve2, reject) {
            v3 = o3[n3](v3), settle(resolve2, reject, v3.done, v3.value);
          });
        };
      }
      __name(verb, "verb");
      function settle(resolve2, reject, d3, v3) {
        Promise.resolve(v3).then(function(v4) {
          resolve2({ value: v4, done: d3 });
        }, reject);
      }
      __name(settle, "settle");
    };
    var __await2 = exports2 && exports2.__await || function(v3) {
      return this instanceof __await2 ? (this.v = v3, this) : new __await2(v3);
    };
    var __asyncGenerator2 = exports2 && exports2.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g3 = generator.apply(thisArg, _arguments || []), i3, q2 = [];
      return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
        return this;
      }, i3;
      function verb(n3) {
        if (g3[n3]) i3[n3] = function(v3) {
          return new Promise(function(a3, b3) {
            q2.push([n3, v3, a3, b3]) > 1 || resume(n3, v3);
          });
        };
      }
      __name(verb, "verb");
      function resume(n3, v3) {
        try {
          step(g3[n3](v3));
        } catch (e3) {
          settle(q2[0][3], e3);
        }
      }
      __name(resume, "resume");
      function step(r3) {
        r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
      }
      __name(step, "step");
      function fulfill(value) {
        resume("next", value);
      }
      __name(fulfill, "fulfill");
      function reject(value) {
        resume("throw", value);
      }
      __name(reject, "reject");
      function settle(f3, v3) {
        if (f3(v3), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
      }
      __name(settle, "settle");
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultGlobber = void 0;
    var core2 = __importStar(require_core());
    var fs4 = __importStar(__require("fs"));
    var globOptionsHelper = __importStar(require_internal_glob_options_helper2());
    var path14 = __importStar(__require("path"));
    var patternHelper = __importStar(require_internal_pattern_helper2());
    var internal_match_kind_1 = require_internal_match_kind2();
    var internal_pattern_1 = require_internal_pattern2();
    var internal_search_state_1 = require_internal_search_state2();
    var IS_WINDOWS = process.platform === "win32";
    var DefaultGlobber = class _DefaultGlobber {
      static {
        __name(this, "DefaultGlobber");
      }
      constructor(options) {
        this.patterns = [];
        this.searchPaths = [];
        this.options = globOptionsHelper.getOptions(options);
      }
      getSearchPaths() {
        return this.searchPaths.slice();
      }
      glob() {
        var _a4, e_1, _b2, _c2;
        return __awaiter6(this, void 0, void 0, function* () {
          const result = [];
          try {
            for (var _d2 = true, _e2 = __asyncValues2(this.globGenerator()), _f; _f = yield _e2.next(), _a4 = _f.done, !_a4; _d2 = true) {
              _c2 = _f.value;
              _d2 = false;
              const itemPath = _c2;
              result.push(itemPath);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (!_d2 && !_a4 && (_b2 = _e2.return)) yield _b2.call(_e2);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          return result;
        });
      }
      globGenerator() {
        return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* globGenerator_1() {
          const options = globOptionsHelper.getOptions(this.options);
          const patterns = [];
          for (const pattern of this.patterns) {
            patterns.push(pattern);
            if (options.implicitDescendants && (pattern.trailingSeparator || pattern.segments[pattern.segments.length - 1] !== "**")) {
              patterns.push(new internal_pattern_1.Pattern(pattern.negate, true, pattern.segments.concat("**")));
            }
          }
          const stack = [];
          for (const searchPath of patternHelper.getSearchPaths(patterns)) {
            core2.debug(`Search path '${searchPath}'`);
            try {
              yield __await2(fs4.promises.lstat(searchPath));
            } catch (err) {
              if (err.code === "ENOENT") {
                continue;
              }
              throw err;
            }
            stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));
          }
          const traversalChain = [];
          while (stack.length) {
            const item = stack.pop();
            const match3 = patternHelper.match(patterns, item.path);
            const partialMatch = !!match3 || patternHelper.partialMatch(patterns, item.path);
            if (!match3 && !partialMatch) {
              continue;
            }
            const stats = yield __await2(
              _DefaultGlobber.stat(item, options, traversalChain)
              // Broken symlink, or symlink cycle detected, or no longer exists
            );
            if (!stats) {
              continue;
            }
            if (options.excludeHiddenFiles && path14.basename(item.path).match(/^\./)) {
              continue;
            }
            if (stats.isDirectory()) {
              if (match3 & internal_match_kind_1.MatchKind.Directory && options.matchDirectories) {
                yield yield __await2(item.path);
              } else if (!partialMatch) {
                continue;
              }
              const childLevel = item.level + 1;
              const childItems = (yield __await2(fs4.promises.readdir(item.path))).map((x3) => new internal_search_state_1.SearchState(path14.join(item.path, x3), childLevel));
              stack.push(...childItems.reverse());
            } else if (match3 & internal_match_kind_1.MatchKind.File) {
              yield yield __await2(item.path);
            }
          }
        }, "globGenerator_1"));
      }
      /**
       * Constructs a DefaultGlobber
       */
      static create(patterns, options) {
        return __awaiter6(this, void 0, void 0, function* () {
          const result = new _DefaultGlobber(options);
          if (IS_WINDOWS) {
            patterns = patterns.replace(/\r\n/g, "\n");
            patterns = patterns.replace(/\r/g, "\n");
          }
          const lines = patterns.split("\n").map((x3) => x3.trim());
          for (const line of lines) {
            if (!line || line.startsWith("#")) {
              continue;
            } else {
              result.patterns.push(new internal_pattern_1.Pattern(line));
            }
          }
          result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns));
          return result;
        });
      }
      static stat(item, options, traversalChain) {
        return __awaiter6(this, void 0, void 0, function* () {
          let stats;
          if (options.followSymbolicLinks) {
            try {
              stats = yield fs4.promises.stat(item.path);
            } catch (err) {
              if (err.code === "ENOENT") {
                if (options.omitBrokenSymbolicLinks) {
                  core2.debug(`Broken symlink '${item.path}'`);
                  return void 0;
                }
                throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);
              }
              throw err;
            }
          } else {
            stats = yield fs4.promises.lstat(item.path);
          }
          if (stats.isDirectory() && options.followSymbolicLinks) {
            const realPath = yield fs4.promises.realpath(item.path);
            while (traversalChain.length >= item.level) {
              traversalChain.pop();
            }
            if (traversalChain.some((x3) => x3 === realPath)) {
              core2.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);
              return void 0;
            }
            traversalChain.push(realPath);
          }
          return stats;
        });
      }
    };
    exports2.DefaultGlobber = DefaultGlobber;
  }
});

// node_modules/@actions/glob/lib/internal-hash-files.js
var require_internal_hash_files = __commonJS({
  "node_modules/@actions/glob/lib/internal-hash-files.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m3[k3];
        }, "get") };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues2 = exports2 && exports2.__asyncValues || function(o3) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m3 = o3[Symbol.asyncIterator], i3;
      return m3 ? m3.call(o3) : (o3 = typeof __values === "function" ? __values(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
        return this;
      }, i3);
      function verb(n3) {
        i3[n3] = o3[n3] && function(v3) {
          return new Promise(function(resolve2, reject) {
            v3 = o3[n3](v3), settle(resolve2, reject, v3.done, v3.value);
          });
        };
      }
      __name(verb, "verb");
      function settle(resolve2, reject, d3, v3) {
        Promise.resolve(v3).then(function(v4) {
          resolve2({ value: v4, done: d3 });
        }, reject);
      }
      __name(settle, "settle");
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashFiles = void 0;
    var crypto = __importStar(__require("crypto"));
    var core2 = __importStar(require_core());
    var fs4 = __importStar(__require("fs"));
    var stream = __importStar(__require("stream"));
    var util3 = __importStar(__require("util"));
    var path14 = __importStar(__require("path"));
    function hashFiles(globber, currentWorkspace, verbose = false) {
      var _a4, e_1, _b2, _c2;
      var _d2;
      return __awaiter6(this, void 0, void 0, function* () {
        const writeDelegate = verbose ? core2.info : core2.debug;
        let hasMatch = false;
        const githubWorkspace = currentWorkspace ? currentWorkspace : (_d2 = process.env["GITHUB_WORKSPACE"]) !== null && _d2 !== void 0 ? _d2 : process.cwd();
        const result = crypto.createHash("sha256");
        let count = 0;
        try {
          for (var _e2 = true, _f = __asyncValues2(globber.globGenerator()), _g; _g = yield _f.next(), _a4 = _g.done, !_a4; _e2 = true) {
            _c2 = _g.value;
            _e2 = false;
            const file = _c2;
            writeDelegate(file);
            if (!file.startsWith(`${githubWorkspace}${path14.sep}`)) {
              writeDelegate(`Ignore '${file}' since it is not under GITHUB_WORKSPACE.`);
              continue;
            }
            if (fs4.statSync(file).isDirectory()) {
              writeDelegate(`Skip directory '${file}'.`);
              continue;
            }
            const hash = crypto.createHash("sha256");
            const pipeline = util3.promisify(stream.pipeline);
            yield pipeline(fs4.createReadStream(file), hash);
            result.write(hash.digest());
            count++;
            if (!hasMatch) {
              hasMatch = true;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (!_e2 && !_a4 && (_b2 = _f.return)) yield _b2.call(_f);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        result.end();
        if (hasMatch) {
          writeDelegate(`Found ${count} files to hash.`);
          return result.digest("hex");
        } else {
          writeDelegate(`No matches found for glob`);
          return "";
        }
      });
    }
    __name(hashFiles, "hashFiles");
    exports2.hashFiles = hashFiles;
  }
});

// node_modules/@actions/glob/lib/glob.js
var require_glob2 = __commonJS({
  "node_modules/@actions/glob/lib/glob.js"(exports2) {
    "use strict";
    var __awaiter6 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve2) {
          resolve2(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashFiles = exports2.create = void 0;
    var internal_globber_1 = require_internal_globber2();
    var internal_hash_files_1 = require_internal_hash_files();
    function create(patterns, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        return yield internal_globber_1.DefaultGlobber.create(patterns, options);
      });
    }
    __name(create, "create");
    exports2.create = create;
    function hashFiles(patterns, currentWorkspace = "", options, verbose = false) {
      return __awaiter6(this, void 0, void 0, function* () {
        let followSymbolicLinks = true;
        if (options && typeof options.followSymbolicLinks === "boolean") {
          followSymbolicLinks = options.followSymbolicLinks;
        }
        const globber = yield create(patterns, { followSymbolicLinks });
        return (0, internal_hash_files_1.hashFiles)(globber, currentWorkspace, verbose);
      });
    }
    __name(hashFiles, "hashFiles");
    exports2.hashFiles = hashFiles;
  }
});

// packages/action/src/global.ts
import { setDefaultResultOrder } from "node:dns";
import { setDefaultAutoSelectFamily } from "node:net";

// packages/logger/src/custom-inspect.ts
import { EOL, platform } from "node:os";
import { posix as posixPath } from "node:path/posix";
import {
  inspect as utilInspect
} from "node:util";

// node_modules/scule/dist/index.mjs
var NUMBER_CHAR_RE = /\d/;
var STR_SPLITTERS = ["-", "_", "/", "."];
function isUppercase(char = "") {
  if (NUMBER_CHAR_RE.test(char)) {
    return void 0;
  }
  return char !== char.toLowerCase();
}
__name(isUppercase, "isUppercase");
function splitByCase(str, separators) {
  const splitters = separators ?? STR_SPLITTERS;
  const parts = [];
  if (!str || typeof str !== "string") {
    return parts;
  }
  let buff = "";
  let previousUpper;
  let previousSplitter;
  for (const char of str) {
    const isSplitter = splitters.includes(char);
    if (isSplitter === true) {
      parts.push(buff);
      buff = "";
      previousUpper = void 0;
      continue;
    }
    const isUpper = isUppercase(char);
    if (previousSplitter === false) {
      if (previousUpper === false && isUpper === true) {
        parts.push(buff);
        buff = char;
        previousUpper = isUpper;
        continue;
      }
      if (previousUpper === true && isUpper === false && buff.length > 1) {
        const lastChar = buff.at(-1);
        parts.push(buff.slice(0, Math.max(0, buff.length - 1)));
        buff = lastChar + char;
        previousUpper = isUpper;
        continue;
      }
    }
    buff += char;
    previousUpper = isUpper;
    previousSplitter = isSplitter;
  }
  parts.push(buff);
  return parts;
}
__name(splitByCase, "splitByCase");
function kebabCase(str, joiner) {
  return str ? (Array.isArray(str) ? str : splitByCase(str)).map((p3) => p3.toLowerCase()).join(joiner ?? "-") : "";
}
__name(kebabCase, "kebabCase");
function snakeCase(str) {
  return kebabCase(str || "", "_");
}
__name(snakeCase, "snakeCase");

// packages/utils/src/string.ts
function toUpperCase(text) {
  return text.toUpperCase();
}
__name(toUpperCase, "toUpperCase");

// packages/utils/src/id.ts
var name = "setup-texlive-action";
var SCREAMING_SNAKE_CASE = toUpperCase(snakeCase(name));
var id_default = { "kebab-case": name, SCREAMING_SNAKE_CASE };

// packages/logger/node_modules/ansi-styles/index.js
var ANSI_BACKGROUND_OFFSET = 10;
var wrapAnsi16 = /* @__PURE__ */ __name((offset = 0) => (code) => `\x1B[${code + offset}m`, "wrapAnsi16");
var wrapAnsi256 = /* @__PURE__ */ __name((offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`, "wrapAnsi256");
var wrapAnsi16m = /* @__PURE__ */ __name((offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`, "wrapAnsi16m");
var styles = {
  modifier: {
    reset: [0, 0],
    // 21 isn't widely supported and 22 does the same thing
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    overline: [53, 55],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29]
  },
  color: {
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    // Bright color
    blackBright: [90, 39],
    gray: [90, 39],
    // Alias of `blackBright`
    grey: [90, 39],
    // Alias of `blackBright`
    redBright: [91, 39],
    greenBright: [92, 39],
    yellowBright: [93, 39],
    blueBright: [94, 39],
    magentaBright: [95, 39],
    cyanBright: [96, 39],
    whiteBright: [97, 39]
  },
  bgColor: {
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    // Bright color
    bgBlackBright: [100, 49],
    bgGray: [100, 49],
    // Alias of `bgBlackBright`
    bgGrey: [100, 49],
    // Alias of `bgBlackBright`
    bgRedBright: [101, 49],
    bgGreenBright: [102, 49],
    bgYellowBright: [103, 49],
    bgBlueBright: [104, 49],
    bgMagentaBright: [105, 49],
    bgCyanBright: [106, 49],
    bgWhiteBright: [107, 49]
  }
};
var modifierNames = Object.keys(styles.modifier);
var foregroundColorNames = Object.keys(styles.color);
var backgroundColorNames = Object.keys(styles.bgColor);
var colorNames = [...foregroundColorNames, ...backgroundColorNames];
function assembleStyles() {
  const codes = /* @__PURE__ */ new Map();
  for (const [groupName, group2] of Object.entries(styles)) {
    for (const [styleName, style] of Object.entries(group2)) {
      styles[styleName] = {
        open: `\x1B[${style[0]}m`,
        close: `\x1B[${style[1]}m`
      };
      group2[styleName] = styles[styleName];
      codes.set(style[0], style[1]);
    }
    Object.defineProperty(styles, groupName, {
      value: group2,
      enumerable: false
    });
  }
  Object.defineProperty(styles, "codes", {
    value: codes,
    enumerable: false
  });
  styles.color.close = "\x1B[39m";
  styles.bgColor.close = "\x1B[49m";
  styles.color.ansi = wrapAnsi16();
  styles.color.ansi256 = wrapAnsi256();
  styles.color.ansi16m = wrapAnsi16m();
  styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
  styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
  styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
  Object.defineProperties(styles, {
    rgbToAnsi256: {
      value: /* @__PURE__ */ __name((red, green, blue) => {
        if (red === green && green === blue) {
          if (red < 8) {
            return 16;
          }
          if (red > 248) {
            return 231;
          }
          return Math.round((red - 8) / 247 * 24) + 232;
        }
        return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
      }, "value"),
      enumerable: false
    },
    hexToRgb: {
      value: /* @__PURE__ */ __name((hex) => {
        const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
        if (!matches) {
          return [0, 0, 0];
        }
        let [colorString] = matches;
        if (colorString.length === 3) {
          colorString = [...colorString].map((character) => character + character).join("");
        }
        const integer = Number.parseInt(colorString, 16);
        return [
          /* eslint-disable no-bitwise */
          integer >> 16 & 255,
          integer >> 8 & 255,
          integer & 255
          /* eslint-enable no-bitwise */
        ];
      }, "value"),
      enumerable: false
    },
    hexToAnsi256: {
      value: /* @__PURE__ */ __name((hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)), "value"),
      enumerable: false
    },
    ansi256ToAnsi: {
      value: /* @__PURE__ */ __name((code) => {
        if (code < 8) {
          return 30 + code;
        }
        if (code < 16) {
          return 90 + (code - 8);
        }
        let red;
        let green;
        let blue;
        if (code >= 232) {
          red = ((code - 232) * 10 + 8) / 255;
          green = red;
          blue = red;
        } else {
          code -= 16;
          const remainder = code % 36;
          red = Math.floor(code / 36) / 5;
          green = Math.floor(remainder / 6) / 5;
          blue = remainder % 6 / 5;
        }
        const value = Math.max(red, green, blue) * 2;
        if (value === 0) {
          return 30;
        }
        let result = 30 + (Math.round(blue) << 2 | Math.round(green) << 1 | Math.round(red));
        if (value === 2) {
          result += 60;
        }
        return result;
      }, "value"),
      enumerable: false
    },
    rgbToAnsi: {
      value: /* @__PURE__ */ __name((red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)), "value"),
      enumerable: false
    },
    hexToAnsi: {
      value: /* @__PURE__ */ __name((hex) => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)), "value"),
      enumerable: false
    }
  });
  return styles;
}
__name(assembleStyles, "assembleStyles");
var ansiStyles = assembleStyles();
var ansi_styles_default = ansiStyles;

// node_modules/clean-stack/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
__name(escapeStringRegexp, "escapeStringRegexp");

// node_modules/clean-stack/home-directory.js
import os from "node:os";
var getHomeDirectory = /* @__PURE__ */ __name(() => os.homedir().replace(/\\/g, "/"), "getHomeDirectory");
var home_directory_default = getHomeDirectory;

// node_modules/clean-stack/index.js
var extractPathRegex = /\s+at.*[(\s](.*)\)?/;
var pathRegex = /^(?:(?:(?:node|node:[\w/]+|(?:(?:node:)?internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)(?:\.js)?:\d+:\d+)|native)/;
function cleanStack(stack, { pretty = false, basePath, pathFilter } = {}) {
  const basePathRegex = basePath && new RegExp(`(file://)?${escapeStringRegexp(basePath.replace(/\\/g, "/"))}/?`, "g");
  const homeDirectory = pretty ? home_directory_default() : "";
  if (typeof stack !== "string") {
    return void 0;
  }
  return stack.replace(/\\/g, "/").split("\n").filter((line) => {
    const pathMatches = line.match(extractPathRegex);
    if (pathMatches === null || !pathMatches[1]) {
      return true;
    }
    const match3 = pathMatches[1];
    if (match3.includes(".app/Contents/Resources/electron.asar") || match3.includes(".app/Contents/Resources/default_app.asar") || match3.includes("node_modules/electron/dist/resources/electron.asar") || match3.includes("node_modules/electron/dist/resources/default_app.asar")) {
      return false;
    }
    return pathFilter ? !pathRegex.test(match3) && pathFilter(match3) : !pathRegex.test(match3);
  }).filter((line) => line.trim() !== "").map((line) => {
    if (basePathRegex) {
      line = line.replace(basePathRegex, "");
    }
    if (pretty) {
      line = line.replace(extractPathRegex, (m3, p1) => m3.replace(p1, p1.replace(homeDirectory, "~")));
    }
    return line;
  }).join("\n");
}
__name(cleanStack, "cleanStack");

// packages/logger/src/styles.ts
var import_core = __toESM(require_core(), 1);
import { env, stdout } from "node:process";
function hasColors() {
  if (env.GITHUB_ACTIONS === "true" && !("ACT" in env)) {
    return !(0, import_core.isDebug)() && (env.NO_COLOR ?? "") === "";
  }
  if (env.NO_COLOR === "") {
    delete env.NO_COLOR;
  }
  return stdout.hasColors?.() ?? false;
}
__name(hasColors, "hasColors");
function stylize(style) {
  const group2 = style in ansi_styles_default.modifier ? ansi_styles_default.modifier : ansi_styles_default.color;
  const { open, close } = group2[style];
  return (input) => {
    const text = Array.isArray(input) ? input[0] : input;
    return hasColors() ? `${open}${text}${close}` : text;
  };
}
__name(stylize, "stylize");
var styles_default = {
  dim: stylize("dim"),
  red: stylize("red"),
  blue: stylize("blue")
};

// packages/logger/src/custom-inspect.ts
var customInspect = Symbol.for("nodejs.util.inspect.custom");
Reflect.defineProperty(Error.prototype, customInspect, {
  value: /* @__PURE__ */ __name(function(depth, options, inspect2 = utilInspect) {
    if (depth < 0) {
      return `[${getErrorName(this)}]`;
    } else if (!hasColors()) {
      return inspectNoCustom(this, options, inspect2);
    } else {
      return formatError(this, options, inspect2);
    }
  }, "value")
});
function formatError(error, options, inspect2 = utilInspect) {
  let stylized = inspectNoCustom(error, options, inspect2);
  if (options.colors ?? false) {
    const prefix2 = getErrorName(error) + (error.message !== "" ? ":" : "");
    if (stylized.startsWith(prefix2)) {
      const { open, close } = ansi_styles_default.color.red;
      stylized = `${open}${prefix2}${close}${stylized.slice(prefix2.length)}`;
    }
  }
  return formatStack(stylized);
}
__name(formatError, "formatError");
function getErrorName(error) {
  return error.name === error.constructor.name ? error.name : `${error.constructor.name} [${error.name}]`;
}
__name(getErrorName, "getErrorName");
function inspectNoCustom(target, options, inspect2 = utilInspect) {
  const success = Reflect.defineProperty(target, customInspect, {
    value: void 0,
    configurable: true
  });
  if (success) {
    try {
      return inspect2(target, options);
    } catch {
    } finally {
      Reflect.deleteProperty(target, customInspect);
    }
  }
  return inspect2(target, { ...options, customInspect: false });
}
__name(inspectNoCustom, "inspectNoCustom");
var reStack = new RegExp("(?:\\r?\\n(?:.\\[[\\d;]+m)* {4}at.*)+", "v");
function formatStack(text) {
  return text.replace(reStack, (stack) => {
    const braceOpen = " {";
    const endsWithBraceOpen = stack.endsWith(braceOpen);
    if (endsWithBraceOpen) {
      stack = stack.slice(0, -braceOpen.length);
    }
    let basePath = import.meta.url.split(id_default["kebab-case"], 1)[0];
    if (basePath.length === import.meta.url.length) {
      basePath = posixPath.dirname(import.meta.url);
    }
    if (platform() === "win32" && basePath.charAt(1) === ":") {
      basePath = "/" + basePath;
    }
    return EOL + cleanStack(stack, { basePath }) + (endsWithBraceOpen ? braceOpen : "");
  });
}
__name(formatStack, "formatStack");

// node_modules/@abraham/reflection/dist/index.js
var Metadata = /* @__PURE__ */ new WeakMap();
function decorateProperty(decorators2, target, propertyKey, descriptor) {
  decorators2.reverse().forEach((decorator) => {
    descriptor = decorator(target, propertyKey, descriptor) || descriptor;
  });
  return descriptor;
}
__name(decorateProperty, "decorateProperty");
function decorateConstructor(decorators2, target) {
  decorators2.reverse().forEach((decorator) => {
    const decorated = decorator(target);
    if (decorated) {
      target = decorated;
    }
  });
  return target;
}
__name(decorateConstructor, "decorateConstructor");
function decorate(decorators2, target, propertyKey, attributes) {
  if (!Array.isArray(decorators2) || decorators2.length === 0) {
    throw new TypeError();
  }
  if (propertyKey !== void 0) {
    return decorateProperty(decorators2, target, propertyKey, attributes);
  }
  if (typeof target === "function") {
    return decorateConstructor(decorators2, target);
  }
  return;
}
__name(decorate, "decorate");
function getMetadataMap(target, propertyKey) {
  return Metadata.get(target) && Metadata.get(target).get(propertyKey);
}
__name(getMetadataMap, "getMetadataMap");
function ordinaryGetOwnMetadata(metadataKey, target, propertyKey) {
  if (target === void 0) {
    throw new TypeError();
  }
  const metadataMap = getMetadataMap(target, propertyKey);
  return metadataMap && metadataMap.get(metadataKey);
}
__name(ordinaryGetOwnMetadata, "ordinaryGetOwnMetadata");
function createMetadataMap(target, propertyKey) {
  const targetMetadata = Metadata.get(target) || /* @__PURE__ */ new Map();
  Metadata.set(target, targetMetadata);
  const metadataMap = targetMetadata.get(propertyKey) || /* @__PURE__ */ new Map();
  targetMetadata.set(propertyKey, metadataMap);
  return metadataMap;
}
__name(createMetadataMap, "createMetadataMap");
function ordinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey) {
  if (propertyKey && !["string", "symbol"].includes(typeof propertyKey)) {
    throw new TypeError();
  }
  (getMetadataMap(target, propertyKey) || createMetadataMap(target, propertyKey)).set(metadataKey, metadataValue);
}
__name(ordinaryDefineOwnMetadata, "ordinaryDefineOwnMetadata");
function ordinaryGetMetadata(metadataKey, target, propertyKey) {
  return ordinaryGetOwnMetadata(metadataKey, target, propertyKey) ? ordinaryGetOwnMetadata(metadataKey, target, propertyKey) : Object.getPrototypeOf(target) ? ordinaryGetMetadata(metadataKey, Object.getPrototypeOf(target), propertyKey) : void 0;
}
__name(ordinaryGetMetadata, "ordinaryGetMetadata");
function metadata(metadataKey, metadataValue) {
  return /* @__PURE__ */ __name(function decorator(target, propertyKey) {
    ordinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
  }, "decorator");
}
__name(metadata, "metadata");
function getMetadata(metadataKey, target, propertyKey) {
  return ordinaryGetMetadata(metadataKey, target, propertyKey);
}
__name(getMetadata, "getMetadata");
function getOwnMetadata(metadataKey, target, propertyKey) {
  return ordinaryGetOwnMetadata(metadataKey, target, propertyKey);
}
__name(getOwnMetadata, "getOwnMetadata");
function hasOwnMetadata(metadataKey, target, propertyKey) {
  return !!ordinaryGetOwnMetadata(metadataKey, target, propertyKey);
}
__name(hasOwnMetadata, "hasOwnMetadata");
function hasMetadata(metadataKey, target, propertyKey) {
  return !!ordinaryGetMetadata(metadataKey, target, propertyKey);
}
__name(hasMetadata, "hasMetadata");
function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
}
__name(defineMetadata, "defineMetadata");
var Reflection = {
  decorate,
  defineMetadata,
  getMetadata,
  getOwnMetadata,
  hasMetadata,
  hasOwnMetadata,
  metadata
};
Object.assign(Reflect, Reflection);

// node_modules/temporal-polyfill/chunks/internal.js
function clampProp(e3, n3, t3, o3, r3) {
  return clampEntity(n3, getDefinedProp(e3, n3), t3, o3, r3);
}
__name(clampProp, "clampProp");
function clampEntity(e3, n3, t3, o3, r3, i3) {
  const a3 = clampNumber(n3, t3, o3);
  if (r3 && n3 !== a3) {
    throw new RangeError(numberOutOfRange(e3, n3, t3, o3, i3));
  }
  return a3;
}
__name(clampEntity, "clampEntity");
function getDefinedProp(e3, n3) {
  const t3 = e3[n3];
  if (void 0 === t3) {
    throw new TypeError(missingField(n3));
  }
  return t3;
}
__name(getDefinedProp, "getDefinedProp");
function z(e3) {
  return null !== e3 && /object|function/.test(typeof e3);
}
__name(z, "z");
function Jn(e3, n3 = Map) {
  const t3 = new n3();
  return (n4, ...o3) => {
    if (t3.has(n4)) {
      return t3.get(n4);
    }
    const r3 = e3(n4, ...o3);
    return t3.set(n4, r3), r3;
  };
}
__name(Jn, "Jn");
function D(e3) {
  return p({
    name: e3
  }, 1);
}
__name(D, "D");
function p(e3, n3) {
  return T((e4) => ({
    value: e4,
    configurable: 1,
    writable: !n3
  }), e3);
}
__name(p, "p");
function O(e3) {
  return T((e4) => ({
    get: e4,
    configurable: 1
  }), e3);
}
__name(O, "O");
function h(e3) {
  return {
    [Symbol.toStringTag]: {
      value: e3,
      configurable: 1
    }
  };
}
__name(h, "h");
function zipProps(e3, n3) {
  const t3 = {};
  let o3 = e3.length;
  for (const r3 of n3) {
    t3[e3[--o3]] = r3;
  }
  return t3;
}
__name(zipProps, "zipProps");
function T(e3, n3, t3) {
  const o3 = {};
  for (const r3 in n3) {
    o3[r3] = e3(n3[r3], r3, t3);
  }
  return o3;
}
__name(T, "T");
function b(e3, n3, t3) {
  const o3 = {};
  for (let r3 = 0; r3 < n3.length; r3++) {
    const i3 = n3[r3];
    o3[i3] = e3(i3, r3, t3);
  }
  return o3;
}
__name(b, "b");
function remapProps(e3, n3, t3) {
  const o3 = {};
  for (let r3 = 0; r3 < e3.length; r3++) {
    o3[n3[r3]] = t3[e3[r3]];
  }
  return o3;
}
__name(remapProps, "remapProps");
function Vn(e3, n3) {
  const t3 = {};
  for (const o3 of e3) {
    t3[o3] = n3[o3];
  }
  return t3;
}
__name(Vn, "Vn");
function V(e3, n3) {
  const t3 = {};
  for (const o3 in n3) {
    e3.has(o3) || (t3[o3] = n3[o3]);
  }
  return t3;
}
__name(V, "V");
function nn(e3) {
  e3 = {
    ...e3
  };
  const n3 = Object.keys(e3);
  for (const t3 of n3) {
    void 0 === e3[t3] && delete e3[t3];
  }
  return e3;
}
__name(nn, "nn");
function C(e3, n3) {
  for (const t3 of n3) {
    if (!(t3 in e3)) {
      return 0;
    }
  }
  return 1;
}
__name(C, "C");
function allPropsEqual(e3, n3, t3) {
  for (const o3 of e3) {
    if (n3[o3] !== t3[o3]) {
      return 0;
    }
  }
  return 1;
}
__name(allPropsEqual, "allPropsEqual");
function zeroOutProps(e3, n3, t3) {
  const o3 = {
    ...t3
  };
  for (let t4 = 0; t4 < n3; t4++) {
    o3[e3[t4]] = 0;
  }
  return o3;
}
__name(zeroOutProps, "zeroOutProps");
function E(e3, ...n3) {
  return (...t3) => e3(...n3, ...t3);
}
__name(E, "E");
function capitalize(e3) {
  return e3[0].toUpperCase() + e3.substring(1);
}
__name(capitalize, "capitalize");
function sortStrings(e3) {
  return e3.slice().sort();
}
__name(sortStrings, "sortStrings");
function padNumber(e3, n3) {
  return String(n3).padStart(e3, "0");
}
__name(padNumber, "padNumber");
function compareNumbers(e3, n3) {
  return Math.sign(e3 - n3);
}
__name(compareNumbers, "compareNumbers");
function clampNumber(e3, n3, t3) {
  return Math.min(Math.max(e3, n3), t3);
}
__name(clampNumber, "clampNumber");
function divModFloor(e3, n3) {
  return [Math.floor(e3 / n3), modFloor(e3, n3)];
}
__name(divModFloor, "divModFloor");
function modFloor(e3, n3) {
  return (e3 % n3 + n3) % n3;
}
__name(modFloor, "modFloor");
function divModTrunc(e3, n3) {
  return [divTrunc(e3, n3), modTrunc(e3, n3)];
}
__name(divModTrunc, "divModTrunc");
function divTrunc(e3, n3) {
  return Math.trunc(e3 / n3) || 0;
}
__name(divTrunc, "divTrunc");
function modTrunc(e3, n3) {
  return e3 % n3 || 0;
}
__name(modTrunc, "modTrunc");
function hasHalf(e3) {
  return 0.5 === Math.abs(e3 % 1);
}
__name(hasHalf, "hasHalf");
function givenFieldsToBigNano(e3, n3, t3) {
  let o3 = 0, r3 = 0;
  for (let i4 = 0; i4 <= n3; i4++) {
    const n4 = e3[t3[i4]], a4 = Xr[i4], s3 = Qr / a4, [c3, u3] = divModTrunc(n4, s3);
    o3 += u3 * a4, r3 += c3;
  }
  const [i3, a3] = divModTrunc(o3, Qr);
  return [r3 + i3, a3];
}
__name(givenFieldsToBigNano, "givenFieldsToBigNano");
function nanoToGivenFields(e3, n3, t3) {
  const o3 = {};
  for (let r3 = n3; r3 >= 0; r3--) {
    const n4 = Xr[r3];
    o3[t3[r3]] = divTrunc(e3, n4), e3 = modTrunc(e3, n4);
  }
  return o3;
}
__name(nanoToGivenFields, "nanoToGivenFields");
function un(e3) {
  return e3 === X ? si : [];
}
__name(un, "un");
function cn(e3) {
  return e3 === X ? li : [];
}
__name(cn, "cn");
function ln(e3) {
  return e3 === X ? ["year", "day"] : [];
}
__name(ln, "ln");
function l(e3) {
  if (void 0 !== e3) {
    return m(e3);
  }
}
__name(l, "l");
function S(e3) {
  if (void 0 !== e3) {
    return d(e3);
  }
}
__name(S, "S");
function c(e3) {
  if (void 0 !== e3) {
    return u(e3);
  }
}
__name(c, "c");
function d(e3) {
  return requireNumberIsPositive(u(e3));
}
__name(d, "d");
function u(e3) {
  return requireNumberIsInteger(Mi(e3));
}
__name(u, "u");
function on(e3) {
  if (null == e3) {
    throw new TypeError("Cannot be null or undefined");
  }
  return e3;
}
__name(on, "on");
function requirePropDefined(e3, n3) {
  if (null == n3) {
    throw new RangeError(missingField(e3));
  }
  return n3;
}
__name(requirePropDefined, "requirePropDefined");
function de(e3) {
  if (!z(e3)) {
    throw new TypeError(hr);
  }
  return e3;
}
__name(de, "de");
function requireType(e3, n3, t3 = e3) {
  if (typeof n3 !== e3) {
    throw new TypeError(invalidEntity(t3, n3));
  }
  return n3;
}
__name(requireType, "requireType");
function requireNumberIsInteger(e3, n3 = "number") {
  if (!Number.isInteger(e3)) {
    throw new RangeError(expectedInteger(n3, e3));
  }
  return e3 || 0;
}
__name(requireNumberIsInteger, "requireNumberIsInteger");
function requireNumberIsPositive(e3, n3 = "number") {
  if (e3 <= 0) {
    throw new RangeError(expectedPositive(n3, e3));
  }
  return e3;
}
__name(requireNumberIsPositive, "requireNumberIsPositive");
function toString(e3) {
  if ("symbol" == typeof e3) {
    throw new TypeError(pr);
  }
  return String(e3);
}
__name(toString, "toString");
function toStringViaPrimitive(e3, n3) {
  return z(e3) ? String(e3) : m(e3, n3);
}
__name(toStringViaPrimitive, "toStringViaPrimitive");
function toBigInt(e3) {
  if ("string" == typeof e3) {
    return BigInt(e3);
  }
  if ("bigint" != typeof e3) {
    throw new TypeError(invalidBigInt(e3));
  }
  return e3;
}
__name(toBigInt, "toBigInt");
function toNumber(e3, n3 = "number") {
  if ("bigint" == typeof e3) {
    throw new TypeError(forbiddenBigIntToNumber(n3));
  }
  if (e3 = Number(e3), !Number.isFinite(e3)) {
    throw new RangeError(expectedFinite(n3, e3));
  }
  return e3;
}
__name(toNumber, "toNumber");
function toInteger(e3, n3) {
  return Math.trunc(toNumber(e3, n3)) || 0;
}
__name(toInteger, "toInteger");
function toStrictInteger(e3, n3) {
  return requireNumberIsInteger(toNumber(e3, n3), n3);
}
__name(toStrictInteger, "toStrictInteger");
function toPositiveInteger(e3, n3) {
  return requireNumberIsPositive(toInteger(e3, n3), n3);
}
__name(toPositiveInteger, "toPositiveInteger");
function createBigNano(e3, n3) {
  let [t3, o3] = divModTrunc(n3, Qr), r3 = e3 + t3;
  const i3 = Math.sign(r3);
  return i3 && i3 === -Math.sign(o3) && (r3 -= i3, o3 += i3 * Qr), [r3, o3];
}
__name(createBigNano, "createBigNano");
function addBigNanos(e3, n3, t3 = 1) {
  return createBigNano(e3[0] + n3[0] * t3, e3[1] + n3[1] * t3);
}
__name(addBigNanos, "addBigNanos");
function moveBigNano(e3, n3) {
  return createBigNano(e3[0], e3[1] + n3);
}
__name(moveBigNano, "moveBigNano");
function re(e3, n3) {
  return addBigNanos(n3, e3, -1);
}
__name(re, "re");
function te(e3, n3) {
  return compareNumbers(e3[0], n3[0]) || compareNumbers(e3[1], n3[1]);
}
__name(te, "te");
function bigNanoOutside(e3, n3, t3) {
  return -1 === te(e3, n3) || 1 === te(e3, t3);
}
__name(bigNanoOutside, "bigNanoOutside");
function bigIntToBigNano(e3, n3 = 1) {
  const t3 = BigInt(Qr / n3);
  return [Number(e3 / t3), Number(e3 % t3) * n3];
}
__name(bigIntToBigNano, "bigIntToBigNano");
function he(e3, n3 = 1) {
  const t3 = Qr / n3, [o3, r3] = divModTrunc(e3, t3);
  return [o3, r3 * n3];
}
__name(he, "he");
function bigNanoToBigInt(e3, n3 = 1) {
  const [t3, o3] = e3, r3 = Math.floor(o3 / n3), i3 = Qr / n3;
  return BigInt(t3) * BigInt(i3) + BigInt(r3);
}
__name(bigNanoToBigInt, "bigNanoToBigInt");
function oe(e3, n3 = 1, t3) {
  const [o3, r3] = e3, [i3, a3] = divModTrunc(r3, n3);
  return o3 * (Qr / n3) + (i3 + (t3 ? a3 / n3 : 0));
}
__name(oe, "oe");
function divModBigNano(e3, n3, t3 = divModFloor) {
  const [o3, r3] = e3, [i3, a3] = t3(r3, n3);
  return [o3 * (Qr / n3) + i3, a3];
}
__name(divModBigNano, "divModBigNano");
function hashIntlFormatParts(e3, n3) {
  const t3 = e3.formatToParts(n3), o3 = {};
  for (const e4 of t3) {
    o3[e4.type] = e4.value;
  }
  return o3;
}
__name(hashIntlFormatParts, "hashIntlFormatParts");
function checkIsoYearMonthInBounds(e3) {
  return clampProp(e3, "isoYear", Li, Ai, 1), e3.isoYear === Li ? clampProp(e3, "isoMonth", 4, 12, 1) : e3.isoYear === Ai && clampProp(e3, "isoMonth", 1, 9, 1), e3;
}
__name(checkIsoYearMonthInBounds, "checkIsoYearMonthInBounds");
function checkIsoDateInBounds(e3) {
  return checkIsoDateTimeInBounds({
    ...e3,
    ...Dt,
    isoHour: 12
  }), e3;
}
__name(checkIsoDateInBounds, "checkIsoDateInBounds");
function checkIsoDateTimeInBounds(e3) {
  const n3 = clampProp(e3, "isoYear", Li, Ai, 1), t3 = n3 === Li ? 1 : n3 === Ai ? -1 : 0;
  return t3 && checkEpochNanoInBounds(isoToEpochNano({
    ...e3,
    isoDay: e3.isoDay + t3,
    isoNanosecond: e3.isoNanosecond - t3
  })), e3;
}
__name(checkIsoDateTimeInBounds, "checkIsoDateTimeInBounds");
function checkEpochNanoInBounds(e3) {
  if (!e3 || bigNanoOutside(e3, Ui, qi)) {
    throw new RangeError(Cr);
  }
  return e3;
}
__name(checkEpochNanoInBounds, "checkEpochNanoInBounds");
function isoTimeFieldsToNano(e3) {
  return givenFieldsToBigNano(e3, 5, j)[1];
}
__name(isoTimeFieldsToNano, "isoTimeFieldsToNano");
function nanoToIsoTimeAndDay(e3) {
  const [n3, t3] = divModFloor(e3, Qr);
  return [nanoToGivenFields(t3, 5, j), n3];
}
__name(nanoToIsoTimeAndDay, "nanoToIsoTimeAndDay");
function epochNanoToSec(e3) {
  return epochNanoToSecMod(e3)[0];
}
__name(epochNanoToSec, "epochNanoToSec");
function epochNanoToSecMod(e3) {
  return divModBigNano(e3, _r);
}
__name(epochNanoToSecMod, "epochNanoToSecMod");
function isoToEpochMilli(e3) {
  return isoArgsToEpochMilli(e3.isoYear, e3.isoMonth, e3.isoDay, e3.isoHour, e3.isoMinute, e3.isoSecond, e3.isoMillisecond);
}
__name(isoToEpochMilli, "isoToEpochMilli");
function isoToEpochNano(e3) {
  const n3 = isoToEpochMilli(e3);
  if (void 0 !== n3) {
    const [t3, o3] = divModTrunc(n3, Gr);
    return [t3, o3 * be + (e3.isoMicrosecond || 0) * Vr + (e3.isoNanosecond || 0)];
  }
}
__name(isoToEpochNano, "isoToEpochNano");
function isoToEpochNanoWithOffset(e3, n3) {
  const [t3, o3] = nanoToIsoTimeAndDay(isoTimeFieldsToNano(e3) - n3);
  return checkEpochNanoInBounds(isoToEpochNano({
    ...e3,
    isoDay: e3.isoDay + o3,
    ...t3
  }));
}
__name(isoToEpochNanoWithOffset, "isoToEpochNanoWithOffset");
function isoArgsToEpochSec(...e3) {
  return isoArgsToEpochMilli(...e3) / Hr;
}
__name(isoArgsToEpochSec, "isoArgsToEpochSec");
function isoArgsToEpochMilli(...e3) {
  const [n3, t3] = isoToLegacyDate(...e3), o3 = n3.valueOf();
  if (!isNaN(o3)) {
    return o3 - t3 * Gr;
  }
}
__name(isoArgsToEpochMilli, "isoArgsToEpochMilli");
function isoToLegacyDate(e3, n3 = 1, t3 = 1, o3 = 0, r3 = 0, i3 = 0, a3 = 0) {
  const s3 = e3 === Li ? 1 : e3 === Ai ? -1 : 0, c3 = /* @__PURE__ */ new Date();
  return c3.setUTCHours(o3, r3, i3, a3), c3.setUTCFullYear(e3, n3 - 1, t3 + s3), [c3, s3];
}
__name(isoToLegacyDate, "isoToLegacyDate");
function Ie(e3, n3) {
  let [t3, o3] = moveBigNano(e3, n3);
  o3 < 0 && (o3 += Qr, t3 -= 1);
  const [r3, i3] = divModFloor(o3, be), [a3, s3] = divModFloor(i3, Vr);
  return epochMilliToIso(t3 * Gr + r3, a3, s3);
}
__name(Ie, "Ie");
function epochMilliToIso(e3, n3 = 0, t3 = 0) {
  const o3 = Math.ceil(Math.max(0, Math.abs(e3) - zi) / Gr) * Math.sign(e3), r3 = new Date(e3 - o3 * Gr);
  return zipProps(wi, [r3.getUTCFullYear(), r3.getUTCMonth() + 1, r3.getUTCDate() + o3, r3.getUTCHours(), r3.getUTCMinutes(), r3.getUTCSeconds(), r3.getUTCMilliseconds(), n3, t3]);
}
__name(epochMilliToIso, "epochMilliToIso");
function computeIsoDateParts(e3) {
  return [e3.isoYear, e3.isoMonth, e3.isoDay];
}
__name(computeIsoDateParts, "computeIsoDateParts");
function computeIsoMonthsInYear() {
  return xi;
}
__name(computeIsoMonthsInYear, "computeIsoMonthsInYear");
function computeIsoDaysInMonth(e3, n3) {
  switch (n3) {
    case 2:
      return computeIsoInLeapYear(e3) ? 29 : 28;
    case 4:
    case 6:
    case 9:
    case 11:
      return 30;
  }
  return 31;
}
__name(computeIsoDaysInMonth, "computeIsoDaysInMonth");
function computeIsoDaysInYear(e3) {
  return computeIsoInLeapYear(e3) ? 366 : 365;
}
__name(computeIsoDaysInYear, "computeIsoDaysInYear");
function computeIsoInLeapYear(e3) {
  return e3 % 4 == 0 && (e3 % 100 != 0 || e3 % 400 == 0);
}
__name(computeIsoInLeapYear, "computeIsoInLeapYear");
function computeIsoDayOfWeek(e3) {
  const [n3, t3] = isoToLegacyDate(e3.isoYear, e3.isoMonth, e3.isoDay);
  return modFloor(n3.getUTCDay() - t3, 7) || 7;
}
__name(computeIsoDayOfWeek, "computeIsoDayOfWeek");
function computeGregoryEraParts({ isoYear: e3 }) {
  return e3 < 1 ? ["bce", 1 - e3] : ["ce", e3];
}
__name(computeGregoryEraParts, "computeGregoryEraParts");
function computeJapaneseEraParts(e3) {
  const n3 = isoToEpochMilli(e3);
  if (n3 < $i) {
    return computeGregoryEraParts(e3);
  }
  const t3 = hashIntlFormatParts(La(Ti), n3), { era: o3, eraYear: r3 } = parseIntlYear(t3, Ti);
  return [o3, r3];
}
__name(computeJapaneseEraParts, "computeJapaneseEraParts");
function checkIsoDateTimeFields(e3) {
  return checkIsoDateFields(e3), constrainIsoTimeFields(e3, 1), e3;
}
__name(checkIsoDateTimeFields, "checkIsoDateTimeFields");
function checkIsoDateFields(e3) {
  return constrainIsoDateFields(e3, 1), e3;
}
__name(checkIsoDateFields, "checkIsoDateFields");
function isIsoDateFieldsValid(e3) {
  return allPropsEqual(Oi, e3, constrainIsoDateFields(e3));
}
__name(isIsoDateFieldsValid, "isIsoDateFieldsValid");
function constrainIsoDateFields(e3, n3) {
  const { isoYear: t3 } = e3, o3 = clampProp(e3, "isoMonth", 1, computeIsoMonthsInYear(), n3);
  return {
    isoYear: t3,
    isoMonth: o3,
    isoDay: clampProp(e3, "isoDay", 1, computeIsoDaysInMonth(t3, o3), n3)
  };
}
__name(constrainIsoDateFields, "constrainIsoDateFields");
function constrainIsoTimeFields(e3, n3) {
  return zipProps(j, [clampProp(e3, "isoHour", 0, 23, n3), clampProp(e3, "isoMinute", 0, 59, n3), clampProp(e3, "isoSecond", 0, 59, n3), clampProp(e3, "isoMillisecond", 0, 999, n3), clampProp(e3, "isoMicrosecond", 0, 999, n3), clampProp(e3, "isoNanosecond", 0, 999, n3)]);
}
__name(constrainIsoTimeFields, "constrainIsoTimeFields");
function H(e3) {
  return void 0 === e3 ? 0 : ua(de(e3));
}
__name(H, "H");
function wn(e3, n3 = 0) {
  e3 = normalizeOptions(e3);
  const t3 = la(e3), o3 = fa(e3, n3);
  return [ua(e3), o3, t3];
}
__name(wn, "wn");
function ve(e3) {
  return la(normalizeOptions(e3));
}
__name(ve, "ve");
function _t(e3) {
  return e3 = normalizeOptions(e3), sa(e3, 9, 6, 1);
}
__name(_t, "_t");
function refineDiffOptions(e3, n3, t3, o3 = 9, r3 = 0, i3 = 4) {
  n3 = normalizeOptions(n3);
  let a3 = sa(n3, o3, r3), s3 = parseRoundingIncInteger(n3), c3 = ha(n3, i3);
  const u3 = aa(n3, o3, r3, 1);
  return null == a3 ? a3 = Math.max(t3, u3) : checkLargestSmallestUnit(a3, u3), s3 = refineRoundingInc(s3, u3, 1), e3 && (c3 = ((e4) => e4 < 4 ? (e4 + 2) % 4 : e4)(c3)), [a3, u3, s3, c3];
}
__name(refineDiffOptions, "refineDiffOptions");
function refineRoundingOptions(e3, n3 = 6, t3) {
  let o3 = parseRoundingIncInteger(e3 = normalizeOptionsOrString(e3, Hi));
  const r3 = ha(e3, 7);
  let i3 = aa(e3, n3);
  return i3 = requirePropDefined(Hi, i3), o3 = refineRoundingInc(o3, i3, void 0, t3), [i3, o3, r3];
}
__name(refineRoundingOptions, "refineRoundingOptions");
function refineDateDisplayOptions(e3) {
  return da(normalizeOptions(e3));
}
__name(refineDateDisplayOptions, "refineDateDisplayOptions");
function refineTimeDisplayOptions(e3, n3) {
  return refineTimeDisplayTuple(normalizeOptions(e3), n3);
}
__name(refineTimeDisplayOptions, "refineTimeDisplayOptions");
function refineTimeDisplayTuple(e3, n3 = 4) {
  const t3 = refineSubsecDigits(e3);
  return [ha(e3, 4), ...refineSmallestUnitAndSubsecDigits(aa(e3, n3), t3)];
}
__name(refineTimeDisplayTuple, "refineTimeDisplayTuple");
function refineSmallestUnitAndSubsecDigits(e3, n3) {
  return null != e3 ? [Xr[e3], e3 < 4 ? 9 - 3 * e3 : -1] : [void 0 === n3 ? 1 : 10 ** (9 - n3), n3];
}
__name(refineSmallestUnitAndSubsecDigits, "refineSmallestUnitAndSubsecDigits");
function parseRoundingIncInteger(e3) {
  const n3 = e3[_i];
  return void 0 === n3 ? 1 : toInteger(n3, _i);
}
__name(parseRoundingIncInteger, "parseRoundingIncInteger");
function refineRoundingInc(e3, n3, t3, o3) {
  const r3 = o3 ? Qr : Xr[n3 + 1];
  if (r3) {
    const t4 = Xr[n3];
    if (r3 % ((e3 = clampEntity(_i, e3, 1, r3 / t4 - (o3 ? 0 : 1), 1)) * t4)) {
      throw new RangeError(invalidEntity(_i, e3));
    }
  } else {
    e3 = clampEntity(_i, e3, 1, t3 ? 10 ** 9 : 1, 1);
  }
  return e3;
}
__name(refineRoundingInc, "refineRoundingInc");
function refineSubsecDigits(e3) {
  let n3 = e3[Ji];
  if (void 0 !== n3) {
    if ("number" != typeof n3) {
      if ("auto" === toString(n3)) {
        return;
      }
      throw new RangeError(invalidEntity(Ji, n3));
    }
    n3 = clampEntity(Ji, Math.floor(n3), 0, 9, 1);
  }
  return n3;
}
__name(refineSubsecDigits, "refineSubsecDigits");
function normalizeOptions(e3) {
  return void 0 === e3 ? {} : de(e3);
}
__name(normalizeOptions, "normalizeOptions");
function normalizeOptionsOrString(e3, n3) {
  return "string" == typeof e3 ? {
    [n3]: e3
  } : de(e3);
}
__name(normalizeOptionsOrString, "normalizeOptionsOrString");
function U(e3) {
  if (void 0 !== e3) {
    if (z(e3)) {
      return Object.assign(/* @__PURE__ */ Object.create(null), e3);
    }
    throw new TypeError(hr);
  }
}
__name(U, "U");
function overrideOverflowOptions(e3, n3) {
  return e3 && Object.assign(/* @__PURE__ */ Object.create(null), e3, {
    overflow: Xi[n3]
  });
}
__name(overrideOverflowOptions, "overrideOverflowOptions");
function refineUnitOption(e3, n3, t3 = 9, o3 = 0, r3) {
  let i3 = n3[e3];
  if (void 0 === i3) {
    return r3 ? o3 : void 0;
  }
  if (i3 = toString(i3), "auto" === i3) {
    return r3 ? o3 : null;
  }
  let a3 = $r[i3];
  if (void 0 === a3 && (a3 = Ei[i3]), void 0 === a3) {
    throw new RangeError(invalidChoice(e3, i3, $r));
  }
  return clampEntity(e3, a3, o3, t3, 1, Et), a3;
}
__name(refineUnitOption, "refineUnitOption");
function refineChoiceOption(e3, n3, t3, o3 = 0) {
  const r3 = t3[e3];
  if (void 0 === r3) {
    return o3;
  }
  const i3 = toString(r3), a3 = n3[i3];
  if (void 0 === a3) {
    throw new RangeError(invalidChoice(e3, i3, n3));
  }
  return a3;
}
__name(refineChoiceOption, "refineChoiceOption");
function checkLargestSmallestUnit(e3, n3) {
  if (n3 > e3) {
    throw new RangeError(Ar);
  }
}
__name(checkLargestSmallestUnit, "checkLargestSmallestUnit");
function _(e3) {
  return {
    branding: Oe,
    epochNanoseconds: e3
  };
}
__name(_, "_");
function Yn(e3, n3, t3) {
  return {
    branding: Te,
    calendar: t3,
    timeZone: n3,
    epochNanoseconds: e3
  };
}
__name(Yn, "Yn");
function ee(e3, n3 = e3.calendar) {
  return {
    branding: We,
    calendar: n3,
    ...Vn(Yi, e3)
  };
}
__name(ee, "ee");
function v(e3, n3 = e3.calendar) {
  return {
    branding: J,
    calendar: n3,
    ...Vn(Bi, e3)
  };
}
__name(v, "v");
function createPlainYearMonthSlots(e3, n3 = e3.calendar) {
  return {
    branding: L,
    calendar: n3,
    ...Vn(Bi, e3)
  };
}
__name(createPlainYearMonthSlots, "createPlainYearMonthSlots");
function createPlainMonthDaySlots(e3, n3 = e3.calendar) {
  return {
    branding: q,
    calendar: n3,
    ...Vn(Bi, e3)
  };
}
__name(createPlainMonthDaySlots, "createPlainMonthDaySlots");
function Ge(e3) {
  return {
    branding: xe,
    ...Vn(ki, e3)
  };
}
__name(Ge, "Ge");
function Vt(e3) {
  return {
    branding: qt,
    sign: computeDurationSign(e3),
    ...Vn(Ni, e3)
  };
}
__name(Vt, "Vt");
function M(e3) {
  return epochNanoToSec(e3.epochNanoseconds);
}
__name(M, "M");
function y(e3) {
  return divModBigNano(e3.epochNanoseconds, be)[0];
}
__name(y, "y");
function N(e3) {
  return bigNanoToBigInt(e3.epochNanoseconds, Vr);
}
__name(N, "N");
function B(e3) {
  return bigNanoToBigInt(e3.epochNanoseconds);
}
__name(B, "B");
function extractEpochNano(e3) {
  return e3.epochNanoseconds;
}
__name(extractEpochNano, "extractEpochNano");
function I(e3) {
  return "string" == typeof e3 ? e3 : m(e3.id);
}
__name(I, "I");
function isIdLikeEqual(e3, n3) {
  return e3 === n3 || I(e3) === I(n3);
}
__name(isIdLikeEqual, "isIdLikeEqual");
function Ut(e3, n3, t3, o3, r3) {
  const i3 = getMaxDurationUnit(o3), [a3, s3] = ((e4, n4) => {
    const t4 = n4((e4 = normalizeOptionsOrString(e4, Vi))[Ki]);
    let o4 = ca(e4);
    return o4 = requirePropDefined(Vi, o4), [o4, t4];
  })(r3, e3);
  if (isUniformUnit(Math.max(a3, i3), s3)) {
    return totalDayTimeDuration(o3, a3);
  }
  if (!s3) {
    throw new RangeError(zr);
  }
  const [c3, u3, l3] = createMarkerSystem(n3, t3, s3), f3 = createMarkerToEpochNano(l3), d3 = createMoveMarker(l3), m3 = createDiffMarkers(l3), p3 = d3(u3, c3, o3), h3 = m3(u3, c3, p3, a3);
  return isUniformUnit(a3, s3) ? totalDayTimeDuration(h3, a3) : ((e4, n4, t4, o4, r4, i4, a4) => {
    const s4 = computeDurationSign(e4), [c4, u4] = clampRelativeDuration(o4, bi(t4, e4), t4, s4, r4, i4, a4), l4 = computeEpochNanoFrac(n4, c4, u4);
    return e4[F[t4]] + l4 * s4;
  })(h3, f3(p3), a3, u3, c3, f3, d3);
}
__name(Ut, "Ut");
function totalDayTimeDuration(e3, n3) {
  return oe(durationFieldsToBigNano(e3), Xr[n3], 1);
}
__name(totalDayTimeDuration, "totalDayTimeDuration");
function clampRelativeDuration(e3, n3, t3, o3, r3, i3, a3) {
  const s3 = F[t3], c3 = {
    ...n3,
    [s3]: n3[s3] + o3
  }, u3 = a3(e3, r3, n3), l3 = a3(e3, r3, c3);
  return [i3(u3), i3(l3)];
}
__name(clampRelativeDuration, "clampRelativeDuration");
function computeEpochNanoFrac(e3, n3, t3) {
  const o3 = oe(re(n3, t3));
  if (!o3) {
    throw new RangeError(vr);
  }
  return oe(re(n3, e3)) / o3;
}
__name(computeEpochNanoFrac, "computeEpochNanoFrac");
function ce(e3, n3) {
  const [t3, o3, r3] = refineRoundingOptions(n3, 5, 1);
  return _(roundBigNano(e3.epochNanoseconds, t3, o3, r3, 1));
}
__name(ce, "ce");
function Pn(e3, n3, t3) {
  let { epochNanoseconds: o3, timeZone: r3, calendar: i3 } = n3;
  const [a3, s3, c3] = refineRoundingOptions(t3);
  if (0 === a3 && 1 === s3) {
    return n3;
  }
  const u3 = e3(r3);
  if (6 === a3) {
    o3 = ((e4, n4, t4, o4) => {
      const r4 = fn(t4, n4), [i4, a4] = e4(r4), s4 = t4.epochNanoseconds, c4 = we(n4, i4), u4 = we(n4, a4);
      if (bigNanoOutside(s4, c4, u4)) {
        throw new RangeError(vr);
      }
      return roundWithMode(computeEpochNanoFrac(s4, c4, u4), o4) ? u4 : c4;
    })(computeDayInterval, u3, n3, c3);
  } else {
    const e4 = u3.getOffsetNanosecondsFor(o3);
    o3 = getMatchingInstantFor(u3, roundDateTime(Ie(o3, e4), a3, s3, c3), e4, 2, 0, 1);
  }
  return Yn(o3, r3, i3);
}
__name(Pn, "Pn");
function dt(e3, n3) {
  return ee(roundDateTime(e3, ...refineRoundingOptions(n3)), e3.calendar);
}
__name(dt, "dt");
function Ee(e3, n3) {
  const [t3, o3, r3] = refineRoundingOptions(n3, 5);
  var i3;
  return Ge((i3 = r3, roundTimeToNano(e3, computeNanoInc(t3, o3), i3)[0]));
}
__name(Ee, "Ee");
function dn(e3, n3) {
  const t3 = e3(n3.timeZone), o3 = fn(n3, t3), [r3, i3] = computeDayInterval(o3), a3 = oe(re(we(t3, r3), we(t3, i3)), Kr, 1);
  if (a3 <= 0) {
    throw new RangeError(vr);
  }
  return a3;
}
__name(dn, "dn");
function Cn(e3, n3) {
  const { timeZone: t3, calendar: o3 } = n3, r3 = ((e4, n4, t4) => we(n4, e4(fn(t4, n4))))(computeDayFloor, e3(t3), n3);
  return Yn(r3, t3, o3);
}
__name(Cn, "Cn");
function roundDateTime(e3, n3, t3, o3) {
  return roundDateTimeToNano(e3, computeNanoInc(n3, t3), o3);
}
__name(roundDateTime, "roundDateTime");
function roundDateTimeToNano(e3, n3, t3) {
  const [o3, r3] = roundTimeToNano(e3, n3, t3);
  return checkIsoDateTimeInBounds({
    ...moveByDays(e3, r3),
    ...o3
  });
}
__name(roundDateTimeToNano, "roundDateTimeToNano");
function roundTimeToNano(e3, n3, t3) {
  return nanoToIsoTimeAndDay(roundByInc(isoTimeFieldsToNano(e3), n3, t3));
}
__name(roundTimeToNano, "roundTimeToNano");
function roundToMinute(e3) {
  return roundByInc(e3, Jr, 7);
}
__name(roundToMinute, "roundToMinute");
function computeNanoInc(e3, n3) {
  return Xr[e3] * n3;
}
__name(computeNanoInc, "computeNanoInc");
function computeDayInterval(e3) {
  const n3 = computeDayFloor(e3);
  return [n3, moveByDays(n3, 1)];
}
__name(computeDayInterval, "computeDayInterval");
function computeDayFloor(e3) {
  return Ci(6, e3);
}
__name(computeDayFloor, "computeDayFloor");
function roundDayTimeDurationByInc(e3, n3, t3) {
  const o3 = Math.min(getMaxDurationUnit(e3), 6);
  return nanoToDurationDayTimeFields(roundBigNanoByInc(durationFieldsToBigNano(e3, o3), n3, t3), o3);
}
__name(roundDayTimeDurationByInc, "roundDayTimeDurationByInc");
function roundRelativeDuration(e3, n3, t3, o3, r3, i3, a3, s3, c3, u3) {
  if (0 === o3 && 1 === r3) {
    return e3;
  }
  const l3 = isUniformUnit(o3, s3) ? isZonedEpochSlots(s3) && o3 < 6 && t3 >= 6 ? nudgeZonedTimeDuration : nudgeDayTimeDuration : nudgeRelativeDuration;
  let [f3, d3, m3] = l3(e3, n3, t3, o3, r3, i3, a3, s3, c3, u3);
  return m3 && 7 !== o3 && (f3 = ((e4, n4, t4, o4, r4, i4, a4, s4) => {
    const c4 = computeDurationSign(e4);
    for (let u4 = o4 + 1; u4 <= t4; u4++) {
      if (7 === u4 && 7 !== t4) {
        continue;
      }
      const o5 = bi(u4, e4);
      o5[F[u4]] += c4;
      const l4 = oe(re(a4(s4(r4, i4, o5)), n4));
      if (l4 && Math.sign(l4) !== c4) {
        break;
      }
      e4 = o5;
    }
    return e4;
  })(f3, d3, t3, Math.max(6, o3), a3, s3, c3, u3)), f3;
}
__name(roundRelativeDuration, "roundRelativeDuration");
function roundBigNano(e3, n3, t3, o3, r3) {
  if (6 === n3) {
    const n4 = ((e4) => e4[0] + e4[1] / Qr)(e3);
    return [roundByInc(n4, t3, o3), 0];
  }
  return roundBigNanoByInc(e3, computeNanoInc(n3, t3), o3, r3);
}
__name(roundBigNano, "roundBigNano");
function roundBigNanoByInc(e3, n3, t3, o3) {
  let [r3, i3] = e3;
  o3 && i3 < 0 && (i3 += Qr, r3 -= 1);
  const [a3, s3] = divModFloor(roundByInc(i3, n3, t3), Qr);
  return createBigNano(r3 + a3, s3);
}
__name(roundBigNanoByInc, "roundBigNanoByInc");
function roundByInc(e3, n3, t3) {
  return roundWithMode(e3 / n3, t3) * n3;
}
__name(roundByInc, "roundByInc");
function roundWithMode(e3, n3) {
  return ga[n3](e3);
}
__name(roundWithMode, "roundWithMode");
function nudgeDayTimeDuration(e3, n3, t3, o3, r3, i3) {
  const a3 = computeDurationSign(e3), s3 = durationFieldsToBigNano(e3), c3 = roundBigNano(s3, o3, r3, i3), u3 = re(s3, c3), l3 = Math.sign(c3[0] - s3[0]) === a3, f3 = nanoToDurationDayTimeFields(c3, Math.min(t3, 6));
  return [{
    ...e3,
    ...f3
  }, addBigNanos(n3, u3), l3];
}
__name(nudgeDayTimeDuration, "nudgeDayTimeDuration");
function nudgeZonedTimeDuration(e3, n3, t3, o3, r3, i3, a3, s3, c3, u3) {
  const l3 = computeDurationSign(e3), f3 = oe(durationFieldsToBigNano(e3, 5)), d3 = computeNanoInc(o3, r3);
  let m3 = roundByInc(f3, d3, i3);
  const [p3, h3] = clampRelativeDuration(a3, {
    ...e3,
    ...Fi
  }, 6, l3, s3, c3, u3), g3 = m3 - oe(re(p3, h3));
  let T3 = 0;
  g3 && Math.sign(g3) !== l3 ? n3 = moveBigNano(p3, m3) : (T3 += l3, m3 = roundByInc(g3, d3, i3), n3 = moveBigNano(h3, m3));
  const D2 = nanoToDurationTimeFields(m3);
  return [{
    ...e3,
    ...D2,
    days: e3.days + T3
  }, n3, Boolean(T3)];
}
__name(nudgeZonedTimeDuration, "nudgeZonedTimeDuration");
function nudgeRelativeDuration(e3, n3, t3, o3, r3, i3, a3, s3, c3, u3) {
  const l3 = computeDurationSign(e3), f3 = F[o3], d3 = bi(o3, e3);
  7 === o3 && (e3 = {
    ...e3,
    weeks: e3.weeks + Math.trunc(e3.days / 7)
  });
  const m3 = divTrunc(e3[f3], r3) * r3;
  d3[f3] = m3;
  const [p3, h3] = clampRelativeDuration(a3, d3, o3, r3 * l3, s3, c3, u3), g3 = m3 + computeEpochNanoFrac(n3, p3, h3) * l3 * r3, T3 = roundByInc(g3, r3, i3), D2 = Math.sign(T3 - g3) === l3;
  return d3[f3] = T3, [d3, D2 ? h3 : p3, D2];
}
__name(nudgeRelativeDuration, "nudgeRelativeDuration");
function me(e3, n3, t3, o3) {
  const [r3, i3, a3, s3] = ((e4) => {
    const n4 = refineTimeDisplayTuple(e4 = normalizeOptions(e4));
    return [e4.timeZone, ...n4];
  })(o3), c3 = void 0 !== r3;
  return ((e4, n4, t4, o4, r4, i4) => {
    t4 = roundBigNanoByInc(t4, r4, o4, 1);
    const a4 = n4.getOffsetNanosecondsFor(t4);
    return formatIsoDateTimeFields(Ie(t4, a4), i4) + (e4 ? Fe(roundToMinute(a4)) : "Z");
  })(c3, n3(c3 ? e3(r3) : Ta), t3.epochNanoseconds, i3, a3, s3);
}
__name(me, "me");
function In(e3, n3, t3) {
  const [o3, r3, i3, a3, s3, c3] = ((e4) => {
    e4 = normalizeOptions(e4);
    const n4 = da(e4), t4 = refineSubsecDigits(e4), o4 = pa(e4), r4 = ha(e4, 4), i4 = aa(e4, 4);
    return [n4, ma(e4), o4, r4, ...refineSmallestUnitAndSubsecDigits(i4, t4)];
  })(t3);
  return ((e4, n4, t4, o4, r4, i4, a4, s4, c4, u3) => {
    o4 = roundBigNanoByInc(o4, c4, s4, 1);
    const l3 = e4(t4).getOffsetNanosecondsFor(o4);
    return formatIsoDateTimeFields(Ie(o4, l3), u3) + Fe(roundToMinute(l3), a4) + ((e5, n5) => 1 !== n5 ? "[" + (2 === n5 ? "!" : "") + I(e5) + "]" : "")(t4, i4) + formatCalendar(n4, r4);
  })(e3, n3.calendar, n3.timeZone, n3.epochNanoseconds, o3, r3, i3, a3, s3, c3);
}
__name(In, "In");
function Tt(e3, n3) {
  const [t3, o3, r3, i3] = ((e4) => (e4 = normalizeOptions(e4), [da(e4), ...refineTimeDisplayTuple(e4)]))(n3);
  return a3 = e3.calendar, s3 = t3, c3 = i3, formatIsoDateTimeFields(roundDateTimeToNano(e3, r3, o3), c3) + formatCalendar(a3, s3);
  var a3, s3, c3;
}
__name(Tt, "Tt");
function yt(e3, n3) {
  return t3 = e3.calendar, o3 = e3, r3 = refineDateDisplayOptions(n3), formatIsoDateFields(o3) + formatCalendar(t3, r3);
  var t3, o3, r3;
}
__name(yt, "yt");
function et(e3, n3) {
  return formatDateLikeIso(e3.calendar, formatIsoYearMonthFields, e3, refineDateDisplayOptions(n3));
}
__name(et, "et");
function W(e3, n3) {
  return formatDateLikeIso(e3.calendar, formatIsoMonthDayFields, e3, refineDateDisplayOptions(n3));
}
__name(W, "W");
function qe(e3, n3) {
  const [t3, o3, r3] = refineTimeDisplayOptions(n3);
  return i3 = r3, formatIsoTimeFields(roundTimeToNano(e3, o3, t3)[0], i3);
  var i3;
}
__name(qe, "qe");
function zt(e3, n3) {
  const [t3, o3, r3] = refineTimeDisplayOptions(n3, 3);
  return o3 > 1 && (e3 = {
    ...e3,
    ...roundDayTimeDurationByInc(e3, o3, t3)
  }), ((e4, n4) => {
    const { sign: t4 } = e4, o4 = -1 === t4 ? negateDurationFields(e4) : e4, { hours: r4, minutes: i3 } = o4, [a3, s3] = divModBigNano(durationFieldsToBigNano(o4, 3), _r, divModTrunc);
    checkDurationTimeUnit(a3);
    const c3 = formatSubsecNano(s3, n4), u3 = n4 >= 0 || !t4 || c3;
    return (t4 < 0 ? "-" : "") + "P" + formatDurationFragments({
      Y: formatDurationNumber(o4.years),
      M: formatDurationNumber(o4.months),
      W: formatDurationNumber(o4.weeks),
      D: formatDurationNumber(o4.days)
    }) + (r4 || i3 || a3 || u3 ? "T" + formatDurationFragments({
      H: formatDurationNumber(r4),
      M: formatDurationNumber(i3),
      S: formatDurationNumber(a3, u3) + c3
    }) : "");
  })(e3, r3);
}
__name(zt, "zt");
function formatDateLikeIso(e3, n3, t3, o3) {
  const r3 = I(e3), i3 = o3 > 1 || 0 === o3 && r3 !== X;
  return 1 === o3 ? r3 === X ? n3(t3) : formatIsoDateFields(t3) : i3 ? formatIsoDateFields(t3) + formatCalendarId(r3, 2 === o3) : n3(t3);
}
__name(formatDateLikeIso, "formatDateLikeIso");
function formatDurationFragments(e3) {
  const n3 = [];
  for (const t3 in e3) {
    const o3 = e3[t3];
    o3 && n3.push(o3, t3);
  }
  return n3.join("");
}
__name(formatDurationFragments, "formatDurationFragments");
function formatIsoDateTimeFields(e3, n3) {
  return formatIsoDateFields(e3) + "T" + formatIsoTimeFields(e3, n3);
}
__name(formatIsoDateTimeFields, "formatIsoDateTimeFields");
function formatIsoDateFields(e3) {
  return formatIsoYearMonthFields(e3) + "-" + xr(e3.isoDay);
}
__name(formatIsoDateFields, "formatIsoDateFields");
function formatIsoYearMonthFields(e3) {
  const { isoYear: n3 } = e3;
  return (n3 < 0 || n3 > 9999 ? getSignStr(n3) + padNumber(6, Math.abs(n3)) : padNumber(4, n3)) + "-" + xr(e3.isoMonth);
}
__name(formatIsoYearMonthFields, "formatIsoYearMonthFields");
function formatIsoMonthDayFields(e3) {
  return xr(e3.isoMonth) + "-" + xr(e3.isoDay);
}
__name(formatIsoMonthDayFields, "formatIsoMonthDayFields");
function formatIsoTimeFields(e3, n3) {
  const t3 = [xr(e3.isoHour), xr(e3.isoMinute)];
  return -1 !== n3 && t3.push(xr(e3.isoSecond) + ((e4, n4, t4, o3) => formatSubsecNano(e4 * be + n4 * Vr + t4, o3))(e3.isoMillisecond, e3.isoMicrosecond, e3.isoNanosecond, n3)), t3.join(":");
}
__name(formatIsoTimeFields, "formatIsoTimeFields");
function Fe(e3, n3 = 0) {
  if (1 === n3) {
    return "";
  }
  const [t3, o3] = divModFloor(Math.abs(e3), Kr), [r3, i3] = divModFloor(o3, Jr), [a3, s3] = divModFloor(i3, _r);
  return getSignStr(e3) + xr(t3) + ":" + xr(r3) + (a3 || s3 ? ":" + xr(a3) + formatSubsecNano(s3) : "");
}
__name(Fe, "Fe");
function formatCalendar(e3, n3) {
  if (1 !== n3) {
    const t3 = I(e3);
    if (n3 > 1 || 0 === n3 && t3 !== X) {
      return formatCalendarId(t3, 2 === n3);
    }
  }
  return "";
}
__name(formatCalendar, "formatCalendar");
function formatCalendarId(e3, n3) {
  return "[" + (n3 ? "!" : "") + "u-ca=" + e3 + "]";
}
__name(formatCalendarId, "formatCalendarId");
function formatSubsecNano(e3, n3) {
  let t3 = padNumber(9, e3);
  return t3 = void 0 === n3 ? t3.replace(Na, "") : t3.slice(0, n3), t3 ? "." + t3 : "";
}
__name(formatSubsecNano, "formatSubsecNano");
function getSignStr(e3) {
  return e3 < 0 ? "-" : "+";
}
__name(getSignStr, "getSignStr");
function formatDurationNumber(e3, n3) {
  return e3 || n3 ? e3.toLocaleString("fullwide", {
    useGrouping: 0
  }) : "";
}
__name(formatDurationNumber, "formatDurationNumber");
function _zonedEpochSlotsToIso(e3, n3) {
  const { epochNanoseconds: t3 } = e3, o3 = (n3.getOffsetNanosecondsFor ? n3 : n3(e3.timeZone)).getOffsetNanosecondsFor(t3), r3 = Ie(t3, o3);
  return {
    calendar: e3.calendar,
    ...r3,
    offsetNanoseconds: o3
  };
}
__name(_zonedEpochSlotsToIso, "_zonedEpochSlotsToIso");
function mn(e3, n3) {
  const t3 = fn(n3, e3);
  return {
    calendar: n3.calendar,
    ...Vn(Yi, t3),
    offset: Fe(t3.offsetNanoseconds),
    timeZone: n3.timeZone
  };
}
__name(mn, "mn");
function getMatchingInstantFor(e3, n3, t3, o3 = 0, r3 = 0, i3, a3) {
  if (void 0 !== t3 && 1 === o3 && (1 === o3 || a3)) {
    return isoToEpochNanoWithOffset(n3, t3);
  }
  const s3 = e3.getPossibleInstantsFor(n3);
  if (void 0 !== t3 && 3 !== o3) {
    const e4 = ((e5, n4, t4, o4) => {
      const r4 = isoToEpochNano(n4);
      o4 && (t4 = roundToMinute(t4));
      for (const n5 of e5) {
        let e6 = oe(re(n5, r4));
        if (o4 && (e6 = roundToMinute(e6)), e6 === t4) {
          return n5;
        }
      }
    })(s3, n3, t3, i3);
    if (void 0 !== e4) {
      return e4;
    }
    if (0 === o3) {
      throw new RangeError(kr);
    }
  }
  return a3 ? isoToEpochNano(n3) : we(e3, n3, r3, s3);
}
__name(getMatchingInstantFor, "getMatchingInstantFor");
function we(e3, n3, t3 = 0, o3 = e3.getPossibleInstantsFor(n3)) {
  if (1 === o3.length) {
    return o3[0];
  }
  if (1 === t3) {
    throw new RangeError(Yr);
  }
  if (o3.length) {
    return o3[3 === t3 ? 1 : 0];
  }
  const r3 = isoToEpochNano(n3), i3 = ((e4, n4) => {
    const t4 = e4.getOffsetNanosecondsFor(moveBigNano(n4, -Qr));
    return ne(e4.getOffsetNanosecondsFor(moveBigNano(n4, Qr)) - t4);
  })(e3, r3), a3 = i3 * (2 === t3 ? -1 : 1);
  return (o3 = e3.getPossibleInstantsFor(Ie(r3, a3)))[2 === t3 ? 0 : o3.length - 1];
}
__name(we, "we");
function ae(e3) {
  if (Math.abs(e3) >= Qr) {
    throw new RangeError(wr);
  }
  return e3;
}
__name(ae, "ae");
function ne(e3) {
  if (e3 > Qr) {
    throw new RangeError(Br);
  }
  return e3;
}
__name(ne, "ne");
function se(e3, n3, t3) {
  return _(checkEpochNanoInBounds(addBigNanos(n3.epochNanoseconds, ((e4) => {
    if (durationHasDateParts(e4)) {
      throw new RangeError(qr);
    }
    return durationFieldsToBigNano(e4, 5);
  })(e3 ? negateDurationFields(t3) : t3))));
}
__name(se, "se");
function hn(e3, n3, t3, o3, r3, i3 = /* @__PURE__ */ Object.create(null)) {
  const a3 = n3(o3.timeZone), s3 = e3(o3.calendar);
  return {
    ...o3,
    ...moveZonedEpochs(a3, s3, o3, t3 ? negateDurationFields(r3) : r3, i3)
  };
}
__name(hn, "hn");
function ct(e3, n3, t3, o3, r3 = /* @__PURE__ */ Object.create(null)) {
  const { calendar: i3 } = t3;
  return ee(moveDateTime(e3(i3), t3, n3 ? negateDurationFields(o3) : o3, r3), i3);
}
__name(ct, "ct");
function bt(e3, n3, t3, o3, r3) {
  const { calendar: i3 } = t3;
  return v(moveDate(e3(i3), t3, n3 ? negateDurationFields(o3) : o3, r3), i3);
}
__name(bt, "bt");
function Qe(e3, n3, t3, o3, r3 = /* @__PURE__ */ Object.create(null)) {
  const i3 = t3.calendar, a3 = e3(i3);
  let s3 = moveToDayOfMonthUnsafe(a3, t3);
  n3 && (o3 = xt(o3)), o3.sign < 0 && (s3 = a3.dateAdd(s3, {
    ...Si,
    months: 1
  }), s3 = moveByDays(s3, -1));
  const c3 = a3.dateAdd(s3, o3, r3);
  return createPlainYearMonthSlots(moveToDayOfMonthUnsafe(a3, c3), i3);
}
__name(Qe, "Qe");
function Ye(e3, n3, t3) {
  return Ge(moveTime(n3, e3 ? negateDurationFields(t3) : t3)[0]);
}
__name(Ye, "Ye");
function moveZonedEpochs(e3, n3, t3, o3, r3) {
  const i3 = durationFieldsToBigNano(o3, 5);
  let a3 = t3.epochNanoseconds;
  if (durationHasDateParts(o3)) {
    const s3 = fn(t3, e3);
    a3 = addBigNanos(we(e3, {
      ...moveDate(n3, s3, {
        ...o3,
        ...Fi
      }, r3),
      ...Vn(j, s3)
    }), i3);
  } else {
    a3 = addBigNanos(a3, i3), H(r3);
  }
  return {
    epochNanoseconds: checkEpochNanoInBounds(a3)
  };
}
__name(moveZonedEpochs, "moveZonedEpochs");
function moveDateTime(e3, n3, t3, o3) {
  const [r3, i3] = moveTime(n3, t3);
  return checkIsoDateTimeInBounds({
    ...moveDate(e3, n3, {
      ...t3,
      ...Fi,
      days: t3.days + i3
    }, o3),
    ...r3
  });
}
__name(moveDateTime, "moveDateTime");
function moveDate(e3, n3, t3, o3) {
  if (t3.years || t3.months || t3.weeks) {
    return e3.dateAdd(n3, t3, o3);
  }
  H(o3);
  const r3 = t3.days + durationFieldsToBigNano(t3, 5)[0];
  return r3 ? checkIsoDateInBounds(moveByDays(n3, r3)) : n3;
}
__name(moveDate, "moveDate");
function moveToDayOfMonthUnsafe(e3, n3, t3 = 1) {
  return moveByDays(n3, t3 - e3.day(n3));
}
__name(moveToDayOfMonthUnsafe, "moveToDayOfMonthUnsafe");
function moveTime(e3, n3) {
  const [t3, o3] = durationFieldsToBigNano(n3, 5), [r3, i3] = nanoToIsoTimeAndDay(isoTimeFieldsToNano(e3) + o3);
  return [r3, t3 + i3];
}
__name(moveTime, "moveTime");
function moveByDays(e3, n3) {
  return n3 ? {
    ...e3,
    ...epochMilliToIso(isoToEpochMilli(e3) + n3 * Gr)
  } : e3;
}
__name(moveByDays, "moveByDays");
function createMarkerSystem(e3, n3, t3) {
  const o3 = e3(t3.calendar);
  return isZonedEpochSlots(t3) ? [t3, o3, n3(t3.timeZone)] : [{
    ...t3,
    ...Dt
  }, o3];
}
__name(createMarkerSystem, "createMarkerSystem");
function createMarkerToEpochNano(e3) {
  return e3 ? extractEpochNano : isoToEpochNano;
}
__name(createMarkerToEpochNano, "createMarkerToEpochNano");
function createMoveMarker(e3) {
  return e3 ? E(moveZonedEpochs, e3) : moveDateTime;
}
__name(createMoveMarker, "createMoveMarker");
function createDiffMarkers(e3) {
  return e3 ? E(diffZonedEpochsExact, e3) : diffDateTimesExact;
}
__name(createDiffMarkers, "createDiffMarkers");
function isZonedEpochSlots(e3) {
  return e3 && e3.epochNanoseconds;
}
__name(isZonedEpochSlots, "isZonedEpochSlots");
function isUniformUnit(e3, n3) {
  return e3 <= 6 - (isZonedEpochSlots(n3) ? 1 : 0);
}
__name(isUniformUnit, "isUniformUnit");
function Wt(e3, n3, t3, o3, r3, i3, a3) {
  const s3 = e3(normalizeOptions(a3).relativeTo), c3 = Math.max(getMaxDurationUnit(r3), getMaxDurationUnit(i3));
  if (isUniformUnit(c3, s3)) {
    return Vt(checkDurationUnits(((e4, n4, t4, o4) => {
      const r4 = addBigNanos(durationFieldsToBigNano(e4), durationFieldsToBigNano(n4), o4 ? -1 : 1);
      if (!Number.isFinite(r4[0])) {
        throw new RangeError(Cr);
      }
      return {
        ...Si,
        ...nanoToDurationDayTimeFields(r4, t4)
      };
    })(r3, i3, c3, o3)));
  }
  if (!s3) {
    throw new RangeError(zr);
  }
  o3 && (i3 = negateDurationFields(i3));
  const [u3, l3, f3] = createMarkerSystem(n3, t3, s3), d3 = createMoveMarker(f3), m3 = createDiffMarkers(f3), p3 = d3(l3, u3, r3);
  return Vt(m3(l3, u3, d3(l3, p3, i3), c3));
}
__name(Wt, "Wt");
function Gt(e3, n3, t3, o3, r3) {
  const i3 = getMaxDurationUnit(o3), [a3, s3, c3, u3, l3] = ((e4, n4, t4) => {
    e4 = normalizeOptionsOrString(e4, Hi);
    let o4 = sa(e4);
    const r4 = t4(e4[Ki]);
    let i4 = parseRoundingIncInteger(e4);
    const a4 = ha(e4, 7);
    let s4 = aa(e4);
    if (void 0 === o4 && void 0 === s4) {
      throw new RangeError(Ur);
    }
    return null == s4 && (s4 = 0), null == o4 && (o4 = Math.max(s4, n4)), checkLargestSmallestUnit(o4, s4), i4 = refineRoundingInc(i4, s4, 1), [o4, s4, i4, a4, r4];
  })(r3, i3, e3), f3 = Math.max(i3, a3);
  if (!isZonedEpochSlots(l3) && f3 <= 6) {
    return Vt(checkDurationUnits(((e4, n4, t4, o4, r4) => {
      const i4 = roundBigNano(durationFieldsToBigNano(e4), t4, o4, r4);
      return {
        ...Si,
        ...nanoToDurationDayTimeFields(i4, n4)
      };
    })(o3, a3, s3, c3, u3)));
  }
  if (!l3) {
    throw new RangeError(zr);
  }
  const [d3, m3, p3] = createMarkerSystem(n3, t3, l3), h3 = createMarkerToEpochNano(p3), g3 = createMoveMarker(p3), T3 = createDiffMarkers(p3), D2 = g3(m3, d3, o3);
  let I3 = T3(m3, d3, D2, a3);
  const M2 = o3.sign, N3 = computeDurationSign(I3);
  if (M2 && N3 && M2 !== N3) {
    throw new RangeError(vr);
  }
  return N3 && (I3 = roundRelativeDuration(I3, h3(D2), a3, s3, c3, u3, m3, d3, h3, g3)), Vt(I3);
}
__name(Gt, "Gt");
function Rt(e3) {
  return -1 === e3.sign ? xt(e3) : e3;
}
__name(Rt, "Rt");
function xt(e3) {
  return Vt(negateDurationFields(e3));
}
__name(xt, "xt");
function negateDurationFields(e3) {
  const n3 = {};
  for (const t3 of F) {
    n3[t3] = -1 * e3[t3] || 0;
  }
  return n3;
}
__name(negateDurationFields, "negateDurationFields");
function Jt(e3) {
  return !e3.sign;
}
__name(Jt, "Jt");
function computeDurationSign(e3, n3 = F) {
  let t3 = 0;
  for (const o3 of n3) {
    const n4 = Math.sign(e3[o3]);
    if (n4) {
      if (t3 && t3 !== n4) {
        throw new RangeError(Rr);
      }
      t3 = n4;
    }
  }
  return t3;
}
__name(computeDurationSign, "computeDurationSign");
function checkDurationUnits(e3) {
  for (const n3 of vi) {
    clampEntity(n3, e3[n3], -ya, ya, 1);
  }
  return checkDurationTimeUnit(oe(durationFieldsToBigNano(e3), _r)), e3;
}
__name(checkDurationUnits, "checkDurationUnits");
function checkDurationTimeUnit(e3) {
  if (!Number.isSafeInteger(e3)) {
    throw new RangeError(Zr);
  }
}
__name(checkDurationTimeUnit, "checkDurationTimeUnit");
function durationFieldsToBigNano(e3, n3 = 6) {
  return givenFieldsToBigNano(e3, n3, F);
}
__name(durationFieldsToBigNano, "durationFieldsToBigNano");
function nanoToDurationDayTimeFields(e3, n3 = 6) {
  const [t3, o3] = e3, r3 = nanoToGivenFields(o3, n3, F);
  if (r3[F[n3]] += t3 * (Qr / Xr[n3]), !Number.isFinite(r3[F[n3]])) {
    throw new RangeError(Cr);
  }
  return r3;
}
__name(nanoToDurationDayTimeFields, "nanoToDurationDayTimeFields");
function nanoToDurationTimeFields(e3, n3 = 5) {
  return nanoToGivenFields(e3, n3, F);
}
__name(nanoToDurationTimeFields, "nanoToDurationTimeFields");
function durationHasDateParts(e3) {
  return Boolean(computeDurationSign(e3, Pi));
}
__name(durationHasDateParts, "durationHasDateParts");
function getMaxDurationUnit(e3) {
  let n3 = 9;
  for (; n3 > 0 && !e3[F[n3]]; n3--) {
  }
  return n3;
}
__name(getMaxDurationUnit, "getMaxDurationUnit");
function createSplitTuple(e3, n3) {
  return [e3, n3];
}
__name(createSplitTuple, "createSplitTuple");
function computePeriod(e3) {
  const n3 = Math.floor(e3 / Da) * Da;
  return [n3, n3 + Da];
}
__name(computePeriod, "computePeriod");
function pe(e3) {
  const n3 = parseDateTimeLike(e3 = toStringViaPrimitive(e3));
  if (!n3) {
    throw new RangeError(failedParse(e3));
  }
  let t3;
  if (n3.m) {
    t3 = 0;
  } else {
    if (!n3.offset) {
      throw new RangeError(failedParse(e3));
    }
    t3 = parseOffsetNano(n3.offset);
  }
  return n3.timeZone && parseOffsetNanoMaybe(n3.timeZone, 1), _(isoToEpochNanoWithOffset(checkIsoDateTimeFields(n3), t3));
}
__name(pe, "pe");
function Xt(e3) {
  const n3 = parseDateTimeLike(m(e3));
  if (!n3) {
    throw new RangeError(failedParse(e3));
  }
  if (n3.timeZone) {
    return finalizeZonedDateTime(n3, n3.offset ? parseOffsetNano(n3.offset) : void 0);
  }
  if (n3.m) {
    throw new RangeError(failedParse(e3));
  }
  return finalizeDate(n3);
}
__name(Xt, "Xt");
function Mn(e3, n3) {
  const t3 = parseDateTimeLike(m(e3));
  if (!t3 || !t3.timeZone) {
    throw new RangeError(failedParse(e3));
  }
  const { offset: o3 } = t3, r3 = o3 ? parseOffsetNano(o3) : void 0, [, i3, a3] = wn(n3);
  return finalizeZonedDateTime(t3, r3, i3, a3);
}
__name(Mn, "Mn");
function parseOffsetNano(e3) {
  const n3 = parseOffsetNanoMaybe(e3);
  if (void 0 === n3) {
    throw new RangeError(failedParse(e3));
  }
  return n3;
}
__name(parseOffsetNano, "parseOffsetNano");
function Ct(e3) {
  const n3 = parseDateTimeLike(m(e3));
  if (!n3 || n3.m) {
    throw new RangeError(failedParse(e3));
  }
  return ee(finalizeDateTime(n3));
}
__name(Ct, "Ct");
function At(e3) {
  const n3 = parseDateTimeLike(m(e3));
  if (!n3 || n3.m) {
    throw new RangeError(failedParse(e3));
  }
  return v(n3.p ? finalizeDateTime(n3) : finalizeDate(n3));
}
__name(At, "At");
function ot(e3, n3) {
  const t3 = parseYearMonthOnly(m(n3));
  if (t3) {
    return requireIsoCalendar(t3), createPlainYearMonthSlots(checkIsoYearMonthInBounds(checkIsoDateFields(t3)));
  }
  const o3 = At(n3);
  return createPlainYearMonthSlots(moveToDayOfMonthUnsafe(e3(o3.calendar), o3));
}
__name(ot, "ot");
function requireIsoCalendar(e3) {
  if (e3.calendar !== X) {
    throw new RangeError(invalidSubstring(e3.calendar));
  }
}
__name(requireIsoCalendar, "requireIsoCalendar");
function Q(e3, n3) {
  const t3 = parseMonthDayOnly(m(n3));
  if (t3) {
    return requireIsoCalendar(t3), createPlainMonthDaySlots(checkIsoDateFields(t3));
  }
  const o3 = At(n3), { calendar: r3 } = o3, i3 = e3(r3), [a3, s3, c3] = i3.h(o3), [u3, l3] = i3.I(a3, s3), [f3, d3] = i3.N(u3, l3, c3);
  return createPlainMonthDaySlots(checkIsoDateInBounds(i3.P(f3, d3, c3)), r3);
}
__name(Q, "Q");
function ze(e3) {
  let n3, t3 = ((e4) => {
    const n4 = Ca.exec(e4);
    return n4 ? (organizeAnnotationParts(n4[10]), organizeTimeParts(n4)) : void 0;
  })(m(e3));
  if (!t3) {
    if (t3 = parseDateTimeLike(e3), !t3) {
      throw new RangeError(failedParse(e3));
    }
    if (!t3.p) {
      throw new RangeError(failedParse(e3));
    }
    if (t3.m) {
      throw new RangeError(invalidSubstring("Z"));
    }
    requireIsoCalendar(t3);
  }
  if ((n3 = parseYearMonthOnly(e3)) && isIsoDateFieldsValid(n3)) {
    throw new RangeError(failedParse(e3));
  }
  if ((n3 = parseMonthDayOnly(e3)) && isIsoDateFieldsValid(n3)) {
    throw new RangeError(failedParse(e3));
  }
  return Ge(constrainIsoTimeFields(t3, 1));
}
__name(ze, "ze");
function Kt(e3) {
  const n3 = ((e4) => {
    const n4 = za.exec(e4);
    return n4 ? ((e5) => {
      function parseUnit(e6, r4, i3) {
        let a3 = 0, s3 = 0;
        if (i3 && ([a3, o3] = divModFloor(o3, Xr[i3])), void 0 !== e6) {
          if (t3) {
            throw new RangeError(invalidSubstring(e6));
          }
          s3 = ((e7) => {
            const n6 = parseInt(e7);
            if (!Number.isFinite(n6)) {
              throw new RangeError(invalidSubstring(e7));
            }
            return n6;
          })(e6), n5 = 1, r4 && (o3 = parseSubsecNano(r4) * (Xr[i3] / _r), t3 = 1);
        }
        return a3 + s3;
      }
      __name(parseUnit, "parseUnit");
      let n5 = 0, t3 = 0, o3 = 0, r3 = {
        ...zipProps(F, [parseUnit(e5[2]), parseUnit(e5[3]), parseUnit(e5[4]), parseUnit(e5[5]), parseUnit(e5[6], e5[7], 5), parseUnit(e5[8], e5[9], 4), parseUnit(e5[10], e5[11], 3)]),
        ...nanoToGivenFields(o3, 2, F)
      };
      if (!n5) {
        throw new RangeError(noValidFields(F));
      }
      return parseSign(e5[1]) < 0 && (r3 = negateDurationFields(r3)), r3;
    })(n4) : void 0;
  })(m(e3));
  if (!n3) {
    throw new RangeError(failedParse(e3));
  }
  return Vt(checkDurationUnits(n3));
}
__name(Kt, "Kt");
function sn(e3) {
  const n3 = parseDateTimeLike(e3) || parseYearMonthOnly(e3) || parseMonthDayOnly(e3);
  return n3 ? n3.calendar : e3;
}
__name(sn, "sn");
function Ne(e3) {
  const n3 = parseDateTimeLike(e3);
  return n3 && (n3.timeZone || n3.m && Ta || n3.offset) || e3;
}
__name(Ne, "Ne");
function finalizeZonedDateTime(e3, n3, t3 = 0, o3 = 0) {
  const r3 = ye(e3.timeZone), i3 = ie(r3);
  return Yn(getMatchingInstantFor(i3, checkIsoDateTimeFields(e3), n3, t3, o3, !i3.v, e3.m), r3, an(e3.calendar));
}
__name(finalizeZonedDateTime, "finalizeZonedDateTime");
function finalizeDateTime(e3) {
  return resolveSlotsCalendar(checkIsoDateTimeInBounds(checkIsoDateTimeFields(e3)));
}
__name(finalizeDateTime, "finalizeDateTime");
function finalizeDate(e3) {
  return resolveSlotsCalendar(checkIsoDateInBounds(checkIsoDateFields(e3)));
}
__name(finalizeDate, "finalizeDate");
function resolveSlotsCalendar(e3) {
  return {
    ...e3,
    calendar: an(e3.calendar)
  };
}
__name(resolveSlotsCalendar, "resolveSlotsCalendar");
function parseDateTimeLike(e3) {
  const n3 = Ya.exec(e3);
  return n3 ? ((e4) => {
    const n4 = e4[10], t3 = "Z" === (n4 || "").toUpperCase();
    return {
      isoYear: organizeIsoYearParts(e4),
      isoMonth: parseInt(e4[4]),
      isoDay: parseInt(e4[5]),
      ...organizeTimeParts(e4.slice(5)),
      ...organizeAnnotationParts(e4[16]),
      p: Boolean(e4[6]),
      m: t3,
      offset: t3 ? void 0 : n4
    };
  })(n3) : void 0;
}
__name(parseDateTimeLike, "parseDateTimeLike");
function parseYearMonthOnly(e3) {
  const n3 = Ba.exec(e3);
  return n3 ? ((e4) => ({
    isoYear: organizeIsoYearParts(e4),
    isoMonth: parseInt(e4[4]),
    isoDay: 1,
    ...organizeAnnotationParts(e4[5])
  }))(n3) : void 0;
}
__name(parseYearMonthOnly, "parseYearMonthOnly");
function parseMonthDayOnly(e3) {
  const n3 = ka.exec(e3);
  return n3 ? ((e4) => ({
    isoYear: ji,
    isoMonth: parseInt(e4[1]),
    isoDay: parseInt(e4[2]),
    ...organizeAnnotationParts(e4[3])
  }))(n3) : void 0;
}
__name(parseMonthDayOnly, "parseMonthDayOnly");
function parseOffsetNanoMaybe(e3, n3) {
  const t3 = Za.exec(e3);
  return t3 ? ((e4, n4) => {
    const t4 = e4[4] || e4[5];
    if (n4 && t4) {
      throw new RangeError(invalidSubstring(t4));
    }
    return ae((parseInt0(e4[2]) * Kr + parseInt0(e4[3]) * Jr + parseInt0(e4[4]) * _r + parseSubsecNano(e4[5] || "")) * parseSign(e4[1]));
  })(t3, n3) : void 0;
}
__name(parseOffsetNanoMaybe, "parseOffsetNanoMaybe");
function organizeIsoYearParts(e3) {
  const n3 = parseSign(e3[1]), t3 = parseInt(e3[2] || e3[3]);
  if (n3 < 0 && !t3) {
    throw new RangeError(invalidSubstring(-0));
  }
  return n3 * t3;
}
__name(organizeIsoYearParts, "organizeIsoYearParts");
function organizeTimeParts(e3) {
  const n3 = parseInt0(e3[3]);
  return {
    ...nanoToIsoTimeAndDay(parseSubsecNano(e3[4] || ""))[0],
    isoHour: parseInt0(e3[1]),
    isoMinute: parseInt0(e3[2]),
    isoSecond: 60 === n3 ? 59 : n3
  };
}
__name(organizeTimeParts, "organizeTimeParts");
function organizeAnnotationParts(e3) {
  let n3, t3;
  const o3 = [];
  if (e3.replace(Ra, (e4, r3, i3) => {
    const a3 = Boolean(r3), [s3, c3] = i3.split("=").reverse();
    if (c3) {
      if ("u-ca" === c3) {
        o3.push(s3), n3 || (n3 = a3);
      } else if (a3 || /[A-Z]/.test(c3)) {
        throw new RangeError(invalidSubstring(e4));
      }
    } else {
      if (t3) {
        throw new RangeError(invalidSubstring(e4));
      }
      t3 = s3;
    }
    return "";
  }), o3.length > 1 && n3) {
    throw new RangeError(invalidSubstring(e3));
  }
  return {
    timeZone: t3,
    calendar: o3[0] || X
  };
}
__name(organizeAnnotationParts, "organizeAnnotationParts");
function parseSubsecNano(e3) {
  return parseInt(e3.padEnd(9, "0"));
}
__name(parseSubsecNano, "parseSubsecNano");
function createRegExp(e3) {
  return new RegExp(`^${e3}$`, "i");
}
__name(createRegExp, "createRegExp");
function parseSign(e3) {
  return e3 && "+" !== e3 ? -1 : 1;
}
__name(parseSign, "parseSign");
function parseInt0(e3) {
  return void 0 === e3 ? 0 : parseInt(e3);
}
__name(parseInt0, "parseInt0");
function Me(e3) {
  return ye(m(e3));
}
__name(Me, "Me");
function ye(e3) {
  const n3 = getTimeZoneEssence(e3);
  return "number" == typeof n3 ? Fe(n3) : n3 ? ((e4) => {
    if (Ua.test(e4)) {
      throw new RangeError(br);
    }
    return e4.toLowerCase().split("/").map((e5, n4) => (e5.length <= 3 || /\d/.test(e5)) && !/etc|yap/.test(e5) ? e5.toUpperCase() : e5.replace(/baja|dumont|[a-z]+/g, (e6, t3) => e6.length <= 2 && !n4 || "in" === e6 || "chat" === e6 ? e6.toUpperCase() : e6.length > 2 || !t3 ? capitalize(e6).replace(/island|noronha|murdo|rivadavia|urville/, capitalize) : e6)).join("/");
  })(e3) : Ta;
}
__name(ye, "ye");
function getTimeZoneAtomic(e3) {
  const n3 = getTimeZoneEssence(e3);
  return "number" == typeof n3 ? n3 : n3 ? n3.resolvedOptions().timeZone : Ta;
}
__name(getTimeZoneAtomic, "getTimeZoneAtomic");
function getTimeZoneEssence(e3) {
  const n3 = parseOffsetNanoMaybe(e3 = e3.toUpperCase(), 1);
  return void 0 !== n3 ? n3 : e3 !== Ta ? qa(e3) : void 0;
}
__name(getTimeZoneEssence, "getTimeZoneEssence");
function Ze(e3, n3) {
  return te(e3.epochNanoseconds, n3.epochNanoseconds);
}
__name(Ze, "Ze");
function yn(e3, n3) {
  return te(e3.epochNanoseconds, n3.epochNanoseconds);
}
__name(yn, "yn");
function $t(e3, n3, t3, o3, r3, i3) {
  const a3 = e3(normalizeOptions(i3).relativeTo), s3 = Math.max(getMaxDurationUnit(o3), getMaxDurationUnit(r3));
  if (allPropsEqual(F, o3, r3)) {
    return 0;
  }
  if (isUniformUnit(s3, a3)) {
    return te(durationFieldsToBigNano(o3), durationFieldsToBigNano(r3));
  }
  if (!a3) {
    throw new RangeError(zr);
  }
  const [c3, u3, l3] = createMarkerSystem(n3, t3, a3), f3 = createMarkerToEpochNano(l3), d3 = createMoveMarker(l3);
  return te(f3(d3(u3, c3, o3)), f3(d3(u3, c3, r3)));
}
__name($t, "$t");
function gt(e3, n3) {
  return rt(e3, n3) || He(e3, n3);
}
__name(gt, "gt");
function rt(e3, n3) {
  return compareNumbers(isoToEpochMilli(e3), isoToEpochMilli(n3));
}
__name(rt, "rt");
function He(e3, n3) {
  return compareNumbers(isoTimeFieldsToNano(e3), isoTimeFieldsToNano(n3));
}
__name(He, "He");
function ue(e3, n3) {
  return !Ze(e3, n3);
}
__name(ue, "ue");
function gn(e3, n3) {
  return !yn(e3, n3) && !!je(e3.timeZone, n3.timeZone) && isIdLikeEqual(e3.calendar, n3.calendar);
}
__name(gn, "gn");
function ft(e3, n3) {
  return !gt(e3, n3) && isIdLikeEqual(e3.calendar, n3.calendar);
}
__name(ft, "ft");
function It(e3, n3) {
  return !rt(e3, n3) && isIdLikeEqual(e3.calendar, n3.calendar);
}
__name(It, "It");
function $e(e3, n3) {
  return !rt(e3, n3) && isIdLikeEqual(e3.calendar, n3.calendar);
}
__name($e, "$e");
function x(e3, n3) {
  return !rt(e3, n3) && isIdLikeEqual(e3.calendar, n3.calendar);
}
__name(x, "x");
function Ve(e3, n3) {
  return !He(e3, n3);
}
__name(Ve, "Ve");
function je(e3, n3) {
  if (e3 === n3) {
    return 1;
  }
  const t3 = I(e3), o3 = I(n3);
  if (t3 === o3) {
    return 1;
  }
  try {
    return getTimeZoneAtomic(t3) === getTimeZoneAtomic(o3);
  } catch (e4) {
  }
}
__name(je, "je");
function le(e3, n3, t3, o3) {
  const r3 = refineDiffOptions(e3, U(o3), 3, 5), i3 = diffEpochNanos(n3.epochNanoseconds, t3.epochNanoseconds, ...r3);
  return Vt(e3 ? negateDurationFields(i3) : i3);
}
__name(le, "le");
function Dn(e3, n3, t3, o3, r3, i3) {
  const a3 = getCommonCalendarSlot(o3.calendar, r3.calendar), s3 = U(i3), [c3, u3, l3, f3] = refineDiffOptions(t3, s3, 5), d3 = o3.epochNanoseconds, m3 = r3.epochNanoseconds, p3 = te(m3, d3);
  let h3;
  if (p3) {
    if (c3 < 6) {
      h3 = diffEpochNanos(d3, m3, c3, u3, l3, f3);
    } else {
      const t4 = n3(((e4, n4) => {
        if (!je(e4, n4)) {
          throw new RangeError(Fr);
        }
        return e4;
      })(o3.timeZone, r3.timeZone)), i4 = e3(a3);
      h3 = diffZonedEpochsBig(i4, t4, o3, r3, p3, c3, s3), h3 = roundRelativeDuration(h3, m3, c3, u3, l3, f3, i4, o3, extractEpochNano, E(moveZonedEpochs, t4));
    }
  } else {
    h3 = Si;
  }
  return Vt(t3 ? negateDurationFields(h3) : h3);
}
__name(Dn, "Dn");
function ut(e3, n3, t3, o3, r3) {
  const i3 = getCommonCalendarSlot(t3.calendar, o3.calendar), a3 = U(r3), [s3, c3, u3, l3] = refineDiffOptions(n3, a3, 6), f3 = isoToEpochNano(t3), d3 = isoToEpochNano(o3), m3 = te(d3, f3);
  let p3;
  if (m3) {
    if (s3 <= 6) {
      p3 = diffEpochNanos(f3, d3, s3, c3, u3, l3);
    } else {
      const n4 = e3(i3);
      p3 = diffDateTimesBig(n4, t3, o3, m3, s3, a3), p3 = roundRelativeDuration(p3, d3, s3, c3, u3, l3, n4, t3, isoToEpochNano, moveDateTime);
    }
  } else {
    p3 = Si;
  }
  return Vt(n3 ? negateDurationFields(p3) : p3);
}
__name(ut, "ut");
function Ft(e3, n3, t3, o3, r3) {
  const i3 = getCommonCalendarSlot(t3.calendar, o3.calendar), a3 = U(r3);
  return diffDateLike(n3, () => e3(i3), t3, o3, ...refineDiffOptions(n3, a3, 6, 9, 6), a3);
}
__name(Ft, "Ft");
function Xe(e3, n3, t3, o3, r3) {
  const i3 = getCommonCalendarSlot(t3.calendar, o3.calendar), a3 = U(r3), s3 = refineDiffOptions(n3, a3, 9, 9, 8), c3 = e3(i3);
  return diffDateLike(n3, () => c3, moveToDayOfMonthUnsafe(c3, t3), moveToDayOfMonthUnsafe(c3, o3), ...s3, a3);
}
__name(Xe, "Xe");
function diffDateLike(e3, n3, t3, o3, r3, i3, a3, s3, c3) {
  const u3 = isoToEpochNano(t3), l3 = isoToEpochNano(o3);
  let f3;
  if (te(l3, u3)) {
    if (6 === r3) {
      f3 = diffEpochNanos(u3, l3, r3, i3, a3, s3);
    } else {
      const e4 = n3();
      f3 = e4.dateUntil(t3, o3, r3, c3), 6 === i3 && 1 === a3 || (f3 = roundRelativeDuration(f3, l3, r3, i3, a3, s3, e4, t3, isoToEpochNano, moveDate));
    }
  } else {
    f3 = Si;
  }
  return Vt(e3 ? negateDurationFields(f3) : f3);
}
__name(diffDateLike, "diffDateLike");
function Ae(e3, n3, t3, o3) {
  const r3 = U(o3), [i3, a3, s3, c3] = refineDiffOptions(e3, r3, 5, 5), u3 = roundByInc(diffTimes(n3, t3), computeNanoInc(a3, s3), c3), l3 = {
    ...Si,
    ...nanoToDurationTimeFields(u3, i3)
  };
  return Vt(e3 ? negateDurationFields(l3) : l3);
}
__name(Ae, "Ae");
function diffZonedEpochsExact(e3, n3, t3, o3, r3, i3) {
  const a3 = te(o3.epochNanoseconds, t3.epochNanoseconds);
  return a3 ? r3 < 6 ? diffEpochNanosExact(t3.epochNanoseconds, o3.epochNanoseconds, r3) : diffZonedEpochsBig(n3, e3, t3, o3, a3, r3, i3) : Si;
}
__name(diffZonedEpochsExact, "diffZonedEpochsExact");
function diffDateTimesExact(e3, n3, t3, o3, r3) {
  const i3 = isoToEpochNano(n3), a3 = isoToEpochNano(t3), s3 = te(a3, i3);
  return s3 ? o3 <= 6 ? diffEpochNanosExact(i3, a3, o3) : diffDateTimesBig(e3, n3, t3, s3, o3, r3) : Si;
}
__name(diffDateTimesExact, "diffDateTimesExact");
function diffZonedEpochsBig(e3, n3, t3, o3, r3, i3, a3) {
  const [s3, c3, u3] = ((e4, n4, t4, o4) => {
    function updateMid() {
      return l4 = {
        ...moveByDays(a4, c4++ * -o4),
        ...i4
      }, f4 = we(e4, l4), te(s4, f4) === -o4;
    }
    __name(updateMid, "updateMid");
    const r4 = fn(n4, e4), i4 = Vn(j, r4), a4 = fn(t4, e4), s4 = t4.epochNanoseconds;
    let c4 = 0;
    const u4 = diffTimes(r4, a4);
    let l4, f4;
    if (Math.sign(u4) === -o4 && c4++, updateMid() && (-1 === o4 || updateMid())) {
      throw new RangeError(vr);
    }
    const d3 = oe(re(f4, s4));
    return [r4, l4, d3];
  })(n3, t3, o3, r3);
  var l3, f3;
  return {
    ...6 === i3 ? (l3 = s3, f3 = c3, {
      ...Si,
      days: diffDays(l3, f3)
    }) : e3.dateUntil(s3, c3, i3, a3),
    ...nanoToDurationTimeFields(u3)
  };
}
__name(diffZonedEpochsBig, "diffZonedEpochsBig");
function diffDateTimesBig(e3, n3, t3, o3, r3, i3) {
  const [a3, s3, c3] = ((e4, n4, t4) => {
    let o4 = n4, r4 = diffTimes(e4, n4);
    return Math.sign(r4) === -t4 && (o4 = moveByDays(n4, -t4), r4 += Qr * t4), [e4, o4, r4];
  })(n3, t3, o3);
  return {
    ...e3.dateUntil(a3, s3, r3, i3),
    ...nanoToDurationTimeFields(c3)
  };
}
__name(diffDateTimesBig, "diffDateTimesBig");
function diffEpochNanos(e3, n3, t3, o3, r3, i3) {
  return {
    ...Si,
    ...nanoToDurationDayTimeFields(roundBigNano(re(e3, n3), o3, r3, i3), t3)
  };
}
__name(diffEpochNanos, "diffEpochNanos");
function diffEpochNanosExact(e3, n3, t3) {
  return {
    ...Si,
    ...nanoToDurationDayTimeFields(re(e3, n3), t3)
  };
}
__name(diffEpochNanosExact, "diffEpochNanosExact");
function diffDays(e3, n3) {
  return diffEpochMilliByDay(isoToEpochMilli(e3), isoToEpochMilli(n3));
}
__name(diffDays, "diffDays");
function diffEpochMilliByDay(e3, n3) {
  return Math.trunc((n3 - e3) / Gr);
}
__name(diffEpochMilliByDay, "diffEpochMilliByDay");
function diffTimes(e3, n3) {
  return isoTimeFieldsToNano(n3) - isoTimeFieldsToNano(e3);
}
__name(diffTimes, "diffTimes");
function getCommonCalendarSlot(e3, n3) {
  if (!isIdLikeEqual(e3, n3)) {
    throw new RangeError(Er);
  }
  return e3;
}
__name(getCommonCalendarSlot, "getCommonCalendarSlot");
function createIntlCalendar(e3) {
  function epochMilliToIntlFields(e4) {
    return ((e5, n4) => ({
      ...parseIntlYear(e5, n4),
      F: e5.month,
      day: parseInt(e5.day)
    }))(hashIntlFormatParts(n3, e4), t3);
  }
  __name(epochMilliToIntlFields, "epochMilliToIntlFields");
  const n3 = La(e3), t3 = computeCalendarIdBase(e3);
  return {
    id: e3,
    O: createIntlFieldCache(epochMilliToIntlFields),
    B: createIntlYearDataCache(epochMilliToIntlFields)
  };
}
__name(createIntlCalendar, "createIntlCalendar");
function createIntlFieldCache(e3) {
  return Jn((n3) => {
    const t3 = isoToEpochMilli(n3);
    return e3(t3);
  }, WeakMap);
}
__name(createIntlFieldCache, "createIntlFieldCache");
function createIntlYearDataCache(e3) {
  const n3 = e3(0).year - Wi;
  return Jn((t3) => {
    let o3, r3 = isoArgsToEpochMilli(t3 - n3);
    const i3 = [], a3 = [];
    do {
      r3 += 400 * Gr;
    } while ((o3 = e3(r3)).year <= t3);
    do {
      r3 += (1 - o3.day) * Gr, o3.year === t3 && (i3.push(r3), a3.push(o3.F)), r3 -= Gr;
    } while ((o3 = e3(r3)).year >= t3);
    return {
      k: i3.reverse(),
      C: Wr(a3.reverse())
    };
  });
}
__name(createIntlYearDataCache, "createIntlYearDataCache");
function parseIntlYear(e3, n3) {
  let t3, o3, r3 = parseIntlPartsYear(e3);
  if (e3.era) {
    const i3 = Di[n3];
    void 0 !== i3 && (t3 = "islamic" === n3 ? "ah" : e3.era.normalize("NFD").toLowerCase().replace(/[^a-z0-9]/g, ""), "bc" === t3 || "b" === t3 ? t3 = "bce" : "ad" !== t3 && "a" !== t3 || (t3 = "ce"), o3 = r3, r3 = eraYearToYear(o3, i3[t3] || 0));
  }
  return {
    era: t3,
    eraYear: o3,
    year: r3
  };
}
__name(parseIntlYear, "parseIntlYear");
function parseIntlPartsYear(e3) {
  return parseInt(e3.relatedYear || e3.year);
}
__name(parseIntlPartsYear, "parseIntlPartsYear");
function computeIntlDateParts(e3) {
  const { year: n3, F: t3, day: o3 } = this.O(e3), { C: r3 } = this.B(n3);
  return [n3, r3[t3] + 1, o3];
}
__name(computeIntlDateParts, "computeIntlDateParts");
function computeIntlEpochMilli(e3, n3 = 1, t3 = 1) {
  return this.B(e3).k[n3 - 1] + (t3 - 1) * Gr;
}
__name(computeIntlEpochMilli, "computeIntlEpochMilli");
function computeIntlLeapMonth(e3) {
  const n3 = queryMonthStrings(this, e3), t3 = queryMonthStrings(this, e3 - 1), o3 = n3.length;
  if (o3 > t3.length) {
    const e4 = getCalendarLeapMonthMeta(this);
    if (e4 < 0) {
      return -e4;
    }
    for (let e5 = 0; e5 < o3; e5++) {
      if (n3[e5] !== t3[e5]) {
        return e5 + 1;
      }
    }
  }
}
__name(computeIntlLeapMonth, "computeIntlLeapMonth");
function computeIntlDaysInYear(e3) {
  return diffEpochMilliByDay(computeIntlEpochMilli.call(this, e3), computeIntlEpochMilli.call(this, e3 + 1));
}
__name(computeIntlDaysInYear, "computeIntlDaysInYear");
function computeIntlDaysInMonth(e3, n3) {
  const { k: t3 } = this.B(e3);
  let o3 = n3 + 1, r3 = t3;
  return o3 > t3.length && (o3 = 1, r3 = this.B(e3 + 1).k), diffEpochMilliByDay(t3[n3 - 1], r3[o3 - 1]);
}
__name(computeIntlDaysInMonth, "computeIntlDaysInMonth");
function computeIntlMonthsInYear(e3) {
  return this.B(e3).k.length;
}
__name(computeIntlMonthsInYear, "computeIntlMonthsInYear");
function queryMonthStrings(e3, n3) {
  return Object.keys(e3.B(n3).C);
}
__name(queryMonthStrings, "queryMonthStrings");
function rn(e3) {
  return an(m(e3));
}
__name(rn, "rn");
function an(e3) {
  if ((e3 = e3.toLowerCase()) !== X && e3 !== gi && computeCalendarIdBase(e3) !== computeCalendarIdBase(La(e3).resolvedOptions().calendar)) {
    throw new RangeError(invalidCalendar(e3));
  }
  return e3;
}
__name(an, "an");
function computeCalendarIdBase(e3) {
  return "islamicc" === e3 && (e3 = "islamic"), e3.split("-")[0];
}
__name(computeCalendarIdBase, "computeCalendarIdBase");
function computeNativeWeekOfYear(e3) {
  return this.R(e3)[0];
}
__name(computeNativeWeekOfYear, "computeNativeWeekOfYear");
function computeNativeYearOfWeek(e3) {
  return this.R(e3)[1];
}
__name(computeNativeYearOfWeek, "computeNativeYearOfWeek");
function computeNativeDayOfYear(e3) {
  const [n3] = this.h(e3);
  return diffEpochMilliByDay(this.q(n3), isoToEpochMilli(e3)) + 1;
}
__name(computeNativeDayOfYear, "computeNativeDayOfYear");
function parseMonthCode(e3) {
  const n3 = Wa.exec(e3);
  if (!n3) {
    throw new RangeError(invalidMonthCode(e3));
  }
  return [parseInt(n3[1]), Boolean(n3[2])];
}
__name(parseMonthCode, "parseMonthCode");
function monthCodeNumberToMonth(e3, n3, t3) {
  return e3 + (n3 || t3 && e3 >= t3 ? 1 : 0);
}
__name(monthCodeNumberToMonth, "monthCodeNumberToMonth");
function monthToMonthCodeNumber(e3, n3) {
  return e3 - (n3 && e3 >= n3 ? 1 : 0);
}
__name(monthToMonthCodeNumber, "monthToMonthCodeNumber");
function eraYearToYear(e3, n3) {
  return (n3 + e3) * (Math.sign(n3) || 1) || 0;
}
__name(eraYearToYear, "eraYearToYear");
function getCalendarEraOrigins(e3) {
  return Di[getCalendarIdBase(e3)];
}
__name(getCalendarEraOrigins, "getCalendarEraOrigins");
function getCalendarLeapMonthMeta(e3) {
  return Ii[getCalendarIdBase(e3)];
}
__name(getCalendarLeapMonthMeta, "getCalendarLeapMonthMeta");
function getCalendarIdBase(e3) {
  return computeCalendarIdBase(e3.id || X);
}
__name(getCalendarIdBase, "getCalendarIdBase");
function Qt(e3, n3, t3, o3) {
  const r3 = refineCalendarFields(t3, o3, en, [], ri);
  if (void 0 !== r3.timeZone) {
    const o4 = t3.dateFromFields(r3), i3 = refineTimeBag(r3), a3 = e3(r3.timeZone);
    return {
      epochNanoseconds: getMatchingInstantFor(n3(a3), {
        ...o4,
        ...i3
      }, void 0 !== r3.offset ? parseOffsetNano(r3.offset) : void 0),
      timeZone: a3
    };
  }
  return {
    ...t3.dateFromFields(r3),
    ...Dt
  };
}
__name(Qt, "Qt");
function jn(e3, n3, t3, o3, r3, i3) {
  const a3 = refineCalendarFields(t3, r3, en, ti, ri), s3 = e3(a3.timeZone), [c3, u3, l3] = wn(i3), f3 = t3.dateFromFields(a3, overrideOverflowOptions(i3, c3)), d3 = refineTimeBag(a3, c3);
  return Yn(getMatchingInstantFor(n3(s3), {
    ...f3,
    ...d3
  }, void 0 !== a3.offset ? parseOffsetNano(a3.offset) : void 0, u3, l3), s3, o3);
}
__name(jn, "jn");
function Pt(e3, n3, t3) {
  const o3 = refineCalendarFields(e3, n3, en, [], w), r3 = H(t3);
  return ee(checkIsoDateTimeInBounds({
    ...e3.dateFromFields(o3, overrideOverflowOptions(t3, r3)),
    ...refineTimeBag(o3, r3)
  }));
}
__name(Pt, "Pt");
function Yt(e3, n3, t3, o3 = []) {
  const r3 = refineCalendarFields(e3, n3, en, o3);
  return e3.dateFromFields(r3, t3);
}
__name(Yt, "Yt");
function nt(e3, n3, t3, o3) {
  const r3 = refineCalendarFields(e3, n3, fi, o3);
  return e3.yearMonthFromFields(r3, t3);
}
__name(nt, "nt");
function K(e3, n3, t3, o3, r3 = []) {
  const i3 = refineCalendarFields(e3, t3, en, r3);
  return n3 && void 0 !== i3.month && void 0 === i3.monthCode && void 0 === i3.year && (i3.year = ji), e3.monthDayFromFields(i3, o3);
}
__name(K, "K");
function Ue(e3, n3) {
  const t3 = H(n3);
  return Ge(refineTimeBag(refineFields(e3, ei, [], 1), t3));
}
__name(Ue, "Ue");
function Ht(e3) {
  const n3 = refineFields(e3, Ni);
  return Vt(checkDurationUnits({
    ...Si,
    ...n3
  }));
}
__name(Ht, "Ht");
function refineCalendarFields(e3, n3, t3, o3 = [], r3 = []) {
  return refineFields(n3, [...e3.fields(t3), ...r3].sort(), o3);
}
__name(refineCalendarFields, "refineCalendarFields");
function refineFields(e3, n3, t3, o3 = !t3) {
  const r3 = {};
  let i3, a3 = 0;
  for (const o4 of n3) {
    if (o4 === i3) {
      throw new RangeError(duplicateFields(o4));
    }
    if ("constructor" === o4 || "__proto__" === o4) {
      throw new RangeError(tn(o4));
    }
    let n4 = e3[o4];
    if (void 0 !== n4) {
      a3 = 1, Ga[o4] && (n4 = Ga[o4](n4, o4)), r3[o4] = n4;
    } else if (t3) {
      if (t3.includes(o4)) {
        throw new TypeError(missingField(o4));
      }
      r3[o4] = hi[o4];
    }
    i3 = o4;
  }
  if (o3 && !a3) {
    throw new TypeError(noValidFields(n3));
  }
  return r3;
}
__name(refineFields, "refineFields");
function refineTimeBag(e3, n3) {
  return constrainIsoTimeFields(Ha({
    ...hi,
    ...e3
  }), n3);
}
__name(refineTimeBag, "refineTimeBag");
function Sn(e3, n3, t3, o3, r3, i3) {
  const a3 = U(i3), { calendar: s3, timeZone: c3 } = t3;
  return Yn(((e4, n4, t4, o4, r4) => {
    const i4 = mergeCalendarFields(e4, t4, o4, en, oi, ni), [a4, s4, c4] = wn(r4, 2);
    return getMatchingInstantFor(n4, {
      ...e4.dateFromFields(i4, overrideOverflowOptions(r4, a4)),
      ...refineTimeBag(i4, a4)
    }, parseOffsetNano(i4.offset), s4, c4);
  })(e3(s3), n3(c3), o3, r3, a3), c3, s3);
}
__name(Sn, "Sn");
function at(e3, n3, t3, o3, r3) {
  const i3 = U(r3);
  return ee(((e4, n4, t4, o4) => {
    const r4 = mergeCalendarFields(e4, n4, t4, en, w), i4 = H(o4);
    return checkIsoDateTimeInBounds({
      ...e4.dateFromFields(r4, overrideOverflowOptions(o4, i4)),
      ...refineTimeBag(r4, i4)
    });
  })(e3(n3.calendar), t3, o3, i3));
}
__name(at, "at");
function Zt(e3, n3, t3, o3, r3) {
  const i3 = U(r3);
  return ((e4, n4, t4, o4) => {
    const r4 = mergeCalendarFields(e4, n4, t4, en);
    return e4.dateFromFields(r4, o4);
  })(e3(n3.calendar), t3, o3, i3);
}
__name(Zt, "Zt");
function Ke(e3, n3, t3, o3, r3) {
  const i3 = U(r3);
  return createPlainYearMonthSlots(((e4, n4, t4, o4) => {
    const r4 = mergeCalendarFields(e4, n4, t4, fi);
    return e4.yearMonthFromFields(r4, o4);
  })(e3(n3.calendar), t3, o3, i3));
}
__name(Ke, "Ke");
function k(e3, n3, t3, o3, r3) {
  const i3 = U(r3);
  return ((e4, n4, t4, o4) => {
    const r4 = mergeCalendarFields(e4, n4, t4, en);
    return e4.monthDayFromFields(r4, o4);
  })(e3(n3.calendar), t3, o3, i3);
}
__name(k, "k");
function Be(e3, n3, t3) {
  return Ge(((e4, n4, t4) => {
    const o3 = H(t4);
    return refineTimeBag({
      ...Vn(ei, e4),
      ...refineFields(n4, ei)
    }, o3);
  })(e3, n3, t3));
}
__name(Be, "Be");
function kt(e3, n3) {
  return Vt((t3 = e3, o3 = n3, checkDurationUnits({
    ...t3,
    ...refineFields(o3, Ni)
  })));
  var t3, o3;
}
__name(kt, "kt");
function mergeCalendarFields(e3, n3, t3, o3, r3 = [], i3 = []) {
  const a3 = [...e3.fields(o3), ...r3].sort();
  let s3 = refineFields(n3, a3, i3);
  const c3 = refineFields(t3, a3);
  return s3 = e3.mergeFields(s3, c3), refineFields(s3, a3, []);
}
__name(mergeCalendarFields, "mergeCalendarFields");
function convertToPlainMonthDay(e3, n3) {
  const t3 = refineCalendarFields(e3, n3, pi);
  return e3.monthDayFromFields(t3);
}
__name(convertToPlainMonthDay, "convertToPlainMonthDay");
function convertToPlainYearMonth(e3, n3, t3) {
  const o3 = refineCalendarFields(e3, n3, di);
  return e3.yearMonthFromFields(o3, t3);
}
__name(convertToPlainYearMonth, "convertToPlainYearMonth");
function convertToIso(e3, n3, t3, o3, r3) {
  n3 = Vn(t3 = e3.fields(t3), n3), o3 = refineFields(o3, r3 = e3.fields(r3), []);
  let i3 = e3.mergeFields(n3, o3);
  return i3 = refineFields(i3, [...t3, ...r3].sort(), []), e3.dateFromFields(i3);
}
__name(convertToIso, "convertToIso");
function refineYear(e3, n3) {
  let { era: t3, eraYear: o3, year: r3 } = n3;
  const i3 = getCalendarEraOrigins(e3);
  if (void 0 !== t3 || void 0 !== o3) {
    if (void 0 === t3 || void 0 === o3) {
      throw new TypeError(Dr);
    }
    if (!i3) {
      throw new RangeError(gr);
    }
    const e4 = i3[t3];
    if (void 0 === e4) {
      throw new RangeError(invalidEra(t3));
    }
    const n4 = eraYearToYear(o3, e4);
    if (void 0 !== r3 && r3 !== n4) {
      throw new RangeError(Ir);
    }
    r3 = n4;
  } else if (void 0 === r3) {
    throw new TypeError(missingYear(i3));
  }
  return r3;
}
__name(refineYear, "refineYear");
function refineMonth(e3, n3, t3, o3) {
  let { month: r3, monthCode: i3 } = n3;
  if (void 0 !== i3) {
    const n4 = ((e4, n5, t4, o4) => {
      const r4 = e4.U(t4), [i4, a3] = parseMonthCode(n5);
      let s3 = monthCodeNumberToMonth(i4, a3, r4);
      if (a3) {
        const n6 = getCalendarLeapMonthMeta(e4);
        if (void 0 === n6) {
          throw new RangeError(Pr);
        }
        if (n6 > 0) {
          if (s3 > n6) {
            throw new RangeError(Pr);
          }
          if (void 0 === r4) {
            if (1 === o4) {
              throw new RangeError(Pr);
            }
            s3--;
          }
        } else {
          if (s3 !== -n6) {
            throw new RangeError(Pr);
          }
          if (void 0 === r4 && 1 === o4) {
            throw new RangeError(Pr);
          }
        }
      }
      return s3;
    })(e3, i3, t3, o3);
    if (void 0 !== r3 && r3 !== n4) {
      throw new RangeError(Mr);
    }
    r3 = n4, o3 = 1;
  } else if (void 0 === r3) {
    throw new TypeError(Nr);
  }
  return clampEntity("month", r3, 1, e3.L(t3), o3);
}
__name(refineMonth, "refineMonth");
function refineDay(e3, n3, t3, o3, r3) {
  return clampProp(n3, "day", 1, e3.j(o3, t3), r3);
}
__name(refineDay, "refineDay");
function spliceFields(e3, n3, t3, o3) {
  let r3 = 0;
  const i3 = [];
  for (const e4 of t3) {
    void 0 !== n3[e4] ? r3 = 1 : i3.push(e4);
  }
  if (Object.assign(e3, n3), r3) {
    for (const n4 of o3 || i3) {
      delete e3[n4];
    }
  }
}
__name(spliceFields, "spliceFields");
function Se(e3) {
  return _(checkEpochNanoInBounds(bigIntToBigNano(toBigInt(e3))));
}
__name(Se, "Se");
function vn(e3, n3, t3, o3, r3 = X) {
  return Yn(checkEpochNanoInBounds(bigIntToBigNano(toBigInt(t3))), n3(o3), e3(r3));
}
__name(vn, "vn");
function pt(e3, n3, t3, o3, r3 = 0, i3 = 0, a3 = 0, s3 = 0, c3 = 0, u3 = 0, l3 = X) {
  return ee(checkIsoDateTimeInBounds(checkIsoDateTimeFields(T(toInteger, zipProps(wi, [n3, t3, o3, r3, i3, a3, s3, c3, u3])))), e3(l3));
}
__name(pt, "pt");
function Nt(e3, n3, t3, o3, r3 = X) {
  return v(checkIsoDateInBounds(checkIsoDateFields(T(toInteger, {
    isoYear: n3,
    isoMonth: t3,
    isoDay: o3
  }))), e3(r3));
}
__name(Nt, "Nt");
function tt(e3, n3, t3, o3 = X, r3 = 1) {
  const i3 = toInteger(n3), a3 = toInteger(t3), s3 = e3(o3);
  return createPlainYearMonthSlots(checkIsoYearMonthInBounds(checkIsoDateFields({
    isoYear: i3,
    isoMonth: a3,
    isoDay: toInteger(r3)
  })), s3);
}
__name(tt, "tt");
function G(e3, n3, t3, o3 = X, r3 = ji) {
  const i3 = toInteger(n3), a3 = toInteger(t3), s3 = e3(o3);
  return createPlainMonthDaySlots(checkIsoDateInBounds(checkIsoDateFields({
    isoYear: toInteger(r3),
    isoMonth: i3,
    isoDay: a3
  })), s3);
}
__name(G, "G");
function ke(e3 = 0, n3 = 0, t3 = 0, o3 = 0, r3 = 0, i3 = 0) {
  return Ge(constrainIsoTimeFields(T(toInteger, zipProps(j, [e3, n3, t3, o3, r3, i3])), 1));
}
__name(ke, "ke");
function Lt(e3 = 0, n3 = 0, t3 = 0, o3 = 0, r3 = 0, i3 = 0, a3 = 0, s3 = 0, c3 = 0, u3 = 0) {
  return Vt(checkDurationUnits(T(toStrictInteger, zipProps(F, [e3, n3, t3, o3, r3, i3, a3, s3, c3, u3]))));
}
__name(Lt, "Lt");
function fe(e3, n3, t3 = X) {
  return Yn(e3.epochNanoseconds, n3, t3);
}
__name(fe, "fe");
function Zn(e3) {
  return _(e3.epochNanoseconds);
}
__name(Zn, "Zn");
function ht(e3, n3) {
  return ee(fn(n3, e3));
}
__name(ht, "ht");
function Bt(e3, n3) {
  return v(fn(n3, e3));
}
__name(Bt, "Bt");
function bn(e3, n3, t3) {
  return convertToPlainYearMonth(e3(n3.calendar), t3);
}
__name(bn, "bn");
function Fn(e3, n3, t3) {
  return convertToPlainMonthDay(e3(n3.calendar), t3);
}
__name(Fn, "Fn");
function Re(e3, n3) {
  return Ge(fn(n3, e3));
}
__name(Re, "Re");
function mt(e3, n3, t3, o3) {
  const r3 = ((e4, n4, t4, o4) => {
    const r4 = ve(o4);
    return we(e4(n4), t4, r4);
  })(e3, t3, n3, o3);
  return Yn(checkEpochNanoInBounds(r3), t3, n3.calendar);
}
__name(mt, "mt");
function St(e3, n3, t3) {
  const o3 = e3(n3.calendar);
  return createPlainYearMonthSlots({
    ...n3,
    ...convertToPlainYearMonth(o3, t3)
  });
}
__name(St, "St");
function Ot(e3, n3, t3) {
  return convertToPlainMonthDay(e3(n3.calendar), t3);
}
__name(Ot, "Ot");
function vt(e3, n3, t3, o3, r3) {
  const i3 = e3(r3.timeZone), a3 = r3.plainTime, s3 = void 0 !== a3 ? n3(a3) : Dt;
  return Yn(we(t3(i3), {
    ...o3,
    ...s3
  }), i3, o3.calendar);
}
__name(vt, "vt");
function wt(e3, n3 = Dt) {
  return ee(checkIsoDateTimeInBounds({
    ...e3,
    ...n3
  }));
}
__name(wt, "wt");
function jt(e3, n3, t3) {
  return convertToPlainYearMonth(e3(n3.calendar), t3);
}
__name(jt, "jt");
function Mt(e3, n3, t3) {
  return convertToPlainMonthDay(e3(n3.calendar), t3);
}
__name(Mt, "Mt");
function _e(e3, n3, t3, o3) {
  return ((e4, n4, t4) => convertToIso(e4, n4, di, de(t4), li))(e3(n3.calendar), t3, o3);
}
__name(_e, "_e");
function R(e3, n3, t3, o3) {
  return ((e4, n4, t4) => convertToIso(e4, n4, pi, de(t4), si))(e3(n3.calendar), t3, o3);
}
__name(R, "R");
function Je(e3, n3, t3, o3, r3) {
  const i3 = de(r3), a3 = n3(i3.plainDate), s3 = e3(i3.timeZone);
  return Yn(we(t3(s3), {
    ...a3,
    ...o3
  }), s3, a3.calendar);
}
__name(Je, "Je");
function Le(e3, n3) {
  return ee(checkIsoDateTimeInBounds({
    ...e3,
    ...n3
  }));
}
__name(Le, "Le");
function De(e3) {
  return _(checkEpochNanoInBounds(he(e3, _r)));
}
__name(De, "De");
function Pe(e3) {
  return _(checkEpochNanoInBounds(he(e3, be)));
}
__name(Pe, "Pe");
function Ce(e3) {
  return _(checkEpochNanoInBounds(bigIntToBigNano(toBigInt(e3), Vr)));
}
__name(Ce, "Ce");
function ge(e3) {
  return _(checkEpochNanoInBounds(bigIntToBigNano(toBigInt(e3))));
}
__name(ge, "ge");
function pn(e3, n3, t3 = Dt) {
  const o3 = n3.timeZone, r3 = e3(o3), i3 = {
    ...fn(n3, r3),
    ...t3
  };
  return Yn(getMatchingInstantFor(r3, i3, i3.offsetNanoseconds, 2), o3, n3.calendar);
}
__name(pn, "pn");
function Tn(e3, n3, t3) {
  const o3 = n3.timeZone, r3 = e3(o3), i3 = {
    ...fn(n3, r3),
    ...t3
  }, a3 = getPreferredCalendarSlot(n3.calendar, t3.calendar);
  return Yn(getMatchingInstantFor(r3, i3, i3.offsetNanoseconds, 2), o3, a3);
}
__name(Tn, "Tn");
function lt(e3, n3 = Dt) {
  return ee({
    ...e3,
    ...n3
  });
}
__name(lt, "lt");
function st(e3, n3) {
  return ee({
    ...e3,
    ...n3
  }, getPreferredCalendarSlot(e3.calendar, n3.calendar));
}
__name(st, "st");
function it(e3, n3) {
  return {
    ...e3,
    calendar: n3
  };
}
__name(it, "it");
function On(e3, n3) {
  return {
    ...e3,
    timeZone: n3
  };
}
__name(On, "On");
function getPreferredCalendarSlot(e3, n3) {
  if (e3 === n3) {
    return e3;
  }
  const t3 = I(e3), o3 = I(n3);
  if (t3 === o3 || t3 === X) {
    return n3;
  }
  if (o3 === X) {
    return e3;
  }
  throw new RangeError(Er);
}
__name(getPreferredCalendarSlot, "getPreferredCalendarSlot");
function createNativeOpsCreator(e3, n3) {
  return (t3) => t3 === X ? e3 : t3 === gi || t3 === Ti ? Object.assign(Object.create(e3), {
    id: t3
  }) : Object.assign(Object.create(n3), Aa(t3));
}
__name(createNativeOpsCreator, "createNativeOpsCreator");
function createOptionsTransformer(e3, n3, t3) {
  const o3 = new Set(t3);
  return (r3) => (((e4, n4) => {
    for (const t4 of n4) {
      if (t4 in e4) {
        return 1;
      }
    }
    return 0;
  })(r3 = V(o3, r3), e3) || Object.assign(r3, n3), t3 && (r3.timeZone = Ta, ["full", "long"].includes(r3.timeStyle) && (r3.timeStyle = "medium")), r3);
}
__name(createOptionsTransformer, "createOptionsTransformer");
function e(e3, n3 = qn) {
  const [t3, , , o3] = e3;
  return (r3, i3 = Ns, ...a3) => {
    const s3 = n3(o3 && o3(...a3), r3, i3, t3), c3 = s3.resolvedOptions();
    return [s3, ...toEpochMillis(e3, c3, a3)];
  };
}
__name(e, "e");
function qn(e3, n3, t3, o3) {
  if (t3 = o3(t3), e3) {
    if (void 0 !== t3.timeZone) {
      throw new TypeError(Lr);
    }
    t3.timeZone = e3;
  }
  return new En(n3, t3);
}
__name(qn, "qn");
function toEpochMillis(e3, n3, t3) {
  const [, o3, r3] = e3;
  return t3.map((e4) => (e4.calendar && ((e5, n4, t4) => {
    if ((t4 || e5 !== X) && e5 !== n4) {
      throw new RangeError(Er);
    }
  })(I(e4.calendar), n3.calendar, r3), o3(e4, n3)));
}
__name(toEpochMillis, "toEpochMillis");
function An(e3) {
  const n3 = Bn();
  return Ie(n3, e3.getOffsetNanosecondsFor(n3));
}
__name(An, "An");
function Bn() {
  return he(Date.now(), be);
}
__name(Bn, "Bn");
function Nn() {
  return ys || (ys = new En().resolvedOptions().timeZone);
}
__name(Nn, "Nn");
var expectedInteger = /* @__PURE__ */ __name((e3, n3) => `Non-integer ${e3}: ${n3}`, "expectedInteger");
var expectedPositive = /* @__PURE__ */ __name((e3, n3) => `Non-positive ${e3}: ${n3}`, "expectedPositive");
var expectedFinite = /* @__PURE__ */ __name((e3, n3) => `Non-finite ${e3}: ${n3}`, "expectedFinite");
var forbiddenBigIntToNumber = /* @__PURE__ */ __name((e3) => `Cannot convert bigint to ${e3}`, "forbiddenBigIntToNumber");
var invalidBigInt = /* @__PURE__ */ __name((e3) => `Invalid bigint: ${e3}`, "invalidBigInt");
var pr = "Cannot convert Symbol to string";
var hr = "Invalid object";
var numberOutOfRange = /* @__PURE__ */ __name((e3, n3, t3, o3, r3) => r3 ? numberOutOfRange(e3, r3[n3], r3[t3], r3[o3]) : invalidEntity(e3, n3) + `; must be between ${t3}-${o3}`, "numberOutOfRange");
var invalidEntity = /* @__PURE__ */ __name((e3, n3) => `Invalid ${e3}: ${n3}`, "invalidEntity");
var missingField = /* @__PURE__ */ __name((e3) => `Missing ${e3}`, "missingField");
var tn = /* @__PURE__ */ __name((e3) => `Invalid field ${e3}`, "tn");
var duplicateFields = /* @__PURE__ */ __name((e3) => `Duplicate field ${e3}`, "duplicateFields");
var noValidFields = /* @__PURE__ */ __name((e3) => "No valid fields: " + e3.join(), "noValidFields");
var Z = "Invalid bag";
var invalidChoice = /* @__PURE__ */ __name((e3, n3, t3) => invalidEntity(e3, n3) + "; must be " + Object.keys(t3).join(), "invalidChoice");
var A = "Cannot use valueOf";
var P = "Invalid calling context";
var gr = "Forbidden era/eraYear";
var Dr = "Mismatching era/eraYear";
var Ir = "Mismatching year/eraYear";
var invalidEra = /* @__PURE__ */ __name((e3) => `Invalid era: ${e3}`, "invalidEra");
var missingYear = /* @__PURE__ */ __name((e3) => "Missing year" + (e3 ? "/era/eraYear" : ""), "missingYear");
var invalidMonthCode = /* @__PURE__ */ __name((e3) => `Invalid monthCode: ${e3}`, "invalidMonthCode");
var Mr = "Mismatching month/monthCode";
var Nr = "Missing month/monthCode";
var yr = "Cannot guess year";
var Pr = "Invalid leap month";
var g = "Invalid protocol";
var vr = "Invalid protocol results";
var Er = "Mismatching Calendars";
var invalidCalendar = /* @__PURE__ */ __name((e3) => `Invalid Calendar: ${e3}`, "invalidCalendar");
var Fr = "Mismatching TimeZones";
var br = "Forbidden ICU TimeZone";
var wr = "Out-of-bounds offset";
var Br = "Out-of-bounds TimeZone gap";
var kr = "Invalid TimeZone offset";
var Yr = "Ambiguous offset";
var Cr = "Out-of-bounds date";
var Zr = "Out-of-bounds duration";
var Rr = "Cannot mix duration signs";
var zr = "Missing relativeTo";
var qr = "Cannot use large units";
var Ur = "Required smallestUnit or largestUnit";
var Ar = "smallestUnit > largestUnit";
var failedParse = /* @__PURE__ */ __name((e3) => `Cannot parse: ${e3}`, "failedParse");
var invalidSubstring = /* @__PURE__ */ __name((e3) => `Invalid substring: ${e3}`, "invalidSubstring");
var Ln = /* @__PURE__ */ __name((e3) => `Cannot format ${e3}`, "Ln");
var kn = "Mismatching types for formatting";
var Lr = "Cannot specify TimeZone";
var Wr = /* @__PURE__ */ E(b, (e3, n3) => n3);
var jr = /* @__PURE__ */ E(b, (e3, n3, t3) => t3);
var xr = /* @__PURE__ */ E(padNumber, 2);
var $r = {
  nanosecond: 0,
  microsecond: 1,
  millisecond: 2,
  second: 3,
  minute: 4,
  hour: 5,
  day: 6,
  week: 7,
  month: 8,
  year: 9
};
var Et = /* @__PURE__ */ Object.keys($r);
var Gr = 864e5;
var Hr = 1e3;
var Vr = 1e3;
var be = 1e6;
var _r = 1e9;
var Jr = 6e10;
var Kr = 36e11;
var Qr = 864e11;
var Xr = [1, Vr, be, _r, Jr, Kr, Qr];
var w = /* @__PURE__ */ Et.slice(0, 6);
var ei = /* @__PURE__ */ sortStrings(w);
var ni = ["offset"];
var ti = ["timeZone"];
var oi = /* @__PURE__ */ w.concat(ni);
var ri = /* @__PURE__ */ oi.concat(ti);
var ii = ["era", "eraYear"];
var ai = /* @__PURE__ */ ii.concat(["year"]);
var si = ["year"];
var ci = ["monthCode"];
var ui = /* @__PURE__ */ ["month"].concat(ci);
var li = ["day"];
var fi = /* @__PURE__ */ ui.concat(si);
var di = /* @__PURE__ */ ci.concat(si);
var en = /* @__PURE__ */ li.concat(fi);
var mi = /* @__PURE__ */ li.concat(ui);
var pi = /* @__PURE__ */ li.concat(ci);
var hi = /* @__PURE__ */ jr(w, 0);
var X = "iso8601";
var gi = "gregory";
var Ti = "japanese";
var Di = {
  [gi]: {
    bce: -1,
    ce: 0
  },
  [Ti]: {
    bce: -1,
    ce: 0,
    meiji: 1867,
    taisho: 1911,
    showa: 1925,
    heisei: 1988,
    reiwa: 2018
  },
  ethioaa: {
    era0: 0
  },
  ethiopic: {
    era0: 0,
    era1: 5500
  },
  coptic: {
    era0: -1,
    era1: 0
  },
  roc: {
    beforeroc: -1,
    minguo: 0
  },
  buddhist: {
    be: 0
  },
  islamic: {
    ah: 0
  },
  indian: {
    saka: 0
  },
  persian: {
    ap: 0
  }
};
var Ii = {
  chinese: 13,
  dangi: 13,
  hebrew: -6
};
var m = /* @__PURE__ */ E(requireType, "string");
var f = /* @__PURE__ */ E(requireType, "boolean");
var Mi = /* @__PURE__ */ E(requireType, "number");
var $ = /* @__PURE__ */ E(requireType, "function");
var F = /* @__PURE__ */ Et.map((e3) => e3 + "s");
var Ni = /* @__PURE__ */ sortStrings(F);
var yi = /* @__PURE__ */ F.slice(0, 6);
var Pi = /* @__PURE__ */ F.slice(6);
var vi = /* @__PURE__ */ Pi.slice(1);
var Ei = /* @__PURE__ */ Wr(F);
var Si = /* @__PURE__ */ jr(F, 0);
var Fi = /* @__PURE__ */ jr(yi, 0);
var bi = /* @__PURE__ */ E(zeroOutProps, F);
var j = ["isoNanosecond", "isoMicrosecond", "isoMillisecond", "isoSecond", "isoMinute", "isoHour"];
var Oi = ["isoDay", "isoMonth", "isoYear"];
var wi = /* @__PURE__ */ j.concat(Oi);
var Bi = /* @__PURE__ */ sortStrings(Oi);
var ki = /* @__PURE__ */ sortStrings(j);
var Yi = /* @__PURE__ */ sortStrings(wi);
var Dt = /* @__PURE__ */ jr(ki, 0);
var Ci = /* @__PURE__ */ E(zeroOutProps, wi);
var En = Intl.DateTimeFormat;
var Zi = "en-GB";
var Ri = 1e8;
var zi = Ri * Gr;
var qi = [Ri, 0];
var Ui = [-Ri, 0];
var Ai = 275760;
var Li = -271821;
var Wi = 1970;
var ji = 1972;
var xi = 12;
var $i = /* @__PURE__ */ isoArgsToEpochMilli(1868, 9, 8);
var Gi = /* @__PURE__ */ Jn(computeJapaneseEraParts, WeakMap);
var Hi = "smallestUnit";
var Vi = "unit";
var _i = "roundingIncrement";
var Ji = "fractionalSecondDigits";
var Ki = "relativeTo";
var Qi = {
  constrain: 0,
  reject: 1
};
var Xi = /* @__PURE__ */ Object.keys(Qi);
var ea = {
  compatible: 0,
  reject: 1,
  earlier: 2,
  later: 3
};
var na = {
  reject: 0,
  use: 1,
  prefer: 2,
  ignore: 3
};
var ta = {
  auto: 0,
  never: 1,
  critical: 2,
  always: 3
};
var oa = {
  auto: 0,
  never: 1,
  critical: 2
};
var ra = {
  auto: 0,
  never: 1
};
var ia = {
  floor: 0,
  halfFloor: 1,
  ceil: 2,
  halfCeil: 3,
  trunc: 4,
  halfTrunc: 5,
  expand: 6,
  halfExpand: 7,
  halfEven: 8
};
var aa = /* @__PURE__ */ E(refineUnitOption, Hi);
var sa = /* @__PURE__ */ E(refineUnitOption, "largestUnit");
var ca = /* @__PURE__ */ E(refineUnitOption, Vi);
var ua = /* @__PURE__ */ E(refineChoiceOption, "overflow", Qi);
var la = /* @__PURE__ */ E(refineChoiceOption, "disambiguation", ea);
var fa = /* @__PURE__ */ E(refineChoiceOption, "offset", na);
var da = /* @__PURE__ */ E(refineChoiceOption, "calendarName", ta);
var ma = /* @__PURE__ */ E(refineChoiceOption, "timeZoneName", oa);
var pa = /* @__PURE__ */ E(refineChoiceOption, "offset", ra);
var ha = /* @__PURE__ */ E(refineChoiceOption, "roundingMode", ia);
var L = "PlainYearMonth";
var q = "PlainMonthDay";
var J = "PlainDate";
var We = "PlainDateTime";
var xe = "PlainTime";
var Te = "ZonedDateTime";
var Oe = "Instant";
var qt = "Duration";
var ga = [Math.floor, (e3) => hasHalf(e3) ? Math.floor(e3) : Math.round(e3), Math.ceil, (e3) => hasHalf(e3) ? Math.ceil(e3) : Math.round(e3), Math.trunc, (e3) => hasHalf(e3) ? Math.trunc(e3) || 0 : Math.round(e3), (e3) => e3 < 0 ? Math.floor(e3) : Math.ceil(e3), (e3) => Math.sign(e3) * Math.round(Math.abs(e3)) || 0, (e3) => hasHalf(e3) ? (e3 = Math.trunc(e3) || 0) + e3 % 2 : Math.round(e3)];
var Ta = "UTC";
var Da = 5184e3;
var Ia = /* @__PURE__ */ isoArgsToEpochSec(1847);
var Ma = /* @__PURE__ */ isoArgsToEpochSec(/* @__PURE__ */ (/* @__PURE__ */ new Date()).getUTCFullYear() + 10);
var Na = /0+$/;
var fn = /* @__PURE__ */ Jn(_zonedEpochSlotsToIso, WeakMap);
var ya = 2 ** 32 - 1;
var ie = /* @__PURE__ */ Jn((e3) => {
  const n3 = getTimeZoneEssence(e3);
  return "object" == typeof n3 ? new IntlTimeZone(n3) : new FixedTimeZone(n3 || 0);
});
var FixedTimeZone = class {
  static {
    __name(this, "FixedTimeZone");
  }
  constructor(e3) {
    this.v = e3;
  }
  getOffsetNanosecondsFor() {
    return this.v;
  }
  getPossibleInstantsFor(e3) {
    return [isoToEpochNanoWithOffset(e3, this.v)];
  }
  l() {
  }
};
var IntlTimeZone = class {
  static {
    __name(this, "IntlTimeZone");
  }
  constructor(e3) {
    this.$ = ((e4) => {
      function getOffsetSec(e5) {
        const i3 = clampNumber(e5, o3, r3), [a3, s3] = computePeriod(i3), c3 = n3(a3), u3 = n3(s3);
        return c3 === u3 ? c3 : pinch(t3(a3, s3), c3, u3, e5);
      }
      __name(getOffsetSec, "getOffsetSec");
      function pinch(n4, t4, o4, r4) {
        let i3, a3;
        for (; (void 0 === r4 || void 0 === (i3 = r4 < n4[0] ? t4 : r4 >= n4[1] ? o4 : void 0)) && (a3 = n4[1] - n4[0]); ) {
          const t5 = n4[0] + Math.floor(a3 / 2);
          e4(t5) === o4 ? n4[1] = t5 : n4[0] = t5 + 1;
        }
        return i3;
      }
      __name(pinch, "pinch");
      const n3 = Jn(e4), t3 = Jn(createSplitTuple);
      let o3 = Ia, r3 = Ma;
      return {
        G(e5) {
          const n4 = getOffsetSec(e5 - 86400), t4 = getOffsetSec(e5 + 86400), o4 = e5 - n4, r4 = e5 - t4;
          if (n4 === t4) {
            return [o4];
          }
          const i3 = getOffsetSec(o4);
          return i3 === getOffsetSec(r4) ? [e5 - i3] : n4 > t4 ? [o4, r4] : [];
        },
        V: getOffsetSec,
        l(e5, i3) {
          const a3 = clampNumber(e5, o3, r3);
          let [s3, c3] = computePeriod(a3);
          const u3 = Da * i3, l3 = i3 < 0 ? () => c3 > o3 || (o3 = a3, 0) : () => s3 < r3 || (r3 = a3, 0);
          for (; l3(); ) {
            const o4 = n3(s3), r4 = n3(c3);
            if (o4 !== r4) {
              const n4 = t3(s3, c3);
              pinch(n4, o4, r4);
              const a4 = n4[0];
              if ((compareNumbers(a4, e5) || 1) === i3) {
                return a4;
              }
            }
            s3 += u3, c3 += u3;
          }
        }
      };
    })(/* @__PURE__ */ ((e4) => (n3) => {
      const t3 = hashIntlFormatParts(e4, n3 * Hr);
      return isoArgsToEpochSec(parseIntlPartsYear(t3), parseInt(t3.month), parseInt(t3.day), parseInt(t3.hour), parseInt(t3.minute), parseInt(t3.second)) - n3;
    })(e3));
  }
  getOffsetNanosecondsFor(e3) {
    return this.$.V(epochNanoToSec(e3)) * _r;
  }
  getPossibleInstantsFor(e3) {
    const [n3, t3] = [isoArgsToEpochSec((o3 = e3).isoYear, o3.isoMonth, o3.isoDay, o3.isoHour, o3.isoMinute, o3.isoSecond), o3.isoMillisecond * be + o3.isoMicrosecond * Vr + o3.isoNanosecond];
    var o3;
    return this.$.G(n3).map((e4) => checkEpochNanoInBounds(moveBigNano(he(e4, _r), t3)));
  }
  l(e3, n3) {
    const [t3, o3] = epochNanoToSecMod(e3), r3 = this.$.l(t3 + (n3 > 0 || o3 ? 1 : 0), n3);
    if (void 0 !== r3) {
      return he(r3, _r);
    }
  }
};
var Pa = "([+\u2212-])";
var va = "(?:[.,](\\d{1,9}))?";
var Ea = `(?:(?:${Pa}(\\d{6}))|(\\d{4}))-?(\\d{2})`;
var Sa = "(\\d{2})(?::?(\\d{2})(?::?(\\d{2})" + va + ")?)?";
var Fa = Pa + Sa;
var ba = Ea + "-?(\\d{2})(?:[T ]" + Sa + "(Z|" + Fa + ")?)?";
var Oa = "\\[(!?)([^\\]]*)\\]";
var wa = `((?:${Oa}){0,9})`;
var Ba = /* @__PURE__ */ createRegExp(Ea + wa);
var ka = /* @__PURE__ */ createRegExp("(?:--)?(\\d{2})-?(\\d{2})" + wa);
var Ya = /* @__PURE__ */ createRegExp(ba + wa);
var Ca = /* @__PURE__ */ createRegExp("T?" + Sa + "(?:" + Fa + ")?" + wa);
var Za = /* @__PURE__ */ createRegExp(Fa);
var Ra = /* @__PURE__ */ new RegExp(Oa, "g");
var za = /* @__PURE__ */ createRegExp(`${Pa}?P(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(?:T(?:(\\d+)${va}H)?(?:(\\d+)${va}M)?(?:(\\d+)${va}S)?)?`);
var qa = /* @__PURE__ */ Jn((e3) => new En(Zi, {
  timeZone: e3,
  era: "short",
  year: "numeric",
  month: "numeric",
  day: "numeric",
  hour: "numeric",
  minute: "numeric",
  second: "numeric"
}));
var Ua = /^(AC|AE|AG|AR|AS|BE|BS|CA|CN|CS|CT|EA|EC|IE|IS|JS|MI|NE|NS|PL|PN|PR|PS|SS|VS)T$/;
var Aa = /* @__PURE__ */ Jn(createIntlCalendar);
var La = /* @__PURE__ */ Jn((e3) => new En(Zi, {
  calendar: e3,
  timeZone: Ta,
  era: "short",
  year: "numeric",
  month: "short",
  day: "numeric"
}));
var Wa = /^M(\d{2})(L?)$/;
var ja = {
  era: toStringViaPrimitive,
  eraYear: toInteger,
  year: toInteger,
  month: toPositiveInteger,
  monthCode: toStringViaPrimitive,
  day: toPositiveInteger
};
var xa = /* @__PURE__ */ jr(w, toInteger);
var $a = /* @__PURE__ */ jr(F, toStrictInteger);
var Ga = /* @__PURE__ */ Object.assign({}, ja, xa, $a, {
  offset: toStringViaPrimitive
});
var Ha = /* @__PURE__ */ E(remapProps, w, j);
var Va = {
  dateAdd(e3, n3, t3) {
    const o3 = H(t3);
    let r3, { years: i3, months: a3, weeks: s3, days: c3 } = n3;
    if (c3 += durationFieldsToBigNano(n3, 5)[0], i3 || a3) {
      r3 = ((e4, n4, t4, o4, r4) => {
        let [i4, a4, s4] = e4.h(n4);
        if (t4) {
          const [n5, o5] = e4.I(i4, a4);
          i4 += t4, a4 = monthCodeNumberToMonth(n5, o5, e4.U(i4)), a4 = clampEntity("month", a4, 1, e4.L(i4), r4);
        }
        return o4 && ([i4, a4] = e4._(i4, a4, o4)), s4 = clampEntity("day", s4, 1, e4.j(i4, a4), r4), e4.q(i4, a4, s4);
      })(this, e3, i3, a3, o3);
    } else {
      if (!s3 && !c3) {
        return e3;
      }
      r3 = isoToEpochMilli(e3);
    }
    return r3 += (7 * s3 + c3) * Gr, checkIsoDateInBounds(epochMilliToIso(r3));
  },
  dateUntil(e3, n3, t3) {
    if (t3 <= 7) {
      let o4 = 0, r4 = diffDays({
        ...e3,
        ...Dt
      }, {
        ...n3,
        ...Dt
      });
      return 7 === t3 && ([o4, r4] = divModTrunc(r4, 7)), {
        ...Si,
        weeks: o4,
        days: r4
      };
    }
    const o3 = this.h(e3), r3 = this.h(n3);
    let [i3, a3, s3] = ((e4, n4, t4, o4, r4, i4, a4) => {
      let s4 = r4 - n4, c3 = i4 - t4, u3 = a4 - o4;
      if (s4 || c3) {
        const l3 = Math.sign(s4 || c3);
        let f3 = e4.j(r4, i4), d3 = 0;
        if (Math.sign(u3) === -l3) {
          const o5 = f3;
          [r4, i4] = e4._(r4, i4, -l3), s4 = r4 - n4, c3 = i4 - t4, f3 = e4.j(r4, i4), d3 = l3 < 0 ? -o5 : f3;
        }
        if (u3 = a4 - Math.min(o4, f3) + d3, s4) {
          const [o5, a5] = e4.I(n4, t4), [u4, f4] = e4.I(r4, i4);
          if (c3 = u4 - o5 || Number(f4) - Number(a5), Math.sign(c3) === -l3) {
            const t5 = l3 < 0 && -e4.L(r4);
            s4 = (r4 -= l3) - n4, c3 = i4 - monthCodeNumberToMonth(o5, a5, e4.U(r4)) + (t5 || e4.L(r4));
          }
        }
      }
      return [s4, c3, u3];
    })(this, ...o3, ...r3);
    return 8 === t3 && (a3 += this.J(i3, o3[0]), i3 = 0), {
      ...Si,
      years: i3,
      months: a3,
      days: s3
    };
  },
  dateFromFields(e3, n3) {
    const t3 = H(n3), o3 = refineYear(this, e3), r3 = refineMonth(this, e3, o3, t3), i3 = refineDay(this, e3, r3, o3, t3);
    return v(checkIsoDateInBounds(this.P(o3, r3, i3)), this.id || X);
  },
  yearMonthFromFields(e3, n3) {
    const t3 = H(n3), o3 = refineYear(this, e3), r3 = refineMonth(this, e3, o3, t3);
    return createPlainYearMonthSlots(checkIsoYearMonthInBounds(this.P(o3, r3, 1)), this.id || X);
  },
  monthDayFromFields(e3, n3) {
    const t3 = H(n3), o3 = !this.id, { monthCode: r3, year: i3, month: a3 } = e3;
    let s3, c3, u3, l3, f3;
    if (void 0 !== r3) {
      [s3, c3] = parseMonthCode(r3), f3 = getDefinedProp(e3, "day");
      const n4 = this.N(s3, c3, f3);
      if (!n4) {
        throw new RangeError(yr);
      }
      if ([u3, l3] = n4, void 0 !== a3 && a3 !== l3) {
        throw new RangeError(Mr);
      }
      o3 && (l3 = clampEntity("month", l3, 1, xi, 1), f3 = clampEntity("day", f3, 1, computeIsoDaysInMonth(void 0 !== i3 ? i3 : u3, l3), t3));
    } else {
      u3 = void 0 === i3 && o3 ? ji : refineYear(this, e3), l3 = refineMonth(this, e3, u3, t3), f3 = refineDay(this, e3, l3, u3, t3);
      const n4 = this.U(u3);
      c3 = l3 === n4, s3 = monthToMonthCodeNumber(l3, n4);
      const r4 = this.N(s3, c3, f3);
      if (!r4) {
        throw new RangeError(yr);
      }
      [u3, l3] = r4;
    }
    return createPlainMonthDaySlots(checkIsoDateInBounds(this.P(u3, l3, f3)), this.id || X);
  },
  fields(e3) {
    return getCalendarEraOrigins(this) && e3.includes("year") ? [...e3, ...ii] : e3;
  },
  mergeFields(e3, n3) {
    const t3 = Object.assign(/* @__PURE__ */ Object.create(null), e3);
    return spliceFields(t3, n3, ui), getCalendarEraOrigins(this) && (spliceFields(t3, n3, ai), this.id === Ti && spliceFields(t3, n3, mi, ii)), t3;
  },
  inLeapYear(e3) {
    const [n3] = this.h(e3);
    return this.K(n3);
  },
  monthsInYear(e3) {
    const [n3] = this.h(e3);
    return this.L(n3);
  },
  daysInMonth(e3) {
    const [n3, t3] = this.h(e3);
    return this.j(n3, t3);
  },
  daysInYear(e3) {
    const [n3] = this.h(e3);
    return this.X(n3);
  },
  dayOfYear: computeNativeDayOfYear,
  era(e3) {
    return this.ee(e3)[0];
  },
  eraYear(e3) {
    return this.ee(e3)[1];
  },
  monthCode(e3) {
    const [n3, t3] = this.h(e3), [o3, r3] = this.I(n3, t3);
    return ((e4, n4) => "M" + xr(e4) + (n4 ? "L" : ""))(o3, r3);
  },
  dayOfWeek: computeIsoDayOfWeek,
  daysInWeek() {
    return 7;
  }
};
var _a = {
  dayOfYear: computeNativeDayOfYear,
  h: computeIsoDateParts,
  q: isoArgsToEpochMilli
};
var Ja = /* @__PURE__ */ Object.assign({}, _a, {
  weekOfYear: computeNativeWeekOfYear,
  yearOfWeek: computeNativeYearOfWeek,
  R(e3) {
    function computeWeekShift(e4) {
      return (7 - e4 < n3 ? 7 : 0) - e4;
    }
    __name(computeWeekShift, "computeWeekShift");
    function computeWeeksInYear(e4) {
      const n4 = computeIsoDaysInYear(l3 + e4), t4 = e4 || 1, o4 = computeWeekShift(modFloor(a3 + n4 * t4, 7));
      return c3 = (n4 + (o4 - s3) * t4) / 7;
    }
    __name(computeWeeksInYear, "computeWeeksInYear");
    const n3 = this.id ? 1 : 4, t3 = computeIsoDayOfWeek(e3), o3 = this.dayOfYear(e3), r3 = modFloor(t3 - 1, 7), i3 = o3 - 1, a3 = modFloor(r3 - i3, 7), s3 = computeWeekShift(a3);
    let c3, u3 = Math.floor((i3 - s3) / 7) + 1, l3 = e3.isoYear;
    return u3 ? u3 > computeWeeksInYear(0) && (u3 = 1, l3++) : (u3 = computeWeeksInYear(-1), l3--), [u3, l3, c3];
  }
});
var Ka = {
  dayOfYear: computeNativeDayOfYear,
  h: computeIntlDateParts,
  q: computeIntlEpochMilli,
  weekOfYear: computeNativeWeekOfYear,
  yearOfWeek: computeNativeYearOfWeek,
  R() {
    return [];
  }
};
var Y = /* @__PURE__ */ createNativeOpsCreator(/* @__PURE__ */ Object.assign({}, Va, Ja, {
  h: computeIsoDateParts,
  ee(e3) {
    return this.id === gi ? computeGregoryEraParts(e3) : this.id === Ti ? Gi(e3) : [];
  },
  I: /* @__PURE__ */ __name((e3, n3) => [n3, 0], "I"),
  N(e3, n3) {
    if (!n3) {
      return [ji, e3];
    }
  },
  K: computeIsoInLeapYear,
  U() {
  },
  L: computeIsoMonthsInYear,
  J: /* @__PURE__ */ __name((e3) => e3 * xi, "J"),
  j: computeIsoDaysInMonth,
  X: computeIsoDaysInYear,
  P: /* @__PURE__ */ __name((e3, n3, t3) => ({
    isoYear: e3,
    isoMonth: n3,
    isoDay: t3
  }), "P"),
  q: isoArgsToEpochMilli,
  _: /* @__PURE__ */ __name((e3, n3, t3) => (e3 += divTrunc(t3, xi), (n3 += modTrunc(t3, xi)) < 1 ? (e3--, n3 += xi) : n3 > xi && (e3++, n3 -= xi), [e3, n3]), "_"),
  year(e3) {
    return e3.isoYear;
  },
  month(e3) {
    return e3.isoMonth;
  },
  day: /* @__PURE__ */ __name((e3) => e3.isoDay, "day")
}), /* @__PURE__ */ Object.assign({}, Va, Ka, {
  h: computeIntlDateParts,
  ee(e3) {
    const n3 = this.O(e3);
    return [n3.era, n3.eraYear];
  },
  I(e3, n3) {
    const t3 = computeIntlLeapMonth.call(this, e3);
    return [monthToMonthCodeNumber(n3, t3), t3 === n3];
  },
  N(e3, n3, t3) {
    let [o3, r3, i3] = computeIntlDateParts.call(this, {
      isoYear: ji,
      isoMonth: xi,
      isoDay: 31
    });
    const a3 = computeIntlLeapMonth.call(this, o3), s3 = r3 === a3;
    1 === (compareNumbers(e3, monthToMonthCodeNumber(r3, a3)) || compareNumbers(Number(n3), Number(s3)) || compareNumbers(t3, i3)) && o3--;
    for (let r4 = 0; r4 < 100; r4++) {
      const i4 = o3 - r4, a4 = computeIntlLeapMonth.call(this, i4), s4 = monthCodeNumberToMonth(e3, n3, a4);
      if (n3 === (s4 === a4) && t3 <= computeIntlDaysInMonth.call(this, i4, s4)) {
        return [i4, s4];
      }
    }
  },
  K(e3) {
    const n3 = computeIntlDaysInYear.call(this, e3);
    return n3 > computeIntlDaysInYear.call(this, e3 - 1) && n3 > computeIntlDaysInYear.call(this, e3 + 1);
  },
  U: computeIntlLeapMonth,
  L: computeIntlMonthsInYear,
  J(e3, n3) {
    const t3 = n3 + e3, o3 = Math.sign(e3), r3 = o3 < 0 ? -1 : 0;
    let i3 = 0;
    for (let e4 = n3; e4 !== t3; e4 += o3) {
      i3 += computeIntlMonthsInYear.call(this, e4 + r3);
    }
    return i3;
  },
  j: computeIntlDaysInMonth,
  X: computeIntlDaysInYear,
  P(e3, n3, t3) {
    return epochMilliToIso(computeIntlEpochMilli.call(this, e3, n3, t3));
  },
  q: computeIntlEpochMilli,
  _(e3, n3, t3) {
    if (t3) {
      if (n3 += t3, !Number.isSafeInteger(n3)) {
        throw new RangeError(Cr);
      }
      if (t3 < 0) {
        for (; n3 < 1; ) {
          n3 += computeIntlMonthsInYear.call(this, --e3);
        }
      } else {
        let t4;
        for (; n3 > (t4 = computeIntlMonthsInYear.call(this, e3)); ) {
          n3 -= t4, e3++;
        }
      }
    }
    return [e3, n3];
  },
  year(e3) {
    return this.O(e3).year;
  },
  month(e3) {
    const { year: n3, F: t3 } = this.O(e3), { C: o3 } = this.B(n3);
    return o3[t3] + 1;
  },
  day(e3) {
    return this.O(e3).day;
  }
}));
var Qa = "numeric";
var Xa = ["timeZoneName"];
var es = {
  month: Qa,
  day: Qa
};
var ns = {
  year: Qa,
  month: Qa
};
var ts = /* @__PURE__ */ Object.assign({}, ns, {
  day: Qa
});
var os2 = {
  hour: Qa,
  minute: Qa,
  second: Qa
};
var rs = /* @__PURE__ */ Object.assign({}, ts, os2);
var is = /* @__PURE__ */ Object.assign({}, rs, {
  timeZoneName: "short"
});
var as = /* @__PURE__ */ Object.keys(ns);
var ss = /* @__PURE__ */ Object.keys(es);
var cs = /* @__PURE__ */ Object.keys(ts);
var us = /* @__PURE__ */ Object.keys(os2);
var ls = ["dateStyle"];
var fs = /* @__PURE__ */ as.concat(ls);
var ds = /* @__PURE__ */ ss.concat(ls);
var ms = /* @__PURE__ */ cs.concat(ls, ["weekday"]);
var ps = /* @__PURE__ */ us.concat(["dayPeriod", "timeStyle"]);
var hs = /* @__PURE__ */ ms.concat(ps);
var gs = /* @__PURE__ */ hs.concat(Xa);
var Ts = /* @__PURE__ */ Xa.concat(ps);
var Ds = /* @__PURE__ */ Xa.concat(ms);
var Is = /* @__PURE__ */ Xa.concat(["day", "weekday"], ps);
var Ms = /* @__PURE__ */ Xa.concat(["year", "weekday"], ps);
var Ns = {};
var t = [/* @__PURE__ */ createOptionsTransformer(hs, rs), y];
var s = [/* @__PURE__ */ createOptionsTransformer(gs, is), y, 0, (e3, n3) => {
  const t3 = I(e3.timeZone);
  if (n3 && I(n3.timeZone) !== t3) {
    throw new RangeError(Fr);
  }
  return t3;
}];
var n = [/* @__PURE__ */ createOptionsTransformer(hs, rs, Xa), isoToEpochMilli];
var o = [/* @__PURE__ */ createOptionsTransformer(ms, ts, Ts), isoToEpochMilli];
var r = [/* @__PURE__ */ createOptionsTransformer(ps, os2, Ds), (e3) => isoTimeFieldsToNano(e3) / be];
var a = [/* @__PURE__ */ createOptionsTransformer(fs, ns, Is), isoToEpochMilli, 1];
var i = [/* @__PURE__ */ createOptionsTransformer(ds, es, Ms), isoToEpochMilli, 1];
var ys;

// node_modules/temporal-polyfill/chunks/classApi.js
function createSlotClass(e3, t3, n3, o3, r3) {
  function Class(...e4) {
    if (!(this instanceof Class)) {
      throw new TypeError(P);
    }
    oo(this, t3(...e4));
  }
  __name(Class, "Class");
  function bindMethod(e4, t4) {
    return Object.defineProperties(function(...t5) {
      return e4.call(this, getSpecificSlots(this), ...t5);
    }, D(t4));
  }
  __name(bindMethod, "bindMethod");
  function getSpecificSlots(t4) {
    const n4 = no(t4);
    if (!n4 || n4.branding !== e3) {
      throw new TypeError(P);
    }
    return n4;
  }
  __name(getSpecificSlots, "getSpecificSlots");
  return Object.defineProperties(Class.prototype, {
    ...O(T(bindMethod, n3)),
    ...p(T(bindMethod, o3)),
    ...h("Temporal." + e3)
  }), Object.defineProperties(Class, {
    ...p(r3),
    ...D(e3)
  }), [Class, (e4) => {
    const t4 = Object.create(Class.prototype);
    return oo(t4, e4), t4;
  }, getSpecificSlots];
}
__name(createSlotClass, "createSlotClass");
function createProtocolValidator(e3) {
  return e3 = e3.concat("id").sort(), (t3) => {
    if (!C(t3, e3)) {
      throw new TypeError(g);
    }
    return t3;
  };
}
__name(createProtocolValidator, "createProtocolValidator");
function rejectInvalidBag(e3) {
  if (no(e3) || void 0 !== e3.calendar || void 0 !== e3.timeZone) {
    throw new TypeError(Z);
  }
  return e3;
}
__name(rejectInvalidBag, "rejectInvalidBag");
function createCalendarFieldMethods(e3, t3) {
  const n3 = {};
  for (const o3 in e3) {
    n3[o3] = ({ o: e4 }, n4) => {
      const r3 = no(n4) || {}, { branding: a3 } = r3, i3 = a3 === J || t3.includes(a3) ? r3 : toPlainDateSlots(n4);
      return e4[o3](i3);
    };
  }
  return n3;
}
__name(createCalendarFieldMethods, "createCalendarFieldMethods");
function createCalendarGetters(e3) {
  const t3 = {};
  for (const n3 in e3) {
    t3[n3] = (e4) => {
      const { calendar: t4 } = e4;
      return (o3 = t4, "string" == typeof o3 ? Y(o3) : (r3 = o3, Object.assign(Object.create(co), {
        i: r3
      })))[n3](e4);
      var o3, r3;
    };
  }
  return t3;
}
__name(createCalendarGetters, "createCalendarGetters");
function neverValueOf() {
  throw new TypeError(A);
}
__name(neverValueOf, "neverValueOf");
function createCalendarFromSlots({ calendar: e3 }) {
  return "string" == typeof e3 ? new lr(e3) : e3;
}
__name(createCalendarFromSlots, "createCalendarFromSlots");
function toPlainMonthDaySlots(e3, t3) {
  if (t3 = U(t3), z(e3)) {
    const n4 = no(e3);
    if (n4 && n4.branding === q) {
      return H(t3), n4;
    }
    const o3 = extractCalendarSlotFromBag(e3);
    return K(Qo(o3 || X), !o3, e3, t3);
  }
  const n3 = Q(Y, e3);
  return H(t3), n3;
}
__name(toPlainMonthDaySlots, "toPlainMonthDaySlots");
function getOffsetNanosecondsForAdapter(e3, t3, n3) {
  return o3 = t3.call(e3, Co(_(n3))), ae(u(o3));
  var o3;
}
__name(getOffsetNanosecondsForAdapter, "getOffsetNanosecondsForAdapter");
function createAdapterOps(e3, t3 = ho) {
  const n3 = Object.keys(t3).sort(), o3 = {};
  for (const r3 of n3) {
    o3[r3] = E(t3[r3], e3, $(e3[r3]));
  }
  return o3;
}
__name(createAdapterOps, "createAdapterOps");
function createTimeZoneOps(e3, t3) {
  return "string" == typeof e3 ? ie(e3) : createAdapterOps(e3, t3);
}
__name(createTimeZoneOps, "createTimeZoneOps");
function createTimeZoneOffsetOps(e3) {
  return createTimeZoneOps(e3, Do);
}
__name(createTimeZoneOffsetOps, "createTimeZoneOffsetOps");
function toInstantSlots(e3) {
  if (z(e3)) {
    const t3 = no(e3);
    if (t3) {
      switch (t3.branding) {
        case Oe:
          return t3;
        case Te:
          return _(t3.epochNanoseconds);
      }
    }
  }
  return pe(e3);
}
__name(toInstantSlots, "toInstantSlots");
function toTemporalInstant() {
  return Co(_(he(this.valueOf(), be)));
}
__name(toTemporalInstant, "toTemporalInstant");
function getImplTransition(e3, t3, n3) {
  const o3 = t3.l(toInstantSlots(n3).epochNanoseconds, e3);
  return o3 ? Co(_(o3)) : null;
}
__name(getImplTransition, "getImplTransition");
function refineTimeZoneSlot(e3) {
  return z(e3) ? (no(e3) || {}).timeZone || Fo(e3) : ((e4) => ye(Ne(m(e4))))(e3);
}
__name(refineTimeZoneSlot, "refineTimeZoneSlot");
function toPlainTimeSlots(e3, t3) {
  if (z(e3)) {
    const n3 = no(e3) || {};
    switch (n3.branding) {
      case xe:
        return H(t3), n3;
      case We:
        return H(t3), Ge(n3);
      case Te:
        return H(t3), Re(createTimeZoneOffsetOps, n3);
    }
    return Ue(e3, t3);
  }
  return H(t3), ze(e3);
}
__name(toPlainTimeSlots, "toPlainTimeSlots");
function optionalToPlainTimeFields(e3) {
  return void 0 === e3 ? void 0 : toPlainTimeSlots(e3);
}
__name(optionalToPlainTimeFields, "optionalToPlainTimeFields");
function toPlainYearMonthSlots(e3, t3) {
  if (t3 = U(t3), z(e3)) {
    const n4 = no(e3);
    return n4 && n4.branding === L ? (H(t3), n4) : nt(Ho(getCalendarSlotFromBag(e3)), e3, t3);
  }
  const n3 = ot(Y, e3);
  return H(t3), n3;
}
__name(toPlainYearMonthSlots, "toPlainYearMonthSlots");
function toPlainDateTimeSlots(e3, t3) {
  if (t3 = U(t3), z(e3)) {
    const n4 = no(e3) || {};
    switch (n4.branding) {
      case We:
        return H(t3), n4;
      case J:
        return H(t3), ee({
          ...n4,
          ...Dt
        });
      case Te:
        return H(t3), ht(createTimeZoneOffsetOps, n4);
    }
    return Pt(Ko(getCalendarSlotFromBag(e3)), e3, t3);
  }
  const n3 = Ct(e3);
  return H(t3), n3;
}
__name(toPlainDateTimeSlots, "toPlainDateTimeSlots");
function toPlainDateSlots(e3, t3) {
  if (t3 = U(t3), z(e3)) {
    const n4 = no(e3) || {};
    switch (n4.branding) {
      case J:
        return H(t3), n4;
      case We:
        return H(t3), v(n4);
      case Te:
        return H(t3), Bt(createTimeZoneOffsetOps, n4);
    }
    return Yt(Ko(getCalendarSlotFromBag(e3)), e3, t3);
  }
  const n3 = At(e3);
  return H(t3), n3;
}
__name(toPlainDateSlots, "toPlainDateSlots");
function dayAdapter(e3, t3, n3) {
  return d(t3.call(e3, Yo(v(n3, e3))));
}
__name(dayAdapter, "dayAdapter");
function createCompoundOpsCreator(e3) {
  return (t3) => "string" == typeof t3 ? Y(t3) : ((e4, t4) => {
    const n3 = Object.keys(t4).sort(), o3 = {};
    for (const r3 of n3) {
      o3[r3] = E(t4[r3], e4, e4[r3]);
    }
    return o3;
  })(t3, e3);
}
__name(createCompoundOpsCreator, "createCompoundOpsCreator");
function toDurationSlots(e3) {
  if (z(e3)) {
    const t3 = no(e3);
    return t3 && t3.branding === qt ? t3 : Ht(e3);
  }
  return Kt(e3);
}
__name(toDurationSlots, "toDurationSlots");
function refinePublicRelativeTo(e3) {
  if (void 0 !== e3) {
    if (z(e3)) {
      const t3 = no(e3) || {};
      switch (t3.branding) {
        case Te:
        case J:
          return t3;
        case We:
          return v(t3);
      }
      const n3 = getCalendarSlotFromBag(e3);
      return {
        ...Qt(refineTimeZoneSlot, createTimeZoneOps, Ko(n3), e3),
        calendar: n3
      };
    }
    return Xt(e3);
  }
}
__name(refinePublicRelativeTo, "refinePublicRelativeTo");
function getCalendarSlotFromBag(e3) {
  return extractCalendarSlotFromBag(e3) || X;
}
__name(getCalendarSlotFromBag, "getCalendarSlotFromBag");
function extractCalendarSlotFromBag(e3) {
  const { calendar: t3 } = e3;
  if (void 0 !== t3) {
    return refineCalendarSlot(t3);
  }
}
__name(extractCalendarSlotFromBag, "extractCalendarSlotFromBag");
function refineCalendarSlot(e3) {
  return z(e3) ? (no(e3) || {}).calendar || cr(e3) : ((e4) => an(sn(m(e4))))(e3);
}
__name(refineCalendarSlot, "refineCalendarSlot");
function toZonedDateTimeSlots(e3, t3) {
  if (t3 = U(t3), z(e3)) {
    const n3 = no(e3);
    if (n3 && n3.branding === Te) {
      return wn(t3), n3;
    }
    const o3 = getCalendarSlotFromBag(e3);
    return jn(refineTimeZoneSlot, createTimeZoneOps, Ko(o3), o3, e3, t3);
  }
  return Mn(e3, t3);
}
__name(toZonedDateTimeSlots, "toZonedDateTimeSlots");
function adaptDateMethods(e3) {
  return T((e4) => (t3) => e4(slotsToIso(t3)), e3);
}
__name(adaptDateMethods, "adaptDateMethods");
function slotsToIso(e3) {
  return fn(e3, createTimeZoneOffsetOps);
}
__name(slotsToIso, "slotsToIso");
function createDateTimeFormatClass() {
  const e3 = En.prototype, t3 = Object.getOwnPropertyDescriptors(e3), n3 = Object.getOwnPropertyDescriptors(En), DateTimeFormat = /* @__PURE__ */ __name(function(e4, t4 = {}) {
    if (!(this instanceof DateTimeFormat)) {
      return new DateTimeFormat(e4, t4);
    }
    Or.set(this, ((e5, t5 = {}) => {
      const n4 = new En(e5, t5), o3 = n4.resolvedOptions(), r3 = o3.locale, a3 = Vn(Object.keys(t5), o3), i3 = Jn(createFormatPrepperForBranding), prepFormat = /* @__PURE__ */ __name((...e6) => {
        let t6;
        const o4 = e6.map((e7, n5) => {
          const o5 = no(e7), r4 = (o5 || {}).branding;
          if (n5 && t6 && t6 !== r4) {
            throw new TypeError(kn);
          }
          return t6 = r4, o5;
        });
        return t6 ? i3(t6)(r3, a3, ...o4) : [n4, ...e6];
      }, "prepFormat");
      return prepFormat.u = n4, prepFormat;
    })(e4, t4));
  }, "DateTimeFormat");
  for (const e4 in t3) {
    const n4 = t3[e4], o3 = e4.startsWith("format") && createFormatMethod(e4);
    "function" == typeof n4.value ? n4.value = "constructor" === e4 ? DateTimeFormat : o3 || createProxiedMethod(e4) : o3 && (n4.get = function() {
      return o3.bind(this);
    });
  }
  return n3.prototype.value = Object.create(e3, t3), Object.defineProperties(DateTimeFormat, n3), DateTimeFormat;
}
__name(createDateTimeFormatClass, "createDateTimeFormatClass");
function createFormatMethod(e3) {
  return function(...t3) {
    const n3 = Or.get(this), [o3, ...r3] = n3(...t3);
    return o3[e3](...r3);
  };
}
__name(createFormatMethod, "createFormatMethod");
function createProxiedMethod(e3) {
  return function(...t3) {
    return Or.get(this).u[e3](...t3);
  };
}
__name(createProxiedMethod, "createProxiedMethod");
function createFormatPrepperForBranding(t3) {
  const n3 = xn[t3];
  if (!n3) {
    throw new TypeError(Ln(t3));
  }
  return e(n3, Jn(qn));
}
__name(createFormatPrepperForBranding, "createFormatPrepperForBranding");
var xn = {
  Instant: t,
  PlainDateTime: n,
  PlainDate: o,
  PlainTime: r,
  PlainYearMonth: a,
  PlainMonthDay: i
};
var Rn = /* @__PURE__ */ e(t);
var Wn = /* @__PURE__ */ e(s);
var Gn = /* @__PURE__ */ e(n);
var Un = /* @__PURE__ */ e(o);
var zn = /* @__PURE__ */ e(r);
var Hn = /* @__PURE__ */ e(a);
var Kn = /* @__PURE__ */ e(i);
var Qn = {
  era: l,
  eraYear: c,
  year: u,
  month: d,
  daysInMonth: d,
  daysInYear: d,
  inLeapYear: f,
  monthsInYear: d
};
var Xn = {
  monthCode: m
};
var $n = {
  day: d
};
var _n = {
  dayOfWeek: d,
  dayOfYear: d,
  weekOfYear: S,
  yearOfWeek: c,
  daysInWeek: d
};
var eo = /* @__PURE__ */ Object.assign({}, Qn, Xn, $n, _n);
var to = /* @__PURE__ */ new WeakMap();
var no = /* @__PURE__ */ to.get.bind(to);
var oo = /* @__PURE__ */ to.set.bind(to);
var ro = {
  ...createCalendarFieldMethods(Qn, [L]),
  ...createCalendarFieldMethods(_n, []),
  ...createCalendarFieldMethods(Xn, [L, q]),
  ...createCalendarFieldMethods($n, [q])
};
var ao = /* @__PURE__ */ createCalendarGetters(eo);
var io = /* @__PURE__ */ createCalendarGetters({
  ...Qn,
  ...Xn
});
var so = /* @__PURE__ */ createCalendarGetters({
  ...Xn,
  ...$n
});
var lo = {
  calendarId: /* @__PURE__ */ __name((e3) => I(e3.calendar), "calendarId")
};
var co = /* @__PURE__ */ T((e3, t3) => function(n3) {
  const { i: o3 } = this;
  return e3(o3[t3](Yo(v(n3, o3))));
}, eo);
var uo = /* @__PURE__ */ b((e3) => (t3) => t3[e3], F.concat("sign"));
var fo = /* @__PURE__ */ b((e3, t3) => (e4) => e4[j[t3]], w);
var mo = {
  epochSeconds: M,
  epochMilliseconds: y,
  epochMicroseconds: N,
  epochNanoseconds: B
};
var So = /* @__PURE__ */ E(V, /* @__PURE__ */ new Set(["branding"]));
var [Oo, To, po] = createSlotClass(q, E(G, refineCalendarSlot), {
  ...lo,
  ...so
}, {
  getISOFields: So,
  getCalendar: createCalendarFromSlots,
  with(e3, t3, n3) {
    return To(k(_o, e3, this, rejectInvalidBag(t3), n3));
  },
  equals: /* @__PURE__ */ __name((e3, t3) => x(e3, toPlainMonthDaySlots(t3)), "equals"),
  toPlainDate(e3, t3) {
    return Yo(R($o, e3, this, t3));
  },
  toLocaleString(e3, t3, n3) {
    const [o3, r3] = Kn(t3, n3, e3);
    return o3.format(r3);
  },
  toString: W,
  toJSON: /* @__PURE__ */ __name((e3) => W(e3), "toJSON"),
  valueOf: neverValueOf
}, {
  from: /* @__PURE__ */ __name((e3, t3) => To(toPlainMonthDaySlots(e3, t3)), "from")
});
var ho = {
  getOffsetNanosecondsFor: getOffsetNanosecondsForAdapter,
  getPossibleInstantsFor(e3, t3, n3) {
    const o3 = [...t3.call(e3, No(ee(n3, X)))].map((e4) => go(e4).epochNanoseconds), r3 = o3.length;
    return r3 > 1 && (o3.sort(te), ne(oe(re(o3[0], o3[r3 - 1])))), o3;
  }
};
var Do = {
  getOffsetNanosecondsFor: getOffsetNanosecondsForAdapter
};
var [Po, Co, go] = createSlotClass(Oe, Se, mo, {
  add: /* @__PURE__ */ __name((e3, t3) => Co(se(0, e3, toDurationSlots(t3))), "add"),
  subtract: /* @__PURE__ */ __name((e3, t3) => Co(se(1, e3, toDurationSlots(t3))), "subtract"),
  until: /* @__PURE__ */ __name((e3, t3, n3) => ar(le(0, e3, toInstantSlots(t3), n3)), "until"),
  since: /* @__PURE__ */ __name((e3, t3, n3) => ar(le(1, e3, toInstantSlots(t3), n3)), "since"),
  round: /* @__PURE__ */ __name((e3, t3) => Co(ce(e3, t3)), "round"),
  equals: /* @__PURE__ */ __name((e3, t3) => ue(e3, toInstantSlots(t3)), "equals"),
  toZonedDateTime(e3, t3) {
    const n3 = de(t3);
    return dr(fe(e3, refineTimeZoneSlot(n3.timeZone), refineCalendarSlot(n3.calendar)));
  },
  toZonedDateTimeISO: /* @__PURE__ */ __name((e3, t3) => dr(fe(e3, refineTimeZoneSlot(t3))), "toZonedDateTimeISO"),
  toLocaleString(e3, t3, n3) {
    const [o3, r3] = Rn(t3, n3, e3);
    return o3.format(r3);
  },
  toString: /* @__PURE__ */ __name((e3, t3) => me(refineTimeZoneSlot, createTimeZoneOffsetOps, e3, t3), "toString"),
  toJSON: /* @__PURE__ */ __name((e3) => me(refineTimeZoneSlot, createTimeZoneOffsetOps, e3), "toJSON"),
  valueOf: neverValueOf
}, {
  from: /* @__PURE__ */ __name((e3) => Co(toInstantSlots(e3)), "from"),
  fromEpochSeconds: /* @__PURE__ */ __name((e3) => Co(De(e3)), "fromEpochSeconds"),
  fromEpochMilliseconds: /* @__PURE__ */ __name((e3) => Co(Pe(e3)), "fromEpochMilliseconds"),
  fromEpochMicroseconds: /* @__PURE__ */ __name((e3) => Co(Ce(e3)), "fromEpochMicroseconds"),
  fromEpochNanoseconds: /* @__PURE__ */ __name((e3) => Co(ge(e3)), "fromEpochNanoseconds"),
  compare: /* @__PURE__ */ __name((e3, t3) => Ze(toInstantSlots(e3), toInstantSlots(t3)), "compare")
});
var [Zo, bo] = createSlotClass("TimeZone", (e3) => {
  const t3 = Me(e3);
  return {
    branding: "TimeZone",
    id: t3,
    o: ie(t3)
  };
}, {
  id: /* @__PURE__ */ __name((e3) => e3.id, "id")
}, {
  getPossibleInstantsFor: /* @__PURE__ */ __name(({ o: e3 }, t3) => e3.getPossibleInstantsFor(toPlainDateTimeSlots(t3)).map((e4) => Co(_(e4))), "getPossibleInstantsFor"),
  getOffsetNanosecondsFor: /* @__PURE__ */ __name(({ o: e3 }, t3) => e3.getOffsetNanosecondsFor(toInstantSlots(t3).epochNanoseconds), "getOffsetNanosecondsFor"),
  getOffsetStringFor(e3, t3) {
    const n3 = toInstantSlots(t3).epochNanoseconds, o3 = createAdapterOps(this, Do).getOffsetNanosecondsFor(n3);
    return Fe(o3);
  },
  getPlainDateTimeFor(e3, t3, n3 = X) {
    const o3 = toInstantSlots(t3).epochNanoseconds, r3 = createAdapterOps(this, Do).getOffsetNanosecondsFor(o3);
    return No(ee(Ie(o3, r3), refineCalendarSlot(n3)));
  },
  getInstantFor(e3, t3, n3) {
    const o3 = toPlainDateTimeSlots(t3), r3 = ve(n3), a3 = createAdapterOps(this);
    return Co(_(we(a3, o3, r3)));
  },
  getNextTransition: /* @__PURE__ */ __name(({ o: e3 }, t3) => getImplTransition(1, e3, t3), "getNextTransition"),
  getPreviousTransition: /* @__PURE__ */ __name(({ o: e3 }, t3) => getImplTransition(-1, e3, t3), "getPreviousTransition"),
  equals(e3, t3) {
    return !!je(this, refineTimeZoneSlot(t3));
  },
  toString: /* @__PURE__ */ __name((e3) => e3.id, "toString"),
  toJSON: /* @__PURE__ */ __name((e3) => e3.id, "toJSON")
}, {
  from(e3) {
    const t3 = refineTimeZoneSlot(e3);
    return "string" == typeof t3 ? new Zo(t3) : t3;
  }
});
var Fo = /* @__PURE__ */ createProtocolValidator(Object.keys(ho));
var [Io, vo] = createSlotClass(xe, ke, fo, {
  getISOFields: So,
  with(e3, t3, n3) {
    return vo(Be(this, rejectInvalidBag(t3), n3));
  },
  add: /* @__PURE__ */ __name((e3, t3) => vo(Ye(0, e3, toDurationSlots(t3))), "add"),
  subtract: /* @__PURE__ */ __name((e3, t3) => vo(Ye(1, e3, toDurationSlots(t3))), "subtract"),
  until: /* @__PURE__ */ __name((e3, t3, n3) => ar(Ae(0, e3, toPlainTimeSlots(t3), n3)), "until"),
  since: /* @__PURE__ */ __name((e3, t3, n3) => ar(Ae(1, e3, toPlainTimeSlots(t3), n3)), "since"),
  round: /* @__PURE__ */ __name((e3, t3) => vo(Ee(e3, t3)), "round"),
  equals: /* @__PURE__ */ __name((e3, t3) => Ve(e3, toPlainTimeSlots(t3)), "equals"),
  toZonedDateTime: /* @__PURE__ */ __name((e3, t3) => dr(Je(refineTimeZoneSlot, toPlainDateSlots, createTimeZoneOps, e3, t3)), "toZonedDateTime"),
  toPlainDateTime: /* @__PURE__ */ __name((e3, t3) => No(Le(e3, toPlainDateSlots(t3))), "toPlainDateTime"),
  toLocaleString(e3, t3, n3) {
    const [o3, r3] = zn(t3, n3, e3);
    return o3.format(r3);
  },
  toString: qe,
  toJSON: /* @__PURE__ */ __name((e3) => qe(e3), "toJSON"),
  valueOf: neverValueOf
}, {
  from: /* @__PURE__ */ __name((e3, t3) => vo(toPlainTimeSlots(e3, t3)), "from"),
  compare: /* @__PURE__ */ __name((e3, t3) => He(toPlainTimeSlots(e3), toPlainTimeSlots(t3)), "compare")
});
var [wo, jo, Mo] = createSlotClass(L, E(tt, refineCalendarSlot), {
  ...lo,
  ...io
}, {
  getISOFields: So,
  getCalendar: createCalendarFromSlots,
  with(e3, t3, n3) {
    return jo(Ke(Xo, e3, this, rejectInvalidBag(t3), n3));
  },
  add: /* @__PURE__ */ __name((e3, t3, n3) => jo(Qe(nr, 0, e3, toDurationSlots(t3), n3)), "add"),
  subtract: /* @__PURE__ */ __name((e3, t3, n3) => jo(Qe(nr, 1, e3, toDurationSlots(t3), n3)), "subtract"),
  until: /* @__PURE__ */ __name((e3, t3, n3) => ar(Xe(or, 0, e3, toPlainYearMonthSlots(t3), n3)), "until"),
  since: /* @__PURE__ */ __name((e3, t3, n3) => ar(Xe(or, 1, e3, toPlainYearMonthSlots(t3), n3)), "since"),
  equals: /* @__PURE__ */ __name((e3, t3) => $e(e3, toPlainYearMonthSlots(t3)), "equals"),
  toPlainDate(e3, t3) {
    return Yo(_e($o, e3, this, t3));
  },
  toLocaleString(e3, t3, n3) {
    const [o3, r3] = Hn(t3, n3, e3);
    return o3.format(r3);
  },
  toString: et,
  toJSON: /* @__PURE__ */ __name((e3) => et(e3), "toJSON"),
  valueOf: neverValueOf
}, {
  from: /* @__PURE__ */ __name((e3, t3) => jo(toPlainYearMonthSlots(e3, t3)), "from"),
  compare: /* @__PURE__ */ __name((e3, t3) => rt(toPlainYearMonthSlots(e3), toPlainYearMonthSlots(t3)), "compare")
});
var [yo, No] = createSlotClass(We, E(pt, refineCalendarSlot), {
  ...lo,
  ...ao,
  ...fo
}, {
  getISOFields: So,
  getCalendar: createCalendarFromSlots,
  with(e3, t3, n3) {
    return No(at($o, e3, this, rejectInvalidBag(t3), n3));
  },
  withCalendar: /* @__PURE__ */ __name((e3, t3) => No(it(e3, refineCalendarSlot(t3))), "withCalendar"),
  withPlainDate: /* @__PURE__ */ __name((e3, t3) => No(st(e3, toPlainDateSlots(t3))), "withPlainDate"),
  withPlainTime: /* @__PURE__ */ __name((e3, t3) => No(lt(e3, optionalToPlainTimeFields(t3))), "withPlainTime"),
  add: /* @__PURE__ */ __name((e3, t3, n3) => No(ct(er, 0, e3, toDurationSlots(t3), n3)), "add"),
  subtract: /* @__PURE__ */ __name((e3, t3, n3) => No(ct(er, 1, e3, toDurationSlots(t3), n3)), "subtract"),
  until: /* @__PURE__ */ __name((e3, t3, n3) => ar(ut(tr, 0, e3, toPlainDateTimeSlots(t3), n3)), "until"),
  since: /* @__PURE__ */ __name((e3, t3, n3) => ar(ut(tr, 1, e3, toPlainDateTimeSlots(t3), n3)), "since"),
  round: /* @__PURE__ */ __name((e3, t3) => No(dt(e3, t3)), "round"),
  equals: /* @__PURE__ */ __name((e3, t3) => ft(e3, toPlainDateTimeSlots(t3)), "equals"),
  toZonedDateTime: /* @__PURE__ */ __name((e3, t3, n3) => dr(mt(createTimeZoneOps, e3, refineTimeZoneSlot(t3), n3)), "toZonedDateTime"),
  toPlainDate: /* @__PURE__ */ __name((e3) => Yo(v(e3)), "toPlainDate"),
  toPlainTime: /* @__PURE__ */ __name((e3) => vo(Ge(e3)), "toPlainTime"),
  toPlainYearMonth(e3) {
    return jo(St(Ho, e3, this));
  },
  toPlainMonthDay(e3) {
    return To(Ot(Qo, e3, this));
  },
  toLocaleString(e3, t3, n3) {
    const [o3, r3] = Gn(t3, n3, e3);
    return o3.format(r3);
  },
  toString: Tt,
  toJSON: /* @__PURE__ */ __name((e3) => Tt(e3), "toJSON"),
  valueOf: neverValueOf
}, {
  from: /* @__PURE__ */ __name((e3, t3) => No(toPlainDateTimeSlots(e3, t3)), "from"),
  compare: /* @__PURE__ */ __name((e3, t3) => gt(toPlainDateTimeSlots(e3), toPlainDateTimeSlots(t3)), "compare")
});
var [Bo, Yo, Ao] = createSlotClass(J, E(Nt, refineCalendarSlot), {
  ...lo,
  ...ao
}, {
  getISOFields: So,
  getCalendar: createCalendarFromSlots,
  with(e3, t3, n3) {
    return Yo(Zt($o, e3, this, rejectInvalidBag(t3), n3));
  },
  withCalendar: /* @__PURE__ */ __name((e3, t3) => Yo(it(e3, refineCalendarSlot(t3))), "withCalendar"),
  add: /* @__PURE__ */ __name((e3, t3, n3) => Yo(bt(er, 0, e3, toDurationSlots(t3), n3)), "add"),
  subtract: /* @__PURE__ */ __name((e3, t3, n3) => Yo(bt(er, 1, e3, toDurationSlots(t3), n3)), "subtract"),
  until: /* @__PURE__ */ __name((e3, t3, n3) => ar(Ft(tr, 0, e3, toPlainDateSlots(t3), n3)), "until"),
  since: /* @__PURE__ */ __name((e3, t3, n3) => ar(Ft(tr, 1, e3, toPlainDateSlots(t3), n3)), "since"),
  equals: /* @__PURE__ */ __name((e3, t3) => It(e3, toPlainDateSlots(t3)), "equals"),
  toZonedDateTime(e3, t3) {
    const n3 = !z(t3) || t3 instanceof Zo ? {
      timeZone: t3
    } : t3;
    return dr(vt(refineTimeZoneSlot, toPlainTimeSlots, createTimeZoneOps, e3, n3));
  },
  toPlainDateTime: /* @__PURE__ */ __name((e3, t3) => No(wt(e3, optionalToPlainTimeFields(t3))), "toPlainDateTime"),
  toPlainYearMonth(e3) {
    return jo(jt(Ho, e3, this));
  },
  toPlainMonthDay(e3) {
    return To(Mt(Qo, e3, this));
  },
  toLocaleString(e3, t3, n3) {
    const [o3, r3] = Un(t3, n3, e3);
    return o3.format(r3);
  },
  toString: yt,
  toJSON: /* @__PURE__ */ __name((e3) => yt(e3), "toJSON"),
  valueOf: neverValueOf
}, {
  from: /* @__PURE__ */ __name((e3, t3) => Yo(toPlainDateSlots(e3, t3)), "from"),
  compare: /* @__PURE__ */ __name((e3, t3) => rt(toPlainDateSlots(e3), toPlainDateSlots(t3)), "compare")
});
var Eo = {
  fields(e3, t3, n3) {
    return [...t3.call(e3, n3)];
  }
};
var Vo = /* @__PURE__ */ Object.assign({
  dateFromFields(e3, t3, n3, o3) {
    return Ao(t3.call(e3, Object.assign(/* @__PURE__ */ Object.create(null), n3), o3));
  }
}, Eo);
var Jo = /* @__PURE__ */ Object.assign({
  yearMonthFromFields(e3, t3, n3, o3) {
    return Mo(t3.call(e3, Object.assign(/* @__PURE__ */ Object.create(null), n3), o3));
  }
}, Eo);
var Lo = /* @__PURE__ */ Object.assign({
  monthDayFromFields(e3, t3, n3, o3) {
    return po(t3.call(e3, Object.assign(/* @__PURE__ */ Object.create(null), n3), o3));
  }
}, Eo);
var qo = {
  mergeFields(e3, t3, n3, o3) {
    return de(t3.call(e3, Object.assign(/* @__PURE__ */ Object.create(null), n3), Object.assign(/* @__PURE__ */ Object.create(null), o3)));
  }
};
var ko = /* @__PURE__ */ Object.assign({}, Vo, qo);
var xo = /* @__PURE__ */ Object.assign({}, Jo, qo);
var Ro = /* @__PURE__ */ Object.assign({}, Lo, qo);
var Wo = {
  dateAdd(e3, t3, n3, o3, r3) {
    return Ao(t3.call(e3, Yo(v(n3, e3)), ar(Vt(o3)), r3));
  }
};
var Go = /* @__PURE__ */ Object.assign({}, Wo, {
  dateUntil(e3, t3, n3, o3, r3, a3) {
    return ir(t3.call(e3, Yo(v(n3, e3)), Yo(v(o3, e3)), Object.assign(/* @__PURE__ */ Object.create(null), a3, {
      largestUnit: Et[r3]
    })));
  }
});
var Uo = /* @__PURE__ */ Object.assign({}, Wo, {
  day: dayAdapter
});
var zo = /* @__PURE__ */ Object.assign({}, Go, {
  day: dayAdapter
});
var Ho = /* @__PURE__ */ createCompoundOpsCreator(Jo);
var Ko = /* @__PURE__ */ createCompoundOpsCreator(Vo);
var Qo = /* @__PURE__ */ createCompoundOpsCreator(Lo);
var Xo = /* @__PURE__ */ createCompoundOpsCreator(xo);
var $o = /* @__PURE__ */ createCompoundOpsCreator(ko);
var _o = /* @__PURE__ */ createCompoundOpsCreator(Ro);
var er = /* @__PURE__ */ createCompoundOpsCreator(Wo);
var tr = /* @__PURE__ */ createCompoundOpsCreator(Go);
var nr = /* @__PURE__ */ createCompoundOpsCreator(Uo);
var or = /* @__PURE__ */ createCompoundOpsCreator(zo);
var [rr, ar, ir] = createSlotClass(qt, Lt, {
  ...uo,
  blank: Jt
}, {
  with: /* @__PURE__ */ __name((e3, t3) => ar(kt(e3, t3)), "with"),
  negated: /* @__PURE__ */ __name((e3) => ar(xt(e3)), "negated"),
  abs: /* @__PURE__ */ __name((e3) => ar(Rt(e3)), "abs"),
  add: /* @__PURE__ */ __name((e3, t3, n3) => ar(Wt(refinePublicRelativeTo, tr, createTimeZoneOps, 0, e3, toDurationSlots(t3), n3)), "add"),
  subtract: /* @__PURE__ */ __name((e3, t3, n3) => ar(Wt(refinePublicRelativeTo, tr, createTimeZoneOps, 1, e3, toDurationSlots(t3), n3)), "subtract"),
  round: /* @__PURE__ */ __name((e3, t3) => ar(Gt(refinePublicRelativeTo, tr, createTimeZoneOps, e3, t3)), "round"),
  total: /* @__PURE__ */ __name((e3, t3) => Ut(refinePublicRelativeTo, tr, createTimeZoneOps, e3, t3), "total"),
  toLocaleString(e3, t3, n3) {
    return Intl.DurationFormat ? new Intl.DurationFormat(t3, n3).format(this) : zt(e3);
  },
  toString: zt,
  toJSON: /* @__PURE__ */ __name((e3) => zt(e3), "toJSON"),
  valueOf: neverValueOf
}, {
  from: /* @__PURE__ */ __name((e3) => ar(toDurationSlots(e3)), "from"),
  compare: /* @__PURE__ */ __name((e3, t3, n3) => $t(refinePublicRelativeTo, er, createTimeZoneOps, toDurationSlots(e3), toDurationSlots(t3), n3), "compare")
});
var sr = {
  toString: /* @__PURE__ */ __name((e3) => e3.id, "toString"),
  toJSON: /* @__PURE__ */ __name((e3) => e3.id, "toJSON"),
  ...ro,
  dateAdd: /* @__PURE__ */ __name(({ id: e3, o: t3 }, n3, o3, r3) => Yo(v(t3.dateAdd(toPlainDateSlots(n3), toDurationSlots(o3), r3), e3)), "dateAdd"),
  dateUntil: /* @__PURE__ */ __name(({ o: e3 }, t3, n3, o3) => ar(Vt(e3.dateUntil(toPlainDateSlots(t3), toPlainDateSlots(n3), _t(o3)))), "dateUntil"),
  dateFromFields: /* @__PURE__ */ __name(({ id: e3, o: t3 }, n3, o3) => Yo(Yt(t3, n3, o3, ln(e3))), "dateFromFields"),
  yearMonthFromFields: /* @__PURE__ */ __name(({ id: e3, o: t3 }, n3, o3) => jo(nt(t3, n3, o3, un(e3))), "yearMonthFromFields"),
  monthDayFromFields: /* @__PURE__ */ __name(({ id: e3, o: t3 }, n3, o3) => To(K(t3, 0, n3, o3, cn(e3))), "monthDayFromFields"),
  fields({ o: e3 }, t3) {
    const n3 = new Set(en), o3 = [];
    for (const e4 of t3) {
      if (m(e4), !n3.has(e4)) {
        throw new RangeError(tn(e4));
      }
      n3.delete(e4), o3.push(e4);
    }
    return e3.fields(o3);
  },
  mergeFields: /* @__PURE__ */ __name(({ o: e3 }, t3, n3) => e3.mergeFields(nn(on(t3)), nn(on(n3))), "mergeFields")
};
var [lr] = createSlotClass("Calendar", (e3) => {
  const t3 = rn(e3);
  return {
    branding: "Calendar",
    id: t3,
    o: Y(t3)
  };
}, {
  id: /* @__PURE__ */ __name((e3) => e3.id, "id")
}, sr, {
  from(e3) {
    const t3 = refineCalendarSlot(e3);
    return "string" == typeof t3 ? new lr(t3) : t3;
  }
});
var cr = /* @__PURE__ */ createProtocolValidator(Object.keys(sr).slice(4));
var [ur, dr] = createSlotClass(Te, E(vn, refineCalendarSlot, refineTimeZoneSlot), {
  ...mo,
  ...lo,
  ...adaptDateMethods(ao),
  ...adaptDateMethods(fo),
  offset: /* @__PURE__ */ __name((e3) => Fe(slotsToIso(e3).offsetNanoseconds), "offset"),
  offsetNanoseconds: /* @__PURE__ */ __name((e3) => slotsToIso(e3).offsetNanoseconds, "offsetNanoseconds"),
  timeZoneId: /* @__PURE__ */ __name((e3) => I(e3.timeZone), "timeZoneId"),
  hoursInDay: /* @__PURE__ */ __name((e3) => dn(createTimeZoneOps, e3), "hoursInDay")
}, {
  getISOFields: /* @__PURE__ */ __name((e3) => mn(createTimeZoneOffsetOps, e3), "getISOFields"),
  getCalendar: createCalendarFromSlots,
  getTimeZone: /* @__PURE__ */ __name(({ timeZone: e3 }) => "string" == typeof e3 ? new Zo(e3) : e3, "getTimeZone"),
  with(e3, t3, n3) {
    return dr(Sn($o, createTimeZoneOps, e3, this, rejectInvalidBag(t3), n3));
  },
  withCalendar: /* @__PURE__ */ __name((e3, t3) => dr(it(e3, refineCalendarSlot(t3))), "withCalendar"),
  withTimeZone: /* @__PURE__ */ __name((e3, t3) => dr(On(e3, refineTimeZoneSlot(t3))), "withTimeZone"),
  withPlainDate: /* @__PURE__ */ __name((e3, t3) => dr(Tn(createTimeZoneOps, e3, toPlainDateSlots(t3))), "withPlainDate"),
  withPlainTime: /* @__PURE__ */ __name((e3, t3) => dr(pn(createTimeZoneOps, e3, optionalToPlainTimeFields(t3))), "withPlainTime"),
  add: /* @__PURE__ */ __name((e3, t3, n3) => dr(hn(er, createTimeZoneOps, 0, e3, toDurationSlots(t3), n3)), "add"),
  subtract: /* @__PURE__ */ __name((e3, t3, n3) => dr(hn(er, createTimeZoneOps, 1, e3, toDurationSlots(t3), n3)), "subtract"),
  until: /* @__PURE__ */ __name((e3, t3, n3) => ar(Vt(Dn(tr, createTimeZoneOps, 0, e3, toZonedDateTimeSlots(t3), n3))), "until"),
  since: /* @__PURE__ */ __name((e3, t3, n3) => ar(Vt(Dn(tr, createTimeZoneOps, 1, e3, toZonedDateTimeSlots(t3), n3))), "since"),
  round: /* @__PURE__ */ __name((e3, t3) => dr(Pn(createTimeZoneOps, e3, t3)), "round"),
  startOfDay: /* @__PURE__ */ __name((e3) => dr(Cn(createTimeZoneOps, e3)), "startOfDay"),
  equals: /* @__PURE__ */ __name((e3, t3) => gn(e3, toZonedDateTimeSlots(t3)), "equals"),
  toInstant: /* @__PURE__ */ __name((e3) => Co(Zn(e3)), "toInstant"),
  toPlainDateTime: /* @__PURE__ */ __name((e3) => No(ht(createTimeZoneOffsetOps, e3)), "toPlainDateTime"),
  toPlainDate: /* @__PURE__ */ __name((e3) => Yo(Bt(createTimeZoneOffsetOps, e3)), "toPlainDate"),
  toPlainTime: /* @__PURE__ */ __name((e3) => vo(Re(createTimeZoneOffsetOps, e3)), "toPlainTime"),
  toPlainYearMonth(e3) {
    return jo(bn(Ho, e3, this));
  },
  toPlainMonthDay(e3) {
    return To(Fn(Qo, e3, this));
  },
  toLocaleString(e3, t3, n3 = {}) {
    const [o3, r3] = Wn(t3, n3, e3);
    return o3.format(r3);
  },
  toString: /* @__PURE__ */ __name((e3, t3) => In(createTimeZoneOffsetOps, e3, t3), "toString"),
  toJSON: /* @__PURE__ */ __name((e3) => In(createTimeZoneOffsetOps, e3), "toJSON"),
  valueOf: neverValueOf
}, {
  from: /* @__PURE__ */ __name((e3, t3) => dr(toZonedDateTimeSlots(e3, t3)), "from"),
  compare: /* @__PURE__ */ __name((e3, t3) => yn(toZonedDateTimeSlots(e3), toZonedDateTimeSlots(t3)), "compare")
});
var fr = /* @__PURE__ */ Object.defineProperties({}, {
  ...h("Temporal.Now"),
  ...p({
    timeZoneId: /* @__PURE__ */ __name(() => Nn(), "timeZoneId"),
    instant: /* @__PURE__ */ __name(() => Co(_(Bn())), "instant"),
    zonedDateTime: /* @__PURE__ */ __name((e3, t3 = Nn()) => dr(Yn(Bn(), refineTimeZoneSlot(t3), refineCalendarSlot(e3))), "zonedDateTime"),
    zonedDateTimeISO: /* @__PURE__ */ __name((e3 = Nn()) => dr(Yn(Bn(), refineTimeZoneSlot(e3), X)), "zonedDateTimeISO"),
    plainDateTime: /* @__PURE__ */ __name((e3, t3 = Nn()) => No(ee(An(createTimeZoneOffsetOps(refineTimeZoneSlot(t3))), refineCalendarSlot(e3))), "plainDateTime"),
    plainDateTimeISO: /* @__PURE__ */ __name((e3 = Nn()) => No(ee(An(createTimeZoneOffsetOps(refineTimeZoneSlot(e3))), X)), "plainDateTimeISO"),
    plainDate: /* @__PURE__ */ __name((e3, t3 = Nn()) => Yo(v(An(createTimeZoneOffsetOps(refineTimeZoneSlot(t3))), refineCalendarSlot(e3))), "plainDate"),
    plainDateISO: /* @__PURE__ */ __name((e3 = Nn()) => Yo(v(An(createTimeZoneOffsetOps(refineTimeZoneSlot(e3))), X)), "plainDateISO"),
    plainTimeISO: /* @__PURE__ */ __name((e3 = Nn()) => vo(Ge(An(createTimeZoneOffsetOps(refineTimeZoneSlot(e3))))), "plainTimeISO")
  })
});
var mr = /* @__PURE__ */ Object.defineProperties({}, {
  ...h("Temporal"),
  ...p({
    PlainYearMonth: wo,
    PlainMonthDay: Oo,
    PlainDate: Bo,
    PlainTime: Io,
    PlainDateTime: yo,
    ZonedDateTime: ur,
    Instant: Po,
    Calendar: lr,
    TimeZone: Zo,
    Duration: rr,
    Now: fr
  })
});
var Sr = /* @__PURE__ */ createDateTimeFormatClass();
var Or = /* @__PURE__ */ new WeakMap();
var Tr = /* @__PURE__ */ Object.defineProperties(Object.create(Intl), p({
  DateTimeFormat: Sr
}));

// node_modules/temporal-polyfill/global.esm.js
Object.defineProperties(globalThis, p({
  Temporal: mr
})), Object.defineProperties(Intl, p({
  DateTimeFormat: Sr
})), Object.defineProperties(Date.prototype, p({
  toTemporalInstant
}));

// node_modules/array-from-async/index.mjs
var { MAX_SAFE_INTEGER } = Number;
var iteratorSymbol = Symbol.iterator;
var asyncIteratorSymbol = Symbol.asyncIterator;
var IntrinsicArray = Array;
var tooLongErrorMessage = "Input is too long and exceeded Number.MAX_SAFE_INTEGER times.";
function isConstructor(obj) {
  if (obj != null) {
    const prox = new Proxy(obj, {
      construct() {
        return prox;
      }
    });
    try {
      new prox();
      return true;
    } catch (err) {
      return false;
    }
  } else {
    return false;
  }
}
__name(isConstructor, "isConstructor");
async function fromAsync(items, mapfn, thisArg) {
  const itemsAreIterable = asyncIteratorSymbol in items || iteratorSymbol in items;
  if (itemsAreIterable) {
    const result = isConstructor(this) ? new this() : IntrinsicArray(0);
    let i3 = 0;
    for await (const v3 of items) {
      if (i3 > MAX_SAFE_INTEGER) {
        throw TypeError(tooLongErrorMessage);
      } else if (mapfn) {
        result[i3] = await mapfn.call(thisArg, v3, i3);
      } else {
        result[i3] = v3;
      }
      i3++;
    }
    result.length = i3;
    return result;
  } else {
    const { length } = items;
    const result = isConstructor(this) ? new this(length) : IntrinsicArray(length);
    let i3 = 0;
    while (i3 < length) {
      if (i3 > MAX_SAFE_INTEGER) {
        throw TypeError(tooLongErrorMessage);
      }
      const v3 = await items[i3];
      if (mapfn) {
        result[i3] = await mapfn.call(thisArg, v3, i3);
      } else {
        result[i3] = v3;
      }
      i3++;
    }
    result.length = i3;
    return result;
  }
}
__name(fromAsync, "fromAsync");

// packages/polyfill/src/array-from-async.ts
if (typeof Array.fromAsync !== "function") {
  Object.defineProperty(Array, "fromAsync", {
    value: fromAsync,
    configurable: false,
    enumerable: false,
    writable: false
  });
}

// packages/polyfill/src/disposable.ts
for (const name2 of ["dispose", "asyncDispose"]) {
  if (typeof Symbol[name2] !== "symbol") {
    Object.defineProperty(Symbol, name2, {
      value: Symbol.for(`nodejs.${name2}`),
      configurable: false,
      enumerable: false,
      writable: false
    });
  }
}

// node_modules/source-map-support/register.js
require_source_map_support().install();

// packages/action/src/global.ts
setDefaultResultOrder("ipv4first");
setDefaultAutoSelectFamily(false);

// packages/action/src/runs/index.ts
var import_core8 = __toESM(require_core(), 1);

// packages/logger/src/index.ts
var import_core2 = __toESM(require_core(), 1);

// packages/logger/src/log.ts
var core = __toESM(require_core(), 1);
import { EOL as EOL2 } from "node:os";
import { formatWithOptions } from "node:util";

// node_modules/ts-pattern/dist/index.js
var t2 = Symbol.for("@ts-pattern/matcher");
var e2 = Symbol.for("@ts-pattern/isVariadic");
var n2 = "@ts-pattern/anonymous-select-key";
var r2 = /* @__PURE__ */ __name((t3) => Boolean(t3 && "object" == typeof t3), "r");
var i2 = /* @__PURE__ */ __name((e3) => e3 && !!e3[t2], "i");
var s2 = /* @__PURE__ */ __name((n3, o3, c3) => {
  if (i2(n3)) {
    const e3 = n3[t2](), { matched: r3, selections: i3 } = e3.match(o3);
    return r3 && i3 && Object.keys(i3).forEach((t3) => c3(t3, i3[t3])), r3;
  }
  if (r2(n3)) {
    if (!r2(o3)) return false;
    if (Array.isArray(n3)) {
      if (!Array.isArray(o3)) return false;
      let t3 = [], r3 = [], a3 = [];
      for (const s3 of n3.keys()) {
        const o4 = n3[s3];
        i2(o4) && o4[e2] ? a3.push(o4) : a3.length ? r3.push(o4) : t3.push(o4);
      }
      if (a3.length) {
        if (a3.length > 1) throw new Error("Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.");
        if (o3.length < t3.length + r3.length) return false;
        const e3 = o3.slice(0, t3.length), n4 = 0 === r3.length ? [] : o3.slice(-r3.length), i3 = o3.slice(t3.length, 0 === r3.length ? Infinity : -r3.length);
        return t3.every((t4, n5) => s2(t4, e3[n5], c3)) && r3.every((t4, e4) => s2(t4, n4[e4], c3)) && (0 === a3.length || s2(a3[0], i3, c3));
      }
      return n3.length === o3.length && n3.every((t4, e3) => s2(t4, o3[e3], c3));
    }
    return Reflect.ownKeys(n3).every((e3) => {
      const r3 = n3[e3];
      return (e3 in o3 || i2(a3 = r3) && "optional" === a3[t2]().matcherType) && s2(r3, o3[e3], c3);
      var a3;
    });
  }
  return Object.is(o3, n3);
}, "s");
var o2 = /* @__PURE__ */ __name((e3) => {
  var n3, s3, a3;
  return r2(e3) ? i2(e3) ? null != (n3 = null == (s3 = (a3 = e3[t2]()).getSelectionKeys) ? void 0 : s3.call(a3)) ? n3 : [] : Array.isArray(e3) ? c2(e3, o2) : c2(Object.values(e3), o2) : [];
}, "o");
var c2 = /* @__PURE__ */ __name((t3, e3) => t3.reduce((t4, n3) => t4.concat(e3(n3)), []), "c");
function a2(...t3) {
  if (1 === t3.length) {
    const [e3] = t3;
    return (t4) => s2(e3, t4, () => {
    });
  }
  if (2 === t3.length) {
    const [e3, n3] = t3;
    return s2(e3, n3, () => {
    });
  }
  throw new Error(`isMatching wasn't given the right number of arguments: expected 1 or 2, received ${t3.length}.`);
}
__name(a2, "a");
function u2(t3) {
  return Object.assign(t3, { optional: /* @__PURE__ */ __name(() => h2(t3), "optional"), and: /* @__PURE__ */ __name((e3) => m2(t3, e3), "and"), or: /* @__PURE__ */ __name((e3) => d2(t3, e3), "or"), select: /* @__PURE__ */ __name((e3) => void 0 === e3 ? y2(t3) : y2(e3, t3), "select") });
}
__name(u2, "u");
function l2(t3) {
  return Object.assign(((t4) => Object.assign(t4, { [Symbol.iterator]() {
    let n3 = 0;
    const r3 = [{ value: Object.assign(t4, { [e2]: true }), done: false }, { done: true, value: void 0 }];
    return { next: /* @__PURE__ */ __name(() => {
      var t5;
      return null != (t5 = r3[n3++]) ? t5 : r3.at(-1);
    }, "next") };
  } }))(t3), { optional: /* @__PURE__ */ __name(() => l2(h2(t3)), "optional"), select: /* @__PURE__ */ __name((e3) => l2(void 0 === e3 ? y2(t3) : y2(e3, t3)), "select") });
}
__name(l2, "l");
function h2(e3) {
  return u2({ [t2]: () => ({ match: /* @__PURE__ */ __name((t3) => {
    let n3 = {};
    const r3 = /* @__PURE__ */ __name((t4, e4) => {
      n3[t4] = e4;
    }, "r");
    return void 0 === t3 ? (o2(e3).forEach((t4) => r3(t4, void 0)), { matched: true, selections: n3 }) : { matched: s2(e3, t3, r3), selections: n3 };
  }, "match"), getSelectionKeys: /* @__PURE__ */ __name(() => o2(e3), "getSelectionKeys"), matcherType: "optional" }) });
}
__name(h2, "h");
var f2 = /* @__PURE__ */ __name((t3, e3) => {
  for (const n3 of t3) if (!e3(n3)) return false;
  return true;
}, "f");
var g2 = /* @__PURE__ */ __name((t3, e3) => {
  for (const [n3, r3] of t3.entries()) if (!e3(r3, n3)) return false;
  return true;
}, "g");
function m2(...e3) {
  return u2({ [t2]: () => ({ match: /* @__PURE__ */ __name((t3) => {
    let n3 = {};
    const r3 = /* @__PURE__ */ __name((t4, e4) => {
      n3[t4] = e4;
    }, "r");
    return { matched: e3.every((e4) => s2(e4, t3, r3)), selections: n3 };
  }, "match"), getSelectionKeys: /* @__PURE__ */ __name(() => c2(e3, o2), "getSelectionKeys"), matcherType: "and" }) });
}
__name(m2, "m");
function d2(...e3) {
  return u2({ [t2]: () => ({ match: /* @__PURE__ */ __name((t3) => {
    let n3 = {};
    const r3 = /* @__PURE__ */ __name((t4, e4) => {
      n3[t4] = e4;
    }, "r");
    return c2(e3, o2).forEach((t4) => r3(t4, void 0)), { matched: e3.some((e4) => s2(e4, t3, r3)), selections: n3 };
  }, "match"), getSelectionKeys: /* @__PURE__ */ __name(() => c2(e3, o2), "getSelectionKeys"), matcherType: "or" }) });
}
__name(d2, "d");
function p2(e3) {
  return { [t2]: () => ({ match: /* @__PURE__ */ __name((t3) => ({ matched: Boolean(e3(t3)) }), "match") }) };
}
__name(p2, "p");
function y2(...e3) {
  const r3 = "string" == typeof e3[0] ? e3[0] : void 0, i3 = 2 === e3.length ? e3[1] : "string" == typeof e3[0] ? void 0 : e3[0];
  return u2({ [t2]: () => ({ match: /* @__PURE__ */ __name((t3) => {
    let e4 = { [null != r3 ? r3 : n2]: t3 };
    return { matched: void 0 === i3 || s2(i3, t3, (t4, n3) => {
      e4[t4] = n3;
    }), selections: e4 };
  }, "match"), getSelectionKeys: /* @__PURE__ */ __name(() => [null != r3 ? r3 : n2].concat(void 0 === i3 ? [] : o2(i3)), "getSelectionKeys") }) });
}
__name(y2, "y");
function v2(t3) {
  return "number" == typeof t3;
}
__name(v2, "v");
function b2(t3) {
  return "string" == typeof t3;
}
__name(b2, "b");
function w2(t3) {
  return "bigint" == typeof t3;
}
__name(w2, "w");
var S2 = u2(p2(function(t3) {
  return true;
}));
var O2 = S2;
var j2 = /* @__PURE__ */ __name((t3) => Object.assign(u2(t3), { startsWith: /* @__PURE__ */ __name((e3) => {
  return j2(m2(t3, (n3 = e3, p2((t4) => b2(t4) && t4.startsWith(n3)))));
  var n3;
}, "startsWith"), endsWith: /* @__PURE__ */ __name((e3) => {
  return j2(m2(t3, (n3 = e3, p2((t4) => b2(t4) && t4.endsWith(n3)))));
  var n3;
}, "endsWith"), minLength: /* @__PURE__ */ __name((e3) => j2(m2(t3, ((t4) => p2((e4) => b2(e4) && e4.length >= t4))(e3))), "minLength"), length: /* @__PURE__ */ __name((e3) => j2(m2(t3, ((t4) => p2((e4) => b2(e4) && e4.length === t4))(e3))), "length"), maxLength: /* @__PURE__ */ __name((e3) => j2(m2(t3, ((t4) => p2((e4) => b2(e4) && e4.length <= t4))(e3))), "maxLength"), includes: /* @__PURE__ */ __name((e3) => {
  return j2(m2(t3, (n3 = e3, p2((t4) => b2(t4) && t4.includes(n3)))));
  var n3;
}, "includes"), regex: /* @__PURE__ */ __name((e3) => {
  return j2(m2(t3, (n3 = e3, p2((t4) => b2(t4) && Boolean(t4.match(n3))))));
  var n3;
}, "regex") }), "j");
var K2 = j2(p2(b2));
var x2 = /* @__PURE__ */ __name((t3) => Object.assign(u2(t3), { between: /* @__PURE__ */ __name((e3, n3) => x2(m2(t3, ((t4, e4) => p2((n4) => v2(n4) && t4 <= n4 && e4 >= n4))(e3, n3))), "between"), lt: /* @__PURE__ */ __name((e3) => x2(m2(t3, ((t4) => p2((e4) => v2(e4) && e4 < t4))(e3))), "lt"), gt: /* @__PURE__ */ __name((e3) => x2(m2(t3, ((t4) => p2((e4) => v2(e4) && e4 > t4))(e3))), "gt"), lte: /* @__PURE__ */ __name((e3) => x2(m2(t3, ((t4) => p2((e4) => v2(e4) && e4 <= t4))(e3))), "lte"), gte: /* @__PURE__ */ __name((e3) => x2(m2(t3, ((t4) => p2((e4) => v2(e4) && e4 >= t4))(e3))), "gte"), int: /* @__PURE__ */ __name(() => x2(m2(t3, p2((t4) => v2(t4) && Number.isInteger(t4)))), "int"), finite: /* @__PURE__ */ __name(() => x2(m2(t3, p2((t4) => v2(t4) && Number.isFinite(t4)))), "finite"), positive: /* @__PURE__ */ __name(() => x2(m2(t3, p2((t4) => v2(t4) && t4 > 0))), "positive"), negative: /* @__PURE__ */ __name(() => x2(m2(t3, p2((t4) => v2(t4) && t4 < 0))), "negative") }), "x");
var E2 = x2(p2(v2));
var A2 = /* @__PURE__ */ __name((t3) => Object.assign(u2(t3), { between: /* @__PURE__ */ __name((e3, n3) => A2(m2(t3, ((t4, e4) => p2((n4) => w2(n4) && t4 <= n4 && e4 >= n4))(e3, n3))), "between"), lt: /* @__PURE__ */ __name((e3) => A2(m2(t3, ((t4) => p2((e4) => w2(e4) && e4 < t4))(e3))), "lt"), gt: /* @__PURE__ */ __name((e3) => A2(m2(t3, ((t4) => p2((e4) => w2(e4) && e4 > t4))(e3))), "gt"), lte: /* @__PURE__ */ __name((e3) => A2(m2(t3, ((t4) => p2((e4) => w2(e4) && e4 <= t4))(e3))), "lte"), gte: /* @__PURE__ */ __name((e3) => A2(m2(t3, ((t4) => p2((e4) => w2(e4) && e4 >= t4))(e3))), "gte"), positive: /* @__PURE__ */ __name(() => A2(m2(t3, p2((t4) => w2(t4) && t4 > 0))), "positive"), negative: /* @__PURE__ */ __name(() => A2(m2(t3, p2((t4) => w2(t4) && t4 < 0))), "negative") }), "A");
var P2 = A2(p2(w2));
var T2 = u2(p2(function(t3) {
  return "boolean" == typeof t3;
}));
var B2 = u2(p2(function(t3) {
  return "symbol" == typeof t3;
}));
var _2 = u2(p2(function(t3) {
  return null == t3;
}));
var k2 = u2(p2(function(t3) {
  return null != t3;
}));
var N2 = { __proto__: null, matcher: t2, optional: h2, array: /* @__PURE__ */ __name(function(...e3) {
  return l2({ [t2]: () => ({ match: /* @__PURE__ */ __name((t3) => {
    if (!Array.isArray(t3)) return { matched: false };
    if (0 === e3.length) return { matched: true };
    const n3 = e3[0];
    let r3 = {};
    if (0 === t3.length) return o2(n3).forEach((t4) => {
      r3[t4] = [];
    }), { matched: true, selections: r3 };
    const i3 = /* @__PURE__ */ __name((t4, e4) => {
      r3[t4] = (r3[t4] || []).concat([e4]);
    }, "i");
    return { matched: t3.every((t4) => s2(n3, t4, i3)), selections: r3 };
  }, "match"), getSelectionKeys: /* @__PURE__ */ __name(() => 0 === e3.length ? [] : o2(e3[0]), "getSelectionKeys") }) });
}, "array"), set: /* @__PURE__ */ __name(function(...e3) {
  return u2({ [t2]: () => ({ match: /* @__PURE__ */ __name((t3) => {
    if (!(t3 instanceof Set)) return { matched: false };
    let n3 = {};
    if (0 === t3.size) return { matched: true, selections: n3 };
    if (0 === e3.length) return { matched: true };
    const r3 = /* @__PURE__ */ __name((t4, e4) => {
      n3[t4] = (n3[t4] || []).concat([e4]);
    }, "r"), i3 = e3[0];
    return { matched: f2(t3, (t4) => s2(i3, t4, r3)), selections: n3 };
  }, "match"), getSelectionKeys: /* @__PURE__ */ __name(() => 0 === e3.length ? [] : o2(e3[0]), "getSelectionKeys") }) });
}, "set"), map: /* @__PURE__ */ __name(function(...e3) {
  return u2({ [t2]: () => ({ match: /* @__PURE__ */ __name((t3) => {
    if (!(t3 instanceof Map)) return { matched: false };
    let n3 = {};
    if (0 === t3.size) return { matched: true, selections: n3 };
    const r3 = /* @__PURE__ */ __name((t4, e4) => {
      n3[t4] = (n3[t4] || []).concat([e4]);
    }, "r");
    if (0 === e3.length) return { matched: true };
    var i3;
    if (1 === e3.length) throw new Error(`\`P.map\` wasn't given enough arguments. Expected (key, value), received ${null == (i3 = e3[0]) ? void 0 : i3.toString()}`);
    const [o3, c3] = e3;
    return { matched: g2(t3, (t4, e4) => {
      const n4 = s2(o3, e4, r3), i4 = s2(c3, t4, r3);
      return n4 && i4;
    }), selections: n3 };
  }, "match"), getSelectionKeys: /* @__PURE__ */ __name(() => 0 === e3.length ? [] : [...o2(e3[0]), ...o2(e3[1])], "getSelectionKeys") }) });
}, "map"), intersection: m2, union: d2, not: /* @__PURE__ */ __name(function(e3) {
  return u2({ [t2]: () => ({ match: /* @__PURE__ */ __name((t3) => ({ matched: !s2(e3, t3, () => {
  }) }), "match"), getSelectionKeys: /* @__PURE__ */ __name(() => [], "getSelectionKeys"), matcherType: "not" }) });
}, "not"), when: p2, select: y2, any: S2, _: O2, string: K2, number: E2, bigint: P2, boolean: T2, symbol: B2, nullish: _2, nonNullable: k2, instanceOf: /* @__PURE__ */ __name(function(t3) {
  return u2(p2(/* @__PURE__ */ function(t4) {
    return (e3) => e3 instanceof t4;
  }(t3)));
}, "instanceOf"), shape: /* @__PURE__ */ __name(function(t3) {
  return u2(p2(a2(t3)));
}, "shape") };
var W2 = class extends Error {
  static {
    __name(this, "W");
  }
  constructor(t3) {
    let e3;
    try {
      e3 = JSON.stringify(t3);
    } catch (n3) {
      e3 = t3;
    }
    super(`Pattern matching error: no pattern matches value ${e3}`), this.input = void 0, this.input = t3;
  }
};
var $2 = { matched: false, value: void 0 };
function z2(t3) {
  return new I2(t3, $2);
}
__name(z2, "z");
var I2 = class _I {
  static {
    __name(this, "I");
  }
  constructor(t3, e3) {
    this.input = void 0, this.state = void 0, this.input = t3, this.state = e3;
  }
  with(...t3) {
    if (this.state.matched) return this;
    const e3 = t3[t3.length - 1], r3 = [t3[0]];
    let i3;
    3 === t3.length && "function" == typeof t3[1] ? i3 = t3[1] : t3.length > 2 && r3.push(...t3.slice(1, t3.length - 1));
    let o3 = false, c3 = {};
    const a3 = /* @__PURE__ */ __name((t4, e4) => {
      o3 = true, c3[t4] = e4;
    }, "a"), u3 = !r3.some((t4) => s2(t4, this.input, a3)) || i3 && !Boolean(i3(this.input)) ? $2 : { matched: true, value: e3(o3 ? n2 in c3 ? c3[n2] : c3 : this.input, this.input) };
    return new _I(this.input, u3);
  }
  when(t3, e3) {
    if (this.state.matched) return this;
    const n3 = Boolean(t3(this.input));
    return new _I(this.input, n3 ? { matched: true, value: e3(this.input, this.input) } : $2);
  }
  otherwise(t3) {
    return this.state.matched ? this.state.value : t3(this.input);
  }
  exhaustive() {
    if (this.state.matched) return this.state.value;
    throw new W2(this.input);
  }
  run() {
    return this.exhaustive();
  }
  returnType() {
    return this;
  }
};

// packages/logger/src/symbols.ts
var symbols_exports = {};
__export(symbols_exports, {
  note: () => note
});
var note = Symbol("note");

// packages/logger/src/log.ts
var LogLevel = {
  debug: 20,
  info: 30,
  warn: 40,
  fatal: 60
};
var notify = createLogMethod("info", core.notice);
var debug2 = createLogMethod("debug", core.debug);
var info2 = createLogMethod("info", core.info);
var warn = createLogMethod("warn", core.warning);
var fatal = createLogMethod("fatal", core.setFailed);
var defaultInspectOptions = {
  depth: 10,
  compact: false,
  maxArrayLength: 20,
  maxStringLength: 500
};
var logger = { debug: debug2, info: info2, warn, fatal };
function createLogMethod(level, logFn) {
  function log2(...args) {
    if (LogLevel[level] <= LogLevel.debug && !core.isDebug()) {
      return;
    }
    const [message, options] = z2(args).returnType().with(
      [N2.string, ...N2.array()],
      (inputs) => [format(...inputs)]
    ).with(
      [{ error: N2._ }, N2.string, ...N2.array()],
      ([options2, ...inputs]) => [
        `${format(...inputs)}: ${options2.error}`,
        options2
      ]
    ).with(
      [N2._, N2.string, ...N2.array()],
      ([options2, ...inputs]) => [format(...inputs), options2]
    ).with(
      [{ error: N2._ }],
      ([options2]) => [String(options2.error), options2]
    ).exhaustive();
    const { error, linePrefix } = options ?? {};
    const warning2 = LogLevel[level] > LogLevel.info;
    if (error !== void 0) {
      let prefix2 = styles_default[warning2 ? "red" : "dim"]("|") + " ";
      if (linePrefix !== void 0) {
        prefix2 = linePrefix + prefix2;
      }
      logger[warning2 ? "info" : level]({ linePrefix: prefix2 }, "%O", error);
    }
    if (!warning2 && linePrefix !== void 0) {
      logFn(indent(message, linePrefix));
    } else {
      logFn(message);
    }
    if (warning2) {
      for (const note2 of new Set(collectNotes(error))) {
        core.notice(note2);
      }
    }
  }
  __name(log2, "log");
  return log2;
}
__name(createLogMethod, "createLogMethod");
function* collectNotes(error) {
  for (const e3 of traverseErrors(error, defaultInspectOptions.depth)) {
    if (Object.hasOwn(e3, note)) {
      yield e3[note];
    }
  }
}
__name(collectNotes, "collectNotes");
var Never = class {
  static {
    __name(this, "Never");
  }
  static [Symbol.hasInstance](instance) {
    return false;
  }
};
function* traverseErrors(root, depthLimit) {
  if (root instanceof Error && depthLimit > 0) {
    const children = z2(root).with(
      N2.instanceOf(AggregateError),
      { name: "AggregateError", errors: N2.array() },
      ({ errors }) => errors
    ).with(
      N2.instanceOf(
        Reflect.get(globalThis, "SuppressedError") ?? Never
      ),
      { name: "SuppressedError" },
      ({ error, suppressed }) => [error, suppressed]
    ).with(
      { cause: N2._ },
      ({ cause }) => [cause]
    ).otherwise(() => []);
    for (const child of children) {
      yield* traverseErrors(child, depthLimit - 1);
    }
    yield root;
  }
}
__name(traverseErrors, "traverseErrors");
function format(fmt, ...values) {
  const opts = {
    colors: hasColors(),
    ...defaultInspectOptions
  };
  if (core.isDebug()) {
    opts.maxArrayLength = 100;
    opts.maxStringLength = 1e4;
  }
  return formatWithOptions(opts, fmt, ...values);
}
__name(format, "format");
function indent(text, prefix2) {
  return text.split("\n").map((line) => `${prefix2}${line}`.trimEnd()).join(EOL2);
}
__name(indent, "indent");

// packages/action/src/runs/main/index.ts
var import_core7 = __toESM(require_core(), 1);

// packages/texlive/src/ctan/api.ts
var api_exports = {};
__export(api_exports, {
  pkg: () => pkg
});

// packages/utils/src/http.ts
var import_http_client = __toESM(require_lib(), 1);
import { STATUS_CODES } from "node:http";
var HttpClient = class extends import_http_client.HttpClient {
  static {
    __name(this, "HttpClient");
  }
  [Symbol.dispose]() {
    this.dispose();
  }
};
async function getJson(url2) {
  var _stack = [];
  try {
    const http2 = __using(_stack, new HttpClient());
    const { result, statusCode } = await http2.getJson(url2.toString());
    if (statusCode !== import_http_client.HttpCodes.OK) {
      throw createClientError(statusCode, url2);
    }
    return result;
  } catch (_3) {
    var _error = _3, _hasError = true;
  } finally {
    __callDispose(_stack, _error, _hasError);
  }
}
__name(getJson, "getJson");
async function getHeaders(url2) {
  var _stack = [];
  try {
    const http2 = __using(_stack, new HttpClient());
    const { message } = await http2.head(url2.toString());
    const { headers, statusCode = Number.NaN } = message.destroy();
    if (statusCode !== import_http_client.HttpCodes.OK) {
      throw createClientError(statusCode, url2);
    }
    return headers;
  } catch (_3) {
    var _error = _3, _hasError = true;
  } finally {
    __callDispose(_stack, _error, _hasError);
  }
}
__name(getHeaders, "getHeaders");
function createClientError(statusCode, url2) {
  let msg = `${url2} returned ${statusCode}`;
  if (statusCode in STATUS_CODES) {
    msg += `: ${STATUS_CODES[statusCode]}`;
  }
  const { stackTraceLimit } = Error;
  Error.stackTraceLimit = 0;
  const error = new import_http_client.HttpClientError(msg, statusCode);
  Error.stackTraceLimit = stackTraceLimit;
  Error.captureStackTrace(error, createClientError);
  return error;
}
__name(createClientError, "createClientError");

// node_modules/url-template/lib/url-template.js
function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }
    return part;
  }).join("");
}
__name(encodeReserved, "encodeReserved");
function encodeUnreserved(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c3) {
    return "%" + c3.charCodeAt(0).toString(16).toUpperCase();
  });
}
__name(encodeUnreserved, "encodeUnreserved");
function encodeValue(operator, value, key) {
  value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
  if (key) {
    return encodeUnreserved(key) + "=" + value;
  } else {
    return value;
  }
}
__name(encodeValue, "encodeValue");
function isDefined(value) {
  return value !== void 0 && value !== null;
}
__name(isDefined, "isDefined");
function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}
__name(isKeyOperator, "isKeyOperator");
function getValues(context, operator, key, modifier) {
  var value = context[key], result = [];
  if (isDefined(value) && value !== "") {
    if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
      value = value.toString();
      if (modifier && modifier !== "*") {
        value = value.substring(0, parseInt(modifier, 10));
      }
      result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));
    } else {
      if (modifier === "*") {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : null));
          });
        } else {
          Object.keys(value).forEach(function(k3) {
            if (isDefined(value[k3])) {
              result.push(encodeValue(operator, value[k3], k3));
            }
          });
        }
      } else {
        var tmp = [];
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            tmp.push(encodeValue(operator, value2));
          });
        } else {
          Object.keys(value).forEach(function(k3) {
            if (isDefined(value[k3])) {
              tmp.push(encodeUnreserved(k3));
              tmp.push(encodeValue(operator, value[k3].toString()));
            }
          });
        }
        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value === "") {
      result.push("");
    }
  }
  return result;
}
__name(getValues, "getValues");
function parseTemplate(template) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  return {
    expand: /* @__PURE__ */ __name(function(context) {
      return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_3, expression, literal) {
        if (expression) {
          var operator = null, values = [];
          if (operators.indexOf(expression.charAt(0)) !== -1) {
            operator = expression.charAt(0);
            expression = expression.substr(1);
          }
          expression.split(/,/g).forEach(function(variable) {
            var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
            values.push.apply(values, getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
          });
          if (operator && operator !== "+") {
            var separator = ",";
            if (operator === "?") {
              separator = "&";
            } else if (operator !== "#") {
              separator = operator;
            }
            return (values.length !== 0 ? operator : "") + values.join(separator);
          } else {
            return values.join(",");
          }
        } else {
          return encodeReserved(literal);
        }
      });
    }, "expand")
  };
}
__name(parseTemplate, "parseTemplate");

// packages/texlive/src/ctan/api.ts
var API_BASE_URL = new URL(
  parseTemplate("https://ctan.org/json/{version}/pkg/{?drop}").expand({
    version: "2.0",
    drop: [
      "aliases",
      "announce",
      "bugs",
      "ctan",
      "descriptions",
      "development",
      "documentation",
      "home",
      "index",
      "install",
      "repository",
      "support",
      "topics"
    ]
  })
);
async function pkg(name2) {
  const url2 = new URL(name2, API_BASE_URL);
  url2.search = API_BASE_URL.search;
  return await getJson(url2);
}
__name(pkg, "pkg");

// packages/texlive/src/ctan/mirrors.ts
var mirrors_exports = {};
__export(mirrors_exports, {
  resolve: () => resolve
});
import { setTimeout as setTimeout2 } from "node:timers/promises";

// packages/data/data/tlnet.json
var ctan = {
  master: "https://ctan.org/",
  mirrors: "https://mirrors.ctan.org/",
  default: "https://mirror.math.princeton.edu/pub/CTAN/",
  path: "systems/texlive/tlnet/",
  versionFile: "TEXLIVE_{version}"
};
var tlnet_default = {
  $schema: "../schemas/tlnet.schema.json",
  ctan,
  tlcontrib: {
    mirrors: "https://mirrors.ctan.org/",
    path: "systems/texlive/tlcontrib/"
  },
  historic: {
    master: "ftp://tug.org/historic/",
    default: "https://ftp.math.utah.edu/pub/texlive/historic/",
    path: {
      "systems/texlive/{version}/tlnet/": {
        versions: "<2010"
      },
      "systems/texlive/{version}/tlnet-final/": {
        versions: ">=2010"
      }
    }
  },
  tlpretest: {
    default: "https://ftp.math.utah.edu/pub/texlive/",
    path: "tlpretest/",
    versionFile: "TEXLIVE_{version}_pretest"
  }
};

// packages/texlive/src/ctan/mirrors.ts
var MAX_TRIES = 10;
var RETRY_DELAY = 500;
var resolvedMirrorLocation;
async function resolve(options) {
  var _stack = [];
  try {
    if (options?.master ?? false) {
      return new URL(ctan.master);
    }
    if (resolvedMirrorLocation !== void 0) {
      return new URL(resolvedMirrorLocation.href);
    }
    const http2 = __using(_stack, new HttpClient(void 0, void 0, {
      allowRedirects: false,
      keepAlive: true
    }));
    for (let i3 = 0; i3 < MAX_TRIES; ++i3) {
      try {
        const { message } = await http2.head(ctan.mirrors);
        const { headers, statusCode = Number.NaN } = message.destroy();
        if (!REDIRECT_CODES.has(statusCode)) {
          throw createClientError(statusCode, ctan.mirrors);
        }
        const mirror = new URL(headers.location);
        debug2(
          "[%d/%d] Resolved CTAN mirror: %s",
          i3 + 1,
          MAX_TRIES,
          mirror.href
        );
        if (new RegExp("cicku", "iv").test(mirror.hostname)) {
          await setTimeout2(RETRY_DELAY);
          continue;
        }
        resolvedMirrorLocation = mirror;
        return new URL(mirror.href);
      } catch (cause) {
        throw new Error("Failed to resolve the CTAN mirror location", { cause });
      }
    }
    throw new Error("Failed to find a suitable CTAN mirror");
  } catch (_3) {
    var _error = _3, _hasError = true;
  } finally {
    __callDispose(_stack, _error, _hasError);
  }
}
__name(resolve, "resolve");
var REDIRECT_CODES = /* @__PURE__ */ new Set([
  import_http_client.HttpCodes.MovedPermanently,
  import_http_client.HttpCodes.ResourceMoved,
  import_http_client.HttpCodes.SeeOther,
  import_http_client.HttpCodes.TemporaryRedirect,
  import_http_client.HttpCodes.PermanentRedirect
]);

// packages/texlive/src/install-tl/cli.ts
var import_tool_cache2 = __toESM(require_tool_cache(), 1);
import { readFile as readFile2 } from "node:fs/promises";
import { platform as platform3 } from "node:os";
import * as path7 from "node:path";

// packages/utils/src/decorators.ts
import * as path from "node:path";
import { env as env2 } from "node:process";

// node_modules/class-transformer/esm5/enums/transformation-type.enum.js
var TransformationType;
(function(TransformationType2) {
  TransformationType2[TransformationType2["PLAIN_TO_CLASS"] = 0] = "PLAIN_TO_CLASS";
  TransformationType2[TransformationType2["CLASS_TO_PLAIN"] = 1] = "CLASS_TO_PLAIN";
  TransformationType2[TransformationType2["CLASS_TO_CLASS"] = 2] = "CLASS_TO_CLASS";
})(TransformationType || (TransformationType = {}));

// node_modules/class-transformer/esm5/MetadataStorage.js
var MetadataStorage = (
  /** @class */
  function() {
    function MetadataStorage2() {
      this._typeMetadatas = /* @__PURE__ */ new Map();
      this._transformMetadatas = /* @__PURE__ */ new Map();
      this._exposeMetadatas = /* @__PURE__ */ new Map();
      this._excludeMetadatas = /* @__PURE__ */ new Map();
      this._ancestorsMap = /* @__PURE__ */ new Map();
    }
    __name(MetadataStorage2, "MetadataStorage");
    MetadataStorage2.prototype.addTypeMetadata = function(metadata3) {
      if (!this._typeMetadatas.has(metadata3.target)) {
        this._typeMetadatas.set(metadata3.target, /* @__PURE__ */ new Map());
      }
      this._typeMetadatas.get(metadata3.target).set(metadata3.propertyName, metadata3);
    };
    MetadataStorage2.prototype.addTransformMetadata = function(metadata3) {
      if (!this._transformMetadatas.has(metadata3.target)) {
        this._transformMetadatas.set(metadata3.target, /* @__PURE__ */ new Map());
      }
      if (!this._transformMetadatas.get(metadata3.target).has(metadata3.propertyName)) {
        this._transformMetadatas.get(metadata3.target).set(metadata3.propertyName, []);
      }
      this._transformMetadatas.get(metadata3.target).get(metadata3.propertyName).push(metadata3);
    };
    MetadataStorage2.prototype.addExposeMetadata = function(metadata3) {
      if (!this._exposeMetadatas.has(metadata3.target)) {
        this._exposeMetadatas.set(metadata3.target, /* @__PURE__ */ new Map());
      }
      this._exposeMetadatas.get(metadata3.target).set(metadata3.propertyName, metadata3);
    };
    MetadataStorage2.prototype.addExcludeMetadata = function(metadata3) {
      if (!this._excludeMetadatas.has(metadata3.target)) {
        this._excludeMetadatas.set(metadata3.target, /* @__PURE__ */ new Map());
      }
      this._excludeMetadatas.get(metadata3.target).set(metadata3.propertyName, metadata3);
    };
    MetadataStorage2.prototype.findTransformMetadatas = function(target, propertyName, transformationType) {
      return this.findMetadatas(this._transformMetadatas, target, propertyName).filter(function(metadata3) {
        if (!metadata3.options)
          return true;
        if (metadata3.options.toClassOnly === true && metadata3.options.toPlainOnly === true)
          return true;
        if (metadata3.options.toClassOnly === true) {
          return transformationType === TransformationType.CLASS_TO_CLASS || transformationType === TransformationType.PLAIN_TO_CLASS;
        }
        if (metadata3.options.toPlainOnly === true) {
          return transformationType === TransformationType.CLASS_TO_PLAIN;
        }
        return true;
      });
    };
    MetadataStorage2.prototype.findExcludeMetadata = function(target, propertyName) {
      return this.findMetadata(this._excludeMetadatas, target, propertyName);
    };
    MetadataStorage2.prototype.findExposeMetadata = function(target, propertyName) {
      return this.findMetadata(this._exposeMetadatas, target, propertyName);
    };
    MetadataStorage2.prototype.findExposeMetadataByCustomName = function(target, name2) {
      return this.getExposedMetadatas(target).find(function(metadata3) {
        return metadata3.options && metadata3.options.name === name2;
      });
    };
    MetadataStorage2.prototype.findTypeMetadata = function(target, propertyName) {
      return this.findMetadata(this._typeMetadatas, target, propertyName);
    };
    MetadataStorage2.prototype.getStrategy = function(target) {
      var excludeMap = this._excludeMetadatas.get(target);
      var exclude = excludeMap && excludeMap.get(void 0);
      var exposeMap = this._exposeMetadatas.get(target);
      var expose = exposeMap && exposeMap.get(void 0);
      if (exclude && expose || !exclude && !expose)
        return "none";
      return exclude ? "excludeAll" : "exposeAll";
    };
    MetadataStorage2.prototype.getExposedMetadatas = function(target) {
      return this.getMetadata(this._exposeMetadatas, target);
    };
    MetadataStorage2.prototype.getExcludedMetadatas = function(target) {
      return this.getMetadata(this._excludeMetadatas, target);
    };
    MetadataStorage2.prototype.getExposedProperties = function(target, transformationType) {
      return this.getExposedMetadatas(target).filter(function(metadata3) {
        if (!metadata3.options)
          return true;
        if (metadata3.options.toClassOnly === true && metadata3.options.toPlainOnly === true)
          return true;
        if (metadata3.options.toClassOnly === true) {
          return transformationType === TransformationType.CLASS_TO_CLASS || transformationType === TransformationType.PLAIN_TO_CLASS;
        }
        if (metadata3.options.toPlainOnly === true) {
          return transformationType === TransformationType.CLASS_TO_PLAIN;
        }
        return true;
      }).map(function(metadata3) {
        return metadata3.propertyName;
      });
    };
    MetadataStorage2.prototype.getExcludedProperties = function(target, transformationType) {
      return this.getExcludedMetadatas(target).filter(function(metadata3) {
        if (!metadata3.options)
          return true;
        if (metadata3.options.toClassOnly === true && metadata3.options.toPlainOnly === true)
          return true;
        if (metadata3.options.toClassOnly === true) {
          return transformationType === TransformationType.CLASS_TO_CLASS || transformationType === TransformationType.PLAIN_TO_CLASS;
        }
        if (metadata3.options.toPlainOnly === true) {
          return transformationType === TransformationType.CLASS_TO_PLAIN;
        }
        return true;
      }).map(function(metadata3) {
        return metadata3.propertyName;
      });
    };
    MetadataStorage2.prototype.clear = function() {
      this._typeMetadatas.clear();
      this._exposeMetadatas.clear();
      this._excludeMetadatas.clear();
      this._ancestorsMap.clear();
    };
    MetadataStorage2.prototype.getMetadata = function(metadatas, target) {
      var metadataFromTargetMap = metadatas.get(target);
      var metadataFromTarget;
      if (metadataFromTargetMap) {
        metadataFromTarget = Array.from(metadataFromTargetMap.values()).filter(function(meta) {
          return meta.propertyName !== void 0;
        });
      }
      var metadataFromAncestors = [];
      for (var _i2 = 0, _a4 = this.getAncestors(target); _i2 < _a4.length; _i2++) {
        var ancestor = _a4[_i2];
        var ancestorMetadataMap = metadatas.get(ancestor);
        if (ancestorMetadataMap) {
          var metadataFromAncestor = Array.from(ancestorMetadataMap.values()).filter(function(meta) {
            return meta.propertyName !== void 0;
          });
          metadataFromAncestors.push.apply(metadataFromAncestors, metadataFromAncestor);
        }
      }
      return metadataFromAncestors.concat(metadataFromTarget || []);
    };
    MetadataStorage2.prototype.findMetadata = function(metadatas, target, propertyName) {
      var metadataFromTargetMap = metadatas.get(target);
      if (metadataFromTargetMap) {
        var metadataFromTarget = metadataFromTargetMap.get(propertyName);
        if (metadataFromTarget) {
          return metadataFromTarget;
        }
      }
      for (var _i2 = 0, _a4 = this.getAncestors(target); _i2 < _a4.length; _i2++) {
        var ancestor = _a4[_i2];
        var ancestorMetadataMap = metadatas.get(ancestor);
        if (ancestorMetadataMap) {
          var ancestorResult = ancestorMetadataMap.get(propertyName);
          if (ancestorResult) {
            return ancestorResult;
          }
        }
      }
      return void 0;
    };
    MetadataStorage2.prototype.findMetadatas = function(metadatas, target, propertyName) {
      var metadataFromTargetMap = metadatas.get(target);
      var metadataFromTarget;
      if (metadataFromTargetMap) {
        metadataFromTarget = metadataFromTargetMap.get(propertyName);
      }
      var metadataFromAncestorsTarget = [];
      for (var _i2 = 0, _a4 = this.getAncestors(target); _i2 < _a4.length; _i2++) {
        var ancestor = _a4[_i2];
        var ancestorMetadataMap = metadatas.get(ancestor);
        if (ancestorMetadataMap) {
          if (ancestorMetadataMap.has(propertyName)) {
            metadataFromAncestorsTarget.push.apply(metadataFromAncestorsTarget, ancestorMetadataMap.get(propertyName));
          }
        }
      }
      return metadataFromAncestorsTarget.slice().reverse().concat((metadataFromTarget || []).slice().reverse());
    };
    MetadataStorage2.prototype.getAncestors = function(target) {
      if (!target)
        return [];
      if (!this._ancestorsMap.has(target)) {
        var ancestors = [];
        for (var baseClass = Object.getPrototypeOf(target.prototype.constructor); typeof baseClass.prototype !== "undefined"; baseClass = Object.getPrototypeOf(baseClass.prototype.constructor)) {
          ancestors.push(baseClass);
        }
        this._ancestorsMap.set(target, ancestors);
      }
      return this._ancestorsMap.get(target);
    };
    return MetadataStorage2;
  }()
);

// node_modules/class-transformer/esm5/storage.js
var defaultMetadataStorage = new MetadataStorage();

// node_modules/class-transformer/esm5/utils/get-global.util.js
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof self !== "undefined") {
    return self;
  }
}
__name(getGlobal, "getGlobal");

// node_modules/class-transformer/esm5/utils/is-promise.util.js
function isPromise(p3) {
  return p3 !== null && typeof p3 === "object" && typeof p3.then === "function";
}
__name(isPromise, "isPromise");

// node_modules/class-transformer/esm5/TransformOperationExecutor.js
var __spreadArray = function(to2, from, pack) {
  if (pack || arguments.length === 2) for (var i3 = 0, l3 = from.length, ar2; i3 < l3; i3++) {
    if (ar2 || !(i3 in from)) {
      if (!ar2) ar2 = Array.prototype.slice.call(from, 0, i3);
      ar2[i3] = from[i3];
    }
  }
  return to2.concat(ar2 || Array.prototype.slice.call(from));
};
function instantiateArrayType(arrayType) {
  var array = new arrayType();
  if (!(array instanceof Set) && !("push" in array)) {
    return [];
  }
  return array;
}
__name(instantiateArrayType, "instantiateArrayType");
var TransformOperationExecutor = (
  /** @class */
  function() {
    function TransformOperationExecutor2(transformationType, options) {
      this.transformationType = transformationType;
      this.options = options;
      this.recursionStack = /* @__PURE__ */ new Set();
    }
    __name(TransformOperationExecutor2, "TransformOperationExecutor");
    TransformOperationExecutor2.prototype.transform = function(source, value, targetType, arrayType, isMap, level) {
      var _this = this;
      if (level === void 0) {
        level = 0;
      }
      if (Array.isArray(value) || value instanceof Set) {
        var newValue_1 = arrayType && this.transformationType === TransformationType.PLAIN_TO_CLASS ? instantiateArrayType(arrayType) : [];
        value.forEach(function(subValue, index2) {
          var subSource = source ? source[index2] : void 0;
          if (!_this.options.enableCircularCheck || !_this.isCircular(subValue)) {
            var realTargetType = void 0;
            if (typeof targetType !== "function" && targetType && targetType.options && targetType.options.discriminator && targetType.options.discriminator.property && targetType.options.discriminator.subTypes) {
              if (_this.transformationType === TransformationType.PLAIN_TO_CLASS) {
                realTargetType = targetType.options.discriminator.subTypes.find(function(subType) {
                  return subType.name === subValue[targetType.options.discriminator.property];
                });
                var options = { newObject: newValue_1, object: subValue, property: void 0 };
                var newType = targetType.typeFunction(options);
                realTargetType === void 0 ? realTargetType = newType : realTargetType = realTargetType.value;
                if (!targetType.options.keepDiscriminatorProperty)
                  delete subValue[targetType.options.discriminator.property];
              }
              if (_this.transformationType === TransformationType.CLASS_TO_CLASS) {
                realTargetType = subValue.constructor;
              }
              if (_this.transformationType === TransformationType.CLASS_TO_PLAIN) {
                subValue[targetType.options.discriminator.property] = targetType.options.discriminator.subTypes.find(function(subType) {
                  return subType.value === subValue.constructor;
                }).name;
              }
            } else {
              realTargetType = targetType;
            }
            var value_1 = _this.transform(subSource, subValue, realTargetType, void 0, subValue instanceof Map, level + 1);
            if (newValue_1 instanceof Set) {
              newValue_1.add(value_1);
            } else {
              newValue_1.push(value_1);
            }
          } else if (_this.transformationType === TransformationType.CLASS_TO_CLASS) {
            if (newValue_1 instanceof Set) {
              newValue_1.add(subValue);
            } else {
              newValue_1.push(subValue);
            }
          }
        });
        return newValue_1;
      } else if (targetType === String && !isMap) {
        if (value === null || value === void 0)
          return value;
        return String(value);
      } else if (targetType === Number && !isMap) {
        if (value === null || value === void 0)
          return value;
        return Number(value);
      } else if (targetType === Boolean && !isMap) {
        if (value === null || value === void 0)
          return value;
        return Boolean(value);
      } else if ((targetType === Date || value instanceof Date) && !isMap) {
        if (value instanceof Date) {
          return new Date(value.valueOf());
        }
        if (value === null || value === void 0)
          return value;
        return new Date(value);
      } else if (!!getGlobal().Buffer && (targetType === Buffer || value instanceof Buffer) && !isMap) {
        if (value === null || value === void 0)
          return value;
        return Buffer.from(value);
      } else if (isPromise(value) && !isMap) {
        return new Promise(function(resolve2, reject) {
          value.then(function(data) {
            return resolve2(_this.transform(void 0, data, targetType, void 0, void 0, level + 1));
          }, reject);
        });
      } else if (!isMap && value !== null && typeof value === "object" && typeof value.then === "function") {
        return value;
      } else if (typeof value === "object" && value !== null) {
        if (!targetType && value.constructor !== Object)
          if (!Array.isArray(value) && value.constructor === Array) {
          } else {
            targetType = value.constructor;
          }
        if (!targetType && source)
          targetType = source.constructor;
        if (this.options.enableCircularCheck) {
          this.recursionStack.add(value);
        }
        var keys = this.getKeys(targetType, value, isMap);
        var newValue = source ? source : {};
        if (!source && (this.transformationType === TransformationType.PLAIN_TO_CLASS || this.transformationType === TransformationType.CLASS_TO_CLASS)) {
          if (isMap) {
            newValue = /* @__PURE__ */ new Map();
          } else if (targetType) {
            newValue = new targetType();
          } else {
            newValue = {};
          }
        }
        var _loop_1 = /* @__PURE__ */ __name(function(key2) {
          if (key2 === "__proto__" || key2 === "constructor") {
            return "continue";
          }
          var valueKey = key2;
          var newValueKey = key2, propertyName = key2;
          if (!this_1.options.ignoreDecorators && targetType) {
            if (this_1.transformationType === TransformationType.PLAIN_TO_CLASS) {
              var exposeMetadata = defaultMetadataStorage.findExposeMetadataByCustomName(targetType, key2);
              if (exposeMetadata) {
                propertyName = exposeMetadata.propertyName;
                newValueKey = exposeMetadata.propertyName;
              }
            } else if (this_1.transformationType === TransformationType.CLASS_TO_PLAIN || this_1.transformationType === TransformationType.CLASS_TO_CLASS) {
              var exposeMetadata = defaultMetadataStorage.findExposeMetadata(targetType, key2);
              if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {
                newValueKey = exposeMetadata.options.name;
              }
            }
          }
          var subValue = void 0;
          if (this_1.transformationType === TransformationType.PLAIN_TO_CLASS) {
            subValue = value[valueKey];
          } else {
            if (value instanceof Map) {
              subValue = value.get(valueKey);
            } else if (value[valueKey] instanceof Function) {
              subValue = value[valueKey]();
            } else {
              subValue = value[valueKey];
            }
          }
          var type2 = void 0, isSubValueMap = subValue instanceof Map;
          if (targetType && isMap) {
            type2 = targetType;
          } else if (targetType) {
            var metadata_1 = defaultMetadataStorage.findTypeMetadata(targetType, propertyName);
            if (metadata_1) {
              var options = { newObject: newValue, object: value, property: propertyName };
              var newType = metadata_1.typeFunction ? metadata_1.typeFunction(options) : metadata_1.reflectedType;
              if (metadata_1.options && metadata_1.options.discriminator && metadata_1.options.discriminator.property && metadata_1.options.discriminator.subTypes) {
                if (!(value[valueKey] instanceof Array)) {
                  if (this_1.transformationType === TransformationType.PLAIN_TO_CLASS) {
                    type2 = metadata_1.options.discriminator.subTypes.find(function(subType) {
                      if (subValue && subValue instanceof Object && metadata_1.options.discriminator.property in subValue) {
                        return subType.name === subValue[metadata_1.options.discriminator.property];
                      }
                    });
                    type2 === void 0 ? type2 = newType : type2 = type2.value;
                    if (!metadata_1.options.keepDiscriminatorProperty) {
                      if (subValue && subValue instanceof Object && metadata_1.options.discriminator.property in subValue) {
                        delete subValue[metadata_1.options.discriminator.property];
                      }
                    }
                  }
                  if (this_1.transformationType === TransformationType.CLASS_TO_CLASS) {
                    type2 = subValue.constructor;
                  }
                  if (this_1.transformationType === TransformationType.CLASS_TO_PLAIN) {
                    if (subValue) {
                      subValue[metadata_1.options.discriminator.property] = metadata_1.options.discriminator.subTypes.find(function(subType) {
                        return subType.value === subValue.constructor;
                      }).name;
                    }
                  }
                } else {
                  type2 = metadata_1;
                }
              } else {
                type2 = newType;
              }
              isSubValueMap = isSubValueMap || metadata_1.reflectedType === Map;
            } else if (this_1.options.targetMaps) {
              this_1.options.targetMaps.filter(function(map) {
                return map.target === targetType && !!map.properties[propertyName];
              }).forEach(function(map) {
                return type2 = map.properties[propertyName];
              });
            } else if (this_1.options.enableImplicitConversion && this_1.transformationType === TransformationType.PLAIN_TO_CLASS) {
              var reflectedType = Reflect.getMetadata("design:type", targetType.prototype, propertyName);
              if (reflectedType) {
                type2 = reflectedType;
              }
            }
          }
          var arrayType_1 = Array.isArray(value[valueKey]) ? this_1.getReflectedType(targetType, propertyName) : void 0;
          var subSource = source ? source[valueKey] : void 0;
          if (newValue.constructor.prototype) {
            var descriptor = Object.getOwnPropertyDescriptor(newValue.constructor.prototype, newValueKey);
            if ((this_1.transformationType === TransformationType.PLAIN_TO_CLASS || this_1.transformationType === TransformationType.CLASS_TO_CLASS) && // eslint-disable-next-line @typescript-eslint/unbound-method
            (descriptor && !descriptor.set || newValue[newValueKey] instanceof Function))
              return "continue";
          }
          if (!this_1.options.enableCircularCheck || !this_1.isCircular(subValue)) {
            var transformKey = this_1.transformationType === TransformationType.PLAIN_TO_CLASS ? newValueKey : key2;
            var finalValue = void 0;
            if (this_1.transformationType === TransformationType.CLASS_TO_PLAIN) {
              finalValue = value[transformKey];
              finalValue = this_1.applyCustomTransformations(finalValue, targetType, transformKey, value, this_1.transformationType);
              finalValue = value[transformKey] === finalValue ? subValue : finalValue;
              finalValue = this_1.transform(subSource, finalValue, type2, arrayType_1, isSubValueMap, level + 1);
            } else {
              if (subValue === void 0 && this_1.options.exposeDefaultValues) {
                finalValue = newValue[newValueKey];
              } else {
                finalValue = this_1.transform(subSource, subValue, type2, arrayType_1, isSubValueMap, level + 1);
                finalValue = this_1.applyCustomTransformations(finalValue, targetType, transformKey, value, this_1.transformationType);
              }
            }
            if (finalValue !== void 0 || this_1.options.exposeUnsetFields) {
              if (newValue instanceof Map) {
                newValue.set(newValueKey, finalValue);
              } else {
                newValue[newValueKey] = finalValue;
              }
            }
          } else if (this_1.transformationType === TransformationType.CLASS_TO_CLASS) {
            var finalValue = subValue;
            finalValue = this_1.applyCustomTransformations(finalValue, targetType, key2, value, this_1.transformationType);
            if (finalValue !== void 0 || this_1.options.exposeUnsetFields) {
              if (newValue instanceof Map) {
                newValue.set(newValueKey, finalValue);
              } else {
                newValue[newValueKey] = finalValue;
              }
            }
          }
        }, "_loop_1");
        var this_1 = this;
        for (var _i2 = 0, keys_1 = keys; _i2 < keys_1.length; _i2++) {
          var key = keys_1[_i2];
          _loop_1(key);
        }
        if (this.options.enableCircularCheck) {
          this.recursionStack.delete(value);
        }
        return newValue;
      } else {
        return value;
      }
    };
    TransformOperationExecutor2.prototype.applyCustomTransformations = function(value, target, key, obj, transformationType) {
      var _this = this;
      var metadatas = defaultMetadataStorage.findTransformMetadatas(target, key, this.transformationType);
      if (this.options.version !== void 0) {
        metadatas = metadatas.filter(function(metadata3) {
          if (!metadata3.options)
            return true;
          return _this.checkVersion(metadata3.options.since, metadata3.options.until);
        });
      }
      if (this.options.groups && this.options.groups.length) {
        metadatas = metadatas.filter(function(metadata3) {
          if (!metadata3.options)
            return true;
          return _this.checkGroups(metadata3.options.groups);
        });
      } else {
        metadatas = metadatas.filter(function(metadata3) {
          return !metadata3.options || !metadata3.options.groups || !metadata3.options.groups.length;
        });
      }
      metadatas.forEach(function(metadata3) {
        value = metadata3.transformFn({ value, key, obj, type: transformationType, options: _this.options });
      });
      return value;
    };
    TransformOperationExecutor2.prototype.isCircular = function(object) {
      return this.recursionStack.has(object);
    };
    TransformOperationExecutor2.prototype.getReflectedType = function(target, propertyName) {
      if (!target)
        return void 0;
      var meta = defaultMetadataStorage.findTypeMetadata(target, propertyName);
      return meta ? meta.reflectedType : void 0;
    };
    TransformOperationExecutor2.prototype.getKeys = function(target, object, isMap) {
      var _this = this;
      var strategy = defaultMetadataStorage.getStrategy(target);
      if (strategy === "none")
        strategy = this.options.strategy || "exposeAll";
      var keys = [];
      if (strategy === "exposeAll" || isMap) {
        if (object instanceof Map) {
          keys = Array.from(object.keys());
        } else {
          keys = Object.keys(object);
        }
      }
      if (isMap) {
        return keys;
      }
      if (this.options.ignoreDecorators && this.options.excludeExtraneousValues && target) {
        var exposedProperties = defaultMetadataStorage.getExposedProperties(target, this.transformationType);
        var excludedProperties = defaultMetadataStorage.getExcludedProperties(target, this.transformationType);
        keys = __spreadArray(__spreadArray([], exposedProperties, true), excludedProperties, true);
      }
      if (!this.options.ignoreDecorators && target) {
        var exposedProperties = defaultMetadataStorage.getExposedProperties(target, this.transformationType);
        if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {
          exposedProperties = exposedProperties.map(function(key) {
            var exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);
            if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {
              return exposeMetadata.options.name;
            }
            return key;
          });
        }
        if (this.options.excludeExtraneousValues) {
          keys = exposedProperties;
        } else {
          keys = keys.concat(exposedProperties);
        }
        var excludedProperties_1 = defaultMetadataStorage.getExcludedProperties(target, this.transformationType);
        if (excludedProperties_1.length > 0) {
          keys = keys.filter(function(key) {
            return !excludedProperties_1.includes(key);
          });
        }
        if (this.options.version !== void 0) {
          keys = keys.filter(function(key) {
            var exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);
            if (!exposeMetadata || !exposeMetadata.options)
              return true;
            return _this.checkVersion(exposeMetadata.options.since, exposeMetadata.options.until);
          });
        }
        if (this.options.groups && this.options.groups.length) {
          keys = keys.filter(function(key) {
            var exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);
            if (!exposeMetadata || !exposeMetadata.options)
              return true;
            return _this.checkGroups(exposeMetadata.options.groups);
          });
        } else {
          keys = keys.filter(function(key) {
            var exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);
            return !exposeMetadata || !exposeMetadata.options || !exposeMetadata.options.groups || !exposeMetadata.options.groups.length;
          });
        }
      }
      if (this.options.excludePrefixes && this.options.excludePrefixes.length) {
        keys = keys.filter(function(key) {
          return _this.options.excludePrefixes.every(function(prefix2) {
            return key.substr(0, prefix2.length) !== prefix2;
          });
        });
      }
      keys = keys.filter(function(key, index2, self2) {
        return self2.indexOf(key) === index2;
      });
      return keys;
    };
    TransformOperationExecutor2.prototype.checkVersion = function(since, until) {
      var decision = true;
      if (decision && since)
        decision = this.options.version >= since;
      if (decision && until)
        decision = this.options.version < until;
      return decision;
    };
    TransformOperationExecutor2.prototype.checkGroups = function(groups) {
      if (!groups)
        return true;
      return this.options.groups.some(function(optionGroup) {
        return groups.includes(optionGroup);
      });
    };
    return TransformOperationExecutor2;
  }()
);

// node_modules/class-transformer/esm5/constants/default-options.constant.js
var defaultOptions = {
  enableCircularCheck: false,
  enableImplicitConversion: false,
  excludeExtraneousValues: false,
  excludePrefixes: void 0,
  exposeDefaultValues: false,
  exposeUnsetFields: true,
  groups: void 0,
  ignoreDecorators: false,
  strategy: void 0,
  targetMaps: void 0,
  version: void 0
};

// node_modules/class-transformer/esm5/ClassTransformer.js
var __assign = function() {
  __assign = Object.assign || function(t3) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3) if (Object.prototype.hasOwnProperty.call(s3, p3))
        t3[p3] = s3[p3];
    }
    return t3;
  };
  return __assign.apply(this, arguments);
};
var ClassTransformer = (
  /** @class */
  function() {
    function ClassTransformer2() {
    }
    __name(ClassTransformer2, "ClassTransformer");
    ClassTransformer2.prototype.instanceToPlain = function(object, options) {
      var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, __assign(__assign({}, defaultOptions), options));
      return executor.transform(void 0, object, void 0, void 0, void 0, void 0);
    };
    ClassTransformer2.prototype.classToPlainFromExist = function(object, plainObject, options) {
      var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, __assign(__assign({}, defaultOptions), options));
      return executor.transform(plainObject, object, void 0, void 0, void 0, void 0);
    };
    ClassTransformer2.prototype.plainToInstance = function(cls, plain, options) {
      var executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, __assign(__assign({}, defaultOptions), options));
      return executor.transform(void 0, plain, cls, void 0, void 0, void 0);
    };
    ClassTransformer2.prototype.plainToClassFromExist = function(clsObject, plain, options) {
      var executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, __assign(__assign({}, defaultOptions), options));
      return executor.transform(clsObject, plain, void 0, void 0, void 0, void 0);
    };
    ClassTransformer2.prototype.instanceToInstance = function(object, options) {
      var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, __assign(__assign({}, defaultOptions), options));
      return executor.transform(void 0, object, void 0, void 0, void 0, void 0);
    };
    ClassTransformer2.prototype.classToClassFromExist = function(object, fromObject, options) {
      var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, __assign(__assign({}, defaultOptions), options));
      return executor.transform(fromObject, object, void 0, void 0, void 0, void 0);
    };
    ClassTransformer2.prototype.serialize = function(object, options) {
      return JSON.stringify(this.instanceToPlain(object, options));
    };
    ClassTransformer2.prototype.deserialize = function(cls, json, options) {
      var jsonObject = JSON.parse(json);
      return this.plainToInstance(cls, jsonObject, options);
    };
    ClassTransformer2.prototype.deserializeArray = function(cls, json, options) {
      var jsonObject = JSON.parse(json);
      return this.plainToInstance(cls, jsonObject, options);
    };
    return ClassTransformer2;
  }()
);

// node_modules/class-transformer/esm5/decorators/exclude.decorator.js
function Exclude(options) {
  if (options === void 0) {
    options = {};
  }
  return function(object, propertyName) {
    defaultMetadataStorage.addExcludeMetadata({
      target: object instanceof Function ? object : object.constructor,
      propertyName,
      options
    });
  };
}
__name(Exclude, "Exclude");

// node_modules/class-transformer/esm5/decorators/expose.decorator.js
function Expose(options) {
  if (options === void 0) {
    options = {};
  }
  return function(object, propertyName) {
    defaultMetadataStorage.addExposeMetadata({
      target: object instanceof Function ? object : object.constructor,
      propertyName,
      options
    });
  };
}
__name(Expose, "Expose");

// node_modules/class-transformer/esm5/decorators/transform.decorator.js
function Transform(transformFn, options) {
  if (options === void 0) {
    options = {};
  }
  return function(target, propertyName) {
    defaultMetadataStorage.addTransformMetadata({
      target: target.constructor,
      propertyName,
      transformFn,
      options
    });
  };
}
__name(Transform, "Transform");

// node_modules/class-transformer/esm5/decorators/type.decorator.js
function Type(typeFunction, options) {
  if (options === void 0) {
    options = {};
  }
  return function(target, propertyName) {
    var reflectedType = Reflect.getMetadata("design:type", target, propertyName);
    defaultMetadataStorage.addTypeMetadata({
      target: target.constructor,
      propertyName,
      reflectedType,
      typeFunction,
      options
    });
  };
}
__name(Type, "Type");

// node_modules/class-transformer/esm5/index.js
var classTransformer = new ClassTransformer();
function instanceToPlain(object, options) {
  return classTransformer.instanceToPlain(object, options);
}
__name(instanceToPlain, "instanceToPlain");
function plainToInstance(cls, plain, options) {
  return classTransformer.plainToInstance(cls, plain, options);
}
__name(plainToInstance, "plainToInstance");

// packages/utils/src/decorators.ts
function Exception(constructor) {
  const name2 = constructor.name;
  Object.defineProperties(constructor.prototype, {
    name: {
      value: name2
    },
    [Symbol.toStringTag]: {
      get: /* @__PURE__ */ __name(function() {
        return this.name;
      }, "get")
    },
    toJSON: {
      value: /* @__PURE__ */ __name(function() {
        return {};
      }, "value")
    }
  });
}
__name(Exception, "Exception");
var CASE = {
  kebab: kebabCase,
  snake: snakeCase
};
function Case(letterCase) {
  function decorator(target, key) {
    const metadatas = defaultMetadataStorage.getExposedMetadatas(
      target instanceof Function ? target : target.constructor
    );
    if (key !== void 0) {
      const name2 = CASE[letterCase](key);
      const metadata3 = metadatas.find((data) => data.propertyName === key);
      if (metadata3 === void 0) {
        Expose({ name: name2 })(target, key);
      } else {
        metadata3.options.name = name2;
      }
    } else {
      for (const metadata3 of metadatas) {
        if (metadata3.propertyName !== void 0) {
          metadata3.options.name = CASE[letterCase](metadata3.propertyName);
        }
      }
    }
  }
  __name(decorator, "decorator");
  return decorator;
}
__name(Case, "Case");
function FromEnv(key) {
  return Transform(({ value }) => {
    return env2[key] ?? (value === void 0 ? void 0 : assertString(value));
  });
}
__name(FromEnv, "FromEnv");
var AsPath = Transform(({ value }) => {
  return value === void 0 ? void 0 : path.normalize(assertString(value));
});
function assertString(value) {
  if (typeof value === "string") {
    return value;
  } else if (value instanceof String) {
    return value.valueOf();
  }
  const error = new TypeError("Unexpectedly non-string passed");
  error["input"] = value;
  throw error;
}
__name(assertString, "assertString");

// packages/utils/src/exec.ts
var import_exec = __toESM(require_exec(), 1);
import { Buffer as Buffer2 } from "node:buffer";

// packages/utils/src/types.ts
function isIterable(value) {
  return typeof value?.[Symbol.iterator] === "function";
}
__name(isIterable, "isIterable");

// packages/utils/src/exec.ts
var ExecResult = class {
  static {
    __name(this, "ExecResult");
  }
  command;
  exitCode;
  stderr;
  stdout;
  constructor(config) {
    this.command = config.command;
    if (config.args !== void 0) {
      this.args = config.args;
    }
    this.exitCode = config.exitCode;
    this.stderr = config.stderr;
    this.stdout = config.stdout;
    Object.defineProperty(this, "silenced", {
      value: config.silenced ?? false
    });
  }
  check() {
    if (this.exitCode !== 0) {
      throw new ExecError(this);
    }
  }
};
var ExecError = class extends Error {
  constructor(config) {
    const { command, exitCode, stderr: stderr2, silenced = false } = config;
    super(`\`${command}\` exited with status ${exitCode}: ${stderr2}`);
    Object.assign(this, config);
    Object.defineProperty(this, "stderr", { enumerable: false });
    if (!silenced) {
      Object.defineProperty(this, "stdout", { enumerable: false });
    }
  }
};
__name(ExecError, "ExecError");
ExecError = __decorateClass([
  Exception
], ExecError);
async function exec(command, args, options) {
  const { stdin, ...rest } = options ?? {};
  const execOptions = { ...rest, ignoreReturnCode: true };
  if (stdin !== void 0) {
    execOptions.input = z2(stdin).with(null, () => Buffer2.alloc(0)).with(N2.string, (input) => Buffer2.from(input)).with(N2.instanceOf(Buffer2), (input) => input).exhaustive();
  }
  const outputs = await (0, import_exec.getExecOutput)(command, args, execOptions);
  const result = new ExecResult({
    command,
    args,
    ...outputs,
    silenced: options?.silent
  });
  if (options?.ignoreReturnCode !== true) {
    result.check();
  }
  return result;
}
__name(exec, "exec");

// packages/utils/src/fs.ts
var import_io = __toESM(require_io(), 1);
var import_tool_cache = __toESM(require_tool_cache(), 1);
import * as fs2 from "node:fs/promises";
import { tmpdir as osTmpdir } from "node:os";
import * as path2 from "node:path";
import { env as env3 } from "node:process";
async function extract(archive, kind) {
  switch (kind) {
    case "tgz": {
      return await (0, import_tool_cache.extractTar)(archive, void 0, ["xz", "--strip=1"]);
    }
    case "zip": {
      const parent = await (0, import_tool_cache.extractZip)(archive);
      try {
        return await uniqueChild(parent);
      } catch (cause) {
        throw new Error("Unable to locate unzipped subdirectory", { cause });
      }
    }
  }
}
__name(extract, "extract");
async function uniqueChild(parent) {
  const [child, ...rest] = await fs2.readdir(parent);
  if (child === void 0) {
    throw new Error(`${parent} has no entries`);
  }
  if (rest.length > 0) {
    throw new Error(`${parent} has multiple entries`);
  }
  return path2.join(parent, child);
}
__name(uniqueChild, "uniqueChild");
function tmpdir() {
  return env3.RUNNER_TEMP ?? osTmpdir();
}
__name(tmpdir, "tmpdir");
async function mkdtemp2() {
  return {
    path: await fs2.mkdtemp(path2.join(tmpdir(), `${id_default["kebab-case"]}-`)),
    async [Symbol.asyncDispose]() {
      await (0, import_io.rmRF)(this.path);
    }
  };
}
__name(mkdtemp2, "mkdtemp");

// packages/texlive/src/install-tl/cli.ts
var import_semver2 = __toESM(require_semver2(), 1);

// packages/texlive/src/errors.ts
var TLError = class extends Error {
  constructor(msg, options) {
    super(msg, options);
    if (options?.code !== void 0) {
      this.code = options.code;
    }
    if (options?.version !== void 0) {
      this.version = options.version;
    }
    if (options?.repository !== void 0) {
      this.repository = options.repository.toString();
    }
    if (options?.remoteVersion !== void 0) {
      this.remoteVersion = options.remoteVersion;
    }
  }
};
__name(TLError, "TLError");
TLError = __decorateClass([
  Exception
], TLError);

// packages/texlive/src/install-tl/errors.ts
var import_deline = __toESM(require_deline(), 1);
var InstallTLError = class extends TLError {
};
__name(InstallTLError, "InstallTLError");
InstallTLError = __decorateClass([
  Exception
], InstallTLError);
((InstallTLError2) => {
  const CODES = [
    "INCOMPATIBLE_REPOSITORY_VERSION",
    "UNEXPECTED_VERSION",
    "FAILED_TO_DOWNLOAD"
  ];
  InstallTLError2.Code = Object.fromEntries(
    CODES.map((code) => [code, code])
  );
})(InstallTLError || (InstallTLError = {}));
((InstallTLError2) => {
  const MSG = "repository being accessed are not compatible";
  const RE3 = new RegExp("^\\s*repository:\\s*(?<remote>20\\d{2})", "mv");
  function checkCompatibility(output, options) {
    if (output.exitCode !== 0 && output.stderr.includes(MSG)) {
      const remoteVersion = RE3.exec(output.stderr)?.groups?.["remote"];
      const error = new InstallTLError2(
        "The repository is not compatible with this version of install-tl",
        {
          ...options,
          code: InstallTLError2.Code.INCOMPATIBLE_REPOSITORY_VERSION,
          remoteVersion
        }
      );
      error[symbols_exports.note] = import_deline.default`
        The CTAN mirrors may not have completed synchronisation
        against a release of new version of TeX Live.
        Please try re-running the workflow after a while.
      `;
      throw error;
    }
  }
  InstallTLError2.checkCompatibility = checkCompatibility;
  __name(checkCompatibility, "checkCompatibility");
})(InstallTLError || (InstallTLError = {}));

// packages/texlive/src/tlpkg/errors.ts
import * as path3 from "node:path";
var import_deline2 = __toESM(require_deline(), 1);
var TlpdbError = class extends TLError {
};
__name(TlpdbError, "TlpdbError");
TlpdbError = __decorateClass([
  Exception
], TlpdbError);
((TlpdbError2) => {
  const CODES = [
    "PACKAGE_CHECKSUM_MISMATCH",
    "FAILED_TO_INITIALIZE",
    "TLPDB_CHECKSUM_MISMATCH"
  ];
  TlpdbError2.Code = Object.fromEntries(
    CODES.map((code) => [code, code])
  );
})(TlpdbError || (TlpdbError = {}));
((TlpdbError2) => {
  const RE3 = new RegExp(": checksums differ for (.+):$", "gmv");
  function checkPackageChecksumMismatch(output, options) {
    const packages = Array.from(
      output.stderr.matchAll(RE3),
      ([, found]) => path3.basename(found, ".tar.xz")
    );
    if (packages.length > 0) {
      const error = new TlpdbError2(
        "Checksums of some packages did not match",
        { ...options, code: TlpdbError2.Code.PACKAGE_CHECKSUM_MISMATCH }
      );
      error["packages"] = [...new Set(packages.sort())];
      error[symbols_exports.note] = import_deline2.default`
        The CTAN mirror may be in the process of synchronisation.
        Please try re-running the workflow after a while.
      `;
      throw error;
    }
  }
  TlpdbError2.checkPackageChecksumMismatch = checkPackageChecksumMismatch;
  __name(checkPackageChecksumMismatch, "checkPackageChecksumMismatch");
})(TlpdbError || (TlpdbError = {}));
((TlpdbError2) => {
  const RE3 = new RegExp("TLPDB::from_file could not (?:initialize|get texlive\\.tlpdb) from: (.*)$", "mv");
  function checkRepositoryStatus(output, options) {
    if (output.exitCode !== 0) {
      const url2 = RE3.exec(output.stderr)?.[1];
      if (url2 !== void 0) {
        const error = new TlpdbError2(
          "Repository initialization failed",
          { ...options, code: TlpdbError2.Code.FAILED_TO_INITIALIZE }
        );
        error[symbols_exports.note] = import_deline2.default`
          The repository may not have been synchronized yet.
          Please try re-running the workflow after a while.
        `;
        error["stderr"] = output.stderr;
        error["url"] = url2;
        throw error;
      }
    }
  }
  TlpdbError2.checkRepositoryStatus = checkRepositoryStatus;
  __name(checkRepositoryStatus, "checkRepositoryStatus");
})(TlpdbError || (TlpdbError = {}));
((TlpdbError2) => {
  const RE3 = new RegExp("from (.+): digest disagree", "v");
  function checkRepositoryHealth(output, options) {
    const url2 = RE3.exec(output.stderr)?.[1];
    if (url2 !== void 0) {
      const error = new TlpdbError2(
        "Repository initialization failed",
        { ...options, code: TlpdbError2.Code.TLPDB_CHECKSUM_MISMATCH }
      );
      error[symbols_exports.note] = import_deline2.default`
        The repository seems to have some problem.
        Please try re-running the workflow after a while.
      `;
      error["stderr"] = output.stderr;
      error["url"] = url2;
      throw error;
    }
  }
  TlpdbError2.checkRepositoryHealth = checkRepositoryHealth;
  __name(checkRepositoryHealth, "checkRepositoryHealth");
})(TlpdbError || (TlpdbError = {}));

// packages/texlive/src/tlpkg/patch.ts
import { readFile, writeFile } from "node:fs/promises";
import { EOL as EOL3 } from "node:os";
import * as path5 from "node:path";

// packages/data/src/index.ts
import * as os3 from "node:os";

// packages/data/node_modules/minimatch/dist/esm/index.js
var import_brace_expansion = __toESM(require_brace_expansion(), 1);

// packages/data/node_modules/minimatch/dist/esm/assert-valid-pattern.js
var MAX_PATTERN_LENGTH = 1024 * 64;
var assertValidPattern = /* @__PURE__ */ __name((pattern) => {
  if (typeof pattern !== "string") {
    throw new TypeError("invalid pattern");
  }
  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError("pattern is too long");
  }
}, "assertValidPattern");

// packages/data/node_modules/minimatch/dist/esm/brace-expressions.js
var posixClasses = {
  "[:alnum:]": ["\\p{L}\\p{Nl}\\p{Nd}", true],
  "[:alpha:]": ["\\p{L}\\p{Nl}", true],
  "[:ascii:]": ["\\x00-\\x7f", false],
  "[:blank:]": ["\\p{Zs}\\t", true],
  "[:cntrl:]": ["\\p{Cc}", true],
  "[:digit:]": ["\\p{Nd}", true],
  "[:graph:]": ["\\p{Z}\\p{C}", true, true],
  "[:lower:]": ["\\p{Ll}", true],
  "[:print:]": ["\\p{C}", true],
  "[:punct:]": ["\\p{P}", true],
  "[:space:]": ["\\p{Z}\\t\\r\\n\\v\\f", true],
  "[:upper:]": ["\\p{Lu}", true],
  "[:word:]": ["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}", true],
  "[:xdigit:]": ["A-Fa-f0-9", false]
};
var braceEscape = /* @__PURE__ */ __name((s3) => s3.replace(/[[\]\\-]/g, "\\$&"), "braceEscape");
var regexpEscape = /* @__PURE__ */ __name((s3) => s3.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), "regexpEscape");
var rangesToString = /* @__PURE__ */ __name((ranges) => ranges.join(""), "rangesToString");
var parseClass = /* @__PURE__ */ __name((glob, position2) => {
  const pos = position2;
  if (glob.charAt(pos) !== "[") {
    throw new Error("not in a brace expression");
  }
  const ranges = [];
  const negs = [];
  let i3 = pos + 1;
  let sawStart = false;
  let uflag = false;
  let escaping = false;
  let negate = false;
  let endPos = pos;
  let rangeStart = "";
  WHILE: while (i3 < glob.length) {
    const c3 = glob.charAt(i3);
    if ((c3 === "!" || c3 === "^") && i3 === pos + 1) {
      negate = true;
      i3++;
      continue;
    }
    if (c3 === "]" && sawStart && !escaping) {
      endPos = i3 + 1;
      break;
    }
    sawStart = true;
    if (c3 === "\\") {
      if (!escaping) {
        escaping = true;
        i3++;
        continue;
      }
    }
    if (c3 === "[" && !escaping) {
      for (const [cls, [unip, u3, neg]] of Object.entries(posixClasses)) {
        if (glob.startsWith(cls, i3)) {
          if (rangeStart) {
            return ["$.", false, glob.length - pos, true];
          }
          i3 += cls.length;
          if (neg)
            negs.push(unip);
          else
            ranges.push(unip);
          uflag = uflag || u3;
          continue WHILE;
        }
      }
    }
    escaping = false;
    if (rangeStart) {
      if (c3 > rangeStart) {
        ranges.push(braceEscape(rangeStart) + "-" + braceEscape(c3));
      } else if (c3 === rangeStart) {
        ranges.push(braceEscape(c3));
      }
      rangeStart = "";
      i3++;
      continue;
    }
    if (glob.startsWith("-]", i3 + 1)) {
      ranges.push(braceEscape(c3 + "-"));
      i3 += 2;
      continue;
    }
    if (glob.startsWith("-", i3 + 1)) {
      rangeStart = c3;
      i3 += 2;
      continue;
    }
    ranges.push(braceEscape(c3));
    i3++;
  }
  if (endPos < i3) {
    return ["", false, 0, false];
  }
  if (!ranges.length && !negs.length) {
    return ["$.", false, glob.length - pos, true];
  }
  if (negs.length === 0 && ranges.length === 1 && /^\\?.$/.test(ranges[0]) && !negate) {
    const r3 = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];
    return [regexpEscape(r3), false, endPos - pos, false];
  }
  const sranges = "[" + (negate ? "^" : "") + rangesToString(ranges) + "]";
  const snegs = "[" + (negate ? "" : "^") + rangesToString(negs) + "]";
  const comb = ranges.length && negs.length ? "(" + sranges + "|" + snegs + ")" : ranges.length ? sranges : snegs;
  return [comb, uflag, endPos - pos, true];
}, "parseClass");

// packages/data/node_modules/minimatch/dist/esm/unescape.js
var unescape = /* @__PURE__ */ __name((s3, { windowsPathsNoEscape = false } = {}) => {
  return windowsPathsNoEscape ? s3.replace(/\[([^\/\\])\]/g, "$1") : s3.replace(/((?!\\).|^)\[([^\/\\])\]/g, "$1$2").replace(/\\([^\/])/g, "$1");
}, "unescape");

// packages/data/node_modules/minimatch/dist/esm/ast.js
var types = /* @__PURE__ */ new Set(["!", "?", "+", "*", "@"]);
var isExtglobType = /* @__PURE__ */ __name((c3) => types.has(c3), "isExtglobType");
var startNoTraversal = "(?!(?:^|/)\\.\\.?(?:$|/))";
var startNoDot = "(?!\\.)";
var addPatternStart = /* @__PURE__ */ new Set(["[", "."]);
var justDots = /* @__PURE__ */ new Set(["..", "."]);
var reSpecials = new Set("().*{}+?[]^$\\!");
var regExpEscape = /* @__PURE__ */ __name((s3) => s3.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), "regExpEscape");
var qmark = "[^/]";
var star = qmark + "*?";
var starNoEmpty = qmark + "+?";
var AST = class _AST {
  static {
    __name(this, "AST");
  }
  type;
  #root;
  #hasMagic;
  #uflag = false;
  #parts = [];
  #parent;
  #parentIndex;
  #negs;
  #filledNegs = false;
  #options;
  #toString;
  // set to true if it's an extglob with no children
  // (which really means one child of '')
  #emptyExt = false;
  constructor(type2, parent, options = {}) {
    this.type = type2;
    if (type2)
      this.#hasMagic = true;
    this.#parent = parent;
    this.#root = this.#parent ? this.#parent.#root : this;
    this.#options = this.#root === this ? options : this.#root.#options;
    this.#negs = this.#root === this ? [] : this.#root.#negs;
    if (type2 === "!" && !this.#root.#filledNegs)
      this.#negs.push(this);
    this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;
  }
  get hasMagic() {
    if (this.#hasMagic !== void 0)
      return this.#hasMagic;
    for (const p3 of this.#parts) {
      if (typeof p3 === "string")
        continue;
      if (p3.type || p3.hasMagic)
        return this.#hasMagic = true;
    }
    return this.#hasMagic;
  }
  // reconstructs the pattern
  toString() {
    if (this.#toString !== void 0)
      return this.#toString;
    if (!this.type) {
      return this.#toString = this.#parts.map((p3) => String(p3)).join("");
    } else {
      return this.#toString = this.type + "(" + this.#parts.map((p3) => String(p3)).join("|") + ")";
    }
  }
  #fillNegs() {
    if (this !== this.#root)
      throw new Error("should only call on root");
    if (this.#filledNegs)
      return this;
    this.toString();
    this.#filledNegs = true;
    let n3;
    while (n3 = this.#negs.pop()) {
      if (n3.type !== "!")
        continue;
      let p3 = n3;
      let pp = p3.#parent;
      while (pp) {
        for (let i3 = p3.#parentIndex + 1; !pp.type && i3 < pp.#parts.length; i3++) {
          for (const part of n3.#parts) {
            if (typeof part === "string") {
              throw new Error("string part in extglob AST??");
            }
            part.copyIn(pp.#parts[i3]);
          }
        }
        p3 = pp;
        pp = p3.#parent;
      }
    }
    return this;
  }
  push(...parts) {
    for (const p3 of parts) {
      if (p3 === "")
        continue;
      if (typeof p3 !== "string" && !(p3 instanceof _AST && p3.#parent === this)) {
        throw new Error("invalid part: " + p3);
      }
      this.#parts.push(p3);
    }
  }
  toJSON() {
    const ret = this.type === null ? this.#parts.slice().map((p3) => typeof p3 === "string" ? p3 : p3.toJSON()) : [this.type, ...this.#parts.map((p3) => p3.toJSON())];
    if (this.isStart() && !this.type)
      ret.unshift([]);
    if (this.isEnd() && (this === this.#root || this.#root.#filledNegs && this.#parent?.type === "!")) {
      ret.push({});
    }
    return ret;
  }
  isStart() {
    if (this.#root === this)
      return true;
    if (!this.#parent?.isStart())
      return false;
    if (this.#parentIndex === 0)
      return true;
    const p3 = this.#parent;
    for (let i3 = 0; i3 < this.#parentIndex; i3++) {
      const pp = p3.#parts[i3];
      if (!(pp instanceof _AST && pp.type === "!")) {
        return false;
      }
    }
    return true;
  }
  isEnd() {
    if (this.#root === this)
      return true;
    if (this.#parent?.type === "!")
      return true;
    if (!this.#parent?.isEnd())
      return false;
    if (!this.type)
      return this.#parent?.isEnd();
    const pl = this.#parent ? this.#parent.#parts.length : 0;
    return this.#parentIndex === pl - 1;
  }
  copyIn(part) {
    if (typeof part === "string")
      this.push(part);
    else
      this.push(part.clone(this));
  }
  clone(parent) {
    const c3 = new _AST(this.type, parent);
    for (const p3 of this.#parts) {
      c3.copyIn(p3);
    }
    return c3;
  }
  static #parseAST(str, ast, pos, opt) {
    let escaping = false;
    let inBrace = false;
    let braceStart = -1;
    let braceNeg = false;
    if (ast.type === null) {
      let i4 = pos;
      let acc2 = "";
      while (i4 < str.length) {
        const c3 = str.charAt(i4++);
        if (escaping || c3 === "\\") {
          escaping = !escaping;
          acc2 += c3;
          continue;
        }
        if (inBrace) {
          if (i4 === braceStart + 1) {
            if (c3 === "^" || c3 === "!") {
              braceNeg = true;
            }
          } else if (c3 === "]" && !(i4 === braceStart + 2 && braceNeg)) {
            inBrace = false;
          }
          acc2 += c3;
          continue;
        } else if (c3 === "[") {
          inBrace = true;
          braceStart = i4;
          braceNeg = false;
          acc2 += c3;
          continue;
        }
        if (!opt.noext && isExtglobType(c3) && str.charAt(i4) === "(") {
          ast.push(acc2);
          acc2 = "";
          const ext2 = new _AST(c3, ast);
          i4 = _AST.#parseAST(str, ext2, i4, opt);
          ast.push(ext2);
          continue;
        }
        acc2 += c3;
      }
      ast.push(acc2);
      return i4;
    }
    let i3 = pos + 1;
    let part = new _AST(null, ast);
    const parts = [];
    let acc = "";
    while (i3 < str.length) {
      const c3 = str.charAt(i3++);
      if (escaping || c3 === "\\") {
        escaping = !escaping;
        acc += c3;
        continue;
      }
      if (inBrace) {
        if (i3 === braceStart + 1) {
          if (c3 === "^" || c3 === "!") {
            braceNeg = true;
          }
        } else if (c3 === "]" && !(i3 === braceStart + 2 && braceNeg)) {
          inBrace = false;
        }
        acc += c3;
        continue;
      } else if (c3 === "[") {
        inBrace = true;
        braceStart = i3;
        braceNeg = false;
        acc += c3;
        continue;
      }
      if (isExtglobType(c3) && str.charAt(i3) === "(") {
        part.push(acc);
        acc = "";
        const ext2 = new _AST(c3, part);
        part.push(ext2);
        i3 = _AST.#parseAST(str, ext2, i3, opt);
        continue;
      }
      if (c3 === "|") {
        part.push(acc);
        acc = "";
        parts.push(part);
        part = new _AST(null, ast);
        continue;
      }
      if (c3 === ")") {
        if (acc === "" && ast.#parts.length === 0) {
          ast.#emptyExt = true;
        }
        part.push(acc);
        acc = "";
        ast.push(...parts, part);
        return i3;
      }
      acc += c3;
    }
    ast.type = null;
    ast.#hasMagic = void 0;
    ast.#parts = [str.substring(pos - 1)];
    return i3;
  }
  static fromGlob(pattern, options = {}) {
    const ast = new _AST(null, void 0, options);
    _AST.#parseAST(pattern, ast, 0, options);
    return ast;
  }
  // returns the regular expression if there's magic, or the unescaped
  // string if not.
  toMMPattern() {
    if (this !== this.#root)
      return this.#root.toMMPattern();
    const glob = this.toString();
    const [re2, body2, hasMagic, uflag] = this.toRegExpSource();
    const anyMagic = hasMagic || this.#hasMagic || this.#options.nocase && !this.#options.nocaseMagicOnly && glob.toUpperCase() !== glob.toLowerCase();
    if (!anyMagic) {
      return body2;
    }
    const flags = (this.#options.nocase ? "i" : "") + (uflag ? "u" : "");
    return Object.assign(new RegExp(`^${re2}$`, flags), {
      _src: re2,
      _glob: glob
    });
  }
  get options() {
    return this.#options;
  }
  // returns the string match, the regexp source, whether there's magic
  // in the regexp (so a regular expression is required) and whether or
  // not the uflag is needed for the regular expression (for posix classes)
  // TODO: instead of injecting the start/end at this point, just return
  // the BODY of the regexp, along with the start/end portions suitable
  // for binding the start/end in either a joined full-path makeRe context
  // (where we bind to (^|/), or a standalone matchPart context (where
  // we bind to ^, and not /).  Otherwise slashes get duped!
  //
  // In part-matching mode, the start is:
  // - if not isStart: nothing
  // - if traversal possible, but not allowed: ^(?!\.\.?$)
  // - if dots allowed or not possible: ^
  // - if dots possible and not allowed: ^(?!\.)
  // end is:
  // - if not isEnd(): nothing
  // - else: $
  //
  // In full-path matching mode, we put the slash at the START of the
  // pattern, so start is:
  // - if first pattern: same as part-matching mode
  // - if not isStart(): nothing
  // - if traversal possible, but not allowed: /(?!\.\.?(?:$|/))
  // - if dots allowed or not possible: /
  // - if dots possible and not allowed: /(?!\.)
  // end is:
  // - if last pattern, same as part-matching mode
  // - else nothing
  //
  // Always put the (?:$|/) on negated tails, though, because that has to be
  // there to bind the end of the negated pattern portion, and it's easier to
  // just stick it in now rather than try to inject it later in the middle of
  // the pattern.
  //
  // We can just always return the same end, and leave it up to the caller
  // to know whether it's going to be used joined or in parts.
  // And, if the start is adjusted slightly, can do the same there:
  // - if not isStart: nothing
  // - if traversal possible, but not allowed: (?:/|^)(?!\.\.?$)
  // - if dots allowed or not possible: (?:/|^)
  // - if dots possible and not allowed: (?:/|^)(?!\.)
  //
  // But it's better to have a simpler binding without a conditional, for
  // performance, so probably better to return both start options.
  //
  // Then the caller just ignores the end if it's not the first pattern,
  // and the start always gets applied.
  //
  // But that's always going to be $ if it's the ending pattern, or nothing,
  // so the caller can just attach $ at the end of the pattern when building.
  //
  // So the todo is:
  // - better detect what kind of start is needed
  // - return both flavors of starting pattern
  // - attach $ at the end of the pattern when creating the actual RegExp
  //
  // Ah, but wait, no, that all only applies to the root when the first pattern
  // is not an extglob. If the first pattern IS an extglob, then we need all
  // that dot prevention biz to live in the extglob portions, because eg
  // +(*|.x*) can match .xy but not .yx.
  //
  // So, return the two flavors if it's #root and the first child is not an
  // AST, otherwise leave it to the child AST to handle it, and there,
  // use the (?:^|/) style of start binding.
  //
  // Even simplified further:
  // - Since the start for a join is eg /(?!\.) and the start for a part
  // is ^(?!\.), we can just prepend (?!\.) to the pattern (either root
  // or start or whatever) and prepend ^ or / at the Regexp construction.
  toRegExpSource(allowDot) {
    const dot = allowDot ?? !!this.#options.dot;
    if (this.#root === this)
      this.#fillNegs();
    if (!this.type) {
      const noEmpty = this.isStart() && this.isEnd();
      const src = this.#parts.map((p3) => {
        const [re2, _3, hasMagic, uflag] = typeof p3 === "string" ? _AST.#parseGlob(p3, this.#hasMagic, noEmpty) : p3.toRegExpSource(allowDot);
        this.#hasMagic = this.#hasMagic || hasMagic;
        this.#uflag = this.#uflag || uflag;
        return re2;
      }).join("");
      let start2 = "";
      if (this.isStart()) {
        if (typeof this.#parts[0] === "string") {
          const dotTravAllowed = this.#parts.length === 1 && justDots.has(this.#parts[0]);
          if (!dotTravAllowed) {
            const aps = addPatternStart;
            const needNoTrav = (
              // dots are allowed, and the pattern starts with [ or .
              dot && aps.has(src.charAt(0)) || // the pattern starts with \., and then [ or .
              src.startsWith("\\.") && aps.has(src.charAt(2)) || // the pattern starts with \.\., and then [ or .
              src.startsWith("\\.\\.") && aps.has(src.charAt(4))
            );
            const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));
            start2 = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : "";
          }
        }
      }
      let end = "";
      if (this.isEnd() && this.#root.#filledNegs && this.#parent?.type === "!") {
        end = "(?:$|\\/)";
      }
      const final2 = start2 + src + end;
      return [
        final2,
        unescape(src),
        this.#hasMagic = !!this.#hasMagic,
        this.#uflag
      ];
    }
    const repeated = this.type === "*" || this.type === "+";
    const start = this.type === "!" ? "(?:(?!(?:" : "(?:";
    let body2 = this.#partsToRegExp(dot);
    if (this.isStart() && this.isEnd() && !body2 && this.type !== "!") {
      const s3 = this.toString();
      this.#parts = [s3];
      this.type = null;
      this.#hasMagic = void 0;
      return [s3, unescape(this.toString()), false, false];
    }
    let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot ? "" : this.#partsToRegExp(true);
    if (bodyDotAllowed === body2) {
      bodyDotAllowed = "";
    }
    if (bodyDotAllowed) {
      body2 = `(?:${body2})(?:${bodyDotAllowed})*?`;
    }
    let final = "";
    if (this.type === "!" && this.#emptyExt) {
      final = (this.isStart() && !dot ? startNoDot : "") + starNoEmpty;
    } else {
      const close = this.type === "!" ? (
        // !() must match something,but !(x) can match ''
        "))" + (this.isStart() && !dot && !allowDot ? startNoDot : "") + star + ")"
      ) : this.type === "@" ? ")" : this.type === "?" ? ")?" : this.type === "+" && bodyDotAllowed ? ")" : this.type === "*" && bodyDotAllowed ? `)?` : `)${this.type}`;
      final = start + body2 + close;
    }
    return [
      final,
      unescape(body2),
      this.#hasMagic = !!this.#hasMagic,
      this.#uflag
    ];
  }
  #partsToRegExp(dot) {
    return this.#parts.map((p3) => {
      if (typeof p3 === "string") {
        throw new Error("string type in extglob ast??");
      }
      const [re2, _3, _hasMagic, uflag] = p3.toRegExpSource(dot);
      this.#uflag = this.#uflag || uflag;
      return re2;
    }).filter((p3) => !(this.isStart() && this.isEnd()) || !!p3).join("|");
  }
  static #parseGlob(glob, hasMagic, noEmpty = false) {
    let escaping = false;
    let re2 = "";
    let uflag = false;
    for (let i3 = 0; i3 < glob.length; i3++) {
      const c3 = glob.charAt(i3);
      if (escaping) {
        escaping = false;
        re2 += (reSpecials.has(c3) ? "\\" : "") + c3;
        continue;
      }
      if (c3 === "\\") {
        if (i3 === glob.length - 1) {
          re2 += "\\\\";
        } else {
          escaping = true;
        }
        continue;
      }
      if (c3 === "[") {
        const [src, needUflag, consumed, magic] = parseClass(glob, i3);
        if (consumed) {
          re2 += src;
          uflag = uflag || needUflag;
          i3 += consumed - 1;
          hasMagic = hasMagic || magic;
          continue;
        }
      }
      if (c3 === "*") {
        if (noEmpty && glob === "*")
          re2 += starNoEmpty;
        else
          re2 += star;
        hasMagic = true;
        continue;
      }
      if (c3 === "?") {
        re2 += qmark;
        hasMagic = true;
        continue;
      }
      re2 += regExpEscape(c3);
    }
    return [re2, unescape(glob), !!hasMagic, uflag];
  }
};

// packages/data/node_modules/minimatch/dist/esm/escape.js
var escape = /* @__PURE__ */ __name((s3, { windowsPathsNoEscape = false } = {}) => {
  return windowsPathsNoEscape ? s3.replace(/[?*()[\]]/g, "[$&]") : s3.replace(/[?*()[\]\\]/g, "\\$&");
}, "escape");

// packages/data/node_modules/minimatch/dist/esm/index.js
var minimatch = /* @__PURE__ */ __name((p3, pattern, options = {}) => {
  assertValidPattern(pattern);
  if (!options.nocomment && pattern.charAt(0) === "#") {
    return false;
  }
  return new Minimatch(pattern, options).match(p3);
}, "minimatch");
var starDotExtRE = /^\*+([^+@!?\*\[\(]*)$/;
var starDotExtTest = /* @__PURE__ */ __name((ext2) => (f3) => !f3.startsWith(".") && f3.endsWith(ext2), "starDotExtTest");
var starDotExtTestDot = /* @__PURE__ */ __name((ext2) => (f3) => f3.endsWith(ext2), "starDotExtTestDot");
var starDotExtTestNocase = /* @__PURE__ */ __name((ext2) => {
  ext2 = ext2.toLowerCase();
  return (f3) => !f3.startsWith(".") && f3.toLowerCase().endsWith(ext2);
}, "starDotExtTestNocase");
var starDotExtTestNocaseDot = /* @__PURE__ */ __name((ext2) => {
  ext2 = ext2.toLowerCase();
  return (f3) => f3.toLowerCase().endsWith(ext2);
}, "starDotExtTestNocaseDot");
var starDotStarRE = /^\*+\.\*+$/;
var starDotStarTest = /* @__PURE__ */ __name((f3) => !f3.startsWith(".") && f3.includes("."), "starDotStarTest");
var starDotStarTestDot = /* @__PURE__ */ __name((f3) => f3 !== "." && f3 !== ".." && f3.includes("."), "starDotStarTestDot");
var dotStarRE = /^\.\*+$/;
var dotStarTest = /* @__PURE__ */ __name((f3) => f3 !== "." && f3 !== ".." && f3.startsWith("."), "dotStarTest");
var starRE = /^\*+$/;
var starTest = /* @__PURE__ */ __name((f3) => f3.length !== 0 && !f3.startsWith("."), "starTest");
var starTestDot = /* @__PURE__ */ __name((f3) => f3.length !== 0 && f3 !== "." && f3 !== "..", "starTestDot");
var qmarksRE = /^\?+([^+@!?\*\[\(]*)?$/;
var qmarksTestNocase = /* @__PURE__ */ __name(([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExt([$0]);
  if (!ext2)
    return noext;
  ext2 = ext2.toLowerCase();
  return (f3) => noext(f3) && f3.toLowerCase().endsWith(ext2);
}, "qmarksTestNocase");
var qmarksTestNocaseDot = /* @__PURE__ */ __name(([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExtDot([$0]);
  if (!ext2)
    return noext;
  ext2 = ext2.toLowerCase();
  return (f3) => noext(f3) && f3.toLowerCase().endsWith(ext2);
}, "qmarksTestNocaseDot");
var qmarksTestDot = /* @__PURE__ */ __name(([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExtDot([$0]);
  return !ext2 ? noext : (f3) => noext(f3) && f3.endsWith(ext2);
}, "qmarksTestDot");
var qmarksTest = /* @__PURE__ */ __name(([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExt([$0]);
  return !ext2 ? noext : (f3) => noext(f3) && f3.endsWith(ext2);
}, "qmarksTest");
var qmarksTestNoExt = /* @__PURE__ */ __name(([$0]) => {
  const len = $0.length;
  return (f3) => f3.length === len && !f3.startsWith(".");
}, "qmarksTestNoExt");
var qmarksTestNoExtDot = /* @__PURE__ */ __name(([$0]) => {
  const len = $0.length;
  return (f3) => f3.length === len && f3 !== "." && f3 !== "..";
}, "qmarksTestNoExtDot");
var defaultPlatform = typeof process === "object" && process ? typeof process.env === "object" && process.env && process.env.__MINIMATCH_TESTING_PLATFORM__ || process.platform : "posix";
var path4 = {
  win32: { sep: "\\" },
  posix: { sep: "/" }
};
var sep = defaultPlatform === "win32" ? path4.win32.sep : path4.posix.sep;
minimatch.sep = sep;
var GLOBSTAR = Symbol("globstar **");
minimatch.GLOBSTAR = GLOBSTAR;
var qmark2 = "[^/]";
var star2 = qmark2 + "*?";
var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
var filter = /* @__PURE__ */ __name((pattern, options = {}) => (p3) => minimatch(p3, pattern, options), "filter");
minimatch.filter = filter;
var ext = /* @__PURE__ */ __name((a3, b3 = {}) => Object.assign({}, a3, b3), "ext");
var defaults = /* @__PURE__ */ __name((def) => {
  if (!def || typeof def !== "object" || !Object.keys(def).length) {
    return minimatch;
  }
  const orig = minimatch;
  const m3 = /* @__PURE__ */ __name((p3, pattern, options = {}) => orig(p3, pattern, ext(def, options)), "m");
  return Object.assign(m3, {
    Minimatch: class Minimatch extends orig.Minimatch {
      static {
        __name(this, "Minimatch");
      }
      constructor(pattern, options = {}) {
        super(pattern, ext(def, options));
      }
      static defaults(options) {
        return orig.defaults(ext(def, options)).Minimatch;
      }
    },
    AST: class AST extends orig.AST {
      static {
        __name(this, "AST");
      }
      /* c8 ignore start */
      constructor(type2, parent, options = {}) {
        super(type2, parent, ext(def, options));
      }
      /* c8 ignore stop */
      static fromGlob(pattern, options = {}) {
        return orig.AST.fromGlob(pattern, ext(def, options));
      }
    },
    unescape: /* @__PURE__ */ __name((s3, options = {}) => orig.unescape(s3, ext(def, options)), "unescape"),
    escape: /* @__PURE__ */ __name((s3, options = {}) => orig.escape(s3, ext(def, options)), "escape"),
    filter: /* @__PURE__ */ __name((pattern, options = {}) => orig.filter(pattern, ext(def, options)), "filter"),
    defaults: /* @__PURE__ */ __name((options) => orig.defaults(ext(def, options)), "defaults"),
    makeRe: /* @__PURE__ */ __name((pattern, options = {}) => orig.makeRe(pattern, ext(def, options)), "makeRe"),
    braceExpand: /* @__PURE__ */ __name((pattern, options = {}) => orig.braceExpand(pattern, ext(def, options)), "braceExpand"),
    match: /* @__PURE__ */ __name((list3, pattern, options = {}) => orig.match(list3, pattern, ext(def, options)), "match"),
    sep: orig.sep,
    GLOBSTAR
  });
}, "defaults");
minimatch.defaults = defaults;
var braceExpand = /* @__PURE__ */ __name((pattern, options = {}) => {
  assertValidPattern(pattern);
  if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    return [pattern];
  }
  return (0, import_brace_expansion.default)(pattern);
}, "braceExpand");
minimatch.braceExpand = braceExpand;
var makeRe = /* @__PURE__ */ __name((pattern, options = {}) => new Minimatch(pattern, options).makeRe(), "makeRe");
minimatch.makeRe = makeRe;
var match = /* @__PURE__ */ __name((list3, pattern, options = {}) => {
  const mm = new Minimatch(pattern, options);
  list3 = list3.filter((f3) => mm.match(f3));
  if (mm.options.nonull && !list3.length) {
    list3.push(pattern);
  }
  return list3;
}, "match");
minimatch.match = match;
var globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/;
var regExpEscape2 = /* @__PURE__ */ __name((s3) => s3.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), "regExpEscape");
var Minimatch = class {
  static {
    __name(this, "Minimatch");
  }
  options;
  set;
  pattern;
  windowsPathsNoEscape;
  nonegate;
  negate;
  comment;
  empty;
  preserveMultipleSlashes;
  partial;
  globSet;
  globParts;
  nocase;
  isWindows;
  platform;
  windowsNoMagicRoot;
  regexp;
  constructor(pattern, options = {}) {
    assertValidPattern(pattern);
    options = options || {};
    this.options = options;
    this.pattern = pattern;
    this.platform = options.platform || defaultPlatform;
    this.isWindows = this.platform === "win32";
    this.windowsPathsNoEscape = !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;
    if (this.windowsPathsNoEscape) {
      this.pattern = this.pattern.replace(/\\/g, "/");
    }
    this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;
    this.regexp = null;
    this.negate = false;
    this.nonegate = !!options.nonegate;
    this.comment = false;
    this.empty = false;
    this.partial = !!options.partial;
    this.nocase = !!this.options.nocase;
    this.windowsNoMagicRoot = options.windowsNoMagicRoot !== void 0 ? options.windowsNoMagicRoot : !!(this.isWindows && this.nocase);
    this.globSet = [];
    this.globParts = [];
    this.set = [];
    this.make();
  }
  hasMagic() {
    if (this.options.magicalBraces && this.set.length > 1) {
      return true;
    }
    for (const pattern of this.set) {
      for (const part of pattern) {
        if (typeof part !== "string")
          return true;
      }
    }
    return false;
  }
  debug(..._3) {
  }
  make() {
    const pattern = this.pattern;
    const options = this.options;
    if (!options.nocomment && pattern.charAt(0) === "#") {
      this.comment = true;
      return;
    }
    if (!pattern) {
      this.empty = true;
      return;
    }
    this.parseNegate();
    this.globSet = [...new Set(this.braceExpand())];
    if (options.debug) {
      this.debug = (...args) => console.error(...args);
    }
    this.debug(this.pattern, this.globSet);
    const rawGlobParts = this.globSet.map((s3) => this.slashSplit(s3));
    this.globParts = this.preprocess(rawGlobParts);
    this.debug(this.pattern, this.globParts);
    let set2 = this.globParts.map((s3, _3, __) => {
      if (this.isWindows && this.windowsNoMagicRoot) {
        const isUNC = s3[0] === "" && s3[1] === "" && (s3[2] === "?" || !globMagic.test(s3[2])) && !globMagic.test(s3[3]);
        const isDrive = /^[a-z]:/i.test(s3[0]);
        if (isUNC) {
          return [...s3.slice(0, 4), ...s3.slice(4).map((ss2) => this.parse(ss2))];
        } else if (isDrive) {
          return [s3[0], ...s3.slice(1).map((ss2) => this.parse(ss2))];
        }
      }
      return s3.map((ss2) => this.parse(ss2));
    });
    this.debug(this.pattern, set2);
    this.set = set2.filter((s3) => s3.indexOf(false) === -1);
    if (this.isWindows) {
      for (let i3 = 0; i3 < this.set.length; i3++) {
        const p3 = this.set[i3];
        if (p3[0] === "" && p3[1] === "" && this.globParts[i3][2] === "?" && typeof p3[3] === "string" && /^[a-z]:$/i.test(p3[3])) {
          p3[2] = "?";
        }
      }
    }
    this.debug(this.pattern, this.set);
  }
  // various transforms to equivalent pattern sets that are
  // faster to process in a filesystem walk.  The goal is to
  // eliminate what we can, and push all ** patterns as far
  // to the right as possible, even if it increases the number
  // of patterns that we have to process.
  preprocess(globParts) {
    if (this.options.noglobstar) {
      for (let i3 = 0; i3 < globParts.length; i3++) {
        for (let j3 = 0; j3 < globParts[i3].length; j3++) {
          if (globParts[i3][j3] === "**") {
            globParts[i3][j3] = "*";
          }
        }
      }
    }
    const { optimizationLevel = 1 } = this.options;
    if (optimizationLevel >= 2) {
      globParts = this.firstPhasePreProcess(globParts);
      globParts = this.secondPhasePreProcess(globParts);
    } else if (optimizationLevel >= 1) {
      globParts = this.levelOneOptimize(globParts);
    } else {
      globParts = this.adjascentGlobstarOptimize(globParts);
    }
    return globParts;
  }
  // just get rid of adjascent ** portions
  adjascentGlobstarOptimize(globParts) {
    return globParts.map((parts) => {
      let gs2 = -1;
      while (-1 !== (gs2 = parts.indexOf("**", gs2 + 1))) {
        let i3 = gs2;
        while (parts[i3 + 1] === "**") {
          i3++;
        }
        if (i3 !== gs2) {
          parts.splice(gs2, i3 - gs2);
        }
      }
      return parts;
    });
  }
  // get rid of adjascent ** and resolve .. portions
  levelOneOptimize(globParts) {
    return globParts.map((parts) => {
      parts = parts.reduce((set2, part) => {
        const prev = set2[set2.length - 1];
        if (part === "**" && prev === "**") {
          return set2;
        }
        if (part === "..") {
          if (prev && prev !== ".." && prev !== "." && prev !== "**") {
            set2.pop();
            return set2;
          }
        }
        set2.push(part);
        return set2;
      }, []);
      return parts.length === 0 ? [""] : parts;
    });
  }
  levelTwoFileOptimize(parts) {
    if (!Array.isArray(parts)) {
      parts = this.slashSplit(parts);
    }
    let didSomething = false;
    do {
      didSomething = false;
      if (!this.preserveMultipleSlashes) {
        for (let i3 = 1; i3 < parts.length - 1; i3++) {
          const p3 = parts[i3];
          if (i3 === 1 && p3 === "" && parts[0] === "")
            continue;
          if (p3 === "." || p3 === "") {
            didSomething = true;
            parts.splice(i3, 1);
            i3--;
          }
        }
        if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
          didSomething = true;
          parts.pop();
        }
      }
      let dd = 0;
      while (-1 !== (dd = parts.indexOf("..", dd + 1))) {
        const p3 = parts[dd - 1];
        if (p3 && p3 !== "." && p3 !== ".." && p3 !== "**") {
          didSomething = true;
          parts.splice(dd - 1, 2);
          dd -= 2;
        }
      }
    } while (didSomething);
    return parts.length === 0 ? [""] : parts;
  }
  // First phase: single-pattern processing
  // <pre> is 1 or more portions
  // <rest> is 1 or more portions
  // <p> is any portion other than ., .., '', or **
  // <e> is . or ''
  //
  // **/.. is *brutal* for filesystem walking performance, because
  // it effectively resets the recursive walk each time it occurs,
  // and ** cannot be reduced out by a .. pattern part like a regexp
  // or most strings (other than .., ., and '') can be.
  //
  // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
  // <pre>/<e>/<rest> -> <pre>/<rest>
  // <pre>/<p>/../<rest> -> <pre>/<rest>
  // **/**/<rest> -> **/<rest>
  //
  // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow
  // this WOULD be allowed if ** did follow symlinks, or * didn't
  firstPhasePreProcess(globParts) {
    let didSomething = false;
    do {
      didSomething = false;
      for (let parts of globParts) {
        let gs2 = -1;
        while (-1 !== (gs2 = parts.indexOf("**", gs2 + 1))) {
          let gss = gs2;
          while (parts[gss + 1] === "**") {
            gss++;
          }
          if (gss > gs2) {
            parts.splice(gs2 + 1, gss - gs2);
          }
          let next2 = parts[gs2 + 1];
          const p3 = parts[gs2 + 2];
          const p22 = parts[gs2 + 3];
          if (next2 !== "..")
            continue;
          if (!p3 || p3 === "." || p3 === ".." || !p22 || p22 === "." || p22 === "..") {
            continue;
          }
          didSomething = true;
          parts.splice(gs2, 1);
          const other = parts.slice(0);
          other[gs2] = "**";
          globParts.push(other);
          gs2--;
        }
        if (!this.preserveMultipleSlashes) {
          for (let i3 = 1; i3 < parts.length - 1; i3++) {
            const p3 = parts[i3];
            if (i3 === 1 && p3 === "" && parts[0] === "")
              continue;
            if (p3 === "." || p3 === "") {
              didSomething = true;
              parts.splice(i3, 1);
              i3--;
            }
          }
          if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
            didSomething = true;
            parts.pop();
          }
        }
        let dd = 0;
        while (-1 !== (dd = parts.indexOf("..", dd + 1))) {
          const p3 = parts[dd - 1];
          if (p3 && p3 !== "." && p3 !== ".." && p3 !== "**") {
            didSomething = true;
            const needDot = dd === 1 && parts[dd + 1] === "**";
            const splin = needDot ? ["."] : [];
            parts.splice(dd - 1, 2, ...splin);
            if (parts.length === 0)
              parts.push("");
            dd -= 2;
          }
        }
      }
    } while (didSomething);
    return globParts;
  }
  // second phase: multi-pattern dedupes
  // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>
  // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>
  // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>
  //
  // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>
  // ^-- not valid because ** doens't follow symlinks
  secondPhasePreProcess(globParts) {
    for (let i3 = 0; i3 < globParts.length - 1; i3++) {
      for (let j3 = i3 + 1; j3 < globParts.length; j3++) {
        const matched = this.partsMatch(globParts[i3], globParts[j3], !this.preserveMultipleSlashes);
        if (matched) {
          globParts[i3] = [];
          globParts[j3] = matched;
          break;
        }
      }
    }
    return globParts.filter((gs2) => gs2.length);
  }
  partsMatch(a3, b3, emptyGSMatch = false) {
    let ai2 = 0;
    let bi2 = 0;
    let result = [];
    let which = "";
    while (ai2 < a3.length && bi2 < b3.length) {
      if (a3[ai2] === b3[bi2]) {
        result.push(which === "b" ? b3[bi2] : a3[ai2]);
        ai2++;
        bi2++;
      } else if (emptyGSMatch && a3[ai2] === "**" && b3[bi2] === a3[ai2 + 1]) {
        result.push(a3[ai2]);
        ai2++;
      } else if (emptyGSMatch && b3[bi2] === "**" && a3[ai2] === b3[bi2 + 1]) {
        result.push(b3[bi2]);
        bi2++;
      } else if (a3[ai2] === "*" && b3[bi2] && (this.options.dot || !b3[bi2].startsWith(".")) && b3[bi2] !== "**") {
        if (which === "b")
          return false;
        which = "a";
        result.push(a3[ai2]);
        ai2++;
        bi2++;
      } else if (b3[bi2] === "*" && a3[ai2] && (this.options.dot || !a3[ai2].startsWith(".")) && a3[ai2] !== "**") {
        if (which === "a")
          return false;
        which = "b";
        result.push(b3[bi2]);
        ai2++;
        bi2++;
      } else {
        return false;
      }
    }
    return a3.length === b3.length && result;
  }
  parseNegate() {
    if (this.nonegate)
      return;
    const pattern = this.pattern;
    let negate = false;
    let negateOffset = 0;
    for (let i3 = 0; i3 < pattern.length && pattern.charAt(i3) === "!"; i3++) {
      negate = !negate;
      negateOffset++;
    }
    if (negateOffset)
      this.pattern = pattern.slice(negateOffset);
    this.negate = negate;
  }
  // set partial to true to test if, for example,
  // "/a/b" matches the start of "/*/b/*/d"
  // Partial means, if you run out of file before you run
  // out of pattern, then that's fine, as long as all
  // the parts match.
  matchOne(file, pattern, partial = false) {
    const options = this.options;
    if (this.isWindows) {
      const fileDrive = typeof file[0] === "string" && /^[a-z]:$/i.test(file[0]);
      const fileUNC = !fileDrive && file[0] === "" && file[1] === "" && file[2] === "?" && /^[a-z]:$/i.test(file[3]);
      const patternDrive = typeof pattern[0] === "string" && /^[a-z]:$/i.test(pattern[0]);
      const patternUNC = !patternDrive && pattern[0] === "" && pattern[1] === "" && pattern[2] === "?" && typeof pattern[3] === "string" && /^[a-z]:$/i.test(pattern[3]);
      const fdi = fileUNC ? 3 : fileDrive ? 0 : void 0;
      const pdi = patternUNC ? 3 : patternDrive ? 0 : void 0;
      if (typeof fdi === "number" && typeof pdi === "number") {
        const [fd, pd] = [file[fdi], pattern[pdi]];
        if (fd.toLowerCase() === pd.toLowerCase()) {
          pattern[pdi] = fd;
          if (pdi > fdi) {
            pattern = pattern.slice(pdi);
          } else if (fdi > pdi) {
            file = file.slice(fdi);
          }
        }
      }
    }
    const { optimizationLevel = 1 } = this.options;
    if (optimizationLevel >= 2) {
      file = this.levelTwoFileOptimize(file);
    }
    this.debug("matchOne", this, { file, pattern });
    this.debug("matchOne", file.length, pattern.length);
    for (var fi2 = 0, pi2 = 0, fl = file.length, pl = pattern.length; fi2 < fl && pi2 < pl; fi2++, pi2++) {
      this.debug("matchOne loop");
      var p3 = pattern[pi2];
      var f3 = file[fi2];
      this.debug(pattern, p3, f3);
      if (p3 === false) {
        return false;
      }
      if (p3 === GLOBSTAR) {
        this.debug("GLOBSTAR", [pattern, p3, f3]);
        var fr2 = fi2;
        var pr2 = pi2 + 1;
        if (pr2 === pl) {
          this.debug("** at the end");
          for (; fi2 < fl; fi2++) {
            if (file[fi2] === "." || file[fi2] === ".." || !options.dot && file[fi2].charAt(0) === ".")
              return false;
          }
          return true;
        }
        while (fr2 < fl) {
          var swallowee = file[fr2];
          this.debug("\nglobstar while", file, fr2, pattern, pr2, swallowee);
          if (this.matchOne(file.slice(fr2), pattern.slice(pr2), partial)) {
            this.debug("globstar found match!", fr2, fl, swallowee);
            return true;
          } else {
            if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
              this.debug("dot detected!", file, fr2, pattern, pr2);
              break;
            }
            this.debug("globstar swallow a segment, and continue");
            fr2++;
          }
        }
        if (partial) {
          this.debug("\n>>> no match, partial?", file, fr2, pattern, pr2);
          if (fr2 === fl) {
            return true;
          }
        }
        return false;
      }
      let hit;
      if (typeof p3 === "string") {
        hit = f3 === p3;
        this.debug("string match", p3, f3, hit);
      } else {
        hit = p3.test(f3);
        this.debug("pattern match", p3, f3, hit);
      }
      if (!hit)
        return false;
    }
    if (fi2 === fl && pi2 === pl) {
      return true;
    } else if (fi2 === fl) {
      return partial;
    } else if (pi2 === pl) {
      return fi2 === fl - 1 && file[fi2] === "";
    } else {
      throw new Error("wtf?");
    }
  }
  braceExpand() {
    return braceExpand(this.pattern, this.options);
  }
  parse(pattern) {
    assertValidPattern(pattern);
    const options = this.options;
    if (pattern === "**")
      return GLOBSTAR;
    if (pattern === "")
      return "";
    let m3;
    let fastTest = null;
    if (m3 = pattern.match(starRE)) {
      fastTest = options.dot ? starTestDot : starTest;
    } else if (m3 = pattern.match(starDotExtRE)) {
      fastTest = (options.nocase ? options.dot ? starDotExtTestNocaseDot : starDotExtTestNocase : options.dot ? starDotExtTestDot : starDotExtTest)(m3[1]);
    } else if (m3 = pattern.match(qmarksRE)) {
      fastTest = (options.nocase ? options.dot ? qmarksTestNocaseDot : qmarksTestNocase : options.dot ? qmarksTestDot : qmarksTest)(m3);
    } else if (m3 = pattern.match(starDotStarRE)) {
      fastTest = options.dot ? starDotStarTestDot : starDotStarTest;
    } else if (m3 = pattern.match(dotStarRE)) {
      fastTest = dotStarTest;
    }
    const re2 = AST.fromGlob(pattern, this.options).toMMPattern();
    if (fastTest && typeof re2 === "object") {
      Reflect.defineProperty(re2, "test", { value: fastTest });
    }
    return re2;
  }
  makeRe() {
    if (this.regexp || this.regexp === false)
      return this.regexp;
    const set2 = this.set;
    if (!set2.length) {
      this.regexp = false;
      return this.regexp;
    }
    const options = this.options;
    const twoStar = options.noglobstar ? star2 : options.dot ? twoStarDot : twoStarNoDot;
    const flags = new Set(options.nocase ? ["i"] : []);
    let re2 = set2.map((pattern) => {
      const pp = pattern.map((p3) => {
        if (p3 instanceof RegExp) {
          for (const f3 of p3.flags.split(""))
            flags.add(f3);
        }
        return typeof p3 === "string" ? regExpEscape2(p3) : p3 === GLOBSTAR ? GLOBSTAR : p3._src;
      });
      pp.forEach((p3, i3) => {
        const next2 = pp[i3 + 1];
        const prev = pp[i3 - 1];
        if (p3 !== GLOBSTAR || prev === GLOBSTAR) {
          return;
        }
        if (prev === void 0) {
          if (next2 !== void 0 && next2 !== GLOBSTAR) {
            pp[i3 + 1] = "(?:\\/|" + twoStar + "\\/)?" + next2;
          } else {
            pp[i3] = twoStar;
          }
        } else if (next2 === void 0) {
          pp[i3 - 1] = prev + "(?:\\/|" + twoStar + ")?";
        } else if (next2 !== GLOBSTAR) {
          pp[i3 - 1] = prev + "(?:\\/|\\/" + twoStar + "\\/)" + next2;
          pp[i3 + 1] = GLOBSTAR;
        }
      });
      return pp.filter((p3) => p3 !== GLOBSTAR).join("/");
    }).join("|");
    const [open, close] = set2.length > 1 ? ["(?:", ")"] : ["", ""];
    re2 = "^" + open + re2 + close + "$";
    if (this.negate)
      re2 = "^(?!" + re2 + ").+$";
    try {
      this.regexp = new RegExp(re2, [...flags].join(""));
    } catch (ex) {
      this.regexp = false;
    }
    return this.regexp;
  }
  slashSplit(p3) {
    if (this.preserveMultipleSlashes) {
      return p3.split("/");
    } else if (this.isWindows && /^\/\/[^\/]+/.test(p3)) {
      return ["", ...p3.split(/\/+/)];
    } else {
      return p3.split(/\/+/);
    }
  }
  match(f3, partial = this.partial) {
    this.debug("match", f3, this.pattern);
    if (this.comment) {
      return false;
    }
    if (this.empty) {
      return f3 === "";
    }
    if (f3 === "/" && partial) {
      return true;
    }
    const options = this.options;
    if (this.isWindows) {
      f3 = f3.split("\\").join("/");
    }
    const ff = this.slashSplit(f3);
    this.debug(this.pattern, "split", ff);
    const set2 = this.set;
    this.debug(this.pattern, "set", set2);
    let filename = ff[ff.length - 1];
    if (!filename) {
      for (let i3 = ff.length - 2; !filename && i3 >= 0; i3--) {
        filename = ff[i3];
      }
    }
    for (let i3 = 0; i3 < set2.length; i3++) {
      const pattern = set2[i3];
      let file = ff;
      if (options.matchBase && pattern.length === 1) {
        file = [filename];
      }
      const hit = this.matchOne(file, pattern, partial);
      if (hit) {
        if (options.flipNegate) {
          return true;
        }
        return !this.negate;
      }
    }
    if (options.flipNegate) {
      return false;
    }
    return this.negate;
  }
  static defaults(def) {
    return minimatch.defaults(def).Minimatch;
  }
};
minimatch.AST = AST;
minimatch.Minimatch = Minimatch;
minimatch.escape = escape;
minimatch.unescape = unescape;

// packages/data/src/index.ts
var import_coerce = __toESM(require_coerce(), 1);
var import_satisfies = __toESM(require_satisfies(), 1);
var semverOptions = {
  includePrerelease: true
};
var minimatchOptions = {
  platform: "linux"
};
function satisfies(target, options) {
  let result = true;
  if ("platform" in target) {
    result &&= minimatch(
      options?.platform ?? os3.platform(),
      target.platform,
      minimatchOptions
    );
  }
  if ("arch" in target) {
    result &&= minimatch(
      options?.arch ?? os3.arch(),
      target.arch,
      minimatchOptions
    );
  }
  if ("versions" in target && options?.version !== void 0) {
    const v3 = (0, import_coerce.default)(options.version, semverOptions);
    if (v3 === null) {
      const error = new TypeError("Invalid version string");
      error["value"] = options.version;
      throw error;
    }
    result &&= (0, import_satisfies.default)(v3, target.versions, semverOptions);
  }
  return result;
}
__name(satisfies, "satisfies");
function match2(patterns, options) {
  for (const entry of Object.entries(patterns)) {
    if (satisfies(entry[1], options)) {
      return entry;
    }
  }
  const error = new Error("None of the patterns matched");
  const { platform: platform8 = os3.platform(), arch: arch5 = os3.arch(), version: version3 } = options ?? {};
  Object.assign(error, { patterns, platform: platform8, arch: arch5, version: version3 });
  throw error;
}
__name(match2, "match");

// packages/data/data/tlpkg-patches.json
var patches = [
  {
    description: "Fixes a syntax error",
    versions: ">=2009 <2011",
    file: "tlpkg/TeXLive/TLWinGoo.pm",
    changes: [
      {
        from: "foreach \\$p qw\\((.*)\\)",
        to: "foreach $$p (qw($1))"
      }
    ]
  },
  {
    description: "Defines Code Page 65001 as an alias for UTF-8",
    platform: "win32",
    versions: "2015",
    file: "tlpkg/tlperl/lib/Encode/Alias.pm",
    changes: [
      {
        from: "# utf8 is blessed :\\)",
        to: `define_alias( qr/\\bcp65001$$/i => '"utf-8-strict"' );`
      }
    ]
  },
  {
    description: "Makes it possible to use `\\` as a directory separator",
    platform: "win32",
    versions: "<2019",
    file: "tlpkg/TeXLive/TLUtils.pm",
    changes: [
      {
        from: "split \\(/\\\\//, \\$tree\\)",
        to: "split (/[\\/\\\\]/, $$tree)"
      }
    ]
  },
  {
    description: "Adds support for macOS 11 or later",
    platform: "darwin",
    versions: ">=2017 <2020",
    file: "tlpkg/TeXLive/TLUtils.pm",
    changes: [
      {
        from: "\\$os_major != 10",
        to: "$$os_major < 10"
      },
      {
        from: "\\$os_minor >= \\$mactex_darwin",
        to: "$$os_major > 10 || $&"
      }
    ]
  }
];

// packages/texlive/src/version.ts
var import_semver = __toESM(require_semver2(), 1);
var Version;
((Version2) => {
  const RE3 = new RegExp("^199[6-9]|20[0-2]\\d$", "v");
  function isVersion(spec) {
    return typeof spec === "string" && RE3.test(spec);
  }
  Version2.isVersion = isVersion;
  __name(isVersion, "isVersion");
  function parse3(spec) {
    if (!isVersion(spec)) {
      throw new TypeError(`\`${spec}\` is not a valid version spec`);
    }
    return spec;
  }
  Version2.parse = parse3;
  __name(parse3, "parse");
  function coerce2(version3) {
    return `${version3}.0.0`;
  }
  __name(coerce2, "coerce");
  function satisfies2(version3, range2) {
    return (0, import_semver.satisfies)(coerce2(version3), range2);
  }
  Version2.satisfies = satisfies2;
  __name(satisfies2, "satisfies");
})(Version || (Version = {}));

// packages/texlive/src/tlpkg/patch.ts
async function patch(options) {
  const ps2 = patches.filter((p3) => satisfies(p3, options));
  if (ps2.length > 0) {
    info2("Applying patches");
    const lines = await Promise.all(ps2.map((p3) => apply(p3, options.directory)));
    info2({ linePrefix: styles_default.blue`|` + " " }, lines.flat().join(EOL3));
  }
}
__name(patch, "patch");
async function apply({ description, file, changes }, directory) {
  const diff = /* @__PURE__ */ __name(async (modified) => {
    try {
      const { exitCode, stdout: stdout2, stderr: stderr2 } = await exec("git", [
        "diff",
        "--no-index",
        `--color=${hasColors() ? "always" : "never"}`,
        "--",
        file,
        "-"
      ], {
        stdin: modified,
        cwd: directory,
        silent: true,
        ignoreReturnCode: true
      });
      if (exitCode === 1) {
        return [styles_default.blue(description), stdout2.trimEnd()];
      }
      if (exitCode > 1) {
        debug2("git-diff exited with %d: %s", exitCode, stderr2);
      }
    } catch (error) {
      debug2({ error }, "Failed to exec git-diff");
    }
    return [];
  }, "diff");
  const target = path5.join(directory, file);
  let content = await readFile(target, "utf8");
  for (const { from, to: to2 } of changes) {
    content = content.replace(new RegExp(from, "v"), to2);
  }
  const lines = await diff(content);
  await writeFile(target, content);
  return lines;
}
__name(apply, "apply");

// packages/texlive/src/tlpkg/tlpdb.ts
var tlpdb_exports = {};
__export(tlpdb_exports, {
  parse: () => parse
});
var TAG = {
  TLPOBJ: "TLPOBJ",
  TLConfig: "TLConfig",
  TLOptions: "TLOptions"
};
var RE = {
  version: new RegExp("^catalogue-version\\s+(\\S.*)$", "mv"),
  revision: new RegExp("^revision\\s+(\\d+)\\s*$", "mv"),
  location: new RegExp("^depend\\s+(?:opt_)?location:(.+)$", "mv"),
  release: new RegExp("^depend\\s+release\\/(.+)$", "mv")
};
function* parse(db) {
  for (const [name2, data] of entries(db)) {
    if (name2 === "00texlive-installation.config" || name2 === "00texlive.installation") {
      if (name2 === "00texlive-installation.config") {
        yield [TAG.TLConfig, { release: "2008" }];
      }
      const location = RE.location.exec(data)?.[1];
      if (location !== void 0) {
        yield [TAG.TLOptions, { location }];
      }
    } else if (name2 === "00texlive.config") {
      const release2 = RE.release.exec(data)?.[1];
      if (release2 !== void 0) {
        yield [TAG.TLConfig, { release: release2 }];
      }
    } else if (!name2.startsWith("00texlive")) {
      const version3 = RE.version.exec(data)?.[1]?.trimEnd();
      const revision = RE.revision.exec(data)?.[1] ?? "";
      yield [TAG.TLPOBJ, { name: name2, revision, cataloguedata: { version: version3 } }];
    }
  }
}
__name(parse, "parse");
function* entries(db) {
  const iter = db.replaceAll(new RegExp("\\\\\\r?\\n", "gv"), "").replaceAll(new RegExp("#.*", "gv"), "").split(new RegExp("^name\\s(.*)$", "mv")).values();
  iter.next();
  for (const name2 of iter) {
    const data = iter.next().value;
    yield [name2.trimEnd(), data ?? ""];
  }
}
__name(entries, "entries");

// packages/texlive/src/tlpkg/util.ts
import * as path6 from "node:path";
async function makeLocalSkeleton(texmflocal, options) {
  await exec("perl", [
    `-I${path6.join(options.TEXDIR, "tlpkg")}`,
    "-mTeXLive::TLUtils=make_local_skeleton",
    "-e",
    "make_local_skeleton shift",
    texmflocal
  ]);
}
__name(makeLocalSkeleton, "makeLocalSkeleton");

// packages/texlive/src/install-tl/cli.ts
var InstallTL = class {
  constructor(directory, version3) {
    this.directory = directory;
    this.version = version3;
  }
  static {
    __name(this, "InstallTL");
  }
  async run(options) {
    const { profile, repository } = options;
    const installTL = path7.format({
      dir: this.directory,
      base: executableName(this.version)
    });
    await exec(installTL, ["-version"], { stdin: null });
    const result = await exec(
      installTL,
      await Array.fromAsync(commandArgs(options)),
      { stdin: null, ignoreReturnCode: true }
    );
    const errorOptions = { version: this.version, repository };
    InstallTLError.checkCompatibility(result, errorOptions);
    TlpdbError.checkRepositoryStatus(result, errorOptions);
    TlpdbError.checkRepositoryHealth(result, errorOptions);
    TlpdbError.checkPackageChecksumMismatch(result, errorOptions);
    try {
      result.check();
    } catch (cause) {
      throw new InstallTLError("Failed to install TeX Live", {
        ...errorOptions,
        cause
      });
    }
    await patch({ directory: this.directory, version: profile.version });
  }
};
var supportVersions = {
  options: {
    ["-repository"]: new import_semver2.Range(">=2009"),
    ["-no-continue"]: new import_semver2.Range(">=2022"),
    ["-no-interaction"]: new import_semver2.Range(">=2023")
  },
  protocol: {
    /**
     * @remarks
     * Versions prior to 2017 does not support HTTPS, and
     * version 2017 supports HTTPS but does not work properly.
     */
    ["https:"]: new import_semver2.Range(">=2018")
  }
};
async function* commandArgs(options) {
  const version3 = options.profile.version;
  for (const option of ["-no-continue", "-no-interaction"]) {
    if (Version.satisfies(version3, supportVersions.options[option])) {
      yield option;
    }
  }
  yield* ["-profile", await options.profile.open()];
  const repository = new URL(options.repository.href);
  if (repository.protocol === "https:" && !Version.satisfies(version3, supportVersions.protocol["https:"])) {
    repository.protocol = "http:";
  }
  yield* [
    Version.satisfies(version3, supportVersions.options["-repository"]) ? "-repository" : "-location",
    repository.href
  ];
}
__name(commandArgs, "commandArgs");
async function acquire(options) {
  const { version: version3, repository } = options;
  if (version3 !== void 0) {
    const dir2 = restoreCache(version3);
    if (dir2 !== void 0) {
      return new InstallTL(dir2, version3);
    }
  }
  const dir = await download(repository);
  const remoteVersion = await checkVersion(dir);
  await saveCache(dir, remoteVersion);
  if (version3 !== void 0 && version3 !== remoteVersion) {
    throw new InstallTLError(
      `Unexpected install-tl version: ${remoteVersion}`,
      { repository, version: version3, remoteVersion }
    );
  }
  return new InstallTL(dir, remoteVersion);
}
__name(acquire, "acquire");
var RELEASE_TEXT_FILE = "release-texlive.txt";
var RE2 = new RegExp("^TeX Live .+ version (20\\d{2})", "v");
async function checkVersion(dir) {
  const opts = {
    code: InstallTLError.Code.UNEXPECTED_VERSION
  };
  try {
    const releaseTxt = path7.format({ dir, name: RELEASE_TEXT_FILE });
    opts.remoteVersion = RE2.exec(await readFile2(releaseTxt, "utf8"))?.[1];
    return Version.parse(opts.remoteVersion);
  } catch (cause) {
    opts.cause = cause;
  }
  throw new InstallTLError(
    `Unexpected install-tl version: ${opts.remoteVersion ?? "unknown"}`,
    opts
  );
}
__name(checkVersion, "checkVersion");
function restoreCache(version3) {
  const executable = executableName(version3);
  try {
    const dir = (0, import_tool_cache2.find)(executable, version3);
    if (dir !== "") {
      info2("Found in tool cache: %s", dir);
      return dir;
    }
  } catch (error) {
    info2({ error }, "Failed to restore %s", executable);
  }
  return void 0;
}
__name(restoreCache, "restoreCache");
async function download(repository) {
  const errorOpts = {
    repository,
    code: InstallTLError.Code.FAILED_TO_DOWNLOAD
  };
  if (repository.protocol === "ftp:") {
    throw new InstallTLError(
      "Download from FTP repositories is currently not supported",
      errorOpts
    );
  }
  const archive = archiveName();
  const url2 = new URL(archive, repository);
  info2("Downloading %s from %s", archive, url2.href);
  let archivePath;
  try {
    archivePath = await (0, import_tool_cache2.downloadTool)(url2.href);
  } catch (cause) {
    const error = new InstallTLError("Failed to download install-tl", {
      ...errorOpts,
      cause
    });
    throw error;
  }
  info2("Extracting install-tl from %s", archivePath);
  return await extract(
    archivePath,
    platform3() === "win32" ? "zip" : "tgz"
  );
}
__name(download, "download");
async function saveCache(directory, version3) {
  await patch({ directory, version: version3 });
  const executable = executableName(version3);
  try {
    info2("Adding to tool cache");
    await (0, import_tool_cache2.cacheDir)(directory, executable, version3);
  } catch (error) {
    info2({ error }, "Failed to cache %s", executable);
  }
}
__name(saveCache, "saveCache");
function executableName(version3) {
  if (platform3() !== "win32") {
    return "install-tl";
  } else if (version3 < "2013") {
    return "install-tl.bat";
  } else {
    return "install-tl-windows.bat";
  }
}
__name(executableName, "executableName");
function archiveName() {
  return platform3() === "win32" ? "install-tl.zip" : "install-tl-unx.tar.gz";
}
__name(archiveName, "archiveName");

// packages/texlive/src/install-tl/profile.ts
import { writeFile as writeFile2 } from "node:fs/promises";
import { arch as arch2, platform as platform4 } from "node:os";
import * as path9 from "node:path";

// node_modules/ts-mixer/dist/esm/index.js
var copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {
  const props = Object.getOwnPropertyDescriptors(src);
  for (let prop of exclude)
    delete props[prop];
  Object.defineProperties(dest, props);
}, "copyProps");
var protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {
  const proto = Object.getPrototypeOf(obj);
  if (proto === null)
    return currentChain;
  return protoChain(proto, [...currentChain, proto]);
}, "protoChain");
var nearestCommonProto = /* @__PURE__ */ __name((...objs) => {
  if (objs.length === 0)
    return void 0;
  let commonProto = void 0;
  const protoChains = objs.map((obj) => protoChain(obj));
  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {
    const protos = protoChains.map((protoChain2) => protoChain2.pop());
    const potentialCommonProto = protos[0];
    if (protos.every((proto) => proto === potentialCommonProto))
      commonProto = potentialCommonProto;
    else
      break;
  }
  return commonProto;
}, "nearestCommonProto");
var hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {
  var _a4;
  const base = (_a4 = nearestCommonProto(...ingredients)) !== null && _a4 !== void 0 ? _a4 : Object.prototype;
  const mixedProto = Object.create(base);
  const visitedProtos = protoChain(base);
  for (let prototype of ingredients) {
    let protos = protoChain(prototype);
    for (let i3 = protos.length - 1; i3 >= 0; i3--) {
      let newProto = protos[i3];
      if (visitedProtos.indexOf(newProto) === -1) {
        copyProps(mixedProto, newProto, ["constructor", ...exclude]);
        visitedProtos.push(newProto);
      }
    }
  }
  mixedProto.constructor = constructor;
  return mixedProto;
}, "hardMixProtos");
var unique = /* @__PURE__ */ __name((arr) => arr.filter((e3, i3) => arr.indexOf(e3) == i3), "unique");
var getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {
  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));
  let protoDepth = 0;
  let protosAreLeftToSearch = true;
  while (protosAreLeftToSearch) {
    protosAreLeftToSearch = false;
    for (let i3 = ingredients.length - 1; i3 >= 0; i3--) {
      const searchTarget = protoChains[i3][protoDepth];
      if (searchTarget !== void 0 && searchTarget !== null) {
        protosAreLeftToSearch = true;
        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {
          return protoChains[i3][0];
        }
      }
    }
    protoDepth++;
  }
  return void 0;
}, "getIngredientWithProp");
var proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {
  getPrototypeOf() {
    return prototype;
  },
  setPrototypeOf() {
    throw Error("Cannot set prototype of Proxies created by ts-mixer");
  },
  getOwnPropertyDescriptor(_3, prop) {
    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);
  },
  defineProperty() {
    throw new Error("Cannot define new properties on Proxies created by ts-mixer");
  },
  has(_3, prop) {
    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;
  },
  get(_3, prop) {
    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];
  },
  set(_3, prop, val) {
    const ingredientWithProp = getIngredientWithProp(prop, ingredients);
    if (ingredientWithProp === void 0)
      throw new Error("Cannot set new properties on Proxies created by ts-mixer");
    ingredientWithProp[prop] = val;
    return true;
  },
  deleteProperty() {
    throw new Error("Cannot delete properties on Proxies created by ts-mixer");
  },
  ownKeys() {
    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));
  }
}), "proxyMix");
var softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), "softMixProtos");
var settings = {
  initFunction: null,
  staticsStrategy: "copy",
  prototypeStrategy: "copy",
  decoratorInheritance: "deep"
};
var mixins = /* @__PURE__ */ new WeakMap();
var getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), "getMixinsForClass");
var registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), "registerMixins");
var mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o22) => {
  var _a4, _b2;
  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o22)]);
  const mergedObject = {};
  for (let key of allKeys)
    mergedObject[key] = unique([...(_a4 = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a4 !== void 0 ? _a4 : [], ...(_b2 = o22 === null || o22 === void 0 ? void 0 : o22[key]) !== null && _b2 !== void 0 ? _b2 : []]);
  return mergedObject;
}, "mergeObjectsOfDecorators");
var mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d22) => {
  var _a4, _b2, _c2, _d2;
  return {
    property: mergeObjectsOfDecorators((_a4 = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a4 !== void 0 ? _a4 : {}, (_b2 = d22 === null || d22 === void 0 ? void 0 : d22.property) !== null && _b2 !== void 0 ? _b2 : {}),
    method: mergeObjectsOfDecorators((_c2 = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c2 !== void 0 ? _c2 : {}, (_d2 = d22 === null || d22 === void 0 ? void 0 : d22.method) !== null && _d2 !== void 0 ? _d2 : {})
  };
}, "mergePropertyAndMethodDecorators");
var mergeDecorators = /* @__PURE__ */ __name((d1, d22) => {
  var _a4, _b2, _c2, _d2, _e2, _f;
  return {
    class: unique([...(_a4 = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a4 !== void 0 ? _a4 : [], ...(_b2 = d22 === null || d22 === void 0 ? void 0 : d22.class) !== null && _b2 !== void 0 ? _b2 : []]),
    static: mergePropertyAndMethodDecorators((_c2 = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c2 !== void 0 ? _c2 : {}, (_d2 = d22 === null || d22 === void 0 ? void 0 : d22.static) !== null && _d2 !== void 0 ? _d2 : {}),
    instance: mergePropertyAndMethodDecorators((_e2 = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e2 !== void 0 ? _e2 : {}, (_f = d22 === null || d22 === void 0 ? void 0 : d22.instance) !== null && _f !== void 0 ? _f : {})
  };
}, "mergeDecorators");
var decorators = /* @__PURE__ */ new Map();
var findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {
  var _a4;
  const allClasses = /* @__PURE__ */ new Set();
  const frontier = /* @__PURE__ */ new Set([...classes]);
  while (frontier.size > 0) {
    for (let clazz of frontier) {
      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);
      const mixinClasses = (_a4 = getMixinsForClass(clazz)) !== null && _a4 !== void 0 ? _a4 : [];
      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];
      const newClasses = potentiallyNewClasses.filter((c3) => !allClasses.has(c3));
      for (let newClass of newClasses)
        frontier.add(newClass);
      allClasses.add(clazz);
      frontier.delete(clazz);
    }
  }
  return [...allClasses];
}, "findAllConstituentClasses");
var deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {
  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);
  if (decoratorsForClassChain.length == 0)
    return {};
  if (decoratorsForClassChain.length == 1)
    return decoratorsForClassChain[0];
  return decoratorsForClassChain.reduce((d1, d22) => mergeDecorators(d1, d22));
}, "deepDecoratorSearch");
var directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {
  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));
  if (classDecorators.length === 0)
    return {};
  if (classDecorators.length === 1)
    return classDecorators[0];
  return classDecorators.reduce((d1, d22) => mergeDecorators(d1, d22));
}, "directDecoratorSearch");
var getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {
  let decoratorsForClass = decorators.get(clazz);
  if (!decoratorsForClass) {
    decoratorsForClass = {};
    decorators.set(clazz, decoratorsForClass);
  }
  return decoratorsForClass;
}, "getDecoratorsForClass");
var decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {
  const decoratorsForClass = getDecoratorsForClass(clazz);
  let classDecorators = decoratorsForClass.class;
  if (!classDecorators) {
    classDecorators = [];
    decoratorsForClass.class = classDecorators;
  }
  classDecorators.push(decorator);
  return decorator(clazz);
}, "decorateClass");
var decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {
  var _a4, _b2, _c2;
  const decoratorTargetType = typeof object === "function" ? "static" : "instance";
  const decoratorType = typeof object[key] === "function" ? "method" : "property";
  const clazz = decoratorTargetType === "static" ? object : object.constructor;
  const decoratorsForClass = getDecoratorsForClass(clazz);
  const decoratorsForTargetType = (_a4 = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a4 !== void 0 ? _a4 : {};
  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;
  let decoratorsForType = (_b2 = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b2 !== void 0 ? _b2 : {};
  decoratorsForTargetType[decoratorType] = decoratorsForType;
  let decoratorsForKey = (_c2 = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c2 !== void 0 ? _c2 : [];
  decoratorsForType[key] = decoratorsForKey;
  decoratorsForKey.push(decorator);
  return decorator(object, key, ...otherArgs);
}, "decorateMember");
var decorate2 = /* @__PURE__ */ __name((decorator) => (...args) => {
  if (args.length === 1)
    return decorateClass(decorator)(args[0]);
  return decorateMember(decorator)(...args);
}, "decorate");
function Mixin(...constructors) {
  var _a4, _b2, _c2;
  const prototypes = constructors.map((constructor) => constructor.prototype);
  const initFunctionName = settings.initFunction;
  if (initFunctionName !== null) {
    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === "function");
    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {
      for (let initFunction of initFunctions)
        initFunction.apply(this, args);
    }, "combinedInitFunction");
    const extraProto = { [initFunctionName]: combinedInitFunction };
    prototypes.push(extraProto);
  }
  function MixedClass(...args) {
    for (const constructor of constructors)
      copyProps(this, new constructor(...args));
    if (initFunctionName !== null && typeof this[initFunctionName] === "function")
      this[initFunctionName].apply(this, args);
  }
  __name(MixedClass, "MixedClass");
  MixedClass.prototype = settings.prototypeStrategy === "copy" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);
  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === "copy" ? hardMixProtos(constructors, null, ["prototype"]) : proxyMix(constructors, Function.prototype));
  let DecoratedMixedClass = MixedClass;
  if (settings.decoratorInheritance !== "none") {
    const classDecorators = settings.decoratorInheritance === "deep" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);
    for (let decorator of (_a4 = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a4 !== void 0 ? _a4 : []) {
      const result = decorator(DecoratedMixedClass);
      if (result) {
        DecoratedMixedClass = result;
      }
    }
    applyPropAndMethodDecorators((_b2 = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b2 !== void 0 ? _b2 : {}, DecoratedMixedClass);
    applyPropAndMethodDecorators((_c2 = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c2 !== void 0 ? _c2 : {}, DecoratedMixedClass.prototype);
  }
  registerMixins(DecoratedMixedClass, constructors);
  return DecoratedMixedClass;
}
__name(Mixin, "Mixin");
var applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {
  const propDecorators = propAndMethodDecorators.property;
  const methodDecorators = propAndMethodDecorators.method;
  if (propDecorators)
    for (let key in propDecorators)
      for (let decorator of propDecorators[key])
        decorator(target, key);
  if (methodDecorators)
    for (let key in methodDecorators)
      for (let decorator of methodDecorators[key])
        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));
}, "applyPropAndMethodDecorators");

// packages/texlive/src/install-tl/texmf.ts
import * as path8 from "node:path";

// packages/texlive/src/tex/texmf.ts
var Texmf;
((Texmf2) => {
  Texmf2.SYSTEM_TREES = [
    "TEXDIR",
    "TEXMFLOCAL",
    "TEXMFSYSCONFIG",
    "TEXMFSYSVAR"
  ];
  Texmf2.USER_TREES = [
    "TEXMFHOME",
    "TEXMFCONFIG",
    "TEXMFVAR"
  ];
})(Texmf || (Texmf = {}));

// packages/texlive/src/install-tl/texmf.ts
var _SystemTrees_instances, withPrefix_fn, withTexdir_fn;
var SystemTrees = class {
  constructor(version3, options) {
    this.version = version3;
    __privateAdd(this, _SystemTrees_instances);
    if (options.texdir === void 0) {
      __privateMethod(this, _SystemTrees_instances, withPrefix_fn).call(this, options.prefix);
    }
    Object.assign(this, instanceToPlain(this));
    if (options.texdir !== void 0) {
      __privateMethod(this, _SystemTrees_instances, withTexdir_fn).call(this, options.texdir);
    }
  }
  get TEXMFROOT() {
    return this.TEXDIR;
  }
};
_SystemTrees_instances = new WeakSet();
withPrefix_fn = /* @__PURE__ */ __name(function(prefix2) {
  this.TEXMFLOCAL = path8.join(prefix2, "texmf-local");
  __privateMethod(this, _SystemTrees_instances, withTexdir_fn).call(this, path8.join(prefix2, this.version));
}, "#withPrefix");
withTexdir_fn = /* @__PURE__ */ __name(function(texdir) {
  this.TEXDIR = texdir;
  this.TEXMFSYSCONFIG = path8.join(texdir, "texmf-config");
  this.TEXMFSYSVAR = path8.join(texdir, "texmf-var");
  this.TEXMFLOCAL ??= path8.join(texdir, "texmf-local");
}, "#withTexdir");
__name(SystemTrees, "SystemTrees");
__decorateClass([
  decorate2(Expose())
], SystemTrees.prototype, "TEXDIR", 2);
__decorateClass([
  decorate2(Expose()),
  FromEnv("TEXLIVE_INSTALL_TEXMFLOCAL"),
  AsPath
], SystemTrees.prototype, "TEXMFLOCAL", 2);
__decorateClass([
  decorate2(Expose()),
  FromEnv("TEXLIVE_INSTALL_TEXMFSYSCONFIG"),
  AsPath
], SystemTrees.prototype, "TEXMFSYSCONFIG", 2);
__decorateClass([
  decorate2(Expose()),
  FromEnv("TEXLIVE_INSTALL_TEXMFSYSVAR"),
  AsPath
], SystemTrees.prototype, "TEXMFSYSVAR", 2);
SystemTrees = __decorateClass([
  Exclude()
], SystemTrees);
var _UserTrees_instances, withTexuserdir_fn, withSystemTrees_fn;
var UserTrees = class {
  constructor(version3, options) {
    this.version = version3;
    __privateAdd(this, _UserTrees_instances);
    if (options.texuserdir !== void 0) {
      __privateMethod(this, _UserTrees_instances, withTexuserdir_fn).call(this, options.texuserdir);
    } else {
      __privateMethod(this, _UserTrees_instances, withSystemTrees_fn).call(this, options);
      Object.assign(this, instanceToPlain(this));
    }
  }
};
_UserTrees_instances = new WeakSet();
withTexuserdir_fn = /* @__PURE__ */ __name(function(texuserdir) {
  this.TEXMFHOME = path8.join(texuserdir, "texmf");
  this.TEXMFCONFIG = path8.join(texuserdir, "texmf-config");
  this.TEXMFVAR = path8.join(texuserdir, "texmf-var");
}, "#withTexuserdir");
withSystemTrees_fn = /* @__PURE__ */ __name(function(options) {
  const trees = new SystemTrees(this.version, options);
  this.TEXMFHOME = trees.TEXMFLOCAL;
  this.TEXMFCONFIG = trees.TEXMFSYSCONFIG;
  this.TEXMFVAR = trees.TEXMFSYSVAR;
}, "#withSystemTrees");
__name(UserTrees, "UserTrees");
__decorateClass([
  decorate2(Expose()),
  FromEnv("TEXLIVE_INSTALL_TEXMFHOME"),
  AsPath
], UserTrees.prototype, "TEXMFHOME", 2);
__decorateClass([
  decorate2(Expose()),
  FromEnv("TEXLIVE_INSTALL_TEXMFCONFIG"),
  AsPath
], UserTrees.prototype, "TEXMFCONFIG", 2);
__decorateClass([
  decorate2(Expose()),
  FromEnv("TEXLIVE_INSTALL_TEXMFVAR"),
  AsPath
], UserTrees.prototype, "TEXMFVAR", 2);
UserTrees = __decorateClass([
  Exclude()
], UserTrees);

// packages/texlive/src/install-tl/profile.ts
var _tmpdir, _path;
var Profile = class extends Mixin(SystemTrees, UserTrees) {
  constructor(version3, options) {
    super(version3, options);
    __publicField(this, "instopt", new InstOpt());
    __publicField(this, "tlpdbopt", new TlpdbOpt());
    __privateAdd(this, _tmpdir);
    __privateAdd(this, _path);
    if (version3 < "2020" && platform4() === "darwin" && arch2() === "arm64") {
      this.binary = "universal-darwin";
    }
  }
  get selectedScheme() {
    return `scheme-${this.version < "2016" ? "minimal" : "infraonly"}`;
  }
  async open() {
    __privateGet(this, _tmpdir) ?? __privateSet(this, _tmpdir, await mkdtemp2());
    if (__privateGet(this, _path) === void 0) {
      const profilePath = path9.join(__privateGet(this, _tmpdir).path, "texlive.profile");
      await writeFile2(profilePath, this.toString());
      __privateSet(this, _path, profilePath);
    }
    return __privateGet(this, _path);
  }
  async [Symbol.asyncDispose]() {
    __privateSet(this, _path, void 0);
    try {
      await __privateGet(this, _tmpdir)?.[Symbol.asyncDispose]();
    } finally {
      __privateSet(this, _tmpdir, void 0);
    }
  }
  toString() {
    return Object.entries(this.toJSON()).map((entry) => entry.join(" ")).join("\n");
  }
  toJSON() {
    const { instopt, tlpdbopt, binary, ...plain } = instanceToPlain(this, {
      version: Number.parseInt(this.version),
      groups: [platform4()]
    });
    const options = this.version < "2017" ? { option: { ...instopt, ...tlpdbopt } } : { instopt, tlpdbopt };
    for (const [prefix2, values] of Object.entries(options)) {
      for (const [key, value] of Object.entries(values ?? {})) {
        plain[`${prefix2}_${key}`] = value;
      }
    }
    if (binary !== void 0) {
      plain[`binary_${binary}`] = "1";
    }
    return plain;
  }
};
_tmpdir = new WeakMap();
_path = new WeakMap();
__name(Profile, "Profile");
__decorateClass([
  Case("snake")
], Profile.prototype, "selectedScheme", 1);
__decorateClass([
  Expose()
], Profile.prototype, "instopt", 2);
__decorateClass([
  Expose()
], Profile.prototype, "tlpdbopt", 2);
__decorateClass([
  Expose({ until: 2017, groups: ["darwin"] })
], Profile.prototype, "binary", 2);
Profile = __decorateClass([
  Exclude()
], Profile);
var AsNumber = Type(() => Number);
var InstOpt = class {
  adjustpath = false;
  adjustrepo = false;
  get symlinks() {
    return this.adjustpath;
  }
};
__name(InstOpt, "InstOpt");
__decorateClass([
  Expose({ since: 2019 }),
  AsNumber
], InstOpt.prototype, "adjustpath", 2);
__decorateClass([
  Expose({ since: 2011 }),
  AsNumber
], InstOpt.prototype, "adjustrepo", 2);
__decorateClass([
  Expose({ until: 2009 }),
  AsNumber
], InstOpt.prototype, "symlinks", 1);
InstOpt = __decorateClass([
  Case("snake")
], InstOpt);
var TlpdbOpt = class {
  autobackup = 0;
  installDocfiles = false;
  installSrcfiles = false;
  desktopIntegration = false;
  fileAssocs = false;
  w32MultiUser = false;
  menuIntegration = false;
  get doc() {
    return this.installDocfiles;
  }
  get src() {
    return this.installSrcfiles;
  }
};
__name(TlpdbOpt, "TlpdbOpt");
__decorateClass([
  Expose()
], TlpdbOpt.prototype, "autobackup", 2);
__decorateClass([
  Expose({ since: 2017 }),
  AsNumber
], TlpdbOpt.prototype, "installDocfiles", 2);
__decorateClass([
  Expose({ since: 2017 }),
  AsNumber
], TlpdbOpt.prototype, "installSrcfiles", 2);
__decorateClass([
  Expose({ since: 2009, groups: ["win32"] }),
  AsNumber
], TlpdbOpt.prototype, "desktopIntegration", 2);
__decorateClass([
  Expose({ groups: ["win32"] }),
  AsNumber
], TlpdbOpt.prototype, "fileAssocs", 2);
__decorateClass([
  Expose({ since: 2009, groups: ["win32"] }),
  AsNumber
], TlpdbOpt.prototype, "w32MultiUser", 2);
__decorateClass([
  Expose({ since: 2012, until: 2017, groups: ["win32"] }),
  AsNumber
], TlpdbOpt.prototype, "menuIntegration", 2);
__decorateClass([
  Expose({ until: 2017 }),
  AsNumber
], TlpdbOpt.prototype, "doc", 1);
__decorateClass([
  Expose({ until: 2017 }),
  AsNumber
], TlpdbOpt.prototype, "src", 1);
TlpdbOpt = __decorateClass([
  Case("snake")
], TlpdbOpt);

// packages/data/data/texlive-versions.json
var current = {
  version: "2025",
  releaseDate: "2025-03-15T00:00:00Z"
};
var next = {
  version: "2026",
  releaseDate: "2026-03-07"
};

// packages/texlive/src/releases.ts
var import_deline3 = __toESM(require_deline(), 1);

// node_modules/unctx/dist/index.mjs
function createContext(opts = {}) {
  let currentInstance;
  let isSingleton = false;
  const checkConflict = /* @__PURE__ */ __name((instance) => {
    if (currentInstance && currentInstance !== instance) {
      throw new Error("Context conflict");
    }
  }, "checkConflict");
  let als;
  if (opts.asyncContext) {
    const _AsyncLocalStorage = opts.AsyncLocalStorage || globalThis.AsyncLocalStorage;
    if (_AsyncLocalStorage) {
      als = new _AsyncLocalStorage();
    } else {
      console.warn("[unctx] `AsyncLocalStorage` is not provided.");
    }
  }
  const _getCurrentInstance = /* @__PURE__ */ __name(() => {
    if (als) {
      const instance = als.getStore();
      if (instance !== void 0) {
        return instance;
      }
    }
    return currentInstance;
  }, "_getCurrentInstance");
  return {
    use: /* @__PURE__ */ __name(() => {
      const _instance = _getCurrentInstance();
      if (_instance === void 0) {
        throw new Error("Context is not available");
      }
      return _instance;
    }, "use"),
    tryUse: /* @__PURE__ */ __name(() => {
      return _getCurrentInstance();
    }, "tryUse"),
    set: /* @__PURE__ */ __name((instance, replace) => {
      if (!replace) {
        checkConflict(instance);
      }
      currentInstance = instance;
      isSingleton = true;
    }, "set"),
    unset: /* @__PURE__ */ __name(() => {
      currentInstance = void 0;
      isSingleton = false;
    }, "unset"),
    call: /* @__PURE__ */ __name((instance, callback) => {
      checkConflict(instance);
      currentInstance = instance;
      try {
        return als ? als.run(instance, callback) : callback();
      } finally {
        if (!isSingleton) {
          currentInstance = void 0;
        }
      }
    }, "call"),
    async callAsync(instance, callback) {
      currentInstance = instance;
      const onRestore = /* @__PURE__ */ __name(() => {
        currentInstance = instance;
      }, "onRestore");
      const onLeave = /* @__PURE__ */ __name(() => currentInstance === instance ? onRestore : void 0, "onLeave");
      asyncHandlers.add(onLeave);
      try {
        const r3 = als ? als.run(instance, callback) : callback();
        if (!isSingleton) {
          currentInstance = void 0;
        }
        return await r3;
      } finally {
        asyncHandlers.delete(onLeave);
      }
    }
  };
}
__name(createContext, "createContext");
function createNamespace(defaultOpts = {}) {
  const contexts = {};
  return {
    get(key, opts = {}) {
      if (!contexts[key]) {
        contexts[key] = createContext({ ...defaultOpts, ...opts });
      }
      return contexts[key];
    }
  };
}
__name(createNamespace, "createNamespace");
var _globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : {};
var globalKey = "__unctx__";
var defaultNamespace = _globalThis[globalKey] || (_globalThis[globalKey] = createNamespace());
var asyncHandlersKey = "__unctx_async_handlers__";
var asyncHandlers = _globalThis[asyncHandlersKey] || (_globalThis[asyncHandlersKey] = /* @__PURE__ */ new Set());

// packages/texlive/src/tlnet.ts
var tlnet_exports = {};
__export(tlnet_exports, {
  checkVersionFile: () => checkVersionFile,
  contrib: () => contrib,
  ctan: () => ctan2,
  historic: () => historic
});
async function ctan2(options) {
  return new URL(tlnet_default.ctan.path, await mirrors_exports.resolve(options));
}
__name(ctan2, "ctan");
async function contrib(options) {
  return new URL(tlnet_default.tlcontrib.path, await mirrors_exports.resolve(options));
}
__name(contrib, "contrib");
function historic(version3, options) {
  const [template] = match2(tlnet_default.historic.path, { version: version3 });
  const tlnetPath = parseTemplate(template).expand({ version: version3 });
  const base = options?.master ?? false ? tlnet_default.historic.master : tlnet_default.historic.default;
  return new URL(tlnetPath, base);
}
__name(historic, "historic");
async function checkVersionFile(repository, version3) {
  const pretest = repository.pathname.includes(tlnet_default.tlpretest.path);
  const template = tlnet_default[pretest ? "tlpretest" : "ctan"].versionFile;
  const file = parseTemplate(template).expand({ version: version3 });
  try {
    return await getHeaders(new URL(file, repository));
  } catch {
    return void 0;
  }
}
__name(checkVersionFile, "checkVersionFile");

// packages/texlive/src/releases.ts
var { Instant, Now, PlainDateTime, ZonedDateTime } = Temporal;
var ReleaseData;
((ReleaseData2) => {
  const ctx = createContext();
  ({ use: ReleaseData2.use } = ctx);
  async function setup() {
    const latest = new Latest();
    if (Latest.needToCheck()) {
      await latest.checkVersion();
    }
    function newVersionReleased() {
      return current.version < latest.version;
    }
    __name(newVersionReleased, "newVersionReleased");
    const latestVersionNumber = Number.parseInt(latest.version, 10);
    const releases = {
      newVersionReleased,
      previous: { version: `${latestVersionNumber - 1}` },
      latest,
      next: { version: `${latestVersionNumber + 1}` }
    };
    ctx.set(releases);
    return releases;
  }
  ReleaseData2.setup = setup;
  __name(setup, "setup");
})(ReleaseData || (ReleaseData = {}));
var Latest = class {
  static {
    __name(this, "Latest");
  }
  releaseDate;
  #version = current.version;
  get version() {
    return this.#version;
  }
  set version(latest) {
    if (this.#version < latest) {
      this.#version = latest;
      this.releaseDate = void 0;
      notify(
        import_deline3.default`
          TeX Live %d has been released.
          The action may not work properly for a few days after release.
        `,
        latest
      );
    }
    info2("Latest version: %s", this.version);
  }
  async checkVersion() {
    info2("Checking for latest version of TeX Live");
    try {
      const { version: version3 } = await api_exports.pkg("texlive");
      this.version = Version.parse(version3?.number ?? "");
    } catch (error) {
      info2({ error }, "Failed to check for latest version");
      info2("Use `%s` as latest version", this.version);
    }
    return this.version;
  }
  /**
   * @privateRemarks
   *
   * There appears to be no formal way to check the release date (and time) of
   * TeX Live, but the modified timestamp of the `TEXLIVE_YYYY` file seems to be
   * a good approximation.
   */
  async checkReleaseDate() {
    if (this.releaseDate !== void 0) {
      return this.releaseDate;
    }
    if (this.version === current.version) {
      return this.releaseDate = ZonedDateTime.from(current.releaseDate);
    }
    const ctanMaster = await ctan2({ master: true });
    const headers = await checkVersionFile(ctanMaster, this.version);
    if (headers === void 0) {
      const error = new Error("`TEXLIVE_YYYY` file not found");
      error["repository"] = ctanMaster;
      error["version"] = this.version;
      throw error;
    }
    const timestamp = headers["last-modified"] ?? "";
    const epoch = Date.parse(timestamp);
    if (Number.isNaN(epoch)) {
      const error = new TypeError(`Invalid timestamp: ${timestamp}`);
      error["repository"] = ctanMaster;
      error["version"] = this.version;
      throw error;
    }
    return this.releaseDate = new Date(epoch).toTemporalInstant().toZonedDateTimeISO("UTC");
  }
  static needToCheck() {
    const now = Now.instant();
    const tzEarliest = "+14:00";
    const nextReleaseDate = PlainDateTime.from(next.releaseDate).toZonedDateTime(tzEarliest).toInstant();
    return Instant.compare(now, nextReleaseDate) >= 0;
  }
};

// packages/texlive/src/tex/kpse.ts
var kpse_exports = {};
__export(kpse_exports, {
  varValue: () => varValue
});
import * as path10 from "node:path";
async function varValue(variable) {
  const { exitCode, stdout: stdout2 } = await exec("kpsewhich", [
    `-var-value=${variable}`
  ], {
    ignoreReturnCode: true,
    silent: true
  });
  return exitCode === 0 ? path10.normalize(stdout2.replace(new RegExp("\\r?\\n$", "v"), "")) : void 0;
}
__name(varValue, "varValue");

// packages/texlive/src/tlmgr/actions/index.ts
var actions_exports = {};
__export(actions_exports, {
  conf: () => conf_exports,
  install: () => install,
  list: () => list,
  path: () => path_exports,
  pinning: () => pinning_exports,
  repository: () => repository_exports,
  update: () => update,
  version: () => version
});

// packages/texlive/src/tlmgr/actions/conf.ts
var conf_exports = {};
__export(conf_exports, {
  texmf: () => texmf
});
var import_core3 = __toESM(require_core(), 1);

// packages/texlive/src/tlmgr/action.ts
var import_semver3 = __toESM(require_semver2(), 1);
var SUPPORTED_VERSIONS = {
  conf: new import_semver3.Range(">=2010"),
  install: new import_semver3.Range("*"),
  // list: new Range('*'),
  // option: new Range('*'),
  pinning: new import_semver3.Range(">=2013"),
  repository: new import_semver3.Range(">=2012"),
  update: new import_semver3.Range("*"),
  version: new import_semver3.Range("*")
};

// packages/texlive/src/tlmgr/errors.ts
import { platform as platform5 } from "node:os";
var import_semver4 = __toESM(require_semver2(), 1);
var TlmgrError = class extends TLError {
  action;
  constructor(message, options) {
    super(message, options);
    this.action = options.action;
    if (options.subaction !== void 0) {
      this.subaction = options.subaction;
    }
  }
};
__name(TlmgrError, "TlmgrError");
TlmgrError = __decorateClass([
  Exception
], TlmgrError);
((TlmgrError2) => {
  const CODES = [
    "TL_VERSION_OUTDATED",
    "TL_VERSION_NOT_SUPPORTED"
  ];
  TlmgrError2.Code = Object.fromEntries(
    CODES.map((code) => [code, code])
  );
})(TlmgrError || (TlmgrError = {}));
((TlmgrError2) => {
  const RE3 = new RegExp("is older than remote repository(?: \\((?<remote>\\d{4})\\))?", "v");
  function checkOutdated(output, options) {
    if (output.exitCode !== 0) {
      const remoteVersion = RE3.exec(output.stderr)?.groups?.["remote"];
      if (remoteVersion !== void 0) {
        throw new TlmgrError2("The version of TeX Live is outdated", {
          ...options,
          code: TlmgrError2.Code.TL_VERSION_OUTDATED,
          remoteVersion
        });
      }
    }
  }
  TlmgrError2.checkOutdated = checkOutdated;
  __name(checkOutdated, "checkOutdated");
})(TlmgrError || (TlmgrError = {}));
((TlmgrError2) => {
  const RE3 = new RegExp("The TeX Live versions supported by the repository(?<rest>.*)", "v");
  function checkNotSupported(output, options) {
    if (output.exitCode !== 0) {
      const rest = RE3.exec(output.stderr)?.groups?.["rest"]?.trim();
      if (rest !== void 0) {
        const [repository, remote] = rest.split(new RegExp("\\r?\\n", "v"));
        throw new TlmgrError2(
          "The version of TeX Live is not supported by the repository",
          {
            ...options,
            code: TlmgrError2.Code.TL_VERSION_NOT_SUPPORTED,
            repository: repository?.trim(),
            remoteVersion: remote?.trim().replaceAll(new RegExp("^\\(|\\)$", "gv"), "")
          }
        );
      }
    }
  }
  TlmgrError2.checkNotSupported = checkNotSupported;
  __name(checkNotSupported, "checkNotSupported");
})(TlmgrError || (TlmgrError = {}));
var PackageNotFound = class extends TlmgrError {
  constructor(packages, options) {
    super("Some packages not found in the repository", options);
    this.packages = packages;
  }
  static check(output, options) {
    if (options.version < "2015" || output.exitCode !== 0 || platform5() === "win32") {
      const pattern = this.PATTERNS.find(({ versions: versions2 }) => {
        return Version.satisfies(options.version, versions2);
      });
      const packages = Array.from(
        output.stderr.matchAll(pattern.re),
        ([, found]) => found
      );
      if (packages.length > 0) {
        throw new this(packages, options);
      }
    }
  }
};
__name(PackageNotFound, "PackageNotFound");
__publicField(PackageNotFound, "PATTERNS", [
  {
    versions: new import_semver4.Range("2008"),
    re: new RegExp(": Cannot find package (.+)$", "gmv")
  },
  {
    versions: new import_semver4.Range(">=2009 <2015"),
    re: new RegExp("^package (.+) not present in package repository", "gmv")
  },
  {
    versions: new import_semver4.Range(">=2015"),
    re: new RegExp("^tlmgr(?:\\.pl)? install: package (\\S+) not present", "gmv")
  }
]);
PackageNotFound = __decorateClass([
  Exception
], PackageNotFound);

// packages/texlive/src/tlmgr/internals.ts
var TlmgrInternals = class {
  static {
    __name(this, "TlmgrInternals");
  }
  TEXDIR;
  version;
  constructor(config) {
    this.TEXDIR = config.TEXDIR;
    this.version = config.version;
  }
  async exec(action5, args, options) {
    if (!Version.satisfies(this.version, SUPPORTED_VERSIONS[action5])) {
      throw new TlmgrError(
        `\`tlmgr ${action5}\` not implemented in this version of TeX Live`,
        { action: action5, version: this.version }
      );
    }
    return await exec("tlmgr", [action5, ...args ?? []], options);
  }
};
var { set, use } = createContext();

// packages/texlive/src/tlmgr/actions/conf.ts
async function texmf(key, value) {
  if (value === void 0) {
    return await kpse_exports.varValue(key);
  }
  const internals = use();
  if (internals.version < "2010") {
    (0, import_core3.exportVariable)(key, value);
  } else {
    await internals.exec("conf", ["texmf", key, value]);
  }
  if (key === "TEXMFLOCAL") {
    try {
      await makeLocalSkeleton(value, internals);
      await exec("mktexlsr", [value]);
    } catch (error) {
      info2({ error }, "Failed to initialize %s", key);
    }
  }
}
__name(texmf, "texmf");

// packages/texlive/src/tlmgr/actions/install.ts
import { setTimeout as setTimeout3 } from "node:timers/promises";

// packages/data/data/package-names.json
var toTL = {
  a4: "ntgclass",
  abbrevs: "frankenstein",
  abstbook: "ltxmisc",
  "abstyles-babel": "abstyles",
  "abstyles-orig": "abstyles",
  accenti: "bosisio",
  achicago: "frankenstein",
  "achicago-bst": "frankenstein",
  afterpackage: "ncctools",
  afterpage: "tools",
  aliascnt: "oberdiek",
  alltt: "latex",
  alphanum: "jura",
  altverse: "shipunov",
  amsart: "amscls",
  amsbook: "amscls",
  amsbsy: "amsmath",
  amscd: "amsmath",
  amslatex: "amsmath",
  "amslatexdoc-vietnamese": "amsldoc-vn",
  amsmidx: "amscls",
  amsopn: "amsmath",
  amsppt: "amstex",
  amsppt1: "amstex",
  amsproc: "amscls",
  amstext: "amsmath",
  amsthm: "amscls",
  annotation: "beebe",
  apa5: "apa",
  apabst: "beebe",
  aramaic: "archaic",
  array: "tools",
  arrayjob: "arrayjobx",
  arrow: "eplain",
  article: "latex",
  at: "mdwtools",
  attrib: "frankenstein",
  auncial: "bookhands",
  authblk: "preprint",
  autoinst: "fontools",
  autolist: "shipunov",
  backref: "hyperref",
  bahyph: "hyphen-basque",
  balance: "preprint",
  base: "plain",
  bbs: "beebe",
  bdfchess: "chess",
  beletter: "ltxmisc",
  "bengali-pandey": "bengali",
  "besjournals-bst": "besjournals",
  bibcheck: "ltxmisc",
  biblio: "beebe",
  bibtex8bit: "bibtex8",
  bicaption: "caption",
  bigdelim: "multirow",
  bigstrut: "multirow",
  binhex: "kastrup",
  biolinum: "libertine",
  biolist: "shipunov",
  blkcntrl: "frankenstein",
  bm: "tools",
  bmpsize: "oberdiek",
  boldline: "shipunov",
  book: "latex",
  boxedminipage2e: "boxedminipage",
  cahyph: "hyphen-spanish",
  calc: "tools",
  caption2: "caption",
  carolmin: "bookhands",
  "carolmin-t1": "carolmin-ps",
  "cassette-shipunov": "shipunov",
  catalan: "hyphen-spanish",
  cbe: "beebe",
  "cbgreek-complete": "cbfonts",
  ccref: "crefthe",
  cdcover: "cd-cover",
  cdlabeler: "eijkhout",
  centernot: "oberdiek",
  cfgguide: "latex",
  chapterbib: "cite",
  chemarr: "oberdiek",
  chemscheme: "chemstyle",
  "cite-bundle": "cite",
  cjk: "cjkutils",
  "cjk-fonts": "cns",
  classes: "latex",
  classif2: "shipunov",
  classlist: "oberdiek",
  clsguide: "latex",
  "cm-mf": "cm",
  "cm-pk": "cm",
  "cm-tfm": "cm",
  "cmextra-latex": "latex",
  cmfrak: "gothic",
  cmtt: "mdwtools",
  "cmyk-hax": "tex-ps",
  collect: "sauerj",
  colonequals: "oberdiek",
  color: "graphics",
  colordvi: "dvips",
  compsci: "frankenstein",
  "concrete-macros": "ltxmisc",
  csfonts: "cs",
  "csfonts-t1": "cs",
  "csname-doc": "plain-doc",
  cspsfonts: "cslatex",
  ctib4tex: "ctib",
  cuted: "sttools",
  cvsty: "cv",
  cwebbin: "cweb",
  cypriot: "archaic",
  cyrguide: "latex",
  dblfnote: "yafoot",
  dblfont: "bosisio",
  dbprocess: "eijkhout",
  dcolumn: "tools",
  dcounter: "ncctools",
  delarray: "tools",
  desclist: "ncctools",
  devanagari: "velthuis",
  diagxy: "barr",
  dialogue: "frankenstein",
  dkhyphen: "hyphen-danish",
  doafter: "mdwtools",
  doc: "latex",
  docstrip: "latex",
  dotlessj: "carlisle",
  drcaps: "shipunov",
  drftcite: "cite",
  duplicat: "piff",
  dvibook: "seetexk",
  dviconcat: "seetexk",
  dviout: "dviout.windows",
  dvipscol: "oberdiek",
  dvipsk: "dvips",
  dvitype: "texware",
  "e-tex": "etex",
  easybib: "easy",
  easybmat: "easy",
  easyeqn: "easy",
  easymat: "easy",
  easytable: "easy",
  easyvector: "easy",
  egothic: "bookhands",
  eledpar: "eledmac",
  elhyphen: "hyphen-greek",
  engord: "oberdiek",
  enparen: "oberdiek",
  enumerate: "tools",
  envmath: "bosisio",
  eolgrab: "oberdiek",
  epsfig: "graphics",
  epsfx: "tex-ps",
  eptex: "ptex",
  etruscan: "archaic",
  euptex: "uptex",
  evenpage: "bosisio",
  expkv: "expkv-bundle",
  "expkv-cs": "expkv-bundle",
  "expkv-def": "expkv-bundle",
  "expkv-opt": "expkv-bundle",
  expl3: "l3kernel",
  exscale: "latex",
  extdash: "ncctools",
  fancyheadings: "fancyhdr",
  "faq-es": "es-tex-faq",
  fepslatex: "epslatex-fr",
  fibnum: "oberdiek",
  fifinddo: "nicetext",
  figcaps: "preprint",
  fihyph: "hyphen-finnish",
  fileerr: "tools",
  findfont: "luafindfont",
  findpkg: "texfindpkg",
  finplain: "finbib",
  "fix-cm": "latex",
  fixltx2e: "latex",
  flags: "oberdiek",
  flashcard: "ltxmisc",
  floatpag: "sttools",
  flushend: "sttools",
  fnlineno: "lineno",
  fnpos: "yafoot",
  fntguide: "latex",
  fontchart: "plain",
  fontenc: "latex",
  fontsmpl: "tools",
  footnote: "mdwtools",
  ftnright: "tools",
  fullpage: "preprint",
  gentium: "gentium-tug",
  "geometry-de": "geometry",
  ghostscript: "tlgs.windows",
  ghyphen: "dehyph",
  gkpmac: "plain",
  glhyph: "hyphen-spanish",
  "glossaries-accsupp": "glossaries",
  gnhyph: "dehyph",
  graphicx: "graphics",
  graphpap: "latex",
  "greek-makeindex": "mkgrkindex",
  greek4cbc: "archaic",
  greek6cbc: "archaic",
  greekctr: "jknapltx",
  grfguide: "graphics",
  helvet: "psnfss",
  hhline: "tools",
  hieroglf: "archaic",
  hint: "hitex",
  holtpolt: "jknapltx",
  holtxdoc: "oberdiek",
  hrhyph: "hyphen-croatian",
  humanbio: "beebe",
  humanist: "bookhands",
  humannat: "beebe",
  huncial: "bookhands",
  hungarian: "hyphen-hungarian",
  hypbmsec: "oberdiek",
  hypgotoe: "oberdiek",
  hyphsubst: "oberdiek",
  icehyph: "hyphen-icelandic",
  icomma: "was",
  ieeetrantools: "ieeetran",
  ifdraft: "oberdiek",
  ifetex: "iftex",
  iflang: "oberdiek",
  ifluatex: "iftex",
  ifpdf: "iftex",
  ifthen: "latex",
  ifvtex: "iftex",
  ifxetex: "iftex",
  impatient: [
    "impatient-cn",
    "impatient-fr"
  ],
  indentfirst: "tools",
  inputenc: "latex",
  ithyph: "hyphen-italian",
  "japanese-otf-uptex": "japanese-otf",
  jknappen: "jknapltx",
  keyval: "graphics",
  "knuth-letter": "plain",
  "knuth-local": "cmextra",
  "koma-script-examples-5": "koma-script-examples",
  "ksfh-nat": "ksfh_nat",
  l3keys2e: "l3packages",
  lahyph: "hyphen-latin",
  "latex-amsmath": "amsmath",
  "latex-base": "latex",
  "latex-cyrillic": "cyrillic",
  "latex-doc": "latex",
  "latex-firstaid": "firstaid",
  "latex-graphics": "graphics",
  "latex-tools": "tools",
  "latex2e-help-texinfo": "latex2e-help-texinfo-spanish",
  latin1jk: "jknapltx",
  latin2jk: "jknapltx",
  latin3jk: "jknapltx",
  "lato-math": "lete-sans-math",
  "lcdf-typetools": "lcdftypetools",
  ledarab: "ledmac",
  ledpar: "ledmac",
  letter: "latex",
  letterformat: "plain",
  "levy-font": "levy",
  "lgc-examples": "latex-graphics-companion",
  linearb: "archaic",
  linsys: "ltxmisc",
  lips: "frankenstein",
  "lithuanian-babel": "babel-lithuanian",
  llmk: "light-latex-make",
  lmodern: "lm",
  logsys: "coordsys",
  longtable: "tools",
  lscape: "graphics",
  "lshort-zh-cn": "lshort-chinese",
  ltugboat: "tugboat",
  ltxdoc: "latex",
  "lwc-examples": "latex-web-companion",
  makedoc: "nicetext",
  makeidx: "latex",
  makeindexk: "makeindex",
  manual: "manfnt-font",
  manyfoot: "ncctools",
  mathalfa: "mathalpha",
  mathbbol: "jknapltx",
  mathptmx: "psnfss",
  mathrsfs: "jknapltx",
  mboxfill: "ncctools",
  mdwlist: "mdwtools",
  mdwmath: "mdwtools",
  mdwtab: "mdwtools",
  memhfixc: "memoir",
  metainfo: "sauerj",
  mf: "metafont",
  "mf-ps": "roex",
  minimal: "latex",
  mirr: "tex-ps",
  "mltex-ltx": "mltex",
  modguide: "latex",
  moredefs: "frankenstein",
  mp: "metapost",
  mpost: "metapost",
  multicol: "tools",
  myfilist: "fileinfo",
  nameref: "hyperref",
  namunsrt: "beebe",
  natmove: "achemso",
  nbaseprt: "numprint",
  nccbbb: "ncctools",
  nccboxes: "ncctools",
  ncccomma: "ncctools",
  ncccropbox: "ncctools",
  ncccropmark: "ncctools",
  nccfancyhdr: "ncctools",
  nccfloats: "ncctools",
  nccfoots: "ncctools",
  nccmath: "ncctools",
  nccparskip: "ncctools",
  nccpic: "ncctools",
  nccrules: "ncctools",
  nccsect: "ncctools",
  nccstretch: "ncctools",
  nccthm: "ncctools",
  nehyph: "hyphen-dutch",
  "neo-euler": "euler-math",
  newclude: "frankenstein",
  newcm: "newcomputermodern",
  newproof: "piff",
  ngerman: "german",
  nicefrac: "units",
  niceverb: "nicetext",
  nohyph: "hyphen-norwegian",
  nohyphbx: "hyphen-norwegian",
  oands: "archaic",
  oldprsn: "archaic",
  omega: "omegaware",
  one2many: "12many",
  onepagem: "piff",
  optparams: "sauerj",
  overcite: "cite",
  parboxx: "jknapltx",
  parcolumns: "sauerj",
  pdfcolparallel: "oberdiek",
  pdfcolparcolumns: "oberdiek",
  pdfcrypt: "oberdiek",
  perpage: "bigfoot",
  pfnote: "yafoot",
  pgfkeys: "pgf",
  pgfplotstable: "pgfplots",
  pgothic: "bookhands",
  phoenician: "archaic",
  picmac: "plain",
  "pictex-autoarea": "autoarea",
  pictexwd: "pictex",
  pifont: "psnfss",
  pl: "plweb",
  "pl-mf": "pl",
  plfonts: "pl",
  plhyph: "hyphen-polish",
  plpsfont: "pl",
  poligraf: "tex-ps",
  polishlipsum: "bredzenie",
  proc: "latex",
  processkv: "sauerj",
  protecteddef: "oberdiek",
  protosem: "archaic",
  psfont: "altfont",
  psmerge: "psutils",
  "pst-xkey": "xkeyval",
  "pstricks-base": "pstricks",
  "pstricks-calcnotes": "pstricks_calcnotes",
  "r-und-s": "r_und_s",
  ratex: "rtklage",
  readprov: "fileinfo",
  refer: "beebe",
  repeat: "eijkhout",
  report: "latex",
  resizegather: "oberdiek",
  "revtex4-0": "revtex4",
  rotchiffre: "oberdiek",
  rubikcube: "rubik",
  rubikrotation: "rubik",
  rubiktwocube: "rubik",
  "rule-d": "gs1",
  runic: "archaic",
  sans: "jknapltx",
  sarabian: "archaic",
  scalefnt: "carlisle",
  schwell: "gothic",
  scraddr: "koma-script",
  scrartcl: "koma-script",
  scrarticle: "koma-script",
  scrbase: "koma-script",
  scrbook: "koma-script",
  scrdate: "koma-script",
  scrextend: "koma-script",
  scrindex: "oberdiek",
  scrjura: "koma-script",
  scrlayer: "koma-script",
  "scrlayer-notecolumn": "koma-script",
  "scrlayer-scrpage": "koma-script",
  scrletter: "koma-script",
  scrlfile: "koma-script",
  scrlttr2: "koma-script",
  scrreport: "koma-script",
  scrreprt: "koma-script",
  scrtime: "koma-script",
  semtrans: "jknapltx",
  "serbian-book": "srbook-mem",
  setouterhbox: "oberdiek",
  settobox: "oberdiek",
  sgmlcmpt: "jknapltx",
  shellesc: "tools",
  shortvrb: "latex",
  showframe: "eso-pic",
  showkeys: "tools",
  slashed: "carlisle",
  slemph: "frankenstein",
  slides: "latex",
  smartmn: "jknapltx",
  soulutf8: "soul",
  source2e: "latex",
  spanish: "babel-spanish",
  sqrcaps: "bookhands",
  srhyphc: "hyphen-serbian",
  stackrel: "oberdiek",
  stampinclude: "oberdiek",
  startlatex2e: "yet-another-guide-latex2e",
  structuredlog: "latex",
  subcaption: "caption",
  sueterlin: "gothic",
  suffix: "bigfoot",
  sverb: "mdwtools",
  sympytex: "sympytexpackage",
  "syntax-mdw": "mdwtools",
  syntax2: "syntax",
  syntonly: "latex",
  t1enc: "latex",
  t2: "cyrplain",
  tabto: "tabto-ltx",
  tabularht: "oberdiek",
  tabularkv: "oberdiek",
  tabularx: "tools",
  tangle: "web",
  tccompat: "jknapltx",
  tclldoc: "tcldoc",
  testflow: "ieeetran",
  "tex-gyre-adventor": "tex-gyre",
  "tex-gyre-bonum": "tex-gyre",
  "tex-gyre-chorus": "tex-gyre",
  "tex-gyre-cursor": "tex-gyre",
  "tex-gyre-heros": "tex-gyre",
  "tex-gyre-math-pagella": "tex-gyre-math",
  "tex-gyre-math-termes": "tex-gyre-math",
  "tex-gyre-pagella": "tex-gyre",
  "tex-gyre-schola": "tex-gyre",
  "tex-gyre-termes": "tex-gyre",
  "tex-references": "tex-refs",
  "texinfo-latest": "texinfo",
  tgothic: "bookhands",
  theorem: "tools",
  thepdfnumber: "oberdiek",
  thrmappendix: "ltxmisc",
  tikz: "pgf",
  time: "piff",
  titleps: "titlesec",
  titles: "frankenstein",
  titletoc: "titlesec",
  tkhyph: "hyphen-turkish",
  "tlc2-examples": "tlc2",
  tocbasic: "koma-script",
  tocenter: "ncctools",
  topcapt: "ltxmisc",
  topsection: "ncctools",
  trace: "tools",
  trans: "tex-ps",
  "treetex-plain": "treetex",
  trig: "graphics",
  twoopt: "oberdiek",
  "twoup-gen": "2up",
  twoupltx: "twoup",
  type1ec: "cm-super",
  typearea: "koma-script",
  ugarite: "archaic",
  uncial: "bookhands",
  upgreek: "was",
  upref: "amscls",
  "urw-antiqua": "antiqua",
  "urw-base35": [
    "avantgar",
    "bookman",
    "courier",
    "helvetic",
    "ncntrsbk",
    "palatino",
    "symbol",
    "times",
    "zapfchan",
    "zapfding"
  ],
  "urw-grotesq": "grotesq",
  usrguide: "latex",
  varioref: "tools",
  verbatim: "tools",
  vfware: "fontware",
  viking: "archaic",
  vowel: "tipa",
  vrbexin: "ltxmisc",
  wasy2: "wasy",
  "wasy2-ps": "wasy-type1",
  watermark: "ncctools",
  weave: "web",
  wiki: "nicetext",
  wncyr: "amsfonts",
  xdvik: "xdvi",
  xdvipdfmx: "dvipdfmx",
  xfp: "l3packages",
  xintexpr: "xint",
  xkvltxp: "xkeyval",
  xkvview: "xkeyval",
  xparse: "l3packages",
  xput: "pagelayout",
  xr: "tools",
  "xr-hyper": "hyperref",
  xspace: "tools",
  xtemplate: "l3packages",
  yfrak: "gothic",
  ygoth: "gothic",
  yinit: "gothic",
  young: "jknapltx",
  yswab: "gothic",
  zahl2string: "sauerj"
};

// node_modules/@teppeis/multimaps/dist/esm/multimap.js
var Multimap = class _Multimap {
  static {
    __name(this, "Multimap");
  }
  constructor(operator, iterable) {
    this.size_ = 0;
    this.map = /* @__PURE__ */ new Map();
    this.operator = operator;
    if (iterable) {
      for (const [key, value] of iterable) {
        this.put(key, value);
      }
    }
    return this;
  }
  get size() {
    return this.size_;
  }
  get(key) {
    const values = this.map.get(key);
    if (values) {
      return this.operator.clone(values);
    } else {
      return this.operator.create();
    }
  }
  put(key, value) {
    let values = this.map.get(key);
    if (!values) {
      values = this.operator.create();
    }
    if (!this.operator.add(value, values)) {
      return false;
    }
    this.map.set(key, values);
    this.size_++;
    return true;
  }
  putAll(arg1, arg2) {
    let pushed = 0;
    if (arg2) {
      const key = arg1;
      const values = arg2;
      for (const value of values) {
        this.put(key, value);
        pushed++;
      }
    } else if (arg1 instanceof _Multimap) {
      for (const [key, value] of arg1.entries()) {
        this.put(key, value);
        pushed++;
      }
    } else {
      throw new TypeError("unexpected arguments");
    }
    return pushed > 0;
  }
  has(key) {
    return this.map.has(key);
  }
  hasEntry(key, value) {
    return this.operator.has(value, this.get(key));
  }
  delete(key) {
    this.size_ -= this.operator.size(this.get(key));
    return this.map.delete(key);
  }
  deleteEntry(key, value) {
    const current2 = this.get(key);
    if (!this.operator.delete(value, current2)) {
      return false;
    }
    this.map.set(key, current2);
    this.size_--;
    return true;
  }
  clear() {
    this.map.clear();
    this.size_ = 0;
  }
  keys() {
    return this.map.keys();
  }
  entries() {
    const self2 = this;
    function* gen() {
      for (const [key, values] of self2.map.entries()) {
        for (const value of values) {
          yield [key, value];
        }
      }
    }
    __name(gen, "gen");
    return gen();
  }
  values() {
    const self2 = this;
    function* gen() {
      for (const [, value] of self2.entries()) {
        yield value;
      }
    }
    __name(gen, "gen");
    return gen();
  }
  forEach(callback, thisArg) {
    for (const [key, value] of this.entries()) {
      callback.call(thisArg === void 0 ? this : thisArg, value, key, this);
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  asMap() {
    const ret = /* @__PURE__ */ new Map();
    for (const key of this.keys()) {
      ret.set(key, this.operator.clone(this.get(key)));
    }
    return ret;
  }
};

// node_modules/@teppeis/multimaps/dist/esm/setmultimap.js
var SetMultimap = class extends Multimap {
  static {
    __name(this, "SetMultimap");
  }
  constructor(iterable) {
    super(new SetOperator(), iterable);
  }
  get [Symbol.toStringTag]() {
    return "SetMultimap";
  }
};
var SetOperator = class {
  static {
    __name(this, "SetOperator");
  }
  create() {
    return /* @__PURE__ */ new Set();
  }
  clone(collection) {
    return new Set(collection);
  }
  add(value, collection) {
    const prev = collection.size;
    collection.add(value);
    return prev !== collection.size;
  }
  size(collection) {
    return collection.size;
  }
  delete(value, collection) {
    return collection.delete(value);
  }
  has(value, collection) {
    return collection.has(value);
  }
};

// packages/texlive/src/tlmgr/actions/install.ts
async function install(packages) {
  try {
    await tryToInstall(new Set(packages));
  } catch (error) {
    if (!(error instanceof PackageNotFound)) {
      throw error;
    }
    info2(
      "Looking up the correct package name(s):",
      error.packages.join(", ")
    );
    let rest = new Set(error.packages);
    rest = await tryToInstallWith(rest, async (name2) => {
      return toTL[name2];
    });
    if (rest !== void 0 && rest.size > 0) {
      info2("Querying CTAN:", [...rest].join(", "));
      rest = await tryToInstallWith(rest, async (name2) => {
        try {
          const pkg2 = await api_exports.pkg(name2);
          if (typeof pkg2.texlive === "string") {
            return pkg2.texlive;
          }
        } catch (error2) {
          info2({ error: error2 }, "Failed to request package data");
        } finally {
          await setTimeout3(200);
        }
        return void 0;
      });
      if (rest !== void 0 && rest.size > 0) {
        throw new PackageNotFound([...rest], { action: "install" });
      }
    }
  }
}
__name(install, "install");
async function tryToInstallWith(packages, lookup) {
  const fromTL = new SetMultimap();
  const notFound = [];
  for (const name2 of packages) {
    let tlnames = await lookup(name2.toLowerCase().split(".", 1)[0] ?? name2);
    if (tlnames === void 0) {
      notFound.push(name2);
    } else {
      tlnames = Array.isArray(tlnames) ? tlnames : [tlnames];
      for (const tlname of tlnames) {
        fromTL.put(tlname, name2);
      }
      info2("  %s (in CTAN) => %s (in TeX Live)", name2, tlnames.join(", "));
    }
  }
  if (fromTL.size === 0) {
    return packages;
  }
  try {
    await tryToInstall(new Set(fromTL.keys()));
  } catch (error) {
    if (!(error instanceof PackageNotFound)) {
      throw error;
    }
    if (error.packages.some((tlname) => !fromTL.has(tlname))) {
      debug2("Unexpected result: %o", fromTL.asMap());
      return packages;
    }
    notFound.push(...error.packages.flatMap((name2) => [...fromTL.get(name2)]));
    return new Set(notFound);
  }
  return void 0;
}
__name(tryToInstallWith, "tryToInstallWith");
async function tryToInstall(packages) {
  if (packages.size > 0) {
    const internals = use();
    const action5 = "install";
    const result = await internals.exec(action5, packages, {
      ignoreReturnCode: true
    });
    TlpdbError.checkPackageChecksumMismatch(result);
    if (internals.version < "2015") {
      result.check();
    }
    PackageNotFound.check(result, { action: action5, version: internals.version });
    if (internals.version >= "2015") {
      result.check();
    }
  }
}
__name(tryToInstall, "tryToInstall");

// packages/texlive/src/tlmgr/actions/list.ts
import { readFile as readFile3 } from "node:fs/promises";
import * as path11 from "node:path";
async function* list() {
  const tlpdbPath = path11.join(use().TEXDIR, "tlpkg", "texlive.tlpdb");
  let db;
  try {
    db = await readFile3(tlpdbPath, "utf8");
  } catch (error) {
    info2({ error }, "Failed to read %s", tlpdbPath);
    return;
  }
  try {
    for (const [tag, data] of tlpdb_exports.parse(db)) {
      if (tag === "TLPOBJ" && z2(data.name).with("texlive.infra", () => true).with(N2.string.includes("."), () => false).with(N2.string.startsWith("scheme-"), () => false).with(N2.string.startsWith("collection-"), () => false).otherwise(() => true)) {
        yield data;
      }
    }
  } catch (error) {
    info2({ error }, "Failed to parse %s", tlpdbPath);
  }
}
__name(list, "list");

// packages/texlive/src/tlmgr/actions/path.ts
var path_exports = {};
__export(path_exports, {
  add: () => add
});
var import_core4 = __toESM(require_core(), 1);
import * as path12 from "node:path";
async function add() {
  let dir;
  try {
    dir = await uniqueChild(path12.join(use().TEXDIR, "bin"));
  } catch (cause) {
    throw new Error("Unable to locate TeX Live's binary directory", { cause });
  }
  (0, import_core4.addPath)(dir);
}
__name(add, "add");

// packages/texlive/src/tlmgr/actions/pinning.ts
var pinning_exports = {};
__export(pinning_exports, {
  add: () => add2
});
async function add2(repo, ...globs) {
  await use().exec("pinning", ["add", repo, ...globs]);
}
__name(add2, "add");

// packages/texlive/src/tlmgr/actions/repository.ts
var repository_exports = {};
__export(repository_exports, {
  add: () => add3,
  list: () => list2,
  remove: () => remove
});
async function add3(repo, tag) {
  const args = ["add", repo.toString()];
  if (tag !== void 0) {
    args.push(tag);
  }
  try {
    await use().exec("repository", args);
  } catch (error) {
    if (!(error instanceof ExecError && error.stderr.includes("repository or its tag already defined"))) {
      throw error;
    }
  }
}
__name(add3, "add");
async function remove(repo) {
  await use().exec("repository", ["remove", repo.toString()]);
}
__name(remove, "remove");
async function* list2() {
  const { stdout: stdout2 } = await use().exec("repository", ["list"]);
  const re2 = new RegExp("^\\t(?<path>.+) \\((?<tag>.+)\\)$", "v");
  for (const line of stdout2.split(new RegExp("\\r?\\n", "v")).slice(1)) {
    const found = re2.exec(line)?.groups ?? {};
    yield {
      path: found["path"] ?? line.trim(),
      tag: found["tag"]
    };
  }
}
__name(list2, "list");

// packages/texlive/src/tlmgr/actions/update.ts
async function update(...inputs) {
  const internals = use();
  const [packages, options] = z2(inputs).returnType().with(
    [N2._, N2._],
    [N2.when(isIterable)],
    ([packages2, options2]) => [packages2, options2]
  ).with(N2._, ([options2]) => [[], options2]).exhaustive();
  const {
    all = false,
    reinstallForciblyRemoved = false,
    self: self2 = false
  } = options ?? {};
  const args = all ? ["--all"] : [...packages];
  if (self2) {
    args.push(internals.version > "2008" ? "--self" : "texlive.infra");
  }
  if (reinstallForciblyRemoved && internals.version >= "2009") {
    args.unshift("--reinstall-forcibly-removed");
  }
  const action5 = "update";
  try {
    return await internals.exec(action5, [...args]);
  } catch (cause) {
    if (cause instanceof ExecError) {
      const opts = { action: action5, cause, version: internals.version };
      TlpdbError.checkRepositoryStatus(cause, opts);
      TlpdbError.checkRepositoryHealth(cause, opts);
      TlmgrError.checkOutdated(cause, opts);
      TlmgrError.checkNotSupported(cause, opts);
    }
    throw cause;
  }
}
__name(update, "update");

// packages/texlive/src/tlmgr/actions/version.ts
async function version() {
  await use().exec("version", void 0, { ignoreReturnCode: true });
}
__name(version, "version");

// packages/texlive/src/tlmgr/index.ts
var Tlmgr;
((Tlmgr2) => {
  function setup(config) {
    set(new TlmgrInternals(config));
    return use2();
  }
  Tlmgr2.setup = setup;
  __name(setup, "setup");
  function use2() {
    return actions_exports;
  }
  Tlmgr2.use = use2;
  __name(use2, "use");
})(Tlmgr || (Tlmgr = {}));

// packages/action/src/cache.ts
var import_cache2 = __toESM(require_cache3(), 1);
var import_core5 = __toESM(require_core(), 1);
import { createHash, randomUUID as randomUUID2 } from "node:crypto";
import { arch as arch4, platform as platform6 } from "node:os";
import { env as env4 } from "node:process";
var STATE_NAME = "CACHE";
var CacheInfo = class {
  static {
    __name(this, "CacheInfo");
  }
};
var CacheService = class extends CacheInfo {
  static {
    __name(this, "CacheService");
  }
  get disabled() {
    return !this.enabled;
  }
  [Symbol.dispose]() {
    (0, import_core5.setOutput)("cache-hit", this.hit);
    (0, import_core5.setOutput)("cache-restored", this.restored);
  }
};
((CacheService2) => {
  const ctx = createContext();
  ({ use: CacheService2.use } = ctx);
  function setup(entry, config) {
    let service;
    if (config?.enable ?? true) {
      if ((0, import_cache2.isFeatureAvailable)()) {
        service = new ActionsCacheService(entry);
      } else {
        warn("Caching is disabled as cache service is not available");
      }
    }
    ctx.set(service ??= new DefaultCacheService());
    return service;
  }
  CacheService2.setup = setup;
  __name(setup, "setup");
})(CacheService || (CacheService = {}));
var DefaultCacheService = class extends CacheService {
  static {
    __name(this, "DefaultCacheService");
  }
  enabled = false;
  hit = false;
  restored = false;
  async restore() {
    return this;
  }
  update() {
  }
  register() {
  }
};
var _keys, _matchedKey, _forceUpdate;
var ActionsCacheService = class extends CacheService {
  constructor(entry) {
    super();
    __publicField(this, "enabled", true);
    __publicField(this, "target");
    __privateAdd(this, _keys);
    __privateAdd(this, _matchedKey);
    __privateAdd(this, _forceUpdate, false);
    this.target = entry.TEXDIR;
    __privateSet(this, _keys, new CacheKeys(entry));
    const envvars = [
      `${id_default.SCREAMING_SNAKE_CASE}_FORCE_UPDATE_CACHE`,
      "SETUP_TEXLIVE_FORCE_UPDATE_CACHE"
    ];
    for (const envvar of envvars) {
      if (envvar in env4) {
        __privateSet(this, _forceUpdate, env4[envvar] !== "0");
        if (envvar === envvars[1]) {
          notify(
            "`%s` is deprecated; Use `%s` instead",
            envvar,
            envvars[0]
          );
        }
        break;
      }
    }
  }
  async restore() {
    try {
      __privateSet(this, _matchedKey, await (0, import_cache2.restoreCache)(
        [this.target],
        __privateGet(this, _keys).uniqueKey,
        [
          __privateGet(this, _keys).primaryKey,
          __privateGet(this, _keys).oldPrimaryKey,
          __privateGet(this, _keys).secondaryKey,
          __privateGet(this, _keys).oldSecondaryKey
        ]
      ));
      if (__privateGet(this, _matchedKey) === void 0) {
        info2("Cache not found");
      } else {
        info2("%s restored from cache with key: %s", this.target, this.key);
        if (__privateGet(this, _matchedKey).startsWith(__privateGet(this, _keys).oldPrimaryKey)) {
          this.update();
        }
      }
    } catch (error) {
      warn({ error }, "Failed to restore cache");
    }
    return this;
  }
  update() {
    __privateSet(this, _forceUpdate, true);
  }
  get hit() {
    for (const primaryKey of [
      __privateGet(this, _keys).primaryKey,
      __privateGet(this, _keys).oldPrimaryKey
    ]) {
      if (__privateGet(this, _matchedKey)?.startsWith(primaryKey) ?? false) {
        return true;
      }
    }
    return false;
  }
  get restored() {
    return __privateGet(this, _matchedKey) !== void 0;
  }
  get key() {
    if (!this.hit) {
      return __privateGet(this, _keys).primaryKey;
    } else if (__privateGet(this, _forceUpdate)) {
      return __privateGet(this, _keys).uniqueKey;
    } else {
      return __privateGet(this, _matchedKey);
    }
  }
  register() {
    const state3 = instanceToPlain(this, {
      groups: __privateGet(this, _forceUpdate) || !this.hit ? ["update"] : []
    });
    (0, import_core5.saveState)(STATE_NAME, state3);
    if ("target" in state3) {
      info2(
        "After the job completes, %s will be saved to cache with key: %s",
        state3.target,
        state3.key
      );
    }
  }
};
_keys = new WeakMap();
_matchedKey = new WeakMap();
_forceUpdate = new WeakMap();
__name(ActionsCacheService, "ActionsCacheService");
__decorateClass([
  Expose({ groups: ["update"] })
], ActionsCacheService.prototype, "target", 2);
__decorateClass([
  Expose()
], ActionsCacheService.prototype, "key", 1);
ActionsCacheService = __decorateClass([
  Exclude()
], ActionsCacheService);
async function save() {
  try {
    const state3 = (0, import_core5.getState)(STATE_NAME);
    if (state3 !== "") {
      await plainToInstance(SaveCacheEntry, JSON.parse(state3)).save();
    }
  } catch (error) {
    if (error instanceof import_cache2.ReserveCacheError) {
      info2(error.message);
    } else {
      warn({ error }, "Failed to save to cache");
    }
  }
}
__name(save, "save");
var SaveCacheEntry = class {
  static {
    __name(this, "SaveCacheEntry");
  }
  target;
  key;
  async save() {
    if (this.key !== void 0) {
      if (this.target === void 0) {
        info2(
          "Cache hit occurred on the primary key %s, not saving cache",
          this.key
        );
      } else {
        if (await (0, import_cache2.saveCache)([this.target], this.key) !== -1) {
          info2("%s saved with cache key: %s", this.target, this.key);
        }
      }
    }
  }
};
var CacheKeys = class {
  static {
    __name(this, "CacheKeys");
  }
  #distribution;
  #digest;
  #id;
  constructor(entry) {
    this.#distribution = `${platform6()}-${arch4()}-${entry.version}`;
    this.#digest = digest([...entry.packages]);
    this.#id = randomString().replaceAll("-", "");
  }
  get uniqueKey() {
    return `${this.primaryKey}-${this.#id}`;
  }
  get primaryKey() {
    return `${this.secondaryKey}${this.#digest}`;
  }
  get secondaryKey() {
    return `${id_default["kebab-case"]}-${this.#distribution}-`;
  }
  get oldPrimaryKey() {
    return `${this.oldSecondaryKey}${this.#digest}`;
  }
  get oldSecondaryKey() {
    return `setup-texlive-${this.#distribution}-`;
  }
};
function digest(obj) {
  return createHash("sha256").update(JSON.stringify(obj) ?? "").digest("hex");
}
__name(digest, "digest");
function randomString() {
  return randomUUID2().replaceAll("-", "");
}
__name(randomString, "randomString");

// packages/action/src/runs/main/config.ts
var import_glob = __toESM(require_glob2(), 1);
import { readFile as readFile4 } from "node:fs/promises";
import { platform as platform7 } from "node:os";

// node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition(value) {
  if (!value || typeof value !== "object") {
    return "";
  }
  if ("position" in value || "type" in value) {
    return position(value.position);
  }
  if ("start" in value || "end" in value) {
    return position(value);
  }
  if ("line" in value || "column" in value) {
    return point(value);
  }
  return "";
}
__name(stringifyPosition, "stringifyPosition");
function point(point2) {
  return index(point2 && point2.line) + ":" + index(point2 && point2.column);
}
__name(point, "point");
function position(pos) {
  return point(pos && pos.start) + "-" + point(pos && pos.end);
}
__name(position, "position");
function index(value) {
  return value && typeof value === "number" ? value : 1;
}
__name(index, "index");

// node_modules/vfile-message/lib/index.js
var VFileMessage = class extends Error {
  static {
    __name(this, "VFileMessage");
  }
  /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // eslint-disable-next-line complexity
  constructor(causeOrReason, optionsOrParentOrPlace, origin) {
    super();
    if (typeof optionsOrParentOrPlace === "string") {
      origin = optionsOrParentOrPlace;
      optionsOrParentOrPlace = void 0;
    }
    let reason = "";
    let options = {};
    let legacyCause = false;
    if (optionsOrParentOrPlace) {
      if ("line" in optionsOrParentOrPlace && "column" in optionsOrParentOrPlace) {
        options = { place: optionsOrParentOrPlace };
      } else if ("start" in optionsOrParentOrPlace && "end" in optionsOrParentOrPlace) {
        options = { place: optionsOrParentOrPlace };
      } else if ("type" in optionsOrParentOrPlace) {
        options = {
          ancestors: [optionsOrParentOrPlace],
          place: optionsOrParentOrPlace.position
        };
      } else {
        options = { ...optionsOrParentOrPlace };
      }
    }
    if (typeof causeOrReason === "string") {
      reason = causeOrReason;
    } else if (!options.cause && causeOrReason) {
      legacyCause = true;
      reason = causeOrReason.message;
      options.cause = causeOrReason;
    }
    if (!options.ruleId && !options.source && typeof origin === "string") {
      const index2 = origin.indexOf(":");
      if (index2 === -1) {
        options.ruleId = origin;
      } else {
        options.source = origin.slice(0, index2);
        options.ruleId = origin.slice(index2 + 1);
      }
    }
    if (!options.place && options.ancestors && options.ancestors) {
      const parent = options.ancestors[options.ancestors.length - 1];
      if (parent) {
        options.place = parent.position;
      }
    }
    const start = options.place && "start" in options.place ? options.place.start : options.place;
    this.ancestors = options.ancestors || void 0;
    this.cause = options.cause || void 0;
    this.column = start ? start.column : void 0;
    this.fatal = void 0;
    this.file;
    this.message = reason;
    this.line = start ? start.line : void 0;
    this.name = stringifyPosition(options.place) || "1:1";
    this.place = options.place || void 0;
    this.reason = this.message;
    this.ruleId = options.ruleId || void 0;
    this.source = options.source || void 0;
    this.stack = legacyCause && options.cause && typeof options.cause.stack === "string" ? options.cause.stack : "";
    this.actual;
    this.expected;
    this.note;
    this.url;
  }
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.column = void 0;
VFileMessage.prototype.line = void 0;
VFileMessage.prototype.ancestors = void 0;
VFileMessage.prototype.cause = void 0;
VFileMessage.prototype.fatal = void 0;
VFileMessage.prototype.place = void 0;
VFileMessage.prototype.ruleId = void 0;
VFileMessage.prototype.source = void 0;

// node_modules/depends-txt/dist/events.js
var Event2 = {
  Name: "Name",
  Directive: "Directive",
  WhiteSpace: "WhiteSpace",
  Comment: "Comment",
  NewLine: "NewLine",
  Error: "Error"
};
var Directive = {
  Hard: "hard",
  Soft: "soft",
  Package: "package"
};
var Severity = {
  Error: true,
  Warning: false,
  Info: void 0
};
var RULES = {
  [Event2.Name]: {
    ruleId: "illegal-character-in-package-name",
    reason: "this character is not allowed in package names",
    fatal: Severity.Warning,
    expected: [
      "lowercase ASCII letters",
      "ASCII numbers",
      `dash (${escape3("-")})`,
      `underscore (${escape3("_")})`
    ],
    re: new RegExp("[^\\w\\-]", "dgv")
  },
  [Event2.WhiteSpace]: {
    ruleId: "illegal-whitespace-character",
    reason: "this character cannot be used as a whitespace character",
    fatal: Severity.Warning,
    expected: [
      `space (${escape3(" ")})`,
      `tab (${escape3("	")})`
    ],
    re: new RegExp("[^ \\t]", "dgv")
  },
  [Event2.NewLine]: {
    ruleId: "illegal-newline-character",
    reason: "this character cannot be used as a newline sequence",
    fatal: Severity.Warning,
    expected: [
      `LF (${escape3("\n")})`,
      `CRLF (${escape3("\r\n")})`
    ],
    re: new RegExp("^(?!\\r?\\n).*", "dgv")
  }
};
function escape3(input) {
  return [...input].map((ch) => {
    return String.raw`\u{${ch.codePointAt(0).toString(16).toUpperCase().padStart(4, "0")}}`;
  }).join("");
}
__name(escape3, "escape");

// node_modules/depends-txt/dist/peekable.js
function peekable(it2) {
  return new PeekableIterator(it2);
}
__name(peekable, "peekable");
var PeekableIterator = class {
  static {
    __name(this, "PeekableIterator");
  }
  it;
  #peeked = [];
  #done = false;
  constructor(it2) {
    this.it = it2;
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    return this.#peeked.shift() ?? this.#next();
  }
  peekNth(n3) {
    while (!this.#done && this.#peeked.length <= n3) {
      this.#peeked.push(this.#next());
    }
    return this.#peeked[n3] ?? this.#next();
  }
  #next() {
    const result = this.#done ? { value: void 0, done: this.#done } : this.it.next();
    this.#done = result.done ?? false;
    return result;
  }
};

// node_modules/depends-txt/dist/tokenize.js
var Token = {
  Word: "Word",
  WhiteSpace: "WhiteSpace",
  Comment: "Comment",
  NewLine: "NewLine"
};
function* tokenize(input) {
  yield* new Tokenizer().tokenize(input);
}
__name(tokenize, "tokenize");
var NEWLINE = new RegExp("([\\n\\v\\f\\r\\u{0085}\\p{Zl}\\p{Zp}\\q{\\r\\n}])", "v");
var WHITESPACE = new RegExp("([\\s\\u{001C}-\\u{001F}]+)", "v");
var COMMENTER = "#";
var Tokenizer = class {
  static {
    __name(this, "Tokenizer");
  }
  #location = { line: 0, column: 0, offset: 0 };
  *tokenize(input) {
    this.#location.line = 0;
    this.#location.offset = 0;
    for (const [line, newline] of pairs(input.split(NEWLINE))) {
      this.#location.line += 1;
      this.#location.column = 1;
      yield* this.#scanLine(line);
      if (newline !== void 0) {
        yield this.#token(Token.NewLine, newline);
      }
    }
  }
  *#scanLine(input) {
    if (input.length > 0) {
      const commentStart = input.indexOf(COMMENTER);
      if (commentStart < 0) {
        yield* this.#scanWords(input);
      } else {
        yield* this.#scanWords(input.slice(0, commentStart));
        yield this.#token(Token.Comment, input.slice(commentStart));
      }
    }
  }
  *#scanWords(input) {
    if (input.length > 0) {
      for (const [word, ws] of pairs(input.split(WHITESPACE))) {
        if (word.length > 0) {
          yield this.#token(Token.Word, word);
        }
        if (ws !== void 0) {
          yield this.#token(Token.WhiteSpace, ws);
        }
      }
    }
  }
  #token(type2, value) {
    const start = { ...this.#location };
    this.#location.column += value.length;
    this.#location.offset += value.length;
    const end = { ...this.#location };
    return { type: type2, value, position: { start, end } };
  }
};
function* pairs(arr) {
  while (arr.length > 0) {
    yield arr.splice(0, 2);
  }
}
__name(pairs, "pairs");

// node_modules/depends-txt/dist/parser.js
var Parser = class {
  static {
    __name(this, "Parser");
  }
  #tokens;
  #directive = Directive.Hard;
  #word = 0;
  constructor(input) {
    this.#tokens = peekable(tokenize(input));
  }
  next() {
    const result = this.#tokens.next();
    if (result.done ?? false) {
      return { value: void 0, done: true };
    }
    const { type: type2, value, position: position2 } = result.value;
    switch (type2) {
      case Token.Word:
        ++this.#word;
        if (this.#word === 1 && isDirective(value) && this.#tokens.peekNth(0).value?.type === Token.WhiteSpace && this.#tokens.peekNth(1).value?.type === Token.Word) {
          this.#directive = value;
          return { value: { type: Event2.Directive, value, position: position2 } };
        }
        if (this.#directive === Directive.Package && this.#word !== 2) {
          return { value: this.#tooManyArguments(result.value) };
        }
        return { value: { type: Event2.Name, value, position: position2 } };
      case Token.NewLine:
        this.#directive = Directive.Hard;
        this.#word = 0;
        break;
      default:
    }
    return { value: { type: type2, value, position: position2 } };
  }
  // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
  #tooManyArguments(token) {
    const { value, position: position2 } = token;
    const message = {
      ruleId: "too-many-arguments",
      reason: `the package directive must have exactly one argument, but ${this.#word} found`,
      place: structuredClone(position2),
      fatal: Severity.Error
    };
    return { type: Event2.Error, value, position: position2, data: { message } };
  }
  [Symbol.iterator]() {
    return this;
  }
  get directive() {
    return this.#directive;
  }
};
function isDirective(input) {
  return input === Directive.Hard || input === Directive.Soft || input === Directive.Package;
}
__name(isDirective, "isDirective");

// node_modules/depends-txt/dist/deserialize.js
var ParseError = class extends VFileMessage {
  static {
    __name(this, "ParseError");
  }
  fatal;
  constructor(reason, options) {
    super(reason ?? options.reason, options);
    this.fatal = options.fatal;
    this.actual = options.actual;
    this.expected = options.expected;
  }
  get name() {
    return "ParseError";
  }
  get [Symbol.toStringTag]() {
    return this.name;
  }
};

// packages/action/src/env.ts
import { tmpdir as tmpdir2 } from "node:os";
import { env as env5 } from "node:process";
function init() {
  if (!("RUNNER_TEMP" in env5)) {
    warn("`RUNNER_TEMP` not defined, %s will be used instead", tmpdir2());
    env5.RUNNER_TEMP = tmpdir2();
  }
  env5["TMPDIR"] = env5.RUNNER_TEMP;
  env5.TEXLIVE_INSTALL_ENV_NOCHECK ??= "1";
  env5.TEXLIVE_INSTALL_NO_WELCOME ??= "1";
  for (const tree of Texmf.SYSTEM_TREES) {
    const key = `TEXLIVE_INSTALL_${tree}`;
    if (tree !== "TEXMFLOCAL" && key in env5) {
      warn("`%s` is set, but ignored", key);
      delete env5[key];
    }
  }
}
__name(init, "init");

// packages/action/src/inputs.ts
var import_core6 = __toESM(require_core(), 1);
import * as path13 from "node:path";
import { env as env6 } from "node:process";
function getCache() {
  return getBoolean("cache");
}
__name(getCache, "getCache");
function getPackageFile() {
  return getString("package-file");
}
__name(getPackageFile, "getPackageFile");
function getPackages() {
  return getString("packages");
}
__name(getPackages, "getPackages");
function getPrefix() {
  let input = getString("prefix");
  input ??= env6.TEXLIVE_INSTALL_PREFIX;
  input ??= path13.join(env6.RUNNER_TEMP, id_default["kebab-case"]);
  return path13.normalize(input);
}
__name(getPrefix, "getPrefix");
function getRepository() {
  const input = (0, import_core6.getInput)("repository");
  if (input.length === 0) {
    return void 0;
  }
  let url2;
  try {
    url2 = new URL(input);
  } catch (cause) {
    throw new Error("Invalid input for repository", { cause });
  }
  if (!url2.pathname.endsWith("/")) {
    url2.pathname = path13.posix.join(url2.pathname, "/");
  }
  return url2;
}
__name(getRepository, "getRepository");
function getTexdir() {
  const input = (0, import_core6.getInput)("texdir");
  return input.length === 0 ? void 0 : path13.normalize(input);
}
__name(getTexdir, "getTexdir");
function getTlcontrib() {
  return getBoolean("tlcontrib");
}
__name(getTlcontrib, "getTlcontrib");
function getUpdateAllPackages() {
  return getBoolean("update-all-packages");
}
__name(getUpdateAllPackages, "getUpdateAllPackages");
function getVersion() {
  return getString("version")?.trim().toLowerCase();
}
__name(getVersion, "getVersion");
function getString(name2) {
  const input = (0, import_core6.getInput)(name2);
  return input.length === 0 ? void 0 : input;
}
__name(getString, "getString");
function getBoolean(name2) {
  try {
    return (0, import_core6.getBooleanInput)(name2);
  } catch (cause) {
    throw new Error(`Invalid input for \`${name2}\``, { cause });
  }
}
__name(getBoolean, "getBoolean");

// packages/action/src/runs/main/config.ts
var Config;
((Config2) => {
  async function load() {
    init();
    const releases = await ReleaseData.setup();
    const repository = getRepository();
    if (repository !== void 0 && !["http:", "https:"].includes(repository.protocol)) {
      const error = new TypeError(
        "Currently only http/https repositories are supported"
      );
      error["repository"] = repository;
      throw error;
    }
    const config = {
      cache: getCache(),
      packages: await collectPackages(),
      prefix: getPrefix(),
      repository,
      texdir: getTexdir(),
      tlcontrib: getTlcontrib(),
      updateAllPackages: getUpdateAllPackages(),
      version: await resolveVersion(getVersion(), repository)
    };
    if (config.repository !== void 0 && config.version < "2012") {
      const error = new RangeError(
        "Currently `repository` input is only supported with version 2012 or later"
      );
      error["version"] = config.version;
      throw error;
    }
    if (config.version < releases.latest.version) {
      if (config.tlcontrib) {
        warn("TLContrib cannot be used with an older version of TeX Live");
        config.tlcontrib = false;
      }
      if (!(config.version < releases.previous.version && releases.newVersionReleased()) && config.updateAllPackages) {
        info2("`update-all-packages` is ignored for older versions");
        config.updateAllPackages = false;
      }
    }
    return config;
  }
  Config2.load = load;
  __name(load, "load");
})(Config || (Config = {}));
async function collectPackages() {
  function* parse3(input2) {
    for (const event of new Parser(input2)) {
      switch (event.type) {
        case Event2.Name:
          yield event.value;
          break;
        case Event2.Error:
          warn(new ParseError(void 0, event.data.message).message);
          break;
        default:
          break;
      }
    }
  }
  __name(parse3, "parse");
  const packages = [];
  const input = getPackages();
  if (input !== void 0) {
    info2("Parsing `packages` input...");
    packages.push(...parse3(input));
  }
  const pattern = getPackageFile();
  if (pattern !== void 0) {
    info2("Looking for `package-file`...");
    const globber = await (0, import_glob.create)(pattern, {
      implicitDescendants: false,
      matchDirectories: false
    });
    let found = false;
    for await (const packageFile of globber.globGenerator()) {
      found = true;
      info2("Parsing `%s`...", packageFile);
      packages.push(...parse3(await readFile4(packageFile, "utf8")));
    }
    if (!found) {
      info2("No file matched the pattern `package-file`");
    }
  }
  const packagesSet = new Set(packages.sort());
  if (input !== void 0 || pattern !== void 0) {
    if (packagesSet.size > 0) {
      info2("%d package(s) found:", packagesSet.size, ...packagesSet);
    } else {
      info2("No packages found");
    }
  }
  return packagesSet;
}
__name(collectPackages, "collectPackages");
async function resolveVersion(version3, repository) {
  const { latest, next: next2 } = ReleaseData.use();
  if (version3 === void 0 && repository !== void 0) {
    return await checkRemoteVersion(repository);
  }
  if (version3 === void 0 || version3 === "latest") {
    return latest.version;
  }
  if (Version.isVersion(version3)) {
    if (version3 < "2008") {
      throw new RangeError("Versions prior to 2008 are not supported");
    }
    if (platform7() === "darwin" && version3 < "2013") {
      throw new RangeError(
        "Versions prior to 2013 does not work on 64-bit macOS"
      );
    }
    if (version3 <= next2.version) {
      return version3;
    }
  }
  throw new RangeError(`${version3} is not a valid version`);
}
__name(resolveVersion, "resolveVersion");
async function checkRemoteVersion(repository) {
  const { latest, next: next2 } = ReleaseData.use();
  const historic2 = new RegExp("\\/historic\\/systems\\/texlive\\/(\\d{4})\\/", "v");
  const match3 = historic2.exec(repository.pathname);
  if (Version.isVersion(match3?.[1])) {
    return match3[1];
  }
  info2("Checking for remote version: %s", repository.href);
  const result = await Promise.all(
    [latest, next2].map(async ({ version: version4 }) => {
      const headers = await tlnet_exports.checkVersionFile(repository, version4);
      return headers === void 0 ? void 0 : version4;
    })
  );
  const version3 = result.find(Boolean) ?? await acquire({ repository }).then(({ version: version4 }) => version4);
  info2("Remote version: %s", version3);
  return version3;
}
__name(checkRemoteVersion, "checkRemoteVersion");

// packages/action/src/runs/main/install.ts
async function install2(options) {
  await new Installer(options).run();
}
__name(install2, "install");
var Installer = class {
  constructor(options) {
    this.options = options;
    if (this.options.repository === void 0 && this.version >= ReleaseData.use().previous.version) {
      this.maxRetries = 1;
    }
  }
  static {
    __name(this, "Installer");
  }
  maxRetries = 0;
  try = 1;
  installTL;
  async run() {
    for (; this.try <= this.maxRetries + 1; ++this.try) {
      try {
        await this.tryWith(await this.pickRepository());
        return;
      } catch (error) {
        if (this.try <= this.maxRetries && z2(error).with(
          N2.instanceOf(InstallTLError),
          {
            code: N2.union(
              InstallTLError.Code.FAILED_TO_DOWNLOAD,
              InstallTLError.Code.UNEXPECTED_VERSION,
              InstallTLError.Code.INCOMPATIBLE_REPOSITORY_VERSION
            )
          },
          () => true
        ).with(
          N2.instanceOf(TlpdbError),
          { code: TlpdbError.Code.FAILED_TO_INITIALIZE },
          () => true
        ).otherwise(() => false)) {
          info2({ error });
          continue;
        }
        throw error;
      }
    }
  }
  async tryWith(repository) {
    if (this.try > 1) {
      info2("Switched to repository: %s", repository);
    } else {
      info2("Using repository: %s", repository);
    }
    this.installTL ??= await acquire({ repository, version: this.version });
    await this.installTL.run({
      profile: this.options.profile,
      repository
    });
  }
  async pickRepository() {
    if (this.try === 1 && this.options.repository !== void 0) {
      return new URL(this.options.repository);
    }
    if (this.version < ReleaseData.use().latest.version) {
      switch (this.try) {
        case 1:
          return tlnet_exports.historic(this.version);
        case 2:
          return new URL(
            `https://mirrors.tuna.tsinghua.edu.cn/tex-historic-archive/systems/texlive/${this.version}/tlnet-final/`
          );
      }
    } else {
      switch (this.try) {
        case 1:
          return await tlnet_exports.ctan({ master: false });
        case 2:
          return new URL(ctan.path, ctan.default);
      }
    }
    throw new Error("Failed to find a suitable repository");
  }
  get version() {
    return this.options.profile.version;
  }
};

// packages/action/src/runs/main/update.ts
var import_http_client2 = __toESM(require_lib(), 1);
async function update4(options) {
  try {
    await updateRepositories(options);
  } catch (error) {
    if (error instanceof TlmgrError && error.code === TlmgrError.Code.TL_VERSION_OUTDATED && options.repository === void 0) {
      info2({ error });
      await moveToHistoric(options);
    } else {
      throw error;
    }
  }
}
__name(update4, "update");
async function updateTlmgr(options) {
  const cache = CacheService.use();
  const tlmgr = Tlmgr.use();
  const all = options.updateAllPackages ?? false;
  const { stdout: stdout2 } = await tlmgr.update({
    self: true,
    all,
    reinstallForciblyRemoved: all
  });
  if (new RegExp("\\] (?:update|auto-install): ", "v").test(stdout2)) {
    cache.update();
  }
}
__name(updateTlmgr, "updateTlmgr");
async function updateRepositories(options) {
  const tlmgr = Tlmgr.use();
  const { latest, previous } = ReleaseData.use();
  const { version: version3 } = options;
  let repository = options.repository;
  if (version3 >= previous.version) {
    for await (const { path: path14, tag } of tlmgr.repository.list()) {
      if (tag === "main" && path14.includes("tlpretest") && repository === void 0 && version3 === latest.version) {
        repository = await tlnet_exports.ctan();
      } else if ((tag === "tlcontrib" || path14.includes("tlcontrib")) && version3 < latest.version) {
        info2(`Removing %s`, tag ?? path14);
        await tlmgr.repository.remove(tag ?? path14);
      }
    }
  }
  if (repository !== void 0) {
    await changeRepository("main", repository);
  }
  await updateTlmgr(options);
}
__name(updateRepositories, "updateRepositories");
async function moveToHistoric(options) {
  const cache = CacheService.use();
  const { version: version3 } = options;
  const tag = "main";
  try {
    await changeRepository(tag, tlnet_exports.historic(version3));
    await updateTlmgr(options);
  } catch (error) {
    if (error instanceof TlpdbError && error.code === TlpdbError.Code.FAILED_TO_INITIALIZE) {
      info2({ error });
      await changeRepository(tag, tlnet_exports.historic(version3, { master: true }));
      await updateTlmgr(options);
    } else {
      throw error;
    }
  }
  cache.update();
}
__name(moveToHistoric, "moveToHistoric");
async function changeRepository(tag, url2) {
  const tlmgr = Tlmgr.use();
  info2("Changing the repository `%s` to %s", tag, url2.href);
  if (url2.protocol === "ftp:" && (0, import_http_client2.getProxyUrl)(url2.href) !== "") {
    throw new Error(
      "The use of ftp repositories under proxy is currently not supported"
    );
  }
  await tlmgr.repository.remove(tag);
  await tlmgr.repository.add(url2, tag);
}
__name(changeRepository, "changeRepository");
async function adjustTexmf(profile) {
  const tlmgr = Tlmgr.use();
  const keys = [
    "TEXMFLOCAL",
    ...Texmf.USER_TREES
  ];
  const entries2 = await Promise.all(keys.map(async (key) => {
    const value = profile[key];
    const old = await tlmgr.conf.texmf(key);
    return old === value ? [] : [[key, value]];
  })).then((e3) => e3.flat());
  if (entries2.length > 0) {
    await import_core2.group("Adjusting TEXMF", async () => {
      for (const [key, value] of entries2) {
        await tlmgr.conf.texmf(key, value);
      }
    });
  }
}
__name(adjustTexmf, "adjustTexmf");

// packages/action/src/runs/main/index.ts
async function main() {
  var _stack = [];
  try {
    const config = await Config.load();
    const { latest, previous } = ReleaseData.use();
    const profile = __using(_stack, new Profile(config.version, config), true);
    const cache = __using(_stack, CacheService.setup({
      TEXDIR: profile.TEXDIR,
      packages: config.packages,
      version: config.version
    }, {
      enable: config.cache
    }));
    if (cache.enabled) {
      await import_core2.group("Restoring cache", async () => {
        await cache.restore();
      });
    }
    if (!cache.restored) {
      await import_core2.group("Installation profile", async () => {
        info2(profile.toString());
      });
      await import_core2.group("Installing TeX Live", async () => {
        await install2({ profile, repository: config.repository });
      });
    }
    const tlmgr = Tlmgr.setup(profile);
    await tlmgr.path.add();
    if (cache.restored) {
      if (profile.version >= previous.version) {
        const msg = config.updateAllPackages ? "Updating packages" : profile.version >= latest.version ? "Updating tlmgr" : "Checking the package repository status";
        await import_core2.group(msg, async () => {
          await update4(config);
        });
      }
      await adjustTexmf(profile);
    }
    if (config.tlcontrib) {
      await import_core2.group("Setting up TLContrib", async () => {
        await tlmgr.repository.add(await tlnet_exports.contrib(), "tlcontrib");
        await tlmgr.pinning.add("tlcontrib", "*");
      });
    }
    if (!cache.hit && config.packages.size > 0) {
      await import_core2.group("Installing packages", async () => {
        await tlmgr.install(config.packages);
      });
    }
    await import_core2.group("TeX Live environment details", async () => {
      await tlmgr.version();
      info2("Package versions:");
      for await (const { name: name2, revision, cataloguedata } of tlmgr.list()) {
        info2("  %s: %s", name2, cataloguedata?.version ?? `rev${revision}`);
      }
    });
    cache.register();
    (0, import_core7.setOutput)("version", config.version);
  } catch (_3) {
    var _error = _3, _hasError = true;
  } finally {
    var _promise = __callDispose(_stack, _error, _hasError);
    _promise && await _promise;
  }
}
__name(main, "main");

// packages/action/src/runs/post.ts
async function post() {
  await save();
}
__name(post, "post");

// packages/action/src/runs/index.ts
async function run() {
  const state3 = "POST";
  try {
    if ((0, import_core8.getState)(state3) === "") {
      (0, import_core8.saveState)(state3, "1");
      await main();
    } else {
      await post();
    }
  } catch (error) {
    fatal({ error });
  }
}
__name(run, "run");

// packages/action/src/index.ts
await run();
//# sourceMappingURL=index.mjs.map
